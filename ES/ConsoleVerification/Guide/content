9
[div class=p 
	(__wikiLink|displaytext=Películas verificadas en consola|href=/ES/ConsoleVerification/Movies)
	" | 
	(__wikiLink|displaytext=Pruebas de verificación en consola|href=/ConsoleVerification/Tests)
	$LF
]div
[h3 id=IntroducciN 
	" Introducción
	$LF
]h3
[div class=p 
	"Esta guía explica como funciona la verificación en consola y te llevará a los pasos para poder ejecutar películas en una consola real. Esta página asume que estás informado sobre la reproducción de películas en un emulador. Si no, lee los 
	(__wikiLink|displaytext=Recursos de Emuladores|href=/ES/EmulatorResources)
	" para aconsejarte de como configurarlo primero. También necesitarás algo de conocimiento sobre circuitos eléctricos y el Hardware requerido (componentes, consola, juegos, entre otros).
	$LF
]div
[h3 id=DiseOsDelBot 
	" Diseños del bot
	$LF
]h3
[div class=p 
	"NESBot fue el primer bot anunciado públicamente y fue creado por micro500. Este bot puede ser construido siguiendo los 
	[a href=http://www.instructables.com/id/NESBot-Arduino-Powered-Robot-beating-Super-Mario-/ rel=noopener external nofollow 
		"Instructivos del NESBot (en inglés)
	]a
	" creado por micro500. Los pasos básicos, basados en el articulo son los siguientes: 
	$LF
]div
[ol 
	[li 
		" Crear el circuito dado en la guía.
		$LF
	]li
	[li 
		" Cargar FCEUX y el rom del juego que quieres usar.
		$LF
	]li
	[li 
		" Cargar el script Lua dado en la guía y ejecutarlo. 
		$LF
	]li
	[li 
		" Descargar el archivo .fm2 para la película que quieres reproducir en el emulador.
		$LF
	]li
	[li 
		" Dejar que la película se reproduzca hasta que termine o el tiempo que quieras y luego detén el script.
		$LF
	]li
	[li 
		" Sube el archivo que script Lua crea dentro del bot.
		$LF
	]li
	[li 
		" Carga el cartucho del juego en la consola y asegúrate que ejecute bien.
		$LF
	]li
	[li 
		" Activa el bot y enciende la consola.
		$LF
	]li
]ol
[div class=p 
	"Luego, true lanzó su 
	[a href=http://truecontrol.org rel=noopener external nofollow 
		"Dispositivo reproductor de NES / SNES
	]a
	" con la capacidad de reproducir películas de juegos de NES y SNES.  Esta es la versión que se usó durante el 
	(__wikiLink|displaytext=AGDQ 2014|href=/Forum/Posts/353915)
	" y también se trabajó en ello durante el 
	(__wikiLink|displaytext=AGDQ 2015|href=/GamesDoneQuick/AGDQ2015)
	" con la película de "Pokémon Red / Pokémon Plays Twitch".
	$LF
]div
[div class=p 
	"micro500 siguió esto con su 
	(__wikiLink|displaytext=N64Bot|href=/Forum/Posts/305411)
	" que fue usado en la película de Mario Kart 64 en el AGDQ 2014.
	$LF
]div
[div class=p 
	"En el 2014, true lanzó su Múlti-Reproductor que añadió soporte para Sega Genesis y Sega Master System y otras plataformas, también incluía una pantalla incorporada.  Está versión se usó durante el AGDQ 2015 en SMB on SMW.
	$LF
]div
[h3 id=TasbotComoPersonaDesdeLaPerspectivaDeDwangoac 
	" TASBot como persona (desde la perspectiva de dwangoAC)
	$LF
]h3
[div class=p 
	"Cuando true lanzó su creación y lo llamó "true's NES / SNES Replay Device". Posteriormente pirateé un Lego, lo puse en ROB y lo llamé 
	(__wikiLink|displaytext=ROBBerry Pi|href=/Forum/Posts/361685)
	". Luego, debido a ser agotado por los problemas de último minuto y estando en frente de 60.000 personas, procedí a hacer un trabajo horrible presentando lo que era TASVideos, quién era yo y el nombre del robot era. Luego, el 
	[a href=https://twitter.com/GDQMonitor rel=noopener external nofollow 
		"GDQMonitor
	]a
	" y 
	(__wikiLink|displaytext=la película de Super Mario World "ACE" de Masterjun|href=/4156S)
	" ambos se refirieron a la combinación del reproductor de true, el Pi, y ROB como "TASBot". (Como un aparte, había un proyecto no relacionado llamado 
	[a href=https://github.com/d-snp/tasbot rel=noopener external nofollow 
		"TASBOT
	]a
	" pero no hubo más desarrollo en el desde 2013)
	$LF
]div
[div class=p 
	"TASBot como "persona" llegó a ser algo más allá de lo que imaginé. Hay ficciones de fans ahí sobre 
	[a href=https://twitter.com/GDQMonitor rel=noopener external nofollow 
		"@GDQMonitor
	]a
	" (aparentemente una chica) y 
	[a href=https://twitter.com/MrTASBot rel=noopener external nofollow 
		"@MrTASBot
	]a
	" 
	[a href=https://twitter.com/GDQMonitor/status/482964829687140352 rel=noopener external nofollow 
		"teniendo una relación continua
	]a
	". La comunidad 
	[a href=http://speeddemosarchive.org rel=noopener external nofollow 
		"SDA
	]a
	" se ven referirse al 
	[a href=https://forum.speeddemosarchive.com/post/agdq_2014_shout_outs_and_love_thread_40.html#agdq_2014_shout_outs_and_love_thread_40 rel=noopener external nofollow 
		"TASBot
	]a
	" de la misma manera que se refiere la comunidad de Nico Nico Douga 
	[a href=http://en.wikipedia.org/wiki/Tool-assisted_speedrun#1999.E2.80.932001 rel=noopener external nofollow 
		"TAS-san
	]a
	" (
	[a href=https://www.google.com/search?q=TASBot&gws_rd=ssl#q=TAS%E3%81%95%E3%82%93 rel=noopener external nofollow 
		"TASさん
	]a
	", conocido como 
	[a href=https://translate.google.com/translate?hl=en&sl=ja&tl=en&u=http%3A%2F%2Fwww.yuko2ch.net%2Frockman%2Ftasyougo.htm rel=noopener external nofollow 
		""Mr. TAS"
	]a
	"). Se que true nunca se ha sentido particularmente cómodo al llamar su máquina "TASBot" y hasta este punto creo que el nombre trasciende algún dispositivo de reproducción en particular. Llegué a pensar en TASBot como la combinación de ROB que sostiene un control o un tablero y que participa en su pasatiempo favorito, jugando videojuegos perfectamente delante de un televisor y una audiencia amorosa. Qué podría ser mejor?
	$LF
]div
[h3 id=InformaciNTCnicaDeUnControlDeNes 
	" Información técnica de un control de NES
	$LF
]h3
[div class=p 
	"Un control de NES solo es un registro de cambios, con las ocho entradas siendo los ocho botones en el control. Cuando un juego busca la entrada de un control, una pulsación es enviada al control. Cuando el registro de cambios recibe la pulsación, el estado de los ocho botones son leídos y almacenados hasta que el juego los lea en un botón a la vez. Algunos juegos los lee en un estado de botón una vez por fotograma, mientras que otros los lee múltiples veces por fotograma. Un juego no requiere leer las pulsaciones cada fotograma, sin embargo, comúnmente no leerá las pulsaciones por algunos fotogramas para dar tiempo en mantener otras cosas como cambios de pantalla. Debido a un problema de Hardware, usar el canal PCM de la NES para la salida de audio causa pulsaciones inválidas aleatoriamente a leerse. Juegos que usen este canal comúnmente leen el estado de los botones múltiples veces para encontrar esos botones válidos.  
	$LF
]div
[div class=p 
	"En FCEUX la pulsación del usuario es leerlo una vez por fotograma y mantenerlo hasta el siguiente fotograma. Al emulador no le importa cuantas veces por fotograma el juego busca las pulsaciones; el da en la misma pulsación cada vez en el mismo fotograma. El emulador también acepta y guarda los botones que se han presionado aún si el juego no lo busca.
	$LF
]div
[div class=p 
	"Para reproducir películas en la consola, los botones grabados necesitan ser modificados para remover botones presionados cuando el juego no los busca. Los botones restantes deben ser presionados y mantenidos en el fotograma correcto para que la consola los lea correctamente. Para cumplir esto, un micro-control está conectado al registro de cambios y la pulsación desde la consola se envió tanto al micro-control como al registro de cambios. Con cada pulso, el micro-control cambia las señales de "botón" enviados al registro de cambios, acuerdo a la película a ser subida. 
	$LF
]div
[h3 id=Snes 
	" SNES
	$LF
]h3
[div class=p 
	"Por añadirse.
	$LF
]div
[h3 id=Sms 
	" SMS
	$LF
]h3
[div class=p 
	"Por añadirse.
	$LF
]div
[h3 id=Genesis 
	" Genesis
	$LF
]h3
[div class=p 
	"Por añadirse.
	$LF
]div
[h3 id=N64 
	" N64
	$LF
]h3
[div class=p 
	"Por añadirse.
	$LF
]div
[h3 id=GameBoyAdvance 
	" Game Boy Advance
	$LF
]h3
[div class=p 
	"Por añadirse.
]div
