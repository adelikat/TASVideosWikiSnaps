24
[h2 id=Randomnessfunctionsindifferentgames
 
	" Randomness functions in different games
	$LF
]h2
[p 
	"Random number generators in NES games. It's mostly assembly code, but
	$LF
	"the purpose is to document them as information that is hopefully practical.
	$LF
]p
[div class=toc 
	[ul 
		[li 
			[a href=#Randomnessfunctionsindifferentgames
 
				" Randomness functions in different games
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#LegendofKage
 
						" Legend of Kage
						$LF
					]a
				]li
				[li 
					[a href=#Rockman1
 
						" Rockman 1
						$LF
					]a
				]li
				[li 
					[a href=#Rockman2
 
						" Rockman 2
						$LF
					]a
				]li
				[li 
					[a href=#Monopoly
 
						" Monopoly
						$LF
					]a
				]li
				[li 
					[a href=#Bomberman
 
						" Bomberman 
						$LF
					]a
				]li
				[li 
					[a href=#FDSBackgammon
 
						" FDS Backgammon
						$LF
					]a
				]li
			]ul
		]li
	]ul
]div
[h3 id=LegendofKage
 
	" Legend of Kage
	$LF
]h3
[pre 
	$LF
]pre
[p 
	"In Legend of Kage, the randomness function does not actually take samples
	$LF
	"of player input, or any other volatile data. Legend of Kage has a function
	$LF
	""UpdateRandom" at address $A4E5, that simply multiplies the value of RndSeed
	$LF
	"(memory address $0F) by 5 and adds 11. It uses the memory address $0E as a temporary, but it does not use its prior value.
	[br 
	]br
	$LF
	"The function is called contiguously in an infinite loop by the main program.
	$LF
	"It's also called manually each time a sample of the RndSeed is taken.
	$LF
]p
[p 
	"The actual randomness of it comes from the fact that depending on the duration of the NMI (in number of CPU cycles), a different number of iterations of the UpdateRandom function is called. The more time the NMI takes, the less time
	$LF
	"elapses after the NMI before the next NMI occurs, and thus, the less iterations
	$LF
	"the UpdateRandom function experiences between the two NMIs.
	$LF
]p
[p 
	"The duration of the NMI is influenced by 
	[em 
		"everything
	]em
	" the game does, including the music, checking for collisions, checking for input, etc. This makes the randomness in Legend of Kage extremely volatile, and extremely non-portable between different emulators. Differences between timings of memory accesses, timings of CPU instructions, timings of DMA transfers, timings of NMI trigger, all timing differences can throw the randomness off.
	$LF
]p
[h3 id=Rockman1
 
	" Rockman 1
	$LF
]h3
[pre 
	[code class=language-snescom 
		"; This piece of code is executed at every frame. It's invoked by the NMI routine
		$LF
		"; even when the game is lagging. The variable $0D is a temporary variable     
		$LF
		"; used by the game for various purposes. When the screen scrolls, its value  
		$LF
		"; is 0x03 and otherwise it's 0x78 + number of onscreen sprites, or something
		$LF
		"; like that. It is purposely made hard to predict.
		$LF
		"RandomUpdate: ;at $D574
		$LF
		"  lda $0D
		$LF
		"  eor RandomSeed   ;at memory address $46  
		$LF
		"  adc FrameCounter ;at memory address $23
		$LF
		"  lsr a
		$LF
		"  sta RandomSeed
		$LF
		$LF
		"; This function is the frontend to randomness calculation.
		$LF
		"; Input:
		$LF
		";    A = max value
		$LF
		"; Output:
		$LF
		";    A = random number (smaller than input was).
		$LF
		"; Modifies:
		$LF
		";    carry flag
		$LF
		";    $40
		$LF
		"; This function gives the same value for every invokation during  
		$LF
		"; the same frame. It is used by almost everything in the game.
		$LF
		"RandomFunc: ;at $C5A0
		$LF
		" sta $40
		$LF
		" lda RandomSeed
		$LF
		" sec   
		$LF
		"loop:     
		$LF
		" sbc $40   
		$LF
		" bcs loop  
		$LF
		" adc $40
		$LF
		" rts
		$LF
	]code
]pre
[p 
	"As an example, here's how the game determines which bonus to give
	$LF
	"when an enemy is killed:
	$LF
]p
[pre 
	[code class=language-snescom 
		"CreateBonus: ;at $05BF13
		$LF
		" lda #100
		$LF
		" jsr RandomFunc
		$LF
		" ldy #$3B
		$LF
		" ldx #5    
		$LF
		"loop:      
		$LF
		" cmp BonusProbabilityTable,x
		$LF
		" bcc endloop
		$LF
		" iny
		$LF
		" dex  
		$LF
		" bpl loop
		$LF
		"endloop:   
		$LF
		" cpy #$3B ; 3B=no item, 3C=pearl, 3D=small wpn, and so on
		$LF
		" beq noitem
		$LF
		" ; Spawn the bonus drop
		$LF
		" tya
		$LF
		" jsr CreateEnemy
		$LF
		" ...
		$LF
		"noitem:
		$LF
		" ...     
		$LF
		$LF
		"BonusProbabilityTable:
		$LF
		"  .byt 99, 97, 95, 80, 65, 12
		$LF
		"; Probabilities for:
		$LF
		"; 1UP (1%), Big Energy (2%), Big Weapon (2%),
		$LF
		"; Small Energy (15)%, Small Weapon (15%), Score Pearl (53%)
		$LF
	]code
]pre
[h3 id=Rockman2
 
	" Rockman 2
	$LF
]h3
[pre 
	[code class=language-snescom 
		"; This piece of code is executed at every frame. It's invoked by the NMI routine
		$LF
		"; even when the game is lagging. The variable $480 is the fractional part
		$LF
		"; of Megaman's X position. When $480 wraps around a full cycle, Megaman's
		$LF
		"; X position will be incremented by 1 pixel. This variable is only
		$LF
		"; influenced by Megaman's movements.
		$LF
		"RandomUpdate: ;at $D0C6
		$LF
		"  lda $0480
		$LF
		"  eor RandomSeed   ;at memory address $4A
		$LF
		"  adc FrameCounter ;at memory address $1C  
		$LF
		"  lsr a
		$LF
		"  sta RandomSeed
		$LF
		$LF
		"; This function is a generic math function (it performs 8-bit division),
		$LF
		"; but it is also used as the frontend to randomness calculation.
		$LF
		"; Input:
		$LF
		";   $01 = divident
		$LF
		";   $02 = divisor
		$LF
		"; Output:
		$LF
		";   $03 = result
		$LF
		";   $04 = remainder (modulo)
		$LF
		"; Modifies:   
		$LF
		";   Y
		$LF
		";   carry flag   
		$LF
		";
		$LF
		"; It is used as a randomness function by copying the random seed ($4A)
		$LF
		"; into $01 and setting $02 as the max value.
		$LF
		"DivMod: ;at $C84E
		$LF
		" lda #0
		$LF
		" sta $03
		$LF
		" sta $04
		$LF
		" lda $01
		$LF
		" ora $02
		$LF
		" bne nonzero
		$LF
		" sta $03   
		$LF
		" rts
		$LF
		"nonzero:
		$LF
		" ldy #8
		$LF
		"loop:   
		$LF
		" asl $03
		$LF
		" rol $01
		$LF
		" rol $04
		$LF
		" sec
		$LF
		" lda $04
		$LF
		" sbc $02   
		$LF
		" bcc skip
		$LF
		" sta $04
		$LF
		" inc $03  
		$LF
		"skip:
		$LF
		" dey
		$LF
		" bne loop
		$LF
		" rts
		$LF
	]code
]pre
[h3 id=Monopoly
 
	" Monopoly
	$LF
]h3
[p 
	"RndVal1_A = $0037
	[br 
	]br
	$LF
	"RndVal1_B = $0038
	[br 
	]br
	$LF
	"RndVal1_C = $0039
	[br 
	]br
	$LF
	"RndVal2   = $0302
	[br 
	]br
	$LF
	"RndCount1 = $0027
	[br 
	]br
	$LF
	"RndCount2 = $00F7
	$LF
]p
[p 
	"Execution of RndFunc1: The current 24-bit
	[a id=r1 
	]a
	[sup 
		"[
		[a href=#1 
			"1
		]a
		"]
	]sup
	" random seed RndVal1 is left-shifted by 1.
	$LF
	"The new entering bit is 0 if the 3rd and 4th bits from the left are the same, and 1 otherwise.
	[br 
	]br
	$LF
	"This is an event of what is better known as a 
	[a class=extlink href=http://en.wikipedia.org/wiki/Linear_feedback_shift_register rel=nofollow 
		"linear feedback shift register
	]a
	".
	$LF
]p
[p 
	"Execution of RndFunc2: Execute RndFunc1 5 times and add 35 to RndVal2 (mod 256).
	$LF
]p
[p 
	"Randomization occurs every frame (except those which are lagging or playing sound effects).
	$LF
	"Which randomization occurs on a frame depends on which stage the game is at.
	$LF
]p
[p 
	"Note: All divisions and moduli operate on 
	[em 
		"unsigned
	]em
	" 8-bit integers.
	$LF
]p
[p 
	"Before the game:
	$LF
]p
[ul 
	[li 
		" Random seed at frame 7: 3E2AD2
		$LF
	]li
	[li 
		" Increment of RndCount1 begins after a button is pressed to begin.
		$LF
	]li
]ul
[ul 
	[li 
		" Game is not at enter-name screen: Increment RndCount1. Then execute RndFunc1 once. (RndCount1++, RndVal1 << 1)
		$LF
	]li
	[li 
		" Game is at enter-name screen: Increment RndCount1. Then execute RndFunc1 once. Then take RndCount1, mod 32, and execute RndFunc1 that many times. Then execute RndFunc1 once. If A is pressed, reset RndCount1. (RndCount1++, RndVal1 << 2-33)
		$LF
	]li
	[li 
		" Game is setting card decks:
		$LF
	]li
]ul
[ol 
	[li 
		[ol 
			[li 
				" Execute RndFunc1 once.
				$LF
			]li
			[li 
				" Reset RndCount2.
				$LF
			]li
			[li 
				" Ready the Chance deck array.
				$LF
			]li
			[li 
				" Execute RndFunc1 three times.
				$LF
			]li
			[li 
				" Take last 8 bits of RndVal1, XOR with RndCount2, integer divide by 16, and use this value as an offset to the deck array.
				$LF
			]li
			[li 
				" Check deck array. If already occupied, increment RndCount2. Otherwise occupy offset, and try next card.
				$LF
			]li
			[li 
				" Go back to step 4 unless the deck is full (no more cards). In that case go back to step 3, set RndCount2 to 16, and repeat with the Community Chest deck array. When both decks are done, stop.
				$LF
			]li
		]ol
	]li
]ol
[ul 
	[li 
		[ul 
			[li 
				" (RndVal1 << a lot)
				$LF
			]li
		]ul
	]li
]ul
[p 
	"During the game:
	$LF
]p
[ul 
	[li 
		" Game is not showing overhead board: Execute RndFunc1 once. (RndVal1 << 1)
		$LF
	]li
	[li 
		" Player is waiting to roll: Just before this happens, reset RndCount1. Increment RndCount1. Then execute RndFunc1 once, then RndFunc2 once, then, if not turn after double or opposing player menu, execute RndFunc1 twice. (RndCount1++, RndVal1 << 8 or 6, RndVal2 += 35)
		$LF
	]li
	[li 
		" Player is rolling: Increment RndCount1. Then execute RndFunc1 once, then RndFunc2 once, then RndFunc2 twice, then if RndCount1 is divisible by 4, execute RndFunc1 twice. (RndCount1++, RndVal1 << 18 or 16, RndVal2 += 105)
		$LF
	]li
	[li 
		" Player has thrown the dice: Execute RndFunc1 once, then RndFunc2 once. (RndVal1 << 6, RndVal2 += 35)
		$LF
	]li
	[li 
		" On the frame to get dice roll:
		$LF
	]li
]ul
[ol 
	[li 
		[ol 
			[li 
				" Execute RndFunc1 once, then RndFunc2 once, then RndFunc1 five times.
				$LF
			]li
			[li 
				" Take last 8 bits of RndVal1, XOR with RndVal2, mod 6, and increment for Die 2.
				$LF
			]li
			[li 
				" Execute RndFunc1 five times.
				$LF
			]li
			[li 
				" Take last 8 bits of RndVal1, mod 6, and increment for Die 1.
				$LF
			]li
		]ol
	]li
]ol
[ul 
	[li 
		[ul 
			[li 
				" (RndVal1 << 16, RndVal2 += 35).
				$LF
			]li
		]ul
	]li
]ul
[div class= 
	[ul class=nav nav-tabs role=tablist 
		[li class=nav-item 
			[a class=active nav-link data-toggle=tab href=#tabs-7152-0 
				"Minimize Tab
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-7152-1 
				"Monopoly RNG Disassembly
			]a
		]li
	]ul
	[div class=tab-content 
		[div class=tab-pane active id=tabs-7152-0 
		]div
		[div class=tab-pane fade id=tabs-7152-1 
			[p 
				"Everything marked (Acmlm) was found by 
				[a class=intlink href=/Users/Profile/Acmlm 
					"Acmlm
				]a
				".
				$LF
				"Everything else was found by 
				[a class=intlink href=/Users/Profile/FractalFusion 
					"FractalFusion
				]a
				".
				$LF
			]p
			[p 
				"Some additional comments were added to the code.
				$LF
			]p
			[ul 
				[li 
					" Random functions:
					$LF
				]li
			]ul
			[pre 
				[code class=language-snescom 
					"RndVal1_A = $0037
					$LF
					"RndVal1_B = $0038
					$LF
					"RndVal1_C = $0039
					$LF
					"RndVal2   = $0302
					$LF
					$LF
					";(Acmlm)
					$LF
					";****************************************
					$LF
					";* Shift RndVal1 left by 1 bit          *
					$LF
					";* New bit entering RndVal1_C = ?       *
					$LF
					";* Load random from RndVal1_C           *
					$LF
					";****************************************
					$LF
					$LF
					"$C13E                        ;          RndVal1          -    A     - C
					$LF
					"RndFunc1: LDA RndVal1_A      ;01111000 11111111 00110110 - 01111000 - 1
					$LF
					"          ASL                ;                           - 11110000 - 0
					$LF
					"          EOR RndVal1_A      ;                           - 10001000 - 0
					$LF
					"          ASL                ;                           - 00010000 - 1
					$LF
					"          ASL                ;                           - 00100000 - 0
					$LF
					"          ASL                ;                           - 01000000 - 0 <-- entering bit
					$LF
					"          ROL RndVal1_C      ;01111000 11111111 01101100 - 01000000 - 0
					$LF
					"          ROL RndVal1_B      ;01111000 11111110 01101100 - 01000000 - 1
					$LF
					"          ROL RndVal1_A      ;11110001 11111110 01101100 - 01000000 - 0
					$LF
					"          LDA RndVal1_C      ;                           - 01101100 - 0
					$LF
					"          RTS
					$LF
					$LF
					$LF
					";****************************************
					$LF
					";* Increment RndVal2 by 35 ($23)        *
					$LF
					";* Run RndFunc1 5 times                 *
					$LF
					";****************************************
					$LF
					$LF
					"$C56D
					$LF
					"RndFunc2: LDX #$05
					$LF
					$LF
					"loop:     LDA RndVal2
					$LF
					"          CLC
					$LF
					"          ADC #$07
					$LF
					"          STA RndVal2
					$LF
					"          JSR RndFunc1
					$LF
					"          DEX
					$LF
					"          BNE loop
					$LF
					$LF
					"          RTS
					$LF
				]code
			]pre
			[ul 
				[li 
					" Random analysis:
					$LF
				]li
			]ul
			[pre 
				$LF
				"(Acmlm)
				$LF
				"37 38 39                            0302
				$LF
				[del 
				]del
				[del 
				]del
				[del 
				]del
				[del 
				]del
				[del 
				]del
				[del 
				]del
				[del 
					"-
					$LF
					"70 19 EE = 011100000001100111101110 ¦ 00  Before starting (random 1)
					$LF
					"E0 33 DC = 111000000011001111011100 ¦ 00  $0037-0039 << 1
					$LF
					"C0 67 B9 = 110000000110011110111001 ¦ 00  $0302      + 00
					$LF
					"80 CF 72 = 100000001100111101110010 ¦ 00
					$LF
					"01 9E E4 = 000000011001111011100100 ¦ 00
					$LF
					"03 3D C8 = 000000110011110111001000 ¦ 00
					$LF
					"06 7B 90 = 000001100111101110010000 ¦ 00
					$LF
					"0C F7 20 = 000011001111011100100000 ¦ 00
					$LF
					"19 EE 40 = 000110011110111001000000 ¦ 00
					$LF
					"33 DC 81 = 001100111101110010000001 ¦ 00
					$LF
					"67 B9 02 = 011001111011100100000010 ¦ 00
					$LF
					$LF
					"80 CF 72 = 100000001100111101110010 ¦ 00  Before rolling (random 2)
					$LF
					"CF 72 05 = 110011110111001000000101 ¦ 23  $0037-0039 << 8, $0027 is reset when this activates
					$LF
					"72 05 46 = 111000100000010101000110 ¦ 46  $0302      +$23
					$LF
					"05 46 58 = 000001010100011001011000 ¦ 69
					$LF
					$LF
					"3F 2B A1 = 001111110010101110100001 ¦ D2  While rolling (random 3)
					$LF
					"84 17 CE = 100001000001011111001110 ¦ 3B  $0037-0039 <<18,16,16,16,18,16,16,16,... depending on $0027
					$LF
					"CE 30 E1 = 110011100011000011100001 ¦ A4  $0302      +$69
					$LF
					"E1 49 44 = 111000010100100101000100 ¦ 0D
					$LF
					"44 8F 6F = 010001001000111101101111 ¦ 76
					$LF
					"BC D9 1B = 101111001101100100011011 ¦ DF
					$LF
					$LF
					"                                          After rolling (random 4)
					$LF
					"                                          $0037-0039 << 6, 16 when getting dice values
					$LF
					"                                          $0302      +$23
					$LF
				]del
			]pre
			[ul 
				[li 
					" before game:
					$LF
				]li
			]ul
			[pre 
				[code class=language-snescom 
					";frame 7: 3E 2A D2
					$LF
					$LF
					";RAM(27)++ starts 3 frames after first press of A and occurs on every frame
					$LF
					$LF
					"; *****
					$LF
					"; executes first
					$LF
					"; *****
					$LF
					$LF
					"...
					$LF
					"$C053 JSR RndFunc1 ; executes always on every frame
					$LF
					"$C056 JSR $C2DE
					$LF
					"...
					$LF
					$LF
					"; *****
					$LF
					"; executes when entering name
					$LF
					"; starts on accept input
					$LF
					"; stops one frame after OK
					$LF
					"; *****
					$LF
					$LF
					";RAM($27)++ (somewhere)
					$LF
					$LF
					"...
					$LF
					"$94D6 LDA $27
					$LF
					"$94D8 AND #$1F ;mod 32
					$LF
					"$94DA TAX
					$LF
					"Iterate:   ; iterates RAM($27)%32+1 times.
					$LF
					"$94DB JSR RndFunc1
					$LF
					"$94DE DEX
					$LF
					"$94DF BPL Iterate
					$LF
					"...
					$LF
					$LF
					"; *****
					$LF
					"; set up cards
					$LF
					"; *****
					$LF
					$LF
					"...
					$LF
					"$84A2 JSR Chance ; if jump, chance first, otherwise comm chest
					$LF
					"$84A5 LDX #$10
					$LF
					$LF
					"Chance:
					$LF
					"$84A7 STX $F6 ; 0 if chance, 16 if comm chest
					$LF
					"$84A9 STX $F7
					$LF
					"$84AB LDY #$F
					$LF
					"$84AD LDA #$FF
					$LF
					$LF
					"Init:          ;sets chance/comm chest entries to $FF
					$LF
					"$84AF STA $472,X
					$LF
					"$84B2 INX
					$LF
					"$84B3 DEY
					$LF
					"$84B4 BPL Init
					$LF
					"$84B6 LDY #$F
					$LF
					$LF
					"TryInsertCard:
					$LF
					"$84B8 JSR RndFunc1
					$LF
					"$84BB JSR RndFunc1
					$LF
					"$84BE JSR RndFunc1
					$LF
					"$84C1 EOR $F7
					$LF
					"$84C3 LSR    ;
					$LF
					"$84C4 LSR    ;
					$LF
					"$84C5 LSR    ;
					$LF
					"$84C6 LSR    ; idiv by 16, reduce to <16
					$LF
					"$84C7 ORA $F6    ; +0 if chance, +16 if comm chest
					$LF
					"$84C9 TAX   ;deck offset
					$LF
					"$84CA LDA $472,X
					$LF
					"$84CD BMI InsertCard ;vacant spot
					$LF
					"$84CF INC $F7
					$LF
					"$84D1 JMP TryInsertCard
					$LF
					$LF
					"InsertCard:
					$LF
					"$84D4 TYA
					$LF
					"$84D5 STA $472,X
					$LF
					"$84D8 DEY      ;Next Card
					$LF
					"$84D9 BPL TryInsertCard
					$LF
					"$84DB RTS      ;Done
					$LF
					"...
					$LF
				]code
			]pre
			[ul 
				[li 
					" during game:
					$LF
				]li
			]ul
			[pre 
				[code class=language-snescom 
					"; (included again)
					$LF
					"; *****
					$LF
					"; executes first
					$LF
					"; *****
					$LF
					$LF
					"...
					$LF
					"$C053 JSR RndFunc1 ; executes always on every frame
					$LF
					"$C056 JSR $C2DE
					$LF
					"...
					$LF
					$LF
					"; *****
					$LF
					"; executes when on overhead board view
					$LF
					"; *****
					$LF
					$LF
					"...
					$LF
					"$8110 JSR $8585
					$LF
					"$8113 JSR RndFunc2     ;executes on all but random 1
					$LF
					"$8116 JSR $8585
					$LF
					"$8119 LDA $26 ;0=not rolling 1=rolling
					$LF
					"$811B BEQ $8120 ;not sure why they double-check; see below (RandomWhenRolling)
					$LF
					"$811D JMP RandomWhenRolling
					$LF
					"...
					$LF
					$LF
					"; *****
					$LF
					"; executes only on random 2
					$LF
					"; *****
					$LF
					$LF
					"...
					$LF
					"$FA1B JSR RndFunc1    ;executes only on random 2
					$LF
					"$FA1E AND #$1F ;mod 32
					$LF
					"$FA20 CMP #$A     ;mod 10
					$LF
					"$FA22 BCC $FA28
					$LF
					"$FA24 SBC #$A
					$LF
					"$FA26 BCS $FA20
					$LF
					"$FA28 STA $5D
					$LF
					"$FA2A JSR RndFunc1    ;executes only on random 2
					$LF
					"$FA2D AND #$D0
					$LF
					"...
					$LF
					$LF
					$LF
					";(Acmlm)
					$LF
					";****************************************
					$LF
					";* Randomness variation when rolling    *
					$LF
					";****************************************
					$LF
					$LF
					"RandomWhenRolling:
					$LF
					"$816E:    LDA $0026
					$LF
					"          CMP #$01           ;equal when rolling
					$LF
					"          BNE NotRolling
					$LF
					$LF
					"          JSR RndFunc2
					$LF
					"          JSR RndFunc2
					$LF
					"          INC $0027
					$LF
					"          LDA $0027
					$LF
					"          AND #$03           ;mod 4
					$LF
					"          BNE Skip           ;... if RAM($27)%4==0 (i.e. every 4 frames) ...
					$LF
					$LF
					"          JSR RndFunc1       ;do this ...
					$LF
					"          STA $00FA
					$LF
					"          AND #$42
					$LF
					"          BNE $8190
					$LF
					"          LDA #$02
					$LF
					"          JSR $CB9A
					$LF
					$LF
					"$8190:    JSR RndFunc1       ;... and this
					$LF
					"          AND #$12
					$LF
					"          BEQ $819C          
					$LF
					"          LDA #$01
					$LF
					"          STA $0504
					$LF
					$LF
					"Skip:
					$LF
					"$819C:    ...
					$LF
					$LF
					"NotRolling:
					$LF
					"          JSR $8585
					$LF
					$LF
					$LF
					";(Acmlm)
					$LF
					";****************************************
					$LF
					";* Determine (and display) the dice     *
					$LF
					";* Values are randomized between them   *
					$LF
					";****************************************
					$LF
					$LF
					"$81EB:    LDX #$01
					$LF
					"NextDice: STX $00FB
					$LF
					"          ...
					$LF
					$LF
					"$8214:    JSR RndFunc1       ;Randomize and load random value
					$LF
					"          JSR RndFunc1
					$LF
					"          JSR RndFunc1
					$LF
					"          JSR RndFunc1
					$LF
					"          JSR RndFunc1
					$LF
					$LF
					"          CPX #$01           ;If second dice, XOR with RndVal2
					$LF
					"          BNE Mod6
					$LF
					"          EOR RndVal2
					$LF
					$LF
					"Mod6:     CMP #$06           ;modulo 6
					$LF
					"          BCC Save
					$LF
					"          SBC #$06
					$LF
					"          BCS Mod6
					$LF
					$LF
					"Save:     ADC #$01           ;0-5 -> 1-6
					$LF
					"          STA $0300,X        ;store dice
					$LF
					$LF
					"          ...
					$LF
					"$825E:    LDX $00FB
					$LF
					"          DEX
					$LF
					"          BPL NextDice
					$LF
				]code
			]pre
		]div
	]div
]div
[p 
	"(RNG = Random Number Generator)
	$LF
]p
[hr 
]hr
[p 
	"[
	[a id=1 
	]a
	[a href=#r1 
		"1
	]a
	"]
	" The RndVal1 RNG is actually 22-bit, not 24-bit, because the first two bits are superfluous.
	$LF
]p
[p 
	"Some trivia:
	$LF
]p
[ul 
	[li 
		" The RndVal1 RNG has a period of 2^22-1. Since 0 is a pathological case, it means that all nonzero 22-bit numbers are contained in this period.
		$LF
	]li
	[li 
		" The RndVal1 RNG is slightly biased toward the die numbers 1, 2, 3, 4, because of mod 6 operating on (unsigned) 8-bit numbers.
		$LF
	]li
	[li 
		" The RndVal1 RNG is reversible, a fact which can also be derived from its period.
		$LF
	]li
]ul
[h3 id=Bomberman
 
	" Bomberman 
	$LF
]h3
[p 
	"Bomberman has a very complex random function. This may be necessary so as
	$LF
	"to avoid any noticeable patterns in the randomly generated level contents.
	$LF
]p
[pre 
	[code class=language-snescom 
		"PermutateRandomCtrlVars
		$LF
		"        $D668  A5 54:       lda RandomCtrl1
		$LF
		"        $D66A  2A:          rol a
		$LF
		"        $D66B  2A:          rol a
		$LF
		"        $D66C  49 41:       eor #$41
		$LF
		"        $D66E  2A:          rol a   
		$LF
		"        $D66F  2A:          rol a   
		$LF
		"        $D670  49 93:       eor #$93
		$LF
		"        $D672  65 55:       adc RandomCtrl2
		$LF
		"        $D674  85 54:       sta RandomCtrl1
		$LF
		"        $D676  2A:          rol a
		$LF
		"        $D677  2A:          rol a
		$LF
		"        $D678  49 12:       eor #$12
		$LF
		"        $D67A  2A:          rol a   
		$LF
		"        $D67B  2A:          rol a   
		$LF
		"        $D67C  65 56:       adc RandomCtrl3
		$LF
		"        $D67E  85 55:       sta RandomCtrl2
		$LF
		"        $D680  65 54:       adc RandomCtrl1
		$LF
		"        $D682  E6 56:       inc RandomCtrl3
		$LF
		"        $D684  D0 09:       bne +               ; $D68F
		$LF
		"        $D686  48:          pha 
		$LF
		"        $D687  A5 57:        lda RandomCtrl4
		$LF
		"        $D689  18:           clc 
		$LF
		"        $D68A  69 1D:        adc #$1D
		$LF
		"        $D68C  85 57:        sta RandomCtrl4
		$LF
		"        $D68E  68:          pla
		$LF
		"+       $D68F  45 57:       eor RandomCtrl4
		$LF
		"        $D691  60:          rts
		$LF
	]code
]pre
[p 
	"This function is called whenever randomness is needed, and often, the
	$LF
	"resulting value is even further permutated, for example, by executing "ror a" twice.
	$LF
	"The function is also called once every frame on the title screen.
	[br 
	]br
	$LF
	"Translated to C++, it becomes:
	$LF
]p
[pre 
	[code class=language-c_white 
		"unsigned char PermutateRandomVars(unsigned char random[3], bool carry)
		$LF
		"{
		$LF
		"    unsigned tmpval = carry << 8;    
		$LF
		"    
		$LF
		"    tmpval = ((random[0] << 4) | ((tmpval & 0x100) >> 5) | (random[0] >> 5)) ^ 0x87;         
		$LF
		"    tmpval = (tmpval & 0xFF) + ((tmpval & 0x100) >> 8) + random[1];
		$LF
		"    random[0] = tmpval;
		$LF
		"    
		$LF
		"    tmpval = ((random[0] << 4) | ((tmpval & 0x100) >> 5) | (random[0] >> 5)) ^ 0x48;
		$LF
		"    random[0] = tmpval;
		$LF
		$LF
		"    tmpval = (tmpval & 0xFF) + ((tmpval & 0x100) >> 8) + random[2];
		$LF
		"    random[1] = tmpval;
		$LF
		$LF
		"    tmpval = (tmpval & 0xFF) + ((tmpval & 0x100) >> 8) + random[0];
		$LF
		"    
		$LF
		"    if(!++random[2])
		$LF
		"    {
		$LF
		"        random[3] += 29;
		$LF
		"    }
		$LF
		"     
		$LF
		"    return tmpval ^ random[3];
		$LF
		"}
		$LF
	]code
]pre
[p 
	"It does such a meticulous job that I think that it may be based on some standard cryptographical function such as CRC32... But I don't know.
	$LF
]p
[h3 id=FDSBackgammon
 
	" FDS Backgammon
	$LF
]h3
[p 
	"This code describes the RNG for FDS Backgammon.
	$LF
]p
[p 
	"At the title screen, the RNG begins at one of 32 possible sequences (0-31), and runs through the sequence one number per frame. When the title screen is cleared, the RNG stops and all dice rolls are determined.
	$LF
]p
[p 
	"Power-on uses sequence 31. For other sequences, do a reset when memory address $33 is the sequence number mod 32.
	$LF
]p
[p 
	"Because all dice rolls for a game are determined before it begins, nothing useful will likely occur, given that GBC Backgammon dice rolls can be manipulated just before rolling the dice. At least 17 rolls (some of them high doubles) must be done by both sides to complete the game. If a home board shutout is performed with an opposing piece on the bar, this prevents the opponent from making a roll, but the added flexibility is very small.
	$LF
]p
[pre 
	[code class=language-snescom 
		";initial seed function, one of 32 values
		$LF
		$LF
		"$6245:
		$LF
		"LDX $33    ;incrementing value, not cleared on reset, used as seed
		$LF
		"...
		$LF
		"LDA #0
		$LF
		"$6254:
		$LF
		"STA $10,Y  ;probably some clearing routine
		$LF
		"DEY
		$LF
		"BNE $6254
		$LF
		"DEC $11
		$LF
		"BPL $6254
		$LF
		"TXA
		$LF
		"BNE $6262
		$LF
		"LDX #$5F    ;power-on value used as seed
		$LF
		"$6262:
		$LF
		"STX $500   ;put seed here
		$LF
		$LF
		$LF
		";initial 55 values
		$LF
		";recursion is length 55 and mod 180
		$LF
		";first 55 values depend on one of 32 seeds
		$LF
		$LF
		"$9CAB:
		$LF
		"LDA $500      ;take seed
		$LF
		"AND #$1F      ;mod 32
		$LF
		"STA $10       ;put in mem10
		$LF
		"STA $637
		$LF
		"LDA #$1     
		$LF
		"STA $11       ;mem11=1
		$LF
		"LDY #$14      ;offset starts at 20 and will increment by 21 (mod 55)
		$LF
		"LDX #$36      ;X=54, 55 iterations
		$LF
		$LF
		"CreateValue:
		$LF
		"LDA $11          
		$LF
		"STA $601,Y        ;store mem11 at index
		$LF
		"LDA $10
		$LF
		"SEC
		$LF
		"SBC $11           ;A=mem10 - mem11
		$LF
		"BPL $9CCC
		$LF
		"CLC
		$LF
		"ADC #$B4          ;mod 180
		$LF
		$LF
		"$9CCC:
		$LF
		"STA $11             ;new value for mem11 and next index
		$LF
		"LDA $601,Y          ;back to this index
		$LF
		"STA $10             ;put in mem10
		$LF
		"TYA
		$LF
		"CLC
		$LF
		"ADC #$15             ;add 21 to offset
		$LF
		"CMP #$37
		$LF
		"BCC $9CDD            
		$LF
		"SBC #$37             ;mod 55
		$LF
		$LF
		"$9CDD:
		$LF
		"TAY                ;new index
		$LF
		"DEX                ;next
		$LF
		"BNE CreateValue    ;if 0 done
		$LF
		$LF
		";now execute RndFunc 3 times
		$LF
		"JSR RndFunc   ;$9CE7
		$LF
		"JSR RndFunc
		$LF
		";(falling into RndFunc)
		$LF
		$LF
		";Recursion function
		$LF
		";Technically it throws 55 new numbers at once
		$LF
		";since it uses $600 as a pointer into a 55-number array
		$LF
		";It works like this: x_n = x_(n-55) - x_(n-24) (mod 180)
		$LF
		$LF
		"RndFunc:
		$LF
		"$9CE7: 
		$LF
		"LDY #$0     ;initial
		$LF
		$LF
		"Next:
		$LF
		"$9CE9:
		$LF
		"TYA         ;A=Y  (index)
		$LF
		"STA $10           ;mem10 = A
		$LF
		"CMP #$18          
		$LF
		"BCS $9CF4        ;this is basically A-24 (mod 55)
		$LF
		"ADC #$1F            
		$LF
		"BCC $9CF6           
		$LF
		"$9CF4:
		$LF
		"SBC #$18 
		$LF
		"$9CF6:   
		$LF
		"TAY              ;used as index
		$LF
		$LF
		"LDA $601,Y       
		$LF
		"STA $11        ;take value at index-24 and store in mem11
		$LF
		"LDY $10          ;Y=original index
		$LF
		"LDA $601,Y        ;A=index value
		$LF
		"SEC        
		$LF
		"SBC $11     ;A-=mem11
		$LF
		"BCS $9D08   
		$LF
		"ADC #$B4    ;mod 180
		$LF
		"$9D08:
		$LF
		"STA $601,Y   ;new value
		$LF
		"INY         ;next index
		$LF
		"CPY #$37   ;if index reaches 55, done
		$LF
		"BNE Next
		$LF
		$LF
		"LDA #0     ;start at index 0
		$LF
		"STA $600
		$LF
		"TAY
		$LF
		"LDA $601,Y  ;(first value)
		$LF
		"RTS
		$LF
		$LF
		$LF
		$LF
		$LF
		$LF
		"; this calls a random value; used in GetDiceRoll
		$LF
		"GetRandomVal:
		$LF
		"INC $600         ;increment index
		$LF
		"LDA $600         ;index
		$LF
		"CMP $37
		$LF
		"BCC NotOverflow    ;if overflow execute RndFunc
		$LF
		"JSR RndFunc
		$LF
		"LDA #$0           ;totally redundant
		$LF
		"STA $600
		$LF
		$LF
		"$9CA6: NotOverflow:
		$LF
		"TAY        
		$LF
		"LDA $601,Y      ;value at index
		$LF
		"RTS
		$LF
		$LF
		"; determine dice roll
		$LF
		$LF
		"GetDiceRoll:
		$LF
		"$815C:
		$LF
		$LF
		"LDA $30C
		$LF
		"BNE Return         ;if not ready, do nothing
		$LF
		"JSR GetRandomVal    ;$9C94
		$LF
		"LDY #$0
		$LF
		"$8166:
		$LF
		"CMP #$24
		$LF
		"BCC $816F
		$LF
		"SBC #$24      ;mod 36, Y=A/36  A%=36
		$LF
		"INY
		$LF
		"BCS $8166     
		$LF
		$LF
		"$816F:
		$LF
		"STA $10      ;mem10=A
		$LF
		"TYA
		$LF
		"STA $11      ;mem11=Y
		$LF
		"ASL
		$LF
		"ASL
		$LF
		"ASL          ;8*Y             
		$LF
		"SEC
		$LF
		"SBC $11       ;7*Y
		$LF
		"CLC
		$LF
		"ADC $10      ;7*Y+A
		$LF
		"CMP #$24
		$LF
		"BCC $8183
		$LF
		"SBC #$24      ;mod 36
		$LF
		"TAY
		$LF
		"LDA LookUpTable,Y   ;refer to look-up table  0<=Y<=35    81CF-81F2
		$LF
		"PHA
		$LF
		"LSR
		$LF
		"LSR
		$LF
		"LSR
		$LF
		"LSR
		$LF
		"STA $46     ;idiv 16   upperhalfbyte, die 1
		$LF
		"PLA
		$LF
		"AND #$F     ;mod 16   lowerhalfbyte, die 2
		$LF
		"STA $47
		$LF
		"...
		$LF
		"Return:
		$LF
		"RTS
		$LF
		$LF
		$LF
		";all values of the look-up table denote upper-lower paired representation of a dice roll
		$LF
		"LookUpTable:
		$LF
		"$81CF:
		$LF
		"$14 $66 $36 $65 $63 $11
		$LF
		"$23 $33 $16 $31 $21 $53
		$LF
		"$51 $61 $62 $35 $44 $22
		$LF
		"$12 $32 $55 $34 $56 $25
		$LF
		"$13 $43 $41 $42 $46 $15
		$LF
		"$24 $52 $45 $26 $64 $54
		$LF
	]code
]pre
