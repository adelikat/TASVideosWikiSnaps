9
[div class=p 
	"Original article:
	$LF
]div
[ul 
	[li 
		" 
		[a href=https://www.red-gate.com/simple-talk/dotnet/net-framework/dynamic-language-integration-in-a-c-world/ rel=noopener external nofollow 
			"https://www.red-gate.com/simple-talk/dotnet/net-framework/dynamic-language-integration-in-a-c-world/
		]a
		$LF
	]li
]ul
[div class=p 
	"Pythonnet:
	$LF
]div
[ul 
	[li 
		" 
		[a href=https://pypi.org/project/pythonnet/ rel=noopener external nofollow 
			"https://pypi.org/project/pythonnet/
		]a
		$LF
	]li
]ul
[div class=card mb-2 
	[div class=card-header 
		[strong 
			"Table of contents
		]strong
	]div
	[div class=card-body 
		[ul 
			[li 
				[a href=#CallingCMethodsFromPython 
					" Calling C# Methods from Python
					$LF
				]a
				[ul 
					[li 
						[a href=#CreateTheCClass 
							" Create the C# Class
							$LF
						]a
					]li
					[li 
						[a href=#CallTheCMethodsFromPython 
							" Call the C# Methods from Python
							$LF
						]a
					]li
				]ul
			]li
		]ul
	]div
]div
[h2 id=CallingCMethodsFromPython 
	" Calling C# Methods from Python
	$LF
]h2
[div class=p 
	"In the following example, I’ll perform the reverse operation; creating the calculator’s class in C# and then accessing it from Python. There is no attached demonstration for this, and it does not significantly inform the final build of the application, so this is primarily an academic exercise.
	$LF
]div
[h3 id=CreateTheCClass 
	" Create the C# Class
	$LF
]h3
[div class=p 
	"1. In Visual Studio, create a new C# Class Library project with the name 
	[b 
		"DynamicCS
	]b
	";
	$LF
]div
[div class=p 
	"2. Create a standard C# class in the 
	[b 
		"DynamicCS
	]b
	" project by renaming the existing 
	[b 
		"Class1.cs
	]b
	" class to 
	[b 
		"Calculator.cs
	]b
	". Implement two simple methods for adding and subtracting numbers, as follows:
	$LF
]div
[pre 
	[code class=language-c 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"The 
	[b 
		"Calculator
	]b
	" class is a valid C# class, but to access it as a dynamic object from Python, you need to have a wrapper class that inherits from DynamicObject, as demonstrated over the remaining steps:
	$LF
]div
[div class=p 
	"3. In the Solution Explorer, right-click the DynamicCS project file, and select 
	[b 
		"Add > New Item > Class
	]b
	";
	$LF
]div
[div class=p 
	"4. In the Solution Explorer, rename the new file to 
	[b 
		"DynamicCalc.cs
	]b
	";
	$LF
]div
[div class=p 
	"5. In the newly-created class, add:
	$LF
]div
[pre 
	[code class=language-c 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"6. Define a public 
	[b 
		"DynamicCalc
	]b
	" class that derives from 
	[b 
		"DynamicObject
	]b
	":
	$LF
]div
[pre 
	[code class=language-c 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"7. Implement the constructor of the 
	[b 
		"DynamicCalc
	]b
	" class: 
	$LF
]div
[pre 
	[code class=language-c 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"8. Override methods from the 
	[b 
		"DynamicObject
	]b
	" class. In the presented example, the 
	[b 
		"TryGetMember
	]b
	" method has to be overridden, at the very least:
	$LF
]div
[pre 
	[code class=language-c 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"9. The resulting 
	[b 
		"DynamicCalc.cs
	]b
	" file might look like this: 
	$LF
]div
[pre 
	[code class=language-c 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"Note that, in the 
	[b 
		"TryGetMember
	]b
	" method:
	$LF
]div
[ul 
	[li 
		" 
		[b 
			"binder.Name
		]b
		" represents a name of the method or property called; 
		$LF
	]li
	[li 
		" 
		[b 
			"result
		]b
		" is an output value of the method or property. In this case, it is a delegate to the ‘add’ and ‘sub’ methods of the calc object; 
		$LF
	]li
	[li 
		" 
		[b 
			"return
		]b
		" should return ‘true’ if the operation is successful, otherwise ‘false’. 
		$LF
	]li
]ul
[div class=p 
	"Finally, save and build the solution. The Python executable performs the calculations by calling the calc object, which in turn resolves the result of the C# 
	[b 
		"DynamicCalc
	]b
	" class, imported from 
	[b 
		"DynamicCS.dll
	]b
	".
	$LF
]div
[h3 id=CallTheCMethodsFromPython 
	" Call the C# Methods from Python
	$LF
]h3
[div class=p 
	"1. In the Solution Explorer, right click the 
	[b 
		"DynamicCS
	]b
	" project file, and select 
	[b 
		"Add > New Item > Text file
	]b
	";
	$LF
]div
[div class=p 
	"2. In the Solution Explorer, rename the new file to 
	[b 
		"client.py
	]b
	";
	$LF
]div
[div class=p 
	"3. Add an 
	[b 
		"import sys
	]b
	" statement, pointing to the directory where your C# DLL is located.  In this example, I have saved 
	[b 
		"DynamicCS.dll
	]b
	" in 
	[em 
		"C:\MyProjects\DynamicCS\DynamicCS\bin\Debug
	]em
	": 
	$LF
]div
[pre 
	[code class=language-python 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"4. Reference your C# DLL: 
	$LF
]div
[pre 
	[code class=language-python 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"5. Create a Python object as you would for any other object, then use it to perform some calculations: 
	$LF
]div
[pre 
	[code class=language-python 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"6. The resulting 
	[b 
		"client.py
	]b
	" file might look like this: 
	$LF
]div
[pre 
	[code class=language-python 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"7. Save and run the Python client. 
	$LF
]div
[div class=p 
	[img class=embed mw-100 src=https://i.imgur.com/jUwq8pd.gif 
	]img
	$LF
]div
[ul 
	[li 
		" Figure 2. The basic calculator, implemented mostly in Python. Creating and calling Python methods in C#
		$LF
	]li
]ul
[div class=p 
	"The Python executable performs the calculations by calling the 
	[b 
		"calc
	]b
	" object, which in turn resolves the result of the C# 
	[b 
		"DynamicCalc
	]b
	" class, imported from 
	[b 
		"DynamicCS.dll
	]b
	". The end result looks much the same as the earlier implementation.
	$LF
]div
