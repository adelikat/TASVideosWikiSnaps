17
[h2 id=HowToRecoverAGoogleCodeSvnProjectAndMigrateToGithub 
	" 
	[a href=https://dominikdorn.com/2016/05/how-to-recover-a-google-code-svn-project-and-migrate-to-github/ rel=noopener external nofollow 
		"How to recover a Google Code SVN Project and migrate to Github
	]a
	$LF
]h2
[div class=p 
	[br 
	]br
	"Google Code shut down a year ago, and recently also their “Migrate to Github” feature was disabled.
	$LF
]div
[div class=p 
	"Because I have/had also a old project hosted (and some people where asking about it recently), I had to find a way on how to migrate the project to Github anyway.
	$LF
]div
[div class=p 
	"I did these steps
	$LF
]div
[ol 
	[li 
		" Download the svn dump'ed repo: 
		[br 
		]br
		" 
		[code 
			"  wget 
			[a href=https://storage.googleapis.com/google-code-archive-source/v2/code.google.com/spring-security-facelets-taglib/repo.svndump.gz rel=noopener external nofollow 
				"https://storage.googleapis.com/google-code-archive-source/v2/code.google.com/spring-security-facelets-taglib/repo.svndump.gz
			]a
		]code
		$LF
	]li
	[li 
		" Unzip: 
		[br 
		]br
		" 
		[code 
			"  gunzip repo.svndump.gz
		]code
		$LF
	]li
	[li 
		" Create the repo: 
		[br 
		]br
		" 
		[code 
			"  svnadmin create /tmp/testgc
		]code
		$LF
	]li
	[li 
		" Restore it: 
		[br 
		]br
		" 
		[code 
			"  svnadmin load /tmp/testgc/ < repo.svndump
		]code
		$LF
	]li
	[li 
		" Launch a local svn daemon: 
		[br 
		]br
		" 
		[code 
			"  svnserve --foreground -d
		]code
		$LF
	]li
	[li 
		" In another terminal, checkout the repo from localhost in order to generate authors.txt: 
		[br 
		]br
		" 
		[code 
			"  svn checkout svn://localhost/tmp/testgc/ testgc-svn
		]code
		$LF
	]li
	[li 
		" Enter the svn repo: 
		[br 
		]br
		" 
		[code 
			"  cd testgc-svn/
		]code
		$LF
	]li
	[li 
		" Dump the authors to the list: 
		[br 
		]br
		" 
		[code 
			"  svn log -q | awk -F '|' '/^r/ {sub("^ ", "", $2); sub(" $", "", $2); print $2" = "$2" <"$2">"}' | sort -u > ../authors.txt
		]code
		$LF
	]li
	[li 
		" Edit the file so that each name on the left remains the same, and on the right you have git hosting site account names for every person and their email addresses in the brackets (resolve different svn credentials a single person might have with the same git credential) 
		[br 
		]br
		" 
		[code 
			"  author1@mail.com = author1 <author1@mail.com> 
			[br 
			]br
			"   author1 = author1 <author1@mail.com> 
			[br 
			]br
			"   author2 = author2 <author2@mail.com>
		]code
		$LF
	]li
	[li 
		" Exit the svn repo: 
		[br 
		]br
		" 
		[code 
			"  cd ..
		]code
		$LF
	]li
	[li 
		" Clone your repo now using git svn 
		[a id=r1 
		]a
		[sup 
			"[
			[a href=#1 
				"1
			]a
			"]
		]sup
		": 
		[br 
		]br
		" 
		[code 
			"  git svn --stdlayout -A authors.txt clone svn://localhost/tmp/testgc/
		]code
		$LF
	]li
	[li 
		" Go into the cloned git repo: 
		[br 
		]br
		" 
		[code 
			"  cd testgc/
		]code
		$LF
	]li
	[li 
		" Add the upstream github repo: 
		[br 
		]br
		" 
		[code 
			"  git remote add origin 
			[a href=https://github.com/domdorn/spring-security-facelets-taglib.git rel=noopener external nofollow 
				"https://github.com/domdorn/spring-security-facelets-taglib.git
			]a
		]code
		$LF
	]li
	[li 
		" Push it: 
		[br 
		]br
		" 
		[code 
			"  git push --set-upstream origin master
		]code
		$LF
	]li
	[li 
		" Till now, we only have the trunk / master branch
		$LF
	]li
	[li 
		" Get atlassians svn-migration-scripts.jar from 
		[a href=https://bitbucket.org/atlassian/svn-migration-scripts/downloads/ rel=noopener external nofollow 
			"https://bitbucket.org/atlassian/svn-migration-scripts/downloads
		]a
		": 
		[br 
		]br
		" 
		[code 
			"  wget 
			[a href=https://bitbucket.org/atlassian/svn-migration-scripts/downloads/svn-migration-scripts.jar rel=noopener external nofollow 
				"https://bitbucket.org/atlassian/svn-migration-scripts/downloads/svn-migration-scripts.jar
			]a
		]code
		$LF
	]li
	[li 
		" Run the scripts and expect the suggested actions: 
		[br 
		]br
		" 
		[code 
			"  java -Dfile.encoding=utf-8 -jar svn-migration-scripts.jar clean-git
		]code
		$LF
	]li
	[li 
		" If you like what you see (usually you do..), perform the actions: 
		[br 
		]br
		" 
		[code 
			"  java -Dfile.encoding=utf-8 -jar svn-migration-scripts.jar clean-git --force 
		]code
		$LF
	]li
	[li 
		" After this i had a branch structure like this: 
		[br 
		]br
		" 
		[code 
			"  git branch -a
		]code
		" 
		[br 
		]br
		" * master 
		[br 
		]br
		"     remotes/origin/0.2_nate 
		[br 
		]br
		"     remotes/origin/0.4_gblaszczyk 
		[br 
		]br
		"     remotes/origin/jsf-1.2-spring-2 
		[br 
		]br
		"     remotes/origin/jsf-1.2-spring-3 
		[br 
		]br
		"     remotes/origin/jsf-2.0-spring-2 
		[br 
		]br
		"     remotes/origin/jsf-2.0-spring-3 
		[br 
		]br
		"     remotes/origin/master 
		[br 
		]br
		"     remotes/origin/site 
		[br 
		]br
		"     remotes/origin/site@17 
		[br 
		]br
		"     remotes/origin/tags/0.1 
		[br 
		]br
		"     remotes/origin/tags/0.3_jsf-1.2-spring-2 
		[br 
		]br
		"     remotes/origin/tags/0.3_jsf-1.2-spring-3 
		[br 
		]br
		"     remotes/origin/tags/0.3_jsf-2.0_spring-2 
		[br 
		]br
		"     remotes/origin/tags/0.3_jsf-2.0_spring-3 
		[br 
		]br
		"     remotes/origin/tags/0.5 
		[br 
		]br
		"     remotes/origin/trunk
		$LF
	]li
	[li 
		" Checkout each branch (except tags and trunk) and push it: 
		[br 
		]br
		" 
		[code 
			"  for i in `git branch -r | grep -v 'tags\|trunk' `; do git checkout ${i/origin\// }; git push;  done
		]code
		$LF
	]li
	[li 
		" Push the branches: 
		[br 
		]br
		" 
		[code 
			"  git push --all origin
		]code
		$LF
	]li
	[li 
		" Checkout each tag and create a tag with the same name: 
		[br 
		]br
		" 
		[code 
			"  for i in `git branch -r | grep 'tags'`; do git checkout $i; git tag ${i/origin\/tags\// }; done  
		]code
		$LF
	]li
	[li 
		" Push the tags: 
		[br 
		]br
		" 
		[code 
			"  git push --tags origin
		]code
		$LF
	]li
]ol
[div class=p 
	"Thanks to @chrsmith for responding quickly to my google code email (4 minutes, wow!) and telling me about how to download the repo in the svn dump file format.
	$LF
]div
[div class=p 
	"Thanks to Atlassian for their 
	[a href=https://www.atlassian.com/git/tutorials/migrating-convert/ rel=noopener external nofollow 
		"svn migration scripts
	]a
	$LF
]div
[div class=p 
	"You can see the result of this work at my 
	[a href=https://github.com/domdorn/spring-security-facelets-taglib rel=noopener external nofollow 
		"Spring Security JSF Taglib Github Project
	]a
	".
	$LF
]div
[hr 
]hr
[div class=p 
	"[
	[a id=1 
	]a
	[a href=#r1 
		"1
	]a
	"]
	": Use the --no-metadata switch, if you don't want every commit message to contain "git-svn-id ...", or clean it up in some other way, as mentioned at 
	[a href=http://stackoverflow.com/questions/16092509/how-to-remove-svn-url-from-commit-messages rel=noopener external nofollow 
		"http://stackoverflow.com/questions/16092509/how-to-remove-svn-url-from-commit-messages
	]a
]div
