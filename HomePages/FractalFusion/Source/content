23
[div class=toc 
	[ul 
	]ul
]div
[hr 
]hr
[p 
	(__wikiLink|user:Bisqwit)
	": For now, I am opposed against mechanically changing all quotes 
	[a id=r1 
	]a
	[sup 
		"[
		[a href=#1 
			"1
		]a
		"]
	]sup
	". I have noticed
	$LF
	"that some machine translators, such as 
	[a class=extlink href=http://excite.co.jp/world/english rel=nofollow 
		"Excite
	]a
	", cannot cope with the typographically proper quotes. Thus I try to avoid inserting them in contexts that I think I would like to be understood through machine translation too ― that being the important pages such as 
	(__wikiLink|MovieRules)
	".
	[br 
	]br
	$LF
	"This is one of the reasons why I actually try to avoid quotes altogether, by     replacing 
	[q 
		"it's
	]q
	" with 
	[q 
		"it is
	]q
	", for example.
	[br 
	]br
	$LF
	"Notice that the 
	[tt 
		"<q>
	]tt
	" tag (that comes from the «
	[em 
	]em
	"« »
	[em 
	]em
	"» markup) does not suffer from this limitation.
	[br 
	]br
	$LF
	"[
	[a id=1 
	]a
	[a href=#r1 
		"1
	]a
	"]
	": Actually, against all mechanical changes, such as timeattack→TAS or nesvideos→tasvideos…
	$LF
]p
[hr 
]hr
[div class= 
	[ul class=nav nav-tabs role=tablist 
		[li class=nav-item 
			[a class=active nav-link data-toggle=tab href=#tabs-800-0 
				"VBM input transfer
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-800-1 
				"Text adaptation program
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-800-2 
				"Random byte generator
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-800-3 
				"Slot machine simulator
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-800-4 
				"Slot machine calculator
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-800-5 
				"Wobble score calculator
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-800-6 
				"Rainbow avatar
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-800-7 
				"Rainbow refactored
			]a
		]li
	]ul
	[div class=tab-content 
		[div class=tab-pane active id=tabs-800-0 
			[p 
				"This program was motivated out of a desire to program something that transfers input by specifying only the target frame where to start to overwrite and the source frame from where to transfer.
				$LF
			]p
			[p 
				"It is currently experimental, and it looks bad, but it works (with VBM files). It does not work with anything but VBM files. Back-up your movie files if you use something like this. 
				$LF
			]p
			[p 
				"P.S. The downloaded ROM came with the misspelling "Tommorow". I didn't spell it wrong; I just didn't bother to fix it. :)
				$LF
			]p
			[p 
				"P.P.S. The filenames listed are only 
				[em 
					"examples
				]em
				". Use whatever fits the situation.
				$LF
			]p
			[p 
				"vbmfuse.cc:
				$LF
			]p
			[pre 
				[code class=language-c_white 
					"#include <stdio.h>
					$LF
					$LF
					"long rlong(FILE *f);
					$LF
					$LF
					"int main()
					$LF
					"{
					$LF
					"    FILE *f, *g; //source; target
					$LF
					"    unsigned long d, frame;
					$LF
					"    int y;
					$LF
					"    
					$LF
					"    if(!(f=fopen("zzzz.vbm","rb")))
					$LF
					"    {
					$LF
					"      printf("No source");
					$LF
					"      goto qq2;
					$LF
					"    }
					$LF
					$LF
					"    if(!(g=fopen("1626 - Tom Clancy's Splinter Cell - Pandora Tommorow (U)(Chameleon).vbm","rb+")))
					$LF
					"    {
					$LF
					"      printf("No target");
					$LF
					"      goto qq1;
					$LF
					"    }
					$LF
					"    
					$LF
					"    fseek(f,0x3C,0);
					$LF
					"    d=rlong(f);
					$LF
					"    
					$LF
					"    printf("Target frame:");
					$LF
					"    scanf("%d", &frame);
					$LF
					"    fseek(g,0x3C,0);
					$LF
					"    d=rlong(g);
					$LF
					"    
					$LF
					"    printf("Source frame:");
					$LF
					"    scanf("%d", &frame);
					$LF
					"    fseek(f,0x3C,0);
					$LF
					"    d=rlong(f);
					$LF
					"    
					$LF
					"    fseek(g,d+frame*2,0);
					$LF
					"    fseek(f,d+frame*2,0);
					$LF
					$LF
					"    while(1)
					$LF
					"    {
					$LF
					"            y=fgetc(f);
					$LF
					"            if(feof(f)) break;
					$LF
					"            fputc(y,g);
					$LF
					"    }
					$LF
					"    
					$LF
					"    fseek(g,0xE,0);
					$LF
					"    fputc(0x10, g);
					$LF
					"    
					$LF
					"qq:
					$LF
					"    fclose(g);
					$LF
					"qq1:
					$LF
					"    fclose(f);
					$LF
					"qq2:
					$LF
					"    return(0);
					$LF
					"}
					$LF
					$LF
					"long rlong(FILE *f)
					$LF
					"{
					$LF
					"     unsigned long d=0;
					$LF
					"     
					$LF
					"     d+=fgetc(f);
					$LF
					"     d+=fgetc(f)*256;
					$LF
					"     d+=fgetc(f)*256*256;
					$LF
					"     d+=fgetc(f)*256*256*256;
					$LF
					"     
					$LF
					"     return(d);
					$LF
					"}
					$LF
				]code
			]pre
			[pre 
				"    
				$LF
			]pre
		]div
		[div class=tab-pane fade id=tabs-800-1 
			[p 
				"Inappropriately named quotes2.cc, this program changes code or code-like text to adapt to this wiki. It does this by indenting each line by one space, breaking some double-brackets, and doubling [ and ].
				$LF
			]p
			[p 
				"Don't use this program and then try to %
				[em 
				]em
				"%SRC_EMBED it. %
				[em 
				]em
				"%SRC_EMBED function operates differently from the wiki.
				$LF
			]p
			[p 
				"quotes2.cc:
				$LF
			]p
			[pre 
				[code class=language-c_white 
					"#include <stdio.h>
					$LF
					"#include <string.h>
					$LF
					$LF
					"int main (int argc, char *argv[])
					$LF
					"{
					$LF
					"    FILE *fp, *fq;
					$LF
					"    char fn[100];
					$LF
					"    char c[15]="_COPY.txt";
					$LF
					"    char x,y;
					$LF
					"    
					$LF
					"    if(argc<2)
					$LF
					"               return 1;
					$LF
					$LF
					"    
					$LF
					"    strncpy(fn,argv[1],80);
					$LF
					$LF
					"    
					$LF
					"    printf("%s", fn);
					$LF
					"    
					$LF
					"    if(!(fp = fopen(fn,"rb")))
					$LF
					"           return 1;
					$LF
					$LF
					"    strncat(fn,c,12);
					$LF
					$LF
					"    if(!(fq = fopen(fn,"wb")))
					$LF
					"    {
					$LF
					"           fclose(fq);
					$LF
					"           return 1;
					$LF
					"    }
					$LF
					"    
					$LF
					"    y=0;
					$LF
					"    
					$LF
					"    while(1)
					$LF
					"    {
					$LF
					"        x=y;
					$LF
					"        y=fgetc(fp);
					$LF
					"        if(feof(fp))
					$LF
					"                    break;
					$LF
					"        
					$LF
					"        if(y=='\n')
					$LF
					"        {
					$LF
					"                   fputc(y,fq);
					$LF
					"                   fputc(' ',fq);
					$LF
					"        }
					$LF
					"        
					$LF
					"        else if(( x=='{' || x=='(' || x=='}' || x==')' ) && y==x)
					$LF
					"        {
					$LF
					"                    fputc('\'',fq);     fputc('\'',fq);
					$LF
					"                    fputc('\'',fq);     fputc('\'',fq);
					$LF
					"                    fputc(y,fq);
					$LF
					"        }
					$LF
					"        
					$LF
					"        else if(( y=='[' || y==']'))
					$LF
					"        {
					$LF
					"             fputc(y,fq); fputc(y,fq);
					$LF
					"        }
					$LF
					"        
					$LF
					"        else
					$LF
					"        {
					$LF
					"            fputc(y,fq);
					$LF
					"        }
					$LF
					"    }
					$LF
					"    
					$LF
					"    
					$LF
					"    fclose(fq);
					$LF
					"    fclose(fp);
					$LF
					"    
					$LF
					"    return 0;   
					$LF
					"}
					$LF
				]code
			]pre
		]div
		[div class=tab-pane fade id=tabs-800-2 
			[p 
				"This program puts random numbers for each byte into a file. I used this for my Mega Man X submission and one of my avatars.
				$LF
			]p
			[p 
				"garbagegenerator.cc:
				$LF
			]p
			[pre 
				[code class=language-c_white 
					"#include <stdio.h>
					$LF
					"#include <stdlib.h>
					$LF
					"#include <time.h>
					$LF
					$LF
					"int main()
					$LF
					"{
					$LF
					"    srand(unsigned(time(0)));
					$LF
					"    FILE *fp;
					$LF
					"    int i,j;
					$LF
					"    long k;
					$LF
					"    
					$LF
					"    if(!(fp=fopen("wxyz","wb")))
					$LF
					"       return 1;
					$LF
					"    
					$LF
					"    printf("How many bytes of garbage do you want?");
					$LF
					"    scanf("%d",&k);
					$LF
					"    for(i=1;i<=k;i++)
					$LF
					"              fputc(rand()%256,fp); 
					$LF
					"    fclose(fp);
					$LF
					"    return(0);
					$LF
					"}
					$LF
					$LF
				]code
			]pre
		]div
		[div class=tab-pane fade id=tabs-800-3 
			[p 
				"This program simulates the slot machine in Space Quest 1 EGA.
				$LF
				"All probabilities were discovered by decompilation of SQ1 using AGI Studio.
				$LF
				"The resulting ratio of successes to trials appears to confirm the value given
				$LF
				"by the slot machine solver program (0.00666, 1 in 150). If 
				[tt 
					"bz
				]tt
				" is set to 40 and the
				$LF
				"success point at 250, the ratio drops to about 0.0062 (1 in 160).
				$LF
			]p
			[p 
				"sq1slotmachine2.cc:
				$LF
			]p
			[pre 
				[code class=language-c_white 
					"#include <stdio.h>
					$LF
					"#include <stdlib.h>
					$LF
					"#include <time.h>
					$LF
					"#define LIMIT 1000000
					$LF
					$LF
					"int main()
					$LF
					"{
					$LF
					"    long i,success=0, skulls=0;
					$LF
					"    int bz, c, bet;
					$LF
					"    srand(unsigned(time(0)));
					$LF
					$LF
					"    for(i=1;i<=LIMIT;i++)
					$LF
					"    {
					$LF
					"        bz=42;
					$LF
					"        while(1)
					$LF
					"        {
					$LF
					"        c=rand()%100+1;
					$LF
					"        bet=3;
					$LF
					$LF
					"        if (c<=2) {skulls++; bz=0;}
					$LF
					"        else if (c<=70) bz-=bet;
					$LF
					"        else if (c<=77) bz+=2*bet;
					$LF
					"        else if (c<=81) bz+=4*bet;
					$LF
					"        else if (c<=83) bz+=9*bet;
					$LF
					"        else if (c<=84) bz+=19*bet;
					$LF
					$LF
					"        if (bz<=0) break;
					$LF
					"        if (bz>=249) {success++; break;}
					$LF
					"        }
					$LF
					"    }
					$LF
					$LF
					"    printf("%d %f %d",success, ((float)success)/LIMIT, skulls);
					$LF
					"    getchar();
					$LF
					"    return(0);
					$LF
					"}
					$LF
				]code
			]pre
		]div
		[div class=tab-pane fade id=tabs-800-4 
			[p 
				"This program implements a Markov matrix representation for the slot machine
				$LF
				"in Space Quest 1 EGA.
				$LF
				"All probabilities were discovered by decompilation of SQ1 using AGI Studio.
				$LF
				"Repeatedly squaring this matrix 50 times
				$LF
				"(way too much, 15 is sufficient) brings the matrix to a limit (single-precision floating point). Note that there
				$LF
				"are two absorbing states: 0 (lose) and 83 (win). All other states represent
				$LF
				"buckazoids (currency in SQ1) divided by 3.
				$LF
			]p
			[p 
				"Starting from 42 buckazoids, the probability of making it to 249 buckazoids is about
				$LF
				"0.006656957131849 (1 in 150.218783175827).
				$LF
			]p
			[p 
				"The theory behind the matrix representation is that there is a base matrix which represents 1-step (2^0-step) probability from one state to another. Every time the matrix is squared, it doubles the number of steps from n-step probability to 2*n-step probability. Squaring the base matrix 50 times results in a 2^50-step probability matrix. For most matrices, the probability values reach a limit.
				$LF
			]p
			[p 
				"Read the resulting output file with word-wrap off. The row numbers are prior states and the column numbers are final states. Only the final states 0 and 83 should have positive numbers.
				$LF
			]p
			[p 
				"sq1slotmachine.cc
				$LF
			]p
			[pre 
				[code class=language-c_white 
					"#include <stdio.h>
					$LF
					$LF
					"void initarray();
					$LF
					"int min(int a, int b);
					$LF
					"void squarearray();
					$LF
					"void printarray();
					$LF
					$LF
					"FILE *fp;
					$LF
					"double m[84][84];
					$LF
					$LF
					"int main()
					$LF
					"{
					$LF
					"    int x;
					$LF
					"    if(!(fp=fopen("wxyz2.txt","w")))
					$LF
					"       return 1;
					$LF
					$LF
					"    initarray();
					$LF
					"    for(x=1;x<=50;x++)
					$LF
					"        squarearray();
					$LF
					"    printarray();
					$LF
					$LF
					"    return(0);
					$LF
					"}
					$LF
					$LF
					"void printarray()
					$LF
					"{
					$LF
					"     //header
					$LF
					"     int i,j;
					$LF
					"     fprintf(fp,"\t");
					$LF
					"     for(i=0;i<=83;i++)
					$LF
					"        fprintf(fp,"%d\t",i);
					$LF
					"     fprintf(fp,"\n");
					$LF
					$LF
					"     //rest
					$LF
					"     for(i=0;i<=83;i++)
					$LF
					"     {
					$LF
					"        fprintf(fp, "%d\t",i);
					$LF
					"        for(j=0;j<=83;j++)
					$LF
					"            fprintf(fp, "%.5f\t",m[i][j]);
					$LF
					"        fprintf(fp, "\n");
					$LF
					"     }
					$LF
					"}
					$LF
					$LF
					"void initarray()
					$LF
					"{
					$LF
					"     int i,j;
					$LF
					"     for(i=0;i<=83;i++)
					$LF
					"        for(j=0;j<=83;j++)
					$LF
					"           m[i][j]=0;
					$LF
					$LF
					"     m[0][0]=1; //lose
					$LF
					"     m[83][83]=1; //win
					$LF
					"     for(i=1;i<83;i++)
					$LF
					"     {
					$LF
					"        m[i][0]+=0.02; //skulls
					$LF
					"        m[i][i-1]+=0.68; //nothing
					$LF
					"        m[i][i]+=0.16; //1 cherry
					$LF
					"        m[i][min(83,i+2)]+=0.07; //2 cherries
					$LF
					"        m[i][min(83,i+4)]+=0.04; //3 cherries
					$LF
					"        m[i][min(83,i+9)]+=0.02; //eyes
					$LF
					"        m[i][min(83,i+19)]+=0.01; //diamonds
					$LF
					"     }
					$LF
					"}
					$LF
					$LF
					"void squarearray()
					$LF
					"{
					$LF
					"     int i,j,k;
					$LF
					"     double n[84][84];
					$LF
					"     double sum;
					$LF
					"     for(i=0;i<=83;i++)
					$LF
					"        for(j=0;j<=83;j++)
					$LF
					"        {
					$LF
					"           sum=0;
					$LF
					"           for(k=0;k<=83;k++)
					$LF
					"               sum+=m[i][k]*m[k][j];
					$LF
					"           n[i][j]=sum;
					$LF
					"        }
					$LF
					$LF
					"     for(i=0;i<=83;i++)
					$LF
					"        for(j=0;j<=83;j++)
					$LF
					"           m[i][j]=n[i][j];
					$LF
					"}
					$LF
					$LF
					"int min(int a, int b)
					$LF
					"{
					$LF
					"    return ((a<b)?a:b);
					$LF
					"}
					$LF
				]code
			]pre
		]div
		[div class=tab-pane fade id=tabs-800-5 
			[p 
				"This program calculates a score for an .smv based on left-right-left wobbling.
				$LF
			]p
			[p 
				"Left-right-left scores 1 point.
				$LF
				"Right-left-right scores 1 point.
				$LF
				"(Left+right)=right
				$LF
			]p
			[pre 
				[code class=language-c_white 
					"#include <stdio.h>
					$LF
					"#include <string.h>
					$LF
					$LF
					"long rlong(FILE *f);
					$LF
					$LF
					"int main (int argc, char *argv[])
					$LF
					"{
					$LF
					"    FILE *fp;
					$LF
					"    char fn[200];
					$LF
					"    unsigned int x,y,z;
					$LF
					"    long score=0, offset;
					$LF
					"    
					$LF
					"    if(argc<2)
					$LF
					"    {
					$LF
					"              printf("sdikuthw");
					$LF
					"              getchar();
					$LF
					"              return 1;
					$LF
					"    }
					$LF
					$LF
					"    
					$LF
					"    strncpy(fn,argv[1],180);
					$LF
					"    if((fp = fopen(fn,"rb"))==NULL)
					$LF
					"    {
					$LF
					"           printf("%s",fn);
					$LF
					"           getchar();
					$LF
					"           return 1;
					$LF
					"    }
					$LF
					"           
					$LF
					"    fseek(fp,0x1C,0); 
					$LF
					"    
					$LF
					"    offset=rlong(fp);
					$LF
					"        
					$LF
					"    fseek(fp,offset,0);
					$LF
					"    
					$LF
					"        x=fgetc(fp);
					$LF
					"    x=256*x+fgetc(fp);
					$LF
					"        y=fgetc(fp);
					$LF
					"    y=256*y+fgetc(fp);
					$LF
					"        z=fgetc(fp);
					$LF
					"    z=256*z+fgetc(fp);
					$LF
					$LF
					"    while(1)
					$LF
					"    {
					$LF
					"            if ( ( ((x&3)==1)&&((y&3)==2)&&((z&3)==1) ) || ( ((x&3)==2)&&((y&3)==1)&&((z&3)==2) ) )
					$LF
					"               score++;
					$LF
					"            if ( ( ((x&3)==3)&&((y&3)==2)&&((z&3)==3) ) || ( ((x&3)==2)&&((y&3)==3)&&((z&3)==2) ) )
					$LF
					"               score++; //leftright
					$LF
					"            x=y;
					$LF
					"            y=z;
					$LF
					"            z=fgetc(fp);
					$LF
					"            z=256*z+fgetc(fp);
					$LF
					"            if(feof(fp))
					$LF
					"             break;
					$LF
					"    }
					$LF
					"            
					$LF
					"    printf("%d",score);
					$LF
					"    
					$LF
					"    getchar();
					$LF
					"    return(0);
					$LF
					"}
					$LF
					$LF
					"long rlong(FILE *f)
					$LF
					"{
					$LF
					"     unsigned long d=0;
					$LF
					"     
					$LF
					"     d+=fgetc(f);
					$LF
					"     d+=fgetc(f)*256;
					$LF
					"     d+=fgetc(f)*256*256;
					$LF
					"     d+=fgetc(f)*256*256*256;
					$LF
					"     
					$LF
					"     return(d);
					$LF
					"}
					$LF
					"     
					$LF
				]code
			]pre
		]div
		[div class=tab-pane fade id=tabs-800-6 
			[p 
				"This program generates a colorful 80x80 .bmp.
				$LF
			]p
			[p 
				"rainbow.cc:
				$LF
			]p
			[pre 
				[code class=language-c_white 
					"#include <stdio.h>
					$LF
					"#include <math.h>
					$LF
					"#include <string.h>
					$LF
					$LF
					"long hue(int angle, float r);
					$LF
					"float arg(float x, float y);
					$LF
					"float rad(float x, float y);
					$LF
					$LF
					"int main()
					$LF
					"{
					$LF
					"    FILE *f;
					$LF
					"    int x,y;
					$LF
					"    float zarg, zrad;
					$LF
					"    long h;
					$LF
					"    unsigned char red,blue,green;
					$LF
					"    char header[]={0x42,0x4d,0x0a,0xb7,0x02,0,0,0,0,0,
					$LF
					"    0x36,0,0,0,0x28,0,0,0,0x50,0,0,0,0x50,0,0,0,
					$LF
					"    0x01,0,0x18,0,0,0,0,0,0xd4,0xb6,0x02,
					$LF
					"    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0};
					$LF
					"    
					$LF
					"    if(!(f=fopen("rainbow.bmp","wb")))
					$LF
					"    {
					$LF
					"      printf("fail");
					$LF
					"      getchar();
					$LF
					"      return(1);
					$LF
					"    }
					$LF
					"    
					$LF
					"    fwrite(header,1,54,f);
					$LF
					"    
					$LF
					"    for(x=1;x<=80;x++)
					$LF
					"    {
					$LF
					"    for(y=1;y<=80;y++)
					$LF
					"    {
					$LF
					"       zarg=arg((float)(x-40),(float)(y-40));
					$LF
					"       zrad=rad((float)(x-40),(float)(y-40));
					$LF
					"       h=hue((int)(((float)240/360)*zarg),zrad/40);
					$LF
					"       red=h%256;
					$LF
					"       h/=256;
					$LF
					"       green=h%256;
					$LF
					"       h/=256;
					$LF
					"       blue=h%256;
					$LF
					"       fputc(blue,f);
					$LF
					"       fputc(green,f);
					$LF
					"       fputc(red,f);
					$LF
					"       
					$LF
					"    }
					$LF
					"    }
					$LF
					"    
					$LF
					"    /*
					$LF
					"    float s;
					$LF
					"    s=arg(1,1);
					$LF
					"    printf("%f\n",s);
					$LF
					"    
					$LF
					"    printf("%X",hue(111));
					$LF
					"    */
					$LF
					"    
					$LF
					"    fclose(f);
					$LF
					"    getchar();
					$LF
					"    
					$LF
					"    
					$LF
					"    return(0);
					$LF
					"    
					$LF
					"}
					$LF
					$LF
					$LF
					"float rad(float x, float y)
					$LF
					"{
					$LF
					"      return(sqrt(x*x+y*y));
					$LF
					"}
					$LF
					$LF
					"float arg(float x, float y)
					$LF
					"{
					$LF
					"      float c;
					$LF
					"      if(x==0 && y==0) return(0);
					$LF
					"      c=(180/3.141592654)*acos(x/sqrt(x*x+y*y));
					$LF
					"      if(y>=0) return(c); else return(360-c);
					$LF
					"}
					$LF
					$LF
					"long hue(int angle, float r)
					$LF
					"{
					$LF
					"     unsigned char red=0, blue=0, green=0;
					$LF
					"     unsigned long s;
					$LF
					"     if(angle>=0 && angle<40) //r g^ b
					$LF
					"     {
					$LF
					"                 red=255;
					$LF
					"                 green=(char)(((float)255/40)*angle);
					$LF
					"                 blue=0;
					$LF
					"     }
					$LF
					"     
					$LF
					"     if(angle>=40 && angle<80) //rv g b
					$LF
					"     {
					$LF
					"                 red=(char)(((float)255/40)*(80-angle));
					$LF
					"                 green=255;
					$LF
					"                 blue=0;
					$LF
					"     }
					$LF
					"     
					$LF
					"     if(angle>=80 && angle<120) //r g b^
					$LF
					"     {
					$LF
					"                 red=0;
					$LF
					"                 green=255;
					$LF
					"                 blue=(char)(((float)255/40)*(angle-80));
					$LF
					"     }
					$LF
					"     
					$LF
					"     if(angle>=120 && angle<160) //r gv b
					$LF
					"     {
					$LF
					"                 red=0;
					$LF
					"                 green=(char)(((float)255/40)*(160-angle));
					$LF
					"                 blue=255;
					$LF
					"     }
					$LF
					"     
					$LF
					"     if(angle>=160 && angle<200) //r^ g b
					$LF
					"     {
					$LF
					"                 red=(char)(((float)255/40)*(angle-160));
					$LF
					"                 green=0;
					$LF
					"                 blue=255;
					$LF
					"     }
					$LF
					"     
					$LF
					"     if(angle>=200 && angle<240) //r g bv
					$LF
					"     {
					$LF
					"                 red=255;
					$LF
					"                 green=0;
					$LF
					"                 blue=(char)(((float)255/40)*(240-angle));
					$LF
					"     }
					$LF
					"     
					$LF
					"     if(r>=0 && r<1)
					$LF
					"     {
					$LF
					"             blue=(char)(blue*r);
					$LF
					"             green=(char)(green*r);
					$LF
					"             red=(char)(red*r);
					$LF
					"     }
					$LF
					"     
					$LF
					"     if(r>=1 && r<2)
					$LF
					"     {
					$LF
					"             blue=(char)(255-(255-blue)*(2-r));
					$LF
					"             green=(char)(255-(255-green)*(2-r));
					$LF
					"             red=(char)(255-(255-red)*(2-r));
					$LF
					"     }
					$LF
					"             
					$LF
					"     
					$LF
					"     
					$LF
					"     s=blue;
					$LF
					"     s=s*256+green;
					$LF
					"     s=s*256+red;
					$LF
					"     
					$LF
					"     return(s);
					$LF
					"     
					$LF
					"}
					$LF
				]code
			]pre
		]div
		[div class=tab-pane fade id=tabs-800-7 
			[p 
				(__wikiLink|user:Bisqwit)
				": May I humbly suggest the following refactoring for that code:
				$LF
			]p
			[pre 
				[code class=language-c_white 
					"#include <complex>
					$LF
					"#include <cstdio>
					$LF
					$LF
					"/* hsv_to_rgb:
					$LF
					" *  Converts from HSV (hue, saturation, value) colorspace
					$LF
					" *  to RGB values (red, green, blue).
					$LF
					" */
					$LF
					"template<typename IntType>
					$LF
					"static void hsv_to_bgr
					$LF
					"    (double h, double s, double v,
					$LF
					"     IntType bgr[3])
					$LF
					"{
					$LF
					"    v *= 255.0;
					$LF
					$LF
					"    if (s == 0.0)
					$LF
					"        bgr[0] = bgr[1] = bgr[2] = IntType(v);
					$LF
					"    else
					$LF
					"    {
					$LF
					"        while (h < 0)h += 360;
					$LF
					"        h = fmod(h, 360.0) / 60.0;
					$LF
					"        int i = (int)h;
					$LF
					"        double frac = h - i;
					$LF
					"        double p = v - v * s, qt = v * s * frac;
					$LF
					"        
					$LF
					"        bgr[ (10-i)%6/2 ] = IntType(v); // max  
					$LF
					"        bgr[  (7-i)%6/2 ] = IntType(p); // min
					$LF
					"        bgr[    (i+1)%3 ] = IntType(
					$LF
					"            (i&1) ? v - qt    // max downto min
					$LF
					"                  : p + qt ); // min   upto max
					$LF
					"    }
					$LF
					"}
					$LF
					$LF
					"int main()
					$LF
					"{
					$LF
					"    static const char fn[] = "rainbow.tga";
					$LF
					"    const int Xdim = 80, Ydim = 80;
					$LF
					"    
					$LF
					"    std::FILE* fp = fopen(fn, "wb");
					$LF
					"    if(!fp) { perror(fn); return -1; }
					$LF
					"    
					$LF
					"    static const unsigned char tgaBuf[] = {
					$LF
					"        0,0,2, 0,0, 0,0, 0, 0,0, 0,0,
					$LF
					"        Xdim&255, Xdim>>8,
					$LF
					"        Ydim&255, Ydim>>8,
					$LF
					"        24,32};
					$LF
					"    
					$LF
					"    std::fwrite(tgaBuf, 1, sizeof(tgaBuf), fp);
					$LF
					"    
					$LF
					"    for(int y=0; y<Ydim; ++y)
					$LF
					"        for(int x=0; x<Xdim; ++x)
					$LF
					"        {
					$LF
					"            std::complex<double> c ( 1.0-y*2.0/Ydim, x*2.0/Xdim-1.0 );
					$LF
					"            /* Using complex numbers here because it hides the trigonometric
					$LF
					"             * calculations (angle, distance) rather nicely.
					$LF
					"             * Note: Y axis is reversed because Tga file origin is in lower left corner.
					$LF
					"             */
					$LF
					"            double h = std::arg(c) * 180.0 / 3.141592653; /* Radians to degrees */
					$LF
					"            double v = std::abs(c);
					$LF
					"            double s = 1.0;
					$LF
					"            if(v > 1.0)
					$LF
					"            {
					$LF
					"                s = std::max(0.0, s - (v-1.0) / 0.414); // vary saturation for corners (optional)
					$LF
					"                v = 1.0; // clamp brightness to maximum
					$LF
					"            }
					$LF
					"            
					$LF
					"            unsigned char bgr[3] /* blue, green, red */;
					$LF
					"            hsv_to_bgr(h, s, v, bgr);
					$LF
					$LF
					"            std::fwrite(bgr, 1, 3, fp);
					$LF
					"        }
					$LF
					"    std::fclose(fp);
					$LF
					"}
					$LF
				]code
			]pre
		]div
	]div
]div
