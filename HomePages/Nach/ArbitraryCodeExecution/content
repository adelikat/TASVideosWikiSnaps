7
[p 
	"A popular new category has been created on the site movies which is getting a lot of attention - 
	(__wikiLink|Movies-C3050Y|Executes arbitrary code)
	". This category has been seeing a lot of arguments, questions, and speculation as to what qualifies and what doesn't.
	$LF
]p
[p 
	"After seeing the issues, on September 4 2014, I decided to 
	[a href=/forum/t/15775 
		"create a thread
	]a
	" which presents a very Grey situation and elicit responses in an extreme case to cut across the various viewpoints and determine what the key factors are.
	$LF
]p
[p 
	"The summary gathered so far is as follows:
	$LF
]p
[ul 
	[li 
		" There must be 
		[em 
			"arbitrary code
		]em
		" added from a source which is external to the game.
		$LF
		[ul 
			[li 
				" If the code is taken from elsewhere within the game itself, it's not 
				[em 
					"arbitrary
				]em
				".
				$LF
			]li
		]ul
		" The above must perform 
		[em 
			"arbitrary execution
		]em
		".
		$LF
		[ul 
			[li 
				" It should be capable of being able to perform any singular activity that the game itself would be able to perform from this point onwards. Otherwise, the execution isn't 
				[em 
					"arbitrary
				]em
				" enough.
				$LF
			]li
		]ul
		" Ideally, the exploit used should not be intentional.
		$LF
		[ul 
			[li 
				" For a counter example, exploiting Mario being pushed out of walls in Super Mario Bros. is a feature, not a bug, as it's designed to prevent Mario from being trapped.
				$LF
			]li
			[li 
				" For another counter example, abusing Samus being knocked backwards at high speeds in a forward direction in Super Metroid is not a bug, as by design Samus is supposed to visually display damage this way.
				$LF
			]li
		]ul
	]li
]ul
[p 
	"This does leave some question if certain labels should be applied in certain cases, or if new labels should be created for the following scenarios:
	$LF
]p
[ul 
	[li 
		" Getting the instruction pointer of the game to point where it shouldn't, and get it to execute other code at this point.
		$LF
		[ul 
			[li 
				" More interesting is if it executes images and sound.
				$LF
			]li
			[li 
				" More interesting is if the instruction pointer is modified to execute code in a misaligned fashion.
				$LF
			]li
		]ul
		" The 
		[em 
			"arbitrary code
		]em
		" being ran is in a Virtual Machine or interpreter being ran and managed by the game's engine, thus having much less access as to 
		[b 
			"what
		]b
		" it can affect in the game, or limited as to 
		[b 
			"how
		]b
		" it can affect it.
		$LF
		[ul 
			[li 
				" Interesting to consider how one system within another should be viewed when the internal system cannot affect the outer one, and the internal one is the one being exploited. Do we look at the internal system as being the one qualifying the staging point for 
				[em 
					"arbitrary execution
				]em
				" and thus qualifying, or do we look at the outer system that continued executing normally?
				$LF
				[ul 
					[li 
						" For example, a Gameboy game being ran within the Super Gameboy would qualify for this concept, and it should be noted that DMG code executing in this scenario does have the capability to modify the SNES's RAM and its instruction pointer. I imagine similar scenarios do exist though where the above concept would apply yet the inner system is unable to affect the outer one.
						$LF
					]li
				]ul
			]li
		]ul
	]li
]ul
