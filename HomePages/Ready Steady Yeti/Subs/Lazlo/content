12
[div class=p 
	[em 
		"This is only a 
		[b 
			"draft
		]b
		" of a future submission to the site. I don't like writing all this on-spot, so I want this to be a cumulative ordeal. That's why I'm posting it here.
	]em
	$LF
]div
[div class=p 
	"Here is a temp encode of the run. The encode is not of very high quality, I know, but it will only be kept up until the movie is published.
	$LF
]div
[h2 id=Introduction 
	" Introduction
	$LF
]h2
[div class=p 
	"I am sadistic and love to torture TAS viewers with really long and painfully boring games. 
	[em 
		"Camp Lazlo: Leaky Lake Games
	]em
	" takes that cake quite well. Its music is well orchestrated, the things to do are various, and its graphics are quite decent for its time, but that only merely disguises this game's low gameplay quality and boringness. But that's exactly why I LOVE THIS GAME SO MUCH!!! <3
	$LF
]div
[div class=p 
	"You're probably asking me...why! My answer to you, in one word is...NOSTALGIA!!!!!!!! Yup, this is ANOTHER game I owned as a kid and that brings back cute and lovely childhood memories.
	$LF
]div
[h3 id=Extramovieinformation 
	" Extra movie information
	$LF
]h3
[ul 
	[li 
		" Core: mGBA
		$LF
	]li
	[li 
		" Left+Right/Up+Down allowed
		$LF
	]li
	[li 
		" The input file ends on the last frame where input is needed to skip to the ending credits (that would be, the frame when the last story text is skipped).
		$LF
	]li
]ul
[h3 id=Goals 
	" Goals
	$LF
]h3
[ul 
	[li 
		" Aims for fastest time
		$LF
	]li
	[li 
		" any% completion
		$LF
	]li
	[li 
		" Manipulates luck
		$LF
	]li
]ul
[h2 id=Aboutthegame 
	" About the game
	$LF
]h2
[div class=p 
	[em 
		"Camp Lazlo: Leaky Lake Games
	]em
	" is based on the well-liked Cartoon Network animated series 
	[em 
		[a class=extlink href=https://en.wikipedia.org/wiki/Camp_Lazlo rel=nofollow 
			"Camp Lazlo
		]a
	]em
	". The show follows the adventures of three Bean Scouts, Lazlo the Monkey, Raj the Elephant, and Clam the...Rhinoceros???, as they reek havoc and cause mischief across their summer camp. The show was always particularly cute to me because it is the only animated series I know that has a basis on the Scouting movement, which I am proudly a part of myself. Seriously, the show is really good; I recommend giving it a watch.
	$LF
]div
[div class=p 
	"The game, which is not nearly as good as the show, was published in 2006 as a tie-in to the show which first aired a year earlier in 2005. The game is based on settings and events from the show, often from specific episodes. The game is played chronologically, and the story and events unfold as you play the game further. In the game's plot, Lazlo, Raj, and Clam, our three main characters, are trying to get into the titular Leaky Lake Games and win the games so they can get a trophy.
	$LF
]div
[h3 id=Minigames 
	" Minigames
	$LF
]h3
[div class=p 
	"The main focus of this game is the minigames, of which there are 15. The first 12 are (according to the plot) preliminary minigames to prove your worth for the final 3 minigames which are part of the Leaky Lake Games competition. Minigames are mostly simplistic but a few involve RNG. Several of the minigames are so simple that they just give you a sequence of buttons to press in order. That's just lazy on the developers' part... Activities range from tug-of-war to sitting on giant pinecones to swimming in the lake to unicorn races.
	$LF
]div
[div class=p 
	"Each minigame earns you a badge, which allows you to progress to the next minigame. Minigames are done in chronological order, but can be revisited later after won (we obviously don't do this in the TAS because time).
	$LF
]div
[h3 id=Overworld 
	" Overworld
	$LF
]h3
[div class=p 
	"There's a lot of walking around and talking to people going on in the map overworld. This is legit more than 50% of gameplay. The minigames aren't so bad, but the overworld is what makes the game EXTREMELY boring. Even Clam himself, one of the characters in the game, in his dialogue criticizes the GAME ITSELF several times ("more delays!") for making you walk around the map to get numerous items and talk to numerous people like a chore. So basically the developers KNEW how boring this was, yet filled more than half the game with it. And that, my friends, is truly dishonorable. Most often we assume developers make games bad out of some ignorance, but the writers are BLATANTLY TELLING US that they made the game bad ON PURPOSE! This is truly shameful.
	$LF
]div
[div class=p 
	"Anyway, this is mostly item collecting and talking to people. In the overworld you are led around by a compass to get to where you need to go. Every time you complete a necessary action, the compass does a spinning animation (most of the time) and leads to the next direction you need to go. This means that the game is a WALKTHROUGH OF ITSELF!!! I mean it's actually a relief, because the maps are hard to follow without the compass, but I didn't think they'd actually put something like that in a game!
	$LF
]div
[div class=p 
	"In most cases, you HAVE to do EVERYTHING in the exact order the game presents or the game will not allow you to progress. Talking to characters a few steps early is a no-go. In most cases (with exceptions mentioned below in the specifics), you have to do everything step-by-step and can't just go from step 1 to step 5.
	$LF
]div
[div class=p 
	"You can play as Lazlo, Raj, or Clam in the game, depending on which part of the story you're in; they cannot be switched out at will.
	$LF
]div
[h2 id=UsefulRAMaddresses 
	" Useful RAM addresses
	$LF
]h2
[h2 id=Stage-by-stagecommentary 
	" Stage-by-stage commentary
	$LF
]h2
[h3 id=Menuandoverworld1 
	" Menu and overworld 1
	$LF
]h3
[ul 
	[li 
		" Skipping text is straightforward at the beginning, except I do a glitch at the beginning which allows me to skip seeing both the opening title screen AND the file select menu. This saves about a second or two in itself. Pretty amazing how much can just be done in simple menuing.
		$LF
	]li
	[li 
		" We start off with simple text from Scoutmaster Lumpus, but what happens between looks weird doesn't it? Lemme explain. So there are actually TWO required times you have to talk to Lumpus in the same instance. After the first text block, the compass does an animation to point right back towards Lumpus suggesting you should talk to him again (which confused me first time playing this). But there's always a short delay that allows input between ending text block and compass animation. During this delay, I moved to the right for 2 frames and then pressed A EARLIER than the compass animation started. I did this so that I was a few pixels further ahead AND the SECOND text would appear sooner (right after the compass animation was over). However, I only could move right for 2 frames, or else pressing A wouldn't activate the second text block.
		$LF
	]li
	[li 
		" - This is a trick that I use quite a lot in this run. If you start going in any direction the frame after pressing A to skip the last block of text, it's faster than just holding it down while you press it beforehand. Also, similar to the above, I go a bit ahead before the compass animation to save time. This is a trick that is used 
		[b 
			"a lot
		]b
		" in this run, so I won't mention it again. I use it for pretty much every text block in the game.
		$LF
	]li
	[li 
		" So you have to look for three flags with your compass. This is sort of like a training exercise for using your compass, which is easy anyway. This had no real purpose other than that. But anyway it's required, and it's required to be done IN ORDER! That's the most annoying part.
		$LF
	]li
	[li 
		" - Here's an interesting fact: Whenever you enter this particular room of the game and hit that particular X position from any Y value, there's ALWAYS one lag frame. This is interesting, but why does this happen?
		$LF
	]li
	[li 
		" You HAVE to talk to Lumpus again here.
		$LF
	]li
	[li 
		" Go to cabin, talk to the nearest friend (which is Raj) to start the minigame.
		$LF
	]li
]ul
[h3 id=HotLava 
	" Hot Lava
	$LF
]h3
[ul 
	[li 
		" Time: 3:28 (12526 in the timer's RAM address)
		$LF
	]li
]ul
[div class=p 
	"This is the only platforming stage in the game. In this, you have to go back and forth between this platforming stage 10 times, and once you do it all 10 times within the time limit you complete it. If you fall off the platforms, you're sent back to the bed with the last flag you hit. I thought I may be able to manipulate this somehow to just teleport to the other side, but was not successful with these attempts. The game decides where you fall based on which flag you hit, not which bed you touched. Even if you fall off the other bed and DON'T touch the flag you still go back to the opposite bed, and not the bed you fell off of.
	$LF
]div
[div class=p 
	"This is the fastest POSSIBLE time in which this level can be completed, which should not be a surprise to you. Some of the platforms in the minigame move up and down, and if a platform is down too far it may be impossible to get up to the next platform without waiting. In the TAS, we're lucky enough never to encounter this problem, which would waste a bit of time in non-TAS speedruns if a wrong move is made. I was able to go straight through the level back and forth, which is actually pretty impressive for what it's worth; it's a bit harder than it looks.
	$LF
]div
[div class=p 
	"Where the frame perfection comes in is not necessarily that we went straight through the level all 10 times, but that we turned at the flags on just the right frames.
	$LF
]div
[div class=p 
	"Just to make this a little more entertaining (otherwise it would be extremely monotonous and boring, if it isn't still), I used slightly different jump patterns for every round. I also show off that you can sometimes jump over one platform and onto the next, skipping a platform. Of course this doesn't save time since it all happens at the same speed, but still a...slightly...neat trick. If you want an intellectual challenge, see if you can catch which patterns I used.
	$LF
]div
[h3 id=Overworld2 
	" Overworld 2
	$LF
]h3
[ul 
	[li 
		" This is where the character is first switched to Raj. The VERY first thing I do here is after getting the patch, I move Lazlo above Raj, because otherwise Lazlo's new AI would move in the way of Raj while he's trying to move, which wastes time.
		$LF
	]li
	[li 
		" Talk to Slinkman.
		$LF
	]li
	[li 
		" Talk to Nurse.
		$LF
	]li
	[li 
		" Get coffee.
		$LF
	]li
	[li 
		" Talk to Nurse.
		$LF
	]li
	[li 
		" Talk to Samson.
		$LF
	]li
	[li 
		" Get glasses.
		$LF
	]li
	[li 
		" Talk to Samson.
		$LF
	]li
	[li 
		" Talk to the Lemmings, start minigame.
		$LF
		[ul 
			[li 
				" Note: I could not manipulate any lemmings to come closer to me fast enough on this frame, I tried for about an hour to get that to work but it didn't... The problem is with the rightmost lemming; it doesn't seem to like to move very much on the first turn for some reason.
				$LF
			]li
		]ul
	]li
]ul
[h3 id=ForestCleanup 
	" Forest Cleanup
	$LF
]h3
[ul 
	[li 
		" Time left: 2:38
		$LF
	]li
]ul
[div class=p 
	"This minigame is one I found to be pretty interesting. The goal of the minigame is to clean up at least 10 trees. However, there are actually 16 trees that you still can clean. You can still win the minigame if you clean <=10 / >16, but you would have to wait until the time is fully up. If you clean all 16, though, you can win the minigame immediately after the 16th is cleaned. So, in a speedrun, cleaning all 16 trees is the goal.
	$LF
]div
[div class=p 
	"You clean the trees by first filling up your bucket, and then going to the paint splatter, locking into place, and scrubbing the tree. You scrub the tree by doing a clockwise sequence of button presses in any order on the D-pad. However, certain orders had to be avoided due to time loss.
	$LF
]div
[div class=p 
	"I start off the minigame doing a glitch where Raj is facing the opposite direction of the bucket while filling up the water meter. Hope that second of time was amusing to you guys! Unfortunately, I couldn't do the glitch more than that first time.
	$LF
]div
[div class=p 
	"A full water meter doesn't completely empty after cleaning one full tree, so it is possible to do some work on the next tree as well. Because of this, I considered many patterns of which trees to clean and when. These were the following:
	$LF
]div
[div class=p 
	"(l represents doing one tree in one turn, x represents doing one tree and then half of another tree in one turn.)
	$LF
]div
[div class=p 
	"l
	"[
	[a id=1 
	]a
	[a href=#r1 
		"1
	]a
	"]
	" l
	"[
	[a id=2 
	]a
	[a href=#r2 
		"2
	]a
	"]
	" l
	"[
	[a id=3 
	]a
	[a href=#r3 
		"3
	]a
	"]
	" l
	"[
	[a id=4 
	]a
	[a href=#r4 
		"4
	]a
	"]
	" l
	"[
	[a id=5 
	]a
	[a href=#r5 
		"5
	]a
	"]
	" l
	"[
	[a id=6 
	]a
	[a href=#r6 
		"6
	]a
	"]
	" l
	"[
	[a id=7 
	]a
	[a href=#r7 
		"7
	]a
	"]
	" l
	"[
	[a id=8 
	]a
	[a href=#r8 
		"8
	]a
	"]
	" l
	"[
	[a id=9 
	]a
	[a href=#r9 
		"9
	]a
	"]
	" l
	"[
	[a id=10 
	]a
	[a href=#r10 
		"10
	]a
	"]
	" l
	"[
	[a id=11 
	]a
	[a href=#r11 
		"11
	]a
	"]
	" l
	"[
	[a id=12 
	]a
	[a href=#r12 
		"12
	]a
	"]
	" l
	"[
	[a id=13 
	]a
	[a href=#r13 
		"13
	]a
	"]
	" l
	"[
	[a id=14 
	]a
	[a href=#r14 
		"14
	]a
	"]
	" l
	"[
	[a id=15 
	]a
	[a href=#r15 
		"15
	]a
	"]
	" l
	"[
	[a id=16 
	]a
	[a href=#r16 
		"16
	]a
	"]
	$LF
]div
[div class=p 
	"Doing them all one at a time gets me 16 turns.
	$LF
]div
[div class=p 
	"x
	"[
	[a id=1 
	]a
	[a href=#r1 
		"1
	]a
	"]
	"(12) x
	"[
	[a id=2 
	]a
	[a href=#r2 
		"2
	]a
	"]
	"(23) x
	"[
	[a id=3 
	]a
	[a href=#r3 
		"3
	]a
	"]
	"(34) x
	"[
	[a id=4 
	]a
	[a href=#r4 
		"4
	]a
	"]
	"(45) x
	"[
	[a id=5 
	]a
	[a href=#r5 
		"5
	]a
	"]
	"(56) x
	"[
	[a id=6 
	]a
	[a href=#r6 
		"6
	]a
	"]
	"(67) x
	"[
	[a id=7 
	]a
	[a href=#r7 
		"7
	]a
	"]
	"(78) x
	"[
	[a id=8 
	]a
	[a href=#r8 
		"8
	]a
	"]
	"(89) x
	"[
	[a id=9 
	]a
	[a href=#r9 
		"9
	]a
	"]
	"(9,10) x
	"[
	[a id=10 
	]a
	[a href=#r10 
		"10
	]a
	"]
	"(10,11) x
	"[
	[a id=11 
	]a
	[a href=#r11 
		"11
	]a
	"]
	"(11,12) x
	"[
	[a id=12 
	]a
	[a href=#r12 
		"12
	]a
	"]
	"(12,13) x
	"[
	[a id=13 
	]a
	[a href=#r13 
		"13
	]a
	"]
	"(13,14) x
	"[
	[a id=14 
	]a
	[a href=#r14 
		"14
	]a
	"]
	"(14,15) x
	"[
	[a id=15 
	]a
	[a href=#r15 
		"15
	]a
	"]
	"(15,16)
	$LF
]div
[div class=p 
	"Doing 1 and 1/2 at a time gets me 15 turns, which is less TURNS, but actually would end up wasting time because of the extra time it would take to go forward an extra step.
	$LF
]div
[div class=p 
	"Now I have also considered doing 1 and 1/2 per turn BACKWARDS so that you don't have to go forward so much, but 1) It still makes you have to waste extra time locking in and out 2) You wouldn't end up at the last one (I'm getting to that in the next paragraph).
	$LF
]div
[div class=p 
	"l
	"[
	[a id=1 
	]a
	[a href=#r1 
		"1
	]a
	"]
	" l
	"[
	[a id=2 
	]a
	[a href=#r2 
		"2
	]a
	"]
	" l
	"[
	[a id=3 
	]a
	[a href=#r3 
		"3
	]a
	"]
	" l
	"[
	[a id=4 
	]a
	[a href=#r4 
		"4
	]a
	"]
	" l
	"[
	[a id=5 
	]a
	[a href=#r5 
		"5
	]a
	"]
	" l
	"[
	[a id=6 
	]a
	[a href=#r6 
		"6
	]a
	"]
	" l
	"[
	[a id=7 
	]a
	[a href=#r7 
		"7
	]a
	"]
	" l
	"[
	[a id=8 
	]a
	[a href=#r8 
		"8
	]a
	"]
	" l
	"[
	[a id=9 
	]a
	[a href=#r9 
		"9
	]a
	"]
	" l
	"[
	[a id=10 
	]a
	[a href=#r10 
		"10
	]a
	"]
	" l
	"[
	[a id=11 
	]a
	[a href=#r11 
		"11
	]a
	"]
	" l
	"[
	[a id=12 
	]a
	[a href=#r12 
		"12
	]a
	"]
	" l
	"[
	[a id=13 
	]a
	[a href=#r13 
		"13
	]a
	"]
	" x
	"[
	[a id=14 
	]a
	[a href=#r14 
		"14
	]a
	"]
	"(14,15) x
	"[
	[a id=15 
	]a
	[a href=#r15 
		"15
	]a
	"]
	"(15,16)
	$LF
]div
[div class=p 
	"So that's 15 turns yet again. Why does this save time? Because, for one, we save one whole trip, but for two, by ending at the last one we also save the time of one extra trip back.
	$LF
]div
[h3 id=Overworld3 
	" Overworld 3
	$LF
]h3
[h3 id=TeamTeeter 
	" Team Teeter
	$LF
]h3
[h2 id=Conclusion 
	" Conclusion
	$LF
]h2
[div class=p 
	"You know... I actually TASed a lot of this while I was ACTUALLY camping IRL. Why? Because I was camping, and I thought hmmm Camp Lazlo...sets the mood quite well.
	$LF
]div
[h3 id=Whythisshouldbeaccepted 
	" Why this should be accepted
	$LF
]h3
[div class=p 
	"This TAS exhibits superhuman gameplay because:
	$LF
]div
[ul 
	[li 
		" Any instances of turning around in the overworld sections are done at the first frame possible, which would be impossible non-TAS.
		$LF
	]li
	[li 
		" There are some instances in the overworld of fitting into very tight spaces frame-perfectly, which can be hard non-TAS. Also, in many instances, I had to use frame-precise methods of determining exactly which, out of several mind you, overworld routes were frame-perfect over others. This is an example of superhuman precision.
		$LF
	]li
	[li 
		" In the first minigame, "Hot Lava", the turning after touching flags is done on the first frame possible every time. This would be almost physically impossible non-TAS.
		$LF
	]li
	[li 
		" In the second minigame, "Forest Cleanup", the paint is cleaned superhumanly fast by pressing a certain sequence of buttons on the first possible frames. I also did a lot of mathematical consideration and a bit of testing to determine the exact fastest route for the minigame.
		$LF
	]li
]ul
[h3 id=Externallinks 
	" External links
	$LF
]h3
[ul 
	[li 
		" YTC
		$LF
	]li
	[li 
		" OST
		$LF
	]li
]ul
