22
[p 
	[em 
		"This is only a 
		[b 
			"draft
		]b
		" of a future submission to the site. I don't like writing all this on-spot, so I want this to be a cumulative ordeal. That's why I'm posting it here.
	]em
	$LF
]p
[p 
	[b 
		"Judges and publishers/encoders: 
		[em 
			"please read the note at the bottom of this submission. It's a very important request.
		]em
	]b
	$LF
]p
[p 
	"Here is a temp encode of the run. The encode is not of very high quality, I know, but it will only be kept up until the movie is published.
	$LF
]p
[h2 id=Introduction
 
	" Introduction
	$LF
]h2
[p 
	"After several years of working and putting it off a lot, I've finally finished the two 
	[em 
		"That's So Raven
	]em
	" TASes. This is the any% TAS of the game; the 100% TAS submission can be found <> here. That TAS was submitted on the same day. This is one of those games I've had ever since I was a kid, so I remember it from my childhood.
	$LF
]p
[h3 id=Extramovieinformation
 
	" Extra movie information
	$LF
]h3
[ul 
	[li 
		" Core: mGBA
		$LF
	]li
	[li 
		" Left+Right/Up+Down allowed
		$LF
	]li
	[li 
		" The input file ends on the last frame where input is needed to skip to the ending credits (that would be, the frame when the last story text is skipped).
		$LF
	]li
]ul
[h3 id=Goals
 
	" Goals
	$LF
]h3
[ul 
	[li 
		" Aims for fastest time
		$LF
	]li
	[li 
		" any% completion (55%, according to the file select menu)
		$LF
	]li
	[li 
		" Heavy glitch abuse
		$LF
	]li
	[li 
		" Takes damage to save time
		$LF
	]li
	[li 
		" Genre: Action
		$LF
	]li
]ul
[h2 id=Aboutthegame
 
	" About the game
	$LF
]h2
[p 
	[em 
		"That's So Raven
	]em
	" is an overworld action game released in 2004 that is based on the 
	[a class=extlink href=https://en.wikipedia.org/wiki/That%27s_So_Raven rel=nofollow 
		"popular American sitcom of the same name
	]a
	". The game was developed by Vicarious Visions and published by Disney Interactive for the Game Boy Advance. This game is the first of two other video games based on the sitcom, including another one for GBA and a DS game. The game follows the storylines of a few of the episodes of the show.
	$LF
]p
[p 
	"Most of the game takes place inside various parts of Raven's high school (mostly hallways), though a few levels are set in a shopping mall. It's your typical American sitcom scenario where everyone in the high school are total brats running around causing all kinds of havoc. Yeah, people throwing books at random people, muffins, pizza, and all kind of shit. Trash cans lying in your way. Yeah, very dark. The player's speed in the game when running is pretty quick, but the game is still pretty repetitive in nature.
	$LF
]p
[h3 id=Levels
 
	" Levels
	$LF
]h3
[p 
	"There are four "episodes" in the game, each named after and based on a level of the TV series. Within each episode, there are 5 actual levels, each one representing a scene from the episode. 4 episodes with 5 levels means 20 levels in all.
	$LF
]p
[p 
	"The first four levels of each episode follow the same general gameplay mechanics and physics. The fifth level in each episode, however, is a minigame, each of which is unique to any other level in the game and does not work like the rest of the levels.
	$LF
]p
[p 
	"Out of the four levels, three of them are pretty basic. Some levels involve just getting to a certain goal, such as talking to someone at the end or reaching the door at the end, or they involve collecting items, such as gifts or coins.
	$LF
]p
[p 
	"Within each of these four levels, there is always a "hall pass monitor" level. In these levels, you have to go through the level while still avoiding the hall pass monitors. To avoid a hall pass monitor (within casual gameplay standards), you have to press Up and wait in one of those alleys of the wall until the monitor passes by. If a monitor sees you, and you have no hall passes, you lose health and get sent back to the door from which you entered the room you're in. There are, however, hall passes that you can pick up across the levels. If a hall monitor sees you, and you have any hall passes, you can go through him, no damage is taken, and you lose one of your hall passes. So, while this is quite a relief to not have to wait for one of those monitors, there really aren't many hall passes to use or find compared to the amount of monitors there are. So, in the TAS, I really had to go through hell to route for these levels to figure out which were the best instances to use the hall passes and which weren't. Also, though this is the intended medium of getting around monitors, there are lots of interesting glitches we use in this run to avoid their sight and still get by without waiting as long. The use of these glitches is explained in more detail below.
	$LF
]p
[h3 id=Gameplay
 
	" Gameplay
	$LF
]h3
[p 
	"This section goes over the 
	[em 
		"casual
	]em
	" gameplay mechanics and physics; 
	[b 
		"it does not cover the minigames at the end of each episode.
	]b
	" For those, see their specific sections below.
	$LF
]p
[p 
	"Throughout the entire game, you play as the titular Raven Baxter, a psychic teenager who participates in all the drama just like people do in any sitcom.
	$LF
]p
[p 
	"Unlike many other games (and even some other overworld games), there is no jumping/falling mechanic in this game. The whole game is like a flat grid. There is no platforming involved whatsoever. So all you can do is move around. 
	$LF
]p
[p 
	"By default, you walk (which we never do for any speed purposes in the TAS), but when you hold A you run. While you're running, instead of just having a general Up and Up+Left mechanic, it's a little bit more complicated than that. If you first hold left/right and then hold up, you go up much slower while going left. However, if you first hold up and then hold right/left, you can go up much faster.
	$LF
]p
[p 
	"You can press B to swing your purse. What purse-swinging does is it deflects items, such as cupcakes or pizza, that are thrown at you so that you don't get hurt. It doesn't hurt the enemies though. The purse is not a weapon; it can't hurt anyone.
	$LF
]p
[p 
	"Speaking of weapons, there are two types of weapons in this game: water bottles and perfume spray bottles. For both of these items, you have to collect ammunition around the levels before you can use them (and trust me, those things are 
	[em 
		"everywhere
	]em
	", so it's really not a big deal). You can only get up to 20 ammunition. Why they decided to stop at that number particularly, I'm not even too sure, but whatever, because it's more than enough. So, you press L to dump the water and R to spray the perfume. Water bottles are pretty much useless, and they only work on moving enemies. Basically how the water bottles work is an enemy has to move over the puddle and slip. The perfume is a lot more efficient. You have to go near an enemy, spray them, and they're stopped dead in their tracks. The perfume works on any enemy, including non-moving ones.
	$LF
]p
[p 
	"If an enemy is stopped, they're just immobilized; they don't disappear or "die". You can go through them and touch them and such without being hurt while they're in this state. But if you leave the room and come back in, the enemies aren't immobilized anymore. The hall pass monitors don't count as actual enemies and cannot be stopped by puddles or spray. Also, the weapons don't do anything to the trash cans, which hurt you if you touch them.
	$LF
]p
[p 
	"As far as health and player damage goes, your health is represented by the red bar at the top of the screen. Technically speaking, you have a default health of 19. Why that specific unrounded number? I don't know why they decided that...probably a mistake of some kind. It explains why there's like a little tiny dot of black beside the red even if you haven't taken damage yet. I know it's that specific value of 19 because of RAM watching that I did. (It is possible to set your value to 20 by RAM poking, and when you do that it shows a completely full health bar. There are no actual items in the game that you can collect to raise your health during gameplay, so it's interesting to see that the developers made a mistake like this... As the Angry Video Game Nerd would say: "WHAT WERE THEY THINKING???") There IS a way to regenerate health; by completing the bonuses. This actually sets your health all the way up to 20, even though your default health is 19 at the start of each level. That's weird.
	$LF
]p
[p 
	"Anyway, health works the same way as it does in just about any other game; it gets to 0, you die! Every time you take damage, you stop for a brief moment, falling down and getting back up (which is why damage should be avoided whenever possible in the TAS!). Being hit by regular enemies costs you 1 health at a time, but being caught by hall pass monitors and sent back to the beginning of the room costs you 5 healths each. If you die, you just can either start from the beginning of the level or go back to the menu. There is no life count. Deaths don't matter anyway, because there's no reason to die in a TAS of this game.
	$LF
]p
[p 
	"I should probably mention that this game actually automatically saves for you each time a level is completed. Thus, there is no password feature.
	$LF
]p
[p 
	"Believe it or not, this game is actually pretty easy to just play casually, for the most part. The game gives you a really high advantage, with a large amount of health, little damage, abundance of items, etc.
	$LF
]p
[h2 id=Mechanicsabuse,tricks,andglitches
 
	" Mechanics abuse, tricks, and glitches
	$LF
]h2
[h3 id=Startingtorun
 
	" Starting to run
	$LF
]h3
[p 
	"In order to start running optimally, you first have to walk for 2 frames beforehand. This saves about 6 frames actually, so it shaves off quite a lot of time. For some reason starting to run starts off with a really slow acceleration, but this can be cancelled out with the run for 2 frames.
	$LF
]p
[h3 id=Turningaround
 
	" Turning around
	$LF
]h3
[p 
	"When running, if you just turn around normally, you do a sort of slide before you turn. So, the way we avoid this slide is to, for instance when running to the right, stop for 1 frame and then turn around to run left. 
	$LF
]p
[h3 id=Slidingdowncorners
 
	" Sliding down corners
	$LF
]h3
[p 
	"You'll see many times in the run that if I'm running to a horizontal door, for instance, I'll sort of hit the corner and let it slide me down. This 
	[em 
		"usually
	]em
	" doesn't waste (or save) time, but I am careful. There are some instances where if you do this on a large enough corner it slows you down slightly, so you hit the door 1 frame later. To avoid this, you just go down a little more before hitting the corner.
	$LF
]p
[h3 id=Goingagainstslantedwallsforverticalspeed
 
	" Going against slanted walls for vertical speed
	$LF
]h3
[p 
	"A lot of times in the run, you'll see me going against a slanted wall to go up. This is only done in times when there's a slanted wall there and when you need to go more vertical than horizontal.
	$LF
]p
[p 
	"It saves time to do this because walls that are slanted like this make you go more to the right/left than just the regular vertical Up+Right/Left. To do this, go up to a slanted wall, and press Up and then Right (or Up+Left) to sort of ride the slant. It's also cool because it makes Raven shake a lot.
	$LF
]p
[p 
	"Note that though it is possible to just hold Up alone and ride the slant that way, doing this is actually slower than holding Up+Right(/Left). Also note that there is no such trick for going down the slants, only for going up.
	$LF
]p
[h4 id=Optimality
 
	" Optimality
	$LF
]h4
[p 
	"To do this slant trick optimally, you have to first run up against the adjacent wall for exactly 5-6 frames, THEN stop pressing right for one frame and press it again to do the trick.
	$LF
]p
[p 
	"Boy, was I PISSED off when I found out that this saved time. I accidentally found this timesaver when I was trying to optimize one of the slant tricks, and it took me a while to figure out why the fuck different amounts of holding up before doing the trick gave me different end times. So... it turns out that by holding up for the necessary frames right before doing the slant trick, Raven ends up in a slightly different position than otherwise on that exact frame. Since Raven shakes a lot during the slant trick (in a pattern), the first shake is always what counts the most, and in this position she gets the most optimal shaking pattern.
	$LF
]p
[p 
	"Just to give you an idea of how much time this saves, when I appended the very first slant trick in any% with TAStudio, it saved 3 whole frames! And that's a lot for a TAS. Frames really count here.
	$LF
]p
[h3 id=Moonrunning/walking
 
	" Moonrunning/walking
	$LF
]h3
[p 
	"Like many GBA games, if Up+Down/Left+Right is enabled in controller settings, you can use this to moonwalk/run. However, you can only do this in one direction. Raven can moonwalk/run to the left only; you can't do it when going right.
	$LF
]p
[p 
	"As far as Up+Down, you can actually "moonwalk/run" up too, but it doesn't count as "moon-" because doing this is indistinguishable from going up regularly without seeing the input.
	$LF
]p
[h3 id=Walls
 
	" Walls
	$LF
]h3
[p 
	"Before going up/down over a wall when going horizontally, you can run up against a wall for a few frames, but doing it for too long makes Raven run slower on certain frames which wastes time.
	$LF
]p
[h3 id=Skippinghallpassmonitors
 
	" Skipping hall pass monitors
	$LF
]h3
[h2 id=UsefulRAMaddresses
 
	" Useful RAM addresses
	$LF
]h2
[p 
	"In all instances, I used Combined WRAM to find the RAM addresses.
	$LF
]p
[ul 
	[li 
		" 0028BC (1 Byte) - Health
		$LF
	]li
	[li 
		" 0028B8 (1 Byte) - Water bottle count
		$LF
	]li
	[li 
		" 0028B4 (1 Byte) - Perfume spray bottle count
		$LF
	]li
	[li 
		" 0028C0 (1 Byte) - Hall pass count
		$LF
	]li
	[li 
		" 0028E0 (1 Byte) - Present count
		$LF
	]li
	[li 
		" 002900 (1 Byte) - Protesters count
		$LF
	]li
	[li 
		" 0028E8 (1 Byte) - School supplies count
		$LF
	]li
	[li 
		" 0028F0 (1 Byte) - Token count
		$LF
	]li
	[li 
		" 0028F8 (1 Byte) - Towel count. Yeah, towels... Well they show up on a counter just like any other item, but there is only one of them. If you modify this before the towel is gotten, it doesn't finish the level; it just modifies the parameter.
		$LF
	]li
	[li 
		" 002950 (1 Byte) - Timer (for levels Duct Hunt and Dunk Tank Trek). Poking and freezing the timer does nothing.
		$LF
	]li
	[li 
		" 015F7C (1 Byte) - Dunk Tank Trek tank
		$LF
	]li
	[li 
		" 018610 (1 Byte) - In Dunk Tank Trek, this RAM address tells you whether or not you have water in your bucket. No water = 0, water = 1.
		$LF
	]li
	[li 
		" 014E24 (1 Byte) - Pizza Pal Promenade correct moves count
		$LF
	]li
]ul
[h2 id=Stage-by-stagecommentary
 
	" Stage-by-stage commentary
	$LF
]h2
[h3 id=Textandmenuing
 
	" Text and menuing
	$LF
]h3
[p 
	"There is actually a lot of menuing in the game done between each level, but in the TAS, it's skipped so quickly you don't see any of it. Usually, the player has to wait a moment to watch the clip of Raven's eye zooming in a whole lot, but by pressing Start on a very specific frame I skip having to see that clip.
	$LF
]p
[p 
	"In the levels, when you press A and go up to someone you talk to them. Instead of scrolling through text by pressing A through it, you can press Start, so you only have to see the first text block, thus saving time. When text begins a level, you should actually start moving BEFORE the text appears, because it moves you for one frame thus saving time.
	$LF
]p
[h3 id="RunRavenRun"
 
	" "Run Raven Run"
	$LF
]h3
[h4 id=1:BacktoSchool
 
	" 1: Back to School
	$LF
]h4
[p 
	"The goal of this level is to go talk to Chelsea. There isn't really all that much to say about this level, since it's mostly running to the right, with one instance of having to optimize vertical movement with the wall slant trick.
	$LF
]p
[ul 
	[li 
		" - At the beginning of the game, the item HUD flashes because I made it flash at different rates for entertainment. To do this, you press L or R for a respective weapon that has no ammunition. Each time you do this, it makes 1 flash. We can only do this for a small moment, since we collect the first spray and water bottle ammunition in the first room of the game.
		$LF
	]li
]ul
[h4 id=2:AVCartCrash
 
	" 2: AV Cart Crash
	$LF
]h4
[p 
	"The goal of this level is to go and talk to Alana. There isn't much to say about this level either, because it's mostly running to the right again with two instances of using slant trick and a few corner slide manipulations.
	$LF
]p
[h4 id=3:PresentDanger
 
	" 3: Present Danger
	$LF
]h4
[p 
	"The goal of this level is to collect the 8 presents and then go back and talk to Chelsea. This level is one of several in the game that took quite a heavy amount of routing work to optimize.
	$LF
]p
[p 
	"So, there were two routes I had in mind for this level. The first route would have gone through the mall backwards from the way I did it in the TAS. I actually did a test TAS of this level (without getting the presents) with that route, and I was able to save 
	[b 
		"over 10 frames
	]b
	" when basically 
	[b 
		"non-TASing
	]b
	" the level with the other route! So the difference is quite clear...
	$LF
]p
[ul 
	[li 
		" - On 
		[a class=extlink href=https://www.youtube.com/watch?v=3UFPX_NxSRA rel=nofollow 
			"a previous WIP
		]a
		", I maybe never tested this part of the route, or maybe found something different due to inaccurate emulation, or whatever, but... It's faster to use the wall slant than to go up to the door without it. It's about 8 frames faster.
		$LF
	]li
	[li 
		" - The girls carrying boxes don't hurt you unless they're moving.
		$LF
	]li
	[li 
		" - Going up above the benches is a few frames faster than going from down below the benches.
		$LF
	]li
]ul
[h4 id=4:EddieorNot
 
	" 4: Eddie or Not
	$LF
]h4
[p 
	"The overall goal of this level is to get to the end and talk to Eddie (according to the plot, giving him a tracking device), but this is a hall monitor level, so the primary challenge is getting past all of them. As with the rest of the hall monitor levels, this level took some 
	[b 
		"extremely
	]b
	" heavy routing, which for this level will be explained in great detail in this section. In total, there are 6 hall passes in the level that you can collect and use, out of 20 total hall pass monitors.
	$LF
]p
[h4 id=5:ChickenChase
 
	" 5: Chicken Chase
	$LF
]h4
[h3 id="Clothesminded"
 
	" "Clothesminded"
	$LF
]h3
[h4 id=6:Raven'sRevolution
 
	" 6: Raven's Revolution
	$LF
]h4
[h4 id=7:ProtestMarch
 
	" 7: Protest March
	$LF
]h4
[h4 id=8:DetentionDash
 
	" 8: Detention Dash
	$LF
]h4
[h4 id=9:CheesyCaper
 
	" 9: Cheesy Caper
	$LF
]h4
[h4 id=10:DuctHunt
 
	" 10: Duct Hunt
	$LF
]h4
[h3 id="SmellofVictory"
 
	" "Smell of Victory"
	$LF
]h3
[h4 id=11:StinkySchoolStrut
 
	" 11: Stinky School Strut
	$LF
]h4
[h4 id=12:Bye-ByetoBen
 
	" 12: Bye-Bye to Ben
	$LF
]h4
[h4 id=13:SupplySearch
 
	" 13: Supply Search
	$LF
]h4
[h4 id=14:SignUpSprint
 
	" 14: Sign Up Sprint
	$LF
]h4
[h4 id=15:DunkTankTrek
 
	" 15: Dunk Tank Trek
	$LF
]h4
[h3 id="Four'sACrowd"
 
	" "Four's A Crowd"
	$LF
]h3
[h4 id=16:DateExpectations
 
	" 16: Date Expectations
	$LF
]h4
[h4 id=17:TokenTrial
 
	" 17: Token Trial
	$LF
]h4
[h4 id=18:CleanUpCrew
 
	" 18: Clean Up Crew
	$LF
]h4
[h4 id=19:BackstageDebut
 
	" 19: Backstage Debut
	$LF
]h4
[h4 id=20:PizzaPalPromenade
 
	" 20: Pizza Pal Promenade
	$LF
]h4
[h2 id=Conclusion
 
	" Conclusion
	$LF
]h2
[p 
	"What a lot of work that took! I hope the work paid off quite well. I hope you enjoy this TAS.
	$LF
]p
[h3 id=Suggestedscreenshots
 
	" Suggested screenshots
	$LF
]h3
[h3 id=Specialthanksto
 
	" Special thanks to
	$LF
]h3
[ul 
	[li 
		" The TASVideos community, for being active and continuing to keep me motivated in doing my favorite hobby!
		$LF
	]li
	[li 
		" Everyone who took their time to watch this TAS and/or read this lengthy submission text.
		$LF
	]li
]ul
[h3 id=Externallinks
 
	" External links
	$LF
]h3
[ul 
	[li 
		" 
		[a class=extlink href=http://youtube.com/Ready1Steady1Yeti1 rel=nofollow 
			"My YouTube channel, where you may find me uploading more videos of this game
		]a
		$LF
	]li
	[li 
		" 
		[a class=extlink href=https://www.youtube.com/playlist?list=PLoZMw6e_YIFFos9KGvQYBdruZK60_p9FC rel=nofollow 
			"A playlist of other videos I uploaded of this game that are irrelevant to the TAS.
		]a
		" - It is interesting to note that I found a very consistent out of bounds (OoB) glitch in this game that works in most of the levels. As cool as this is, it unfortunately is useless in a TAS, since most of the action can't really be skipped that way and very few times is it actually possible to escape from OoB (and once you have, you've already wasted quite a bit of time).
		$LF
	]li
	[li 
		" 
		[a class=extlink href=https://www.youtube.com/playlist?list=PLoZMw6e_YIFHDLZq1w7DMgrTx83DAxYrj rel=nofollow 
			"For those of you interested in the game's soundtrack, here is a playlist containing all the tracks.
		]a
		$LF
	]li
]ul
[h3 id=Notestojudges/encoders/publishers
 
	" Notes to judges/encoders/publishers
	$LF
]h3
[ul 
	[li 
		" Please, if I may ask, make the accepting judgment for both movies (100% and any%) on the same day (meaning I'd prefer the same judge for both movies). Publication of the submissions can happen on a later day (and probably will), but please publish them both on the same day as each other as well, if this is at all possible.
		$LF
	]li
]ul
[p 
	"These notes will only be up temporarily, and will be removed after the movie is published.
]p
