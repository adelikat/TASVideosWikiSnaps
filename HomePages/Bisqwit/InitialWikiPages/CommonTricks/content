1
[h2 id=Commontricks
 
	" Common tricks
	$LF
]h2
[p 
	"There are several tricks that can be used (or at least tried)
	$LF
	"in many games to improve the time.
	[br 
	]br
	$LF
	"If you are doing a movie, be sure to try every one of them :)
	$LF
]p
[h4 id=Closeapproachcollisionabuse
 
	" Close approach collision abuse
	$LF
]h4
[p 
	"Games don't do collision checks like an eye does. You can often
	$LF
	"touch and even go partially inside the enemies without getting hurt.
	[br 
	]br
	$LF
	"See the SMB1 / Solomon's Key movies for examples of this.
	$LF
]p
[h4 id=Fastmotioncollisionabuse
 
	" Fast motion collision abuse
	$LF
]h4
[p 
	"Games don't interpolate motion - motion means that you are in one
	$LF
	"place and next in some other place. This is how animation works.
	$LF
]p
[p 
	"If you are moving very fast, you can sometimes go through objects,
	$LF
	"because the game does not see a frame when you are inside the object.
	$LF
	"Combined with the close approach collision abuse mentioned above,
	$LF
	"the speed may not even need not to be very high.
	[br 
	]br
	$LF
	"See the Gradius movie for examples of this.
	$LF
]p
[h4 id=Othercollisionabuses
 
	" Other collision abuses
	$LF
]h4
[p 
	"Using the above mentioned collision tricks may sometimes get
	$LF
	"you inside an object. This may be harmful, but it might also
	$LF
	"open you routes that are normally not accessible - for example,
	$LF
	"you might be able to gain support and jump from a vertical solid wall.
	$LF
	"See SMB1/SMB2j movie for examples of this.
	$LF
]p
[p 
	"In most games, if your character for some reason goes inside
	$LF
	"a wall, the game scrolls automatically your hero horizontally
	$LF
	"inside the wall until it finds a place where the hero can exit
	$LF
	"from the wall.
	[br 
	]br
	$LF
	"This happens, because the authors have been aware that collision
	$LF
	"checks aren't always perfect, and they wanted to make sure that
	$LF
	"the player doesn't get stuck.
	[br 
	]br
	$LF
	"This obviously allows you to get some handy shortcuts in some
	$LF
	"games. Look at the SMB3 / Rockman 2 movies for examples of this.
	$LF
]p
[h4 id=Invulnerabilityabuse
 
	" Invulnerability abuse
	$LF
]h4
[p 
	"There are certain scenes in most games when your character is
	$LF
	"invulnerable. This usually happens when the game has started a
	$LF
	"preprogrammed demo that may not be interrupted - like the animation
	$LF
	"for finishing the level. If your character hits a pool of lava or
	$LF
	"something else that potentially kills you, the game may very well
	$LF
	"ignore your potential death and let you continue like you didn't die.
	[br 
	]br
	$LF
	"See the Little Nemo / Gremlins 2 movies for examples of this.
	$LF
]p
[h4 id=Pauseabuse
 
	" Pause abuse
	$LF
]h4
[p 
	"In some games, pause is not very perfect:
	$LF
]p
[ul 
	[li 
		" In Mega Man, pause forces collision checks to be rerun, allowing monsters to get damage twice from the same shot
		$LF
	]li
	[li 
		" In Mega Man 2, pause resets gravity-accelerated speed counters to 0, which might allow moving in ways that were not meant.
		$LF
	]li
	[li 
		" In most games, pause creates a soundeffect that momentarily disables a sound channel from music.
		$LF
	]li
	[li 
		" If some scene has a precomputed length and/or is synchronized with the music, using pause may break the scene in some ways
		$LF
	]li
]ul
[p 
	"It might be worthwhile to observe what anomalities does
	$LF
	"pause cause in your game.
	$LF
]p
[h4 id=Luckabuse
 
	" Luck abuse
	$LF
]h4
[p 
	"Video game consoles are actually computers.
	[br 
	]br
	$LF
	"All computers are simply just calculators - they do exactly what they
	$LF
	"have been told, and no matter how many times repeated, they always
	$LF
	"get the same results.
	[br 
	]br
	$LF
	"For this reason, there is 
	[em 
		"nothing random
	]em
	" in the games.
	[br 
	]br
	$LF
	"The games are 
	[em 
		"pseudorandom
	]em
	".
	$LF
]p
[p 
	"Most games give you bonuses apparently randomly - there might be
	$LF
	"a 40% probability that you gain a heart from a skeleton you kill.
	[br 
	]br
	$LF
	"Observe:
	$LF
]p
[ul 
	[li 
		" Every time you replay that movie, you get the 
		[em 
			"same
		]em
		" result from that same location.
		[br 
		]br
		$LF
	]li
	[li 
		" Every time you play and kill that skeleton, you get a 
		[em 
			"random
		]em
		" result from that same location.
		[br 
		]br
		$LF
	]li
]ul
[p 
	"The only source of "true" randomness for games is 
	[em 
		"you
	]em
	".
	[br 
	]br
	$LF
	"The game is purely deterministic.
	$LF
]p
[p 
	"Learn to abuse this. You can affect 
	[em 
		"anything
	]em
	" that has
	$LF
	"randomness in it, by giving the game different input.
	[br 
	]br
	$LF
	"You can have 
	[em 
		"perfect
	]em
	" luck if you want!
	$LF
]p
[p 
	"Common sources of randomness:
	$LF
]p
[ul 
	[li 
		" Keys you happen to be pressing
		$LF
	]li
	[li 
		" Your timing
		$LF
	]li
]ul
[p 
	"The results may be decided:
	$LF
]p
[ul 
	[li 
		" The last moment when they are needed (when the bonus is supposed to appear)
		$LF
	]li
	[li 
		" The moment of a state shift (when you kill an enemy and a bonus begins to formulate)
		$LF
	]li
	[li 
		" When you enter the scene (and the objects are created)
		$LF
	]li
]ul
[p 
	"This means that sometimes you can experiment by doing different dances
	$LF
	"just before the enemy dies, and sometimes you have to experiment by
	$LF
	"entering the room from different angles.
	$LF
]p
[h4 id=Monsterhitabuse
 
	" Monster hit abuse
	$LF
]h4
[p 
	"When games are designed, the maps are usually tested so that the
	$LF
	"character can't go where he should not go.
	[br 
	]br
	$LF
	"What they often haven't thought, is that the character may gain
	$LF
	"extra movement from monsters when they hurt you.
	[br 
	]br
	$LF
	"By getting hurt in a right place you can access routes you
	$LF
	"shouldn't.
	[br 
	]br
	$LF
	"Look at the Castlevania and Ghosts'n Goblins movies for examples of this.
	$LF
]p
[h4 id=Superspeedabuse
 
	" Super speed abuse
	$LF
]h4
[p 
	"When you act eyeblindingly fast, you might do things faster
	$LF
	"than the game developers have thought - for example, kill a
	$LF
	"boss before it goes serious.
	[br 
	]br
	$LF
	"See the Simon's Quest movie (last boss) for an example of this.
	$LF
]p
[h4 id=Toomanyobjectsabuse
 
	" Too many objects abuse
	$LF
]h4
[p 
	"This is actually a reverse abuse.
	[br 
	]br
	$LF
	"In many games, having too many on-screen objects simultaneously causes
	$LF
	"the game to slow down. When doing timeattacks, it might be a good thing
	$LF
	"to ensure things don't slow down.
	[br 
	]br
	$LF
	"The slowdown usually affects your character too,
	$LF
	"so it doesn't have benefits.
	$LF
]p
[h4 id=Untestedcodeabuse
 
	" Untested code abuse
	$LF
]h4
[p 
	"Try to do something that most probably hasn't been tested, like pressing
	$LF
	"left+right at the same time or up+down at the same time. It might do
	$LF
	"something nasty in the game.
	[br 
	]br
	$LF
	"Note that VirtuaNES doesn't allow you to do it, but that's not a reason
	$LF
	"to not try it on real NES / some other emulator.
	$LF
]p
