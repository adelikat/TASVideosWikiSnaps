80
[p 
	"This page outlines the essentials of creating high definition encodes for upload to 
	(__wikiLink|streaming media)
	" sites.
	$LF
]p
[div class=toc 
	[ul 
		[li 
			[a href=#heading-124 
				"Basic concepts
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#heading-181 
						"Rationale
						$LF
					]a
				]li
				[li 
					[a href=#heading-1481 
						"Steps
						$LF
					]a
				]li
				[li 
					[a href=#heading-2187 
						"Note about 3D games
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#heading-2401 
				"Example script
				$LF
			]a
		]li
		[li 
			[a href=#heading-10817 
				"Command lines
				$LF
			]a
		]li
	]ul
]div
[h2 
	"Basic concepts
	$LF
	[a id=heading-124 
	]a
]h2
[p 
	[em 
		(__wikiLink|TODO)
		": Speak about 8x8 resizing.
	]em
	$LF
]p
[h3 
	"Rationale
	$LF
	[a id=heading-181 
	]a
]h3
[p 
	"The h.264 video format uses the YV12 colorspace; conversion to this colorspace on a pixel-to-pixel basis is invariably lossy due to chroma subsampling (i.e. the image dimensions of the colour information in the image is half that of the full image resolution).  To avoid loss of data to this chroma subsampling, one can ensure that each 2x2 block in image has the same colours as this would mean that the entire 2x2 block is one colour and can therefore be scaled down without loss. Thus, the scaling ratio has to be an even integer
	[a id=r1 
	]a
	[sup 
		"[
		[a href=#1 
			"1
		]a
		"]
	]sup
	" and the scaling algorithm has to be nearest neighbour
	[a id=r2 
	]a
	[sup 
		"[
		[a href=#2 
			"2
		]a
		"]
	]sup
	" in order to guarantee that each resulting 2x2 block is one colour.
	$LF
]p
[p 
	"YouTube's maximum high definition size is 1920x1080, though recently support has been added for resolutions greater than this which shows up as "Original".  If YouTube is sent an encode with a vertical resolution greater than 1080, it will generate a 1080p encode without image borders.
	$LF
]p
[p 
	"YouTube also only supports frame rates of up to 30 FPS, though it will automatically
	$LF
	"downconvert videos uploaded at a higher frame rate.  Several alternatives exist for addressing this, such as simple decimation, interframe blending (partial or 
	(__wikiLink|EncodingGuide/TASBlend|total)
	"); the most competent at present is "
	(__wikiLink|Nanogyth|ng_deblink)
	"".
	$LF
]p
[h3 
	"Steps
	$LF
	[a id=heading-1481 
	]a
]h3
[ol 
	[li 
		" Dump the movie using an RGB32 lossless
		[a id=r3 
		]a
		[sup 
			"[
			[a href=#3 
				"3
			]a
			"]
		]sup
		" codec. Lagarith and Camstudio Codec are popular choices.
		$LF
	]li
	[li 
		" Convert the image to correct colorspace using point scaling (as opposed to the normally-used Lanczos scaling); this ensures that there is no "bleeding" between chroma samples.
		$LF
	]li
	[li 
		" Set your logo's resolution to prevent its resizing by x264.
		$LF
	]li
	[li 
		" Encode the video using x264 (fairly high quality settings are desirable as YouTube will end up re-encoding the video anyway). Resize it by factor of 8, this would reduce the file size when compressing by x264, and activate YouTube's "original mode" processing (above 1080p).
		$LF
	]li
	[li 
		" Use OGG or WAV as your audio track.
		$LF
	]li
	[li 
		" Correct the aspect ration on YouTube.
		$LF
	]li
]ol
[h3 
	"Note about 3D games
	$LF
	[a id=heading-2187 
	]a
]h3
[p 
	"Games that make use of 3D (i.e. those on 3D consoles such as the N64, PSX, Saturn, or DS) are not HD encoded in this fashion; they are instead dumped at higher resolution and then encoded. 
	$LF
]p
[h2 
	"Example script
	$LF
	[a id=heading-2401 
	]a
]h2
[p 
	"To get the script working you need these plugins for AVISynth:
	$LF
]p
[ul 
	[li 
		" 
		[a class=extlink href=http://manao4.free.fr/mvtools.htm rel=nofollow 
			"mvtools2.dll
		]a
		$LF
	]li
	[li 
		" 
		[a class=extlink href=http://manao4.free.fr/mt_masktools.html rel=nofollow 
			"mt_masktools-26.dll
		]a
		$LF
	]li
]ul
[p 
	"Both can be obtained by 
	[a class=extlink href=http://code.google.com/p/feos-tas/downloads/detail?name=AVISynth%20plugins%20for%20ng_deblink.7z rel=nofollow 
		"this link
	]a
	" or 
	[a class=extlink href=http://manao4.free.fr/ rel=nofollow 
		"here
	]a
	".
	$LF
]p
[pre 
	[code class=language-sh 
		"a = AVISource("movie.avi").Trim(0,-0).ConvertToRGB32().deblink4.selecteven
		$LF
		"# Replace -0 with the last frame of the movie to be displayed,
		$LF
		"# or leave it as is if no trimming is required.
		$LF
		$LF
		"# Adjust the below items to adjust the subtitles.
		$LF
		"# All the required information will be on the movies submission page.
		$LF
		"# Be sure to keep the quotes everywhere, even when branch is blank ("").
		$LF
		"# When it's not blank, put it into single quotes too ("'any%'")
		$LF
		"game = "A Nightmare On Elm Street"
		$LF
		"branch = ""
		$LF
		"author = "goofydylan8"
		$LF
		"time = "13:25.57"
		$LF
		"rerecords = "16726"
		$LF
		$LF
		"# This sets the frame number for the subtitles to start displaying
		$LF
		"# Preferably, the beginning of the first level
		$LF
		"subff = 800
		$LF
		$LF
		"# Adjust height for subtitles not to covar action
		$LF
		"height=0
		$LF
		$LF
		"# Set this to true if this is a handheld console, to use logo with aspect ratio other than 4:3
		$LF
		"handheld = false
		$LF
		$LF
		"# We use YouTube function to resize to 4:3, and upscaling by 8 reduces the filesize greatly
		$LF
		"g = a.PointResize(a.width*8, a.height*8)
		$LF
		$LF
		"# Logo stuffs
		$LF
		"# Note that if this is a handheld console, you will need to change
		$LF
		"# the .png filename to the corrosponding consoles logo image
		$LF
		"# This is so that you don't end up with a distorted logo
		$LF
		"# Use one 4:3 logo for TV consoles and logos with custom resolutions for handhelds
		$LF
		"handheld ? Eval("""
		$LF
		"d = ImageSource(file="handheld.png", start=0, end=119, fps=a.FrameRate).ConvertToRGB32()
		$LF
		"""") : Eval("""
		$LF
		"d = ImageSource(file="console.png", start=0, end=119, fps=a.FrameRate).ConvertToRGB32()
		$LF
		"""")
		$LF
		"e = BlankClip(d, audio_rate=a.AudioRate, channels=a.AudioChannels)
		$LF
		"f = AudioDub(d, e).Lanczos4Resize(g.width, g.height).AssumeFPS(a.FrameRateNumerator, a.FrameRateDenominator)
		$LF
		"last = f + g 
		$LF
		$LF
		"# Subtitles
		$LF
		"ng_bighalo(\
		$LF
		"    game + "\n" + ((branch == "") ? "" : branch + "\n") + \
		$LF
		"    "Played by " + author + "\nPlaying time: " + time + \
		$LF
		"    "\nRerecord count: " + rerecords, \
		$LF
		"    y=height, align=8, first_frame=subff, last_frame=(subff + 300), \
		$LF
		"    size=80, text_color=$00FFFFFF, halo_color=$00000000, lsp=1) 
		$LF
		"ng_bighalo(\
		$LF
		"    "This is a tool-assisted recording.\nFor details, visit http://TASVideos.org/", \
		$LF
		"    y=height, align=8, first_frame=(subff + 301), last_frame=(subff + 601), \
		$LF
		"    size=80, text_color=$00FFFFFF, halo_color=$00000000, lsp=1) 
		$LF
		" 
		$LF
		"ConvertToYV24(matrix="Rec709", chromaresample="point")
		$LF
		"ConvertToYV12(matrix="Rec709", chromaresample="point")
		$LF
		$LF
		"# Custom functions go here, never change the stuff below if you are not sure what you are doing
		$LF
		"# nanogyth's deblink function makes TASBlend obsolete
		$LF
		"function deblink4(clip clp, float "ratio", int "level")  {
		$LF
		"    ratio = default(ratio, 2.0 /3)
		$LF
		"    assert(ratio >= 0.0 && 1.0 >= ratio,
		$LF
		"    \      "[deblink4] 1.0 >= ratio >= 0.0, it was " + string(ratio))
		$LF
		$LF
		"    level = default(level, round(ratio * 257))
		$LF
		"    assert(level >= 0 && 257 >= level,
		$LF
		"    \      "[deblink4] 257 >= level >= 0, it was " + string(level))
		$LF
		$LF
		"    blink=clp.ng_blinkmask_new
		$LF
		"    m01=mt_logic(blink.selectevery(4,0),blink.selectevery(4,1),mode="or").converttorgb32
		$LF
		"    m23=mt_logic(blink.selectevery(4,2),blink.selectevery(4,3),mode="or").converttorgb32
		$LF
		$LF
		"    f0=layer(clp.selectevery(4,0),clp.selectevery(4,1).mask(m01),level=level)
		$LF
		"    f1=layer(clp.selectevery(4,1),clp.selectevery(4,0).mask(m01),level=level)
		$LF
		"    f2=layer(clp.selectevery(4,2),clp.selectevery(4,3).mask(m23),level=(257-level) )
		$LF
		"    f3=layer(clp.selectevery(4,3),clp.selectevery(4,2).mask(m23),level=(257-level) )
		$LF
		$LF
		"    interleave(f0,f1,f2,f3)
		$LF
		"}
		$LF
		$LF
		"function deblink3(clip clp){
		$LF
		"    blink=clp.ng_blinkmask_new
		$LF
		"    m01=mt_logic(blink.selectevery(4,0),blink.selectevery(4,1),mode="or").converttorgb32
		$LF
		"    f0=layer(clp.selectevery(4,0),clp.selectevery(4,1).mask(m01))
		$LF
		"    f1=layer(clp.selectevery(4,1),clp.selectevery(4,0).mask(m01))
		$LF
		"    interleave(f0,f1,clp.selectevery(4,2),clp.selectevery(4,3))
		$LF
		"}
		$LF
		$LF
		"function ng_blinkmask_new(clip c,int "ml"){
		$LF
		"    ml=default(ml,128)
		$LF
		"    src=c.ConvertToYv12
		$LF
		"    super=MSuper(src, pel=1)
		$LF
		"    fvec =MAnalyse(super, isb=false, blksize=4)
		$LF
		"    bvec =MAnalyse(super, isb=true , blksize=4)
		$LF
		"    fmask=Mmask(src,fvec,kind=1,ml=ml).mt_binarize(u=-128,v=-128)
		$LF
		"    bmask=Mmask(src,bvec,kind=1,ml=ml).mt_binarize(u=-128,v=-128)
		$LF
		$LF
		"    eo0_to =fmask.selectevery(2,1)
		$LF
		"    oe_from=bmask.selectevery(2,1)
		$LF
		"    front  =mt_logic(eo0_to,oe_from,mode="and")
		$LF
		$LF
		"    oe_to  =fmask.selectevery(2,2)
		$LF
		"    eo_from=bmask.selectevery(2,2)
		$LF
		"    back   =mt_logic(oe_to,eo_from,mode="and")
		$LF
		$LF
		"    ee_src=src.selecteven
		$LF
		"    ee_super=MSuper(ee_src, pel=1)
		$LF
		"    ee_fvec =MAnalyse(ee_super, isb=false, blksize=4)
		$LF
		"    ee_bvec =MAnalyse(ee_super, isb=true , blksize=4)
		$LF
		"    ee_fmask=Mmask(ee_src,ee_fvec,kind=1,ml=ml).mt_binarize(u=-128,v=-128)
		$LF
		"    ee_bmask=Mmask(ee_src,ee_bvec,kind=1,ml=ml).mt_binarize(u=-128,v=-128)
		$LF
		$LF
		"    ee_to  =ee_fmask.trim(1,0)
		$LF
		"    ee_from=ee_bmask
		$LF
		"    ee     =mt_logic(ee_to,ee_from,mode="or")
		$LF
		$LF
		"    oo_src=src.selectodd
		$LF
		"    oo_super=MSuper(oo_src, pel=1)
		$LF
		"    oo_fvec =MAnalyse(oo_super, isb=false, blksize=4)
		$LF
		"    oo_bvec =MAnalyse(oo_super, isb=true , blksize=4)
		$LF
		"    oo_fmask=Mmask(oo_src,oo_fvec,kind=1,ml=ml).mt_binarize(u=-128,v=-128)
		$LF
		"    oo_bmask=Mmask(oo_src,oo_bvec,kind=1,ml=ml).mt_binarize(u=-128,v=-128)
		$LF
		$LF
		"    oo_to  =oo_fmask.trim(1,0)
		$LF
		"    oo_from=oo_bmask
		$LF
		"    oo     =mt_logic(oo_to,oo_from,mode="or")
		$LF
		$LF
		"    #to e0-o1, from o1-e2, nothing e0-e2
		$LF
		"    even_blink=mt_logic(front,ee.mt_invert,mode="and")
		$LF
		$LF
		"    #to o1-e2, from e2-o3, nothing o1-o3
		$LF
		"    odd_blink =mt_logic(back,oo.mt_invert,mode="and")
		$LF
		$LF
		"    interleave(even_blink, odd_blink).selectevery(1,-1)
		$LF
		"}
		$LF
		$LF
		"# HD encodes need big subtitle fonts, but AviSynth can't enlarge the halo.
		$LF
		"# Here's the custom subtitle function by nanogyth
		$LF
		"# It's slow, but we have subtitles for a limited time only
		$LF
		"function ng_bighalo(
		$LF
		"\ clip clp,
		$LF
		"\ string text,
		$LF
		"\ float "x",
		$LF
		"\ float "y",
		$LF
		"\ int "first_frame",
		$LF
		"\ int "last_frame",
		$LF
		"\ string "font",
		$LF
		"\ float "size",
		$LF
		"\ int "text_color",
		$LF
		"\ int "halo_color",
		$LF
		"\ int "align",
		$LF
		"\ int "spc",
		$LF
		"\ int "lsp",
		$LF
		"\ float "font_width",
		$LF
		"\ float "font_angle",
		$LF
		"\ int "halo_radius"
		$LF
		"\){
		$LF
		"    x           = default(          x, -1)
		$LF
		"    first_frame = default(first_frame, 0)
		$LF
		"    last_frame  = default( last_frame, first_frame + 299)
		$LF
		"    font        = default(       font, "Ariel")
		$LF
		"    size        = default(       size, 18)
		$LF
		"    y           = default(          y, size)
		$LF
		"    text_color  = default( text_color, $20FFFFFF)
		$LF
		"    halo_color  = default( halo_color, $20000000)
		$LF
		"    align       = default(      align, 5)
		$LF
		"    spc         = default(        spc, 0)
		$LF
		"    lsp         = default(        lsp, 1)
		$LF
		"    font_width  = default( font_width, 0)
		$LF
		"    font_angle  = default( font_angle, 0)
		$LF
		"    halo_radius = default(halo_radius, 8)
		$LF
		$LF
		"    invis=blankclip(clp, length=1, pixel_type="YV12")
		$LF
		"    text_mask=subtitle(invis, text, x, y, 0, 0, font, size, $00FFFFFF,
		$LF
		"\                      $80808080, align, spc, lsp, font_width, font_angle)
		$LF
		"    halo_mask=mt_logic(text_mask,
		$LF
		"\                      text_mask.mt_expand(mode=mt_circle(halo_radius)),
		$LF
		"\                      mode="xor")
		$LF
		$LF
		"    h_alpha=(halo_color >= 0) ? 255 - halo_color/$01000000
		$LF
		"\                             :  -(halo_color+1)/$01000000
		$LF
		"    hc=blankclip(clp, length=1, color=halo_color)
		$LF
		"    mm=hc.mask(mt_lut(halo_mask, string(h_alpha)+" x * 255 /").converttorgb32)
		$LF
		"    clp2=clp.applyrange(first_frame, last_frame, "Layer", mm)
		$LF
		$LF
		"    t_alpha=(text_color >= 0) ? 255 - text_color/$01000000
		$LF
		"\                             :  -(text_color+1)/$01000000
		$LF
		"    tc=blankclip(clp, length=1, color=text_color)
		$LF
		"    mm2=tc.mask(mt_lut(text_mask, string(t_alpha)+" x * 255 /").converttorgb32)
		$LF
		"    clp2.applyrange(first_frame, last_frame, "Layer", mm2)
		$LF
		"}
		$LF
	]code
]pre
[p 
	[b 
		"Note
	]b
	": To import an animated logo instead of a static logo, you should replace this line...
	$LF
]p
[pre 
	[code class=language-sh 
		"d = ImageSource(file="logoHD.png", start=0, end=59, fps=a.FrameRate).ConvertToRGB32()
		$LF
	]code
]pre
[p 
	"by this line.
	$LF
]p
[pre 
	[code class=language-sh 
		"d = AVISource("logo.avi").AssumeFPS(a.FrameRate).ConvertToRGB32()
		$LF
	]code
]pre
[p 
	"If your logo was made for 60 FPS movies, you should use this line below.
	$LF
]p
[pre 
	[code class=language-sh 
		"d = AVISource("logo.avi").AssumeFPS(60).ChangeFPS(a.FrameRate).ConvertToRGB32()
		$LF
	]code
]pre
[h2 
	"Command lines
	$LF
	[a id=heading-10817 
	]a
]h2
[p 
	"The following command is used for x264 encoding and implies you named your script 
	[tt 
		"hd.avs
	]tt
	":
	$LF
]p
[blockquote 
	" x264 --qp 0 --keyint 600 --range tv --colorprim bt709 --transfer bt709 --colormatrix bt709 --output  video.mp4 hd.avs
	$LF
]blockquote
[p 
	"YouTube doesn't seem to support FLAC anymore, so either use Raw PCM (.WAV) directly, or high bitrate Vorbis (.OGG).
	$LF
]p
[blockquote 
	" oggenc2 -q 10 audio.wav
	$LF
]blockquote
[p 
	"Muxing is also quite simple:
	$LF
]p
[blockquote 
	" mkvmerge --engage no_simpleblocks --compression -1:none video.mp4 audio.ogg -o TAS.mkv
	$LF
]blockquote
[p 
	"After uploading to YouTube, add that tag to resulting video to correct the aspect ratio for TV consoles (not for handhelds):
	$LF
]p
[blockquote 
	" yt:resize=4:3
	$LF
]blockquote
[hr 
]hr
[p 
	"[
	[a id=1 
	]a
	[a href=#r1 
		"1
	]a
	"]
	" Many DOS games, and output from many games played in openMSX when using the 
	[tt 
		"-doublesize
	]tt
	" option, have double-scanned output, i.e. the pixels are already in 2x2 blocks; the 'even' requirement is not needed in that case.
	$LF
]p
[p 
	"[
	[a id=2 
	]a
	[a href=#r2 
		"2
	]a
	"]
	" Use of a weighted average algorithm is also acceptable, as it results in the exact same image as nearest neighbour if scaling up by integer.
	$LF
]p
[p 
	"[
	[a id=3 
	]a
	[a href=#r3 
		"3
	]a
	"]
	" This does NOT include x264 lossless, which performs an RGB32-to-YV12 colorspace conversion (unless specifically set to i444 or RGB mode); this is both irreversible and lossy.
	$LF
]p
[p 
	"[
	[a id=4 
	]a
	[a href=#r4 
		"4
	]a
	"]
	" For games meeting the criteria set out in footnote 1, the doubling can be omitted as the source material is already scaled by 2x.
	$LF
]p
[p 
	"[
	[a id=5 
	]a
	[a href=#r5 
		"5
	]a
	"]
	" For some consoles (Sega Genesis in particular), this can yield resolutions above and beyond what YouTube can accept. One possible alternative to the formula presented here is to calculate the even integer mentioned for handhelds, scale by half that amount, scale the result to a 4:3 aspect ratio, and scale once more by a factor of two; this yields 2x2 blocks, but not all pixels will be the same size.
	$LF
]p
