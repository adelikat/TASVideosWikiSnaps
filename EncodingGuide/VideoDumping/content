390
[div class=card mb-2 
	[div class=card-header 
		[strong 
			"Table of contents
		]strong
	]div
	[div class=card-body 
		[ul 
			[li 
				[a href=#Introduction 
					" Introduction
					$LF
				]a
			]li
			[li 
				[a href=#CommonSettings 
					" Common settings
					$LF
				]a
				[ul 
					[li 
						[a href=#NonVfwCodecsViaPipedecWindowsOnly 
							" Non-VFW Codecs via pipedec (Windows only)
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#DeinterlacingPsxN64WithAngrylionSaturn 
					" Deinterlacing (PSX, N64 with AngryLion, Saturn)
					$LF
				]a
			]li
			[li 
				[a href=#Bizhawk 
					" BizHawk
					$LF
				]a
				[ul 
					[li 
						[a href=#Windows 
							" Windows
							$LF
						]a
					]li
					[li 
						[a href=#Linux 
							" Linux
							$LF
						]a
					]li
					[li 
						[a href=#AlternateSync 
							" Alternate Sync
							$LF
						]a
					]li
					[li 
						[a href=#SystemSpecificSettings 
							" System specific settings
							$LF
						]a
						[ul 
							[li 
								[a href=#Commodore64 
									" Commodore 64
									$LF
								]a
							]li
							[li 
								[a href=#GameBoyGameBoyColor 
									" Game Boy/Game Boy Color
									$LF
								]a
							]li
							[li 
								[a href=#GameBoyAdvance 
									" Game Boy Advance
									$LF
								]a
							]li
							[li 
								[a href=#GenesisSegaCdMegaDriveMegaCdBizhawk210AndUp 
									" Genesis/Sega CD (Mega Drive/Mega CD) (BizHawk 2.10 and up)
									$LF
								]a
							]li
							[li 
								[a href=#N64 
									" N64
									$LF
								]a
							]li
							[li 
								[a href=#Nes 
									" NES
									$LF
								]a
							]li
							[li 
								[a href=#Pce 
									" PCE
									$LF
								]a
							]li
							[li 
								[a href=#PceTurbonyma 
									" PCE (TurboNyma)
									$LF
								]a
							]li
							[li 
								[a href=#Psx 
									" PSX
									$LF
								]a
							]li
							[li 
								[a href=#SaturnSaturnPreferences 
									" Saturn (Saturn -> Preferences)
									$LF
								]a
							]li
							[li 
								[a href=#Sms 
									" SMS
									$LF
								]a
							]li
							[li 
								[a href=#Snes 
									" SNES
									$LF
								]a
							]li
							[li 
								[a href=#VirtualBoy 
									" Virtual Boy
									$LF
								]a
							]li
						]ul
					]li
				]ul
			]li
			[li 
				[a href=#Citra 
					" Citra
					$LF
				]a
			]li
			[li 
				[a href=#Dega 
					" Dega
					$LF
				]a
				[ul 
					[li 
						[a href=#Windows_2 
							" Windows
							$LF
						]a
					]li
					[li 
						[a href=#Linux_2 
							" Linux
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#Desmume 
					" DeSmuME
					$LF
				]a
				[ul 
					[li 
						[a href=#Windows_3 
							" Windows
							$LF
						]a
					]li
					[li 
						[a href=#Linux_3 
							" Linux
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#Dolphin 
					" Dolphin
					$LF
				]a
			]li
			[li 
				[a href=#Doom 
					" DOOM
					$LF
				]a
			]li
			[li 
				[a href=#Famtasia 
					" Famtasia
					$LF
				]a
				[ul 
					[li 
						[a href=#MakingTheVideoFilesAvisynthCompatibleUsingVirtualdub 
							" Making the video files AviSynth-compatible using VirtualDub
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#FceuFceux 
					" FCEU/FCEUX
					$LF
				]a
				[ul 
					[li 
						[a href=#Windows_4 
							" Windows
							$LF
						]a
					]li
					[li 
						[a href=#Linux_4 
							" Linux
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#FinalBurnAlpha 
					" Final Burn Alpha
					$LF
				]a
			]li
			[li 
				[a href=#Gens 
					" Gens
					$LF
				]a
			]li
			[li 
				[a href=#Hourglass 
					" Hourglass
					$LF
				]a
			]li
			[li 
				[a href=#JpcRr 
					" JPC-RR
					$LF
				]a
			]li
			[li 
				[a href=#Libtas 
					" libTAS
					$LF
				]a
				[ul 
					[li 
						[a href=#EmulatorsInLibtas 
							" Emulators in libTAS
							$LF
						]a
						[ul 
							[li 
								[a href=#Pcem 
									"PCem
									$LF
								]a
							]li
							[li 
								[a href=#NekoProject21Kai 
									" Neko Project 21 kai
									$LF
								]a
							]li
							[li 
								[a href=#Mame 
									" MAME
									$LF
								]a
							]li
							[li 
								[a href=#Scummvm 
									" ScummVM
									$LF
								]a
							]li
							[li 
								[a href=#Ruffle 
									" Ruffle
									$LF
								]a
							]li
						]ul
					]li
				]ul
			]li
			[li 
				[a href=#Lsnes 
					" lsnes
					$LF
				]a
			]li
			[li 
				[a href=#MameRr 
					" MAME-RR
					$LF
				]a
			]li
			[li 
				[a href=#Mednafen 
					" Mednafen
					$LF
				]a
				[ul 
					[li 
						[a href=#WindowsOrLinux 
							" Windows or linux
							$LF
						]a
					]li
					[li 
						[a href=#LinuxOnly 
							" Linux only
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#Mupen64 
					" Mupen64
					$LF
				]a
				[ul 
					[li 
						[a href=#Guide 
							" Guide
							$LF
						]a
						[ul 
							[li 
								[a href=#Windows_5 
									" Windows
									$LF
								]a
							]li
						]ul
					]li
					[li 
						[a href=#OldGuide 
							" Old Guide
							$LF
						]a
						[ul 
							[li 
								[a href=#Windows_6 
									" Windows
									$LF
								]a
							]li
							[li 
								[a href=#Linux_5 
									" Linux
									$LF
								]a
							]li
						]ul
					]li
				]ul
			]li
			[li 
				[a href=#Openmsx 
					" openMSX
					$LF
				]a
				[ul 
					[li 
						[a href=#Windows_7 
							" Windows
							$LF
						]a
					]li
					[li 
						[a href=#LinuxMac 
							" Linux / Mac
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#Pcejin 
					" PCEjin
					$LF
				]a
				[ul 
					[li 
						[a href=#Windows_8 
							" Windows
							$LF
						]a
					]li
					[li 
						[a href=#Linux_6 
							" Linux
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#Pcsx 
					" PCSX
					$LF
				]a
				[ul 
					[li 
						[a href=#Windows_9 
							" Windows
							$LF
						]a
					]li
					[li 
						[a href=#Linux_7 
							" Linux
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#Psxjin 
					" PSXjin
					$LF
				]a
			]li
			[li 
				[a href=#Snes9x 
					" Snes9x
					$LF
				]a
				[ul 
					[li 
						[a href=#Windows_10 
							" Windows
							$LF
						]a
					]li
					[li 
						[a href=#Linux_8 
							" Linux
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#Vbjin 
					" VBjin
					$LF
				]a
				[ul 
					[li 
						[a href=#Windows_11 
							" Windows
							$LF
						]a
					]li
					[li 
						[a href=#Linux_9 
							" Linux
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#Visualboyadvance 
					" VisualBoyAdvance
					$LF
				]a
			]li
			[li 
				[a href=#Yabause 
					" Yabause
					$LF
				]a
			]li
		]ul
	]div
]div
[h2 id=Introduction 
	" Introduction
	$LF
]h2
[div class=p 
	"This page assumes you are already knowledgeable about playback of movies in the emulator.  If not, consult 
	(__wikiLink|href=/EmulatorResources|implicitdisplaytext=Emulator Resources)
	" for advice on how to set that up first.
	$LF
]div
[div class=p 
	"According to the 
	(__wikiLink|href=/EncoderGuidelines|implicitdisplaytext=Encoder Guidelines)
	", your emulator should be configured to record video at its native resolution and at full frame rate.  The settings you need to do this are listed in the following sections.
	$LF
]div
[h2 id=CommonSettings 
	" Common settings
	$LF
]h2
[div class=p 
	"Dumps should be made with a lossless codec using the RGB colorspace. Under Windows, most of the emulators in use on the site use 
	[a href=https://en.wikipedia.org/wiki/Video_for_Windows rel=noopener external nofollow 
		"VFW
	]a
	" for their video dumping process. Popular VFW choices include 
	[a href=http://lags.leetcode.net/codec.html rel=noopener external nofollow 
		"Lagarith
	]a
	" and 
	[a href=https://github.com/umezawatakeshi/utvideo/releases rel=noopener external nofollow 
		"UtVideo
	]a
	". These lossless RGB dumps can also be used for taking 
	(__wikiLink|href=/Screenshots|implicitdisplaytext=screenshots)
	".
	$LF
]div
[div class=p 
	"Lagarith
	$LF
]div
[ul 
	[li 
		" Check 
		[b 
			"Enable Null Frames
		]b
		$LF
	]li
	[li 
		" Check 
		[b 
			"Use Multithreading
		]b
		$LF
	]li
	[li 
		" Select 
		[b 
			"Mode
		]b
		": RGB (Default)
		$LF
	]li
]ul
[div class=p 
	"UtVideo
	$LF
]div
[ul 
	[li 
		" Select 
		[b 
			"UtVideo RGB VCM
		]b
		" in codec list and configure it
		$LF
	]li
	[li 
		" Set 
		[b 
			"Intra-frame prediction type
		]b
		" to 
		[b 
			"Predict Median
		]b
		$LF
	]li
]ul
[h3 id=NonVfwCodecsViaPipedecWindowsOnly 
	" Non-VFW Codecs via pipedec (Windows only)
	$LF
]h3
[div class=p 
	"Many of the emulators listed here dump video via VFW codecs, and must split those videos at 2GB intervals due to limitations in the aging technology. In cases where avoiding these splits is desirable (for instance, emulators that don't handle the split well and desync the audio/video), or where using a more modern codec (like lossless h.264) is preferable to VFW codecs, 
	[a href=https://github.com/vadosnaprimer/pipedec rel=noopener external nofollow 
		"pipedec
	]a
	" can be used. The following instructions will set up pipedec to use FFmpeg to encode using the lossless UtVideo codec as an example (
	[a href=https://github.com/umezawatakeshi/utvideo/releases rel=noopener external nofollow 
		"take the decoder here
	]a
	"), but pipedec can be configured to pipe video to any encoder you want.
	$LF
]div
[ol 
	[li 
		" Download a compiled version of pipedec: 
		[a href=https://github.com/vadosnaprimer/pipedec/releases/tag/v1 rel=noopener external nofollow 
			"https://github.com/vadosnaprimer/pipedec/releases/tag/v1
		]a
		$LF
	]li
	[li 
		" Install pipedec according to the instructions that come in the download.
		$LF
		[ul 
			[li 
				" If you're running a 32-bit emulator (like mupen64) on a 64-bit OS, execute the file called 
				[code 
					"register pipedec (32 bit on 64 bit system).reg
				]code
				". It should install 
				[code 
					"pipedec.dll
				]code
				" into 
				[code 
					"%WinDir%\SysWoW64
				]code
				". If that file fails to get moved there, copy it manually.
				$LF
			]li
			[li 
				" 
				[code 
					"%WinDir%
				]code
				" means your Windows directory, usually it's 
				[code 
					"C:\Windows
				]code
				". If you simply put 
				[code 
					"%WinDir%\SysWoW64
				]code
				" into Explorer address bar it should instantly bring you there.
				$LF
			]li
		]ul
	]li
	[li 
		" Take 
		[code 
			"ffmpeg.exe
		]code
		" according to the bitness of your Operating System. For a 64-bit OS you can just grab it from 
		[a href=https://github.com/TASEmulators/ffmpeg-binaries/blob/master/ffmpeg-4.4.1-static-windows-x64.7z rel=noopener external nofollow 
			"https://github.com/TASEmulators/ffmpeg-binaries/blob/master/ffmpeg-4.4.1-static-windows-x64.7z
		]a
		$LF
	]li
	[li 
		" Open 
		[code 
			".pipedec
		]code
		" in a text editor and replace the 
		[code 
			"ffmpeg
		]code
		" path with where you put 
		[code 
			"ffmpeg.exe
		]code
		". Set the 
		[code 
			"avi
		]code
		" file path to where you want your video created.
		$LF
	]li
	[li 
		" Copy the 
		[code 
			".pipedec
		]code
		" file to 
		[code 
			"%AppData%\pipedec
		]code
		" (create the folder if it's not there).
		$LF
	]li
	[li 
		" Start up an emulator that uses VFW for dumping, and starting dumping any kind of video so that the VFW codec selection dialog appears.
		$LF
	]li
	[li 
		" You should see 
		[em 
			"Pipe Codec
		]em
		" in the list now. If you don't, you didn't install it correctly. Make sure that you install both the 32- and 64-bit versions if you are using older emulators alongside newer ones.
		$LF
	]li
	[li 
		" Select 
		[em 
			"Pipe Codec
		]em
		" from the list.
		$LF
	]li
	[li 
		" Select the path for the 
		[code 
			"avi
		]code
		" file as usual. Note that it will only contain your audio! The video file is created separately by 
		[code 
			"ffmpeg
		]code
		".
		$LF
		[ul 
			[li 
				" If you don't get any output from pipedec for some reason, open up 
				[code 
					"%AppData%/pipedec\stdout.txt
				]code
				" to see what happened.
				$LF
			]li
		]ul
	]li
	[li 
		" Stop dumping video as normal when finished.
		$LF
	]li
	[li 
		" If everything is working, you should now have two files - the video file that pipedec outputted, and the audio file that the emulator directly created. You will need to mux these files together at some point during the encoding process. To load these files in AVISynth, use 
		[code 
			"AviSource("pipedec.avi", pixel_type="RGB24")
		]code
		".
		$LF
	]li
]ol
[h2 id=DeinterlacingPsxN64WithAngrylionSaturn 
	" Deinterlacing (PSX, N64 with AngryLion, Saturn)
	$LF
]h2
[div class=p 
	"If you come across footage that's interlaced (480i or 576i), it will need to be deinterlaced. This is done with 
	[a href=http://avisynth.nl/index.php/QTGMC rel=noopener external nofollow 
		"QTGMC
	]a
	". Download it and all of its dependencies and put them in the AviSynth+ plugins64+ folder.  For the dependencies, get the DLLs from the x64 folder (or x64_W7 or x64_W7_AVX2 or x64_msvc for some of the dependencies). You'll also need FFTW3 (mentioned on the QTGMC page) and follow the steps on the QTGMC page (right below the dependencies).
	$LF
]div
[div class=p 
	"Once everything's set up, you can deinterlace the segments in question. If Weave was used (the dump features combing), the following code is used:
	$LF
]div
[pre 
	[code class=language-AviSynth 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"If Bob was used instead (the dump features rapidly wobbling lines, also known as "Bobbing"), the following code is used instead:
	$LF
]div
[pre 
	[code class=language-AviSynth 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"It should be noted that for N64, everything is dumped at 480 height, so the interlaced segments will need to be isolated in order to leave the segements that don't feature interlacing intact. Something like this does the job (this is a Weave example):
	$LF
]div
[pre 
	[code class=language-AviSynth 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"In all cases, it is recommended to save the result to AVI for previewing the result at regular speed, as QTGMC is very slow.
	$LF
]div
[div class=p 
	[b 
		"Important note:
	]b
	" If the total frame count of the footage that needs deinterlacing is not a multiple of 2, it will add one extraneous frame when deinterlacing (check with 
	[code 
		"Subtitle(String(last.FrameCount))
	]code
	" and cause audio/video desync. To fix, you need to add the following line after deinterlacing (assuming one AVI segment at 480i):
	$LF
]div
[pre 
	[code class=language-AviSynth 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[h2 id=Bizhawk 
	" BizHawk
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"variable
			]td
			[td 
				"44.1KHz stereo
			]td
		]tr
	]tbody
]table
[h3 id=Windows 
	" Windows
	$LF
]h3
[ol 
	[li 
		" Select 
		[em 
			"Speed/Skip
		]em
		" to 
		[em 
			"0 (never skip)
		]em
		$LF
	]li
	[li 
		" Open the ROM.
		$LF
	]li
	[li 
		" Pause emulation. (Pause key)
		$LF
	]li
	[li 
		" Load the movie.
		$LF
	]li
	[li 
		" Select 
		[em 
			"File -> AVI/WAV -> Record AVI/WAV
		]em
		".
		$LF
		[ul 
			[li 
				" If you haven't configured which A/V writer to use, you will be presented with a dialog where you can can choose it.
				$LF
				[ul 
					[li 
						" Use 
						[em 
							"AVI writer
						]em
						" for 
						[a href=https://en.wikipedia.org/wiki/Video_for_Windows rel=noopener external nofollow 
							"regular codecs
						]a
						" you have installed on your OS.
						$LF
					]li
					[li 
						" Use 
						[em 
							"FFmpeg writer
						]em
						" if you want to 
						(__wikiLink|displaytext=avoid limitations|href=/Bizhawk/FAQ#RecordingAVideo)
						" of the aforementioned codecs (for example if you don't want video to be split on 2GB).
						$LF
					]li
				]ul
			]li
			[li 
				" Note that Bizhawk 2.3 has a bug in unattended dumping (the video is always upscaled by 2), so use 
				[em 
					"Config and Record AVI/WAV
				]em
				" instead.
				$LF
			]li
		]ul
	]li
	[li 
		" Choose a file name (such as 
		[em 
			"raw.avi
		]em
		"), and choose a lossless RGB codec of your choice (see 
		[em 
			"Common settings
		]em
		" for suggestions).  Click OK.
		$LF
	]li
	[li 
		" Unpause emulation. At this point, audio and video are now being captured.
		$LF
	]li
	[li 
		" When you reach the desired end point, select 
		[em 
			"File -> AVI/WAV -> Stop AVI
		]em
		".
		$LF
	]li
	[li 
		" For some systems, there will be multiple output files, one per resolution; these must be resized and combined into a single uniform resolution.
		$LF
		[ul 
			[li 
				" For the WonderSwan, the files instead have to be combined with each file letterboxed, not nonuniformly resized, to the highest height outputted. The 
				[a href=https://github.com/TASEmulators/TASEncodingPackage rel=noopener external nofollow 
					"TASVideos encoding package
				]a
				" has an example in AviSynth on how to do this.
				$LF
			]li
		]ul
	]li
]ol
[h3 id=Linux 
	" Linux
	$LF
]h3
[div class=p 
	"BizHawk on Linux can dump with ffmpeg. TODO: Describe
	$LF
]div
[h3 id=AlternateSync 
	" Alternate Sync
	$LF
]h3
[div class=p 
	[b 
		"NOTE
	]b
	": as of BizHawk 2.6.1, this setting has been renamed to “Sync to Audio”
	$LF
]div
[div class=p 
	"BizHawk doesn't dump video with variable framerate even if the console outputs it. It's converted to constant framerate, and there are two ways of doing this conversion: audio throttle and clock throttle.
	$LF
]div
[div class=p 
	"If 
	[em 
		"Alternate Sync
	]em
	" is enabled, "Audio Throttle" is simulated. Video frames are repeated or skipped to sync with audio, whose absolute timing is more accurate and reliable when it comes to variable framerates.
	$LF
]div
[div class=p 
	"Disabling 
	[em 
		"Alternate Sync
	]em
	" results in "Clock Throttle" for videos. Audio gets stretched to match video frames timings. If there's huge descrepancy between how audio and video are timed, skewed audio pitch will be noticeable to the viewer, so it's generally not recommended to use this approach.
	$LF
]div
[h3 id=SystemSpecificSettings 
	" System specific settings
	$LF
]h3
[h4 id=Commodore64 
	" Commodore 64
	$LF
]h4
[ul 
	[li 
		" Change border type to Normal and reboot the core. Use the same method as 
		(__wikiLink|displaytext=SMS|href=/Forum/Posts/440840)
		" on dealing with the uneven resolution.
		$LF
	]li
]ul
[h4 id=GameBoyGameBoyColor 
	" Game Boy/Game Boy Color
	$LF
]h4
[ul 
	[li 
		" If the movie is using Gambatte in Game Boy Color mode, use the 
		[em 
			"Sameboy
		]em
		" palette.
		$LF
		[ul 
			[li 
				" If the version of BizHawk is pre-2.9 use the 
				[em 
					"VBA Accurate
				]em
				" palette.
				$LF
			]li
		]ul
	]li
	[li 
		" If the game is using DMG mode (Original Game Boy), use the greyscale palette.
		$LF
	]li
	[li 
		" Enable 
		[em 
			"Alternate Sync
		]em
		"/
		[em 
			"Sync To Audio
		]em
		": File -> AVI/WAV -> Config and Record AVI/WAV.
		$LF
		[ul 
			[li 
				" If the version of BizHawk is pre-X.x do not use this method. 
				(__wikiLink|href=/TODO|implicitdisplaytext=TODO)
				": figure out which version.
				$LF
			]li
		]ul
	]li
	[li 
		" If the movie uses the Game Link Cable, run the game using the Multi-Disk Bundler under 
		[em 
			"Tools
		]em
		" with GBL selected and with the ROM(s) used in the movie.
		$LF
	]li
]ul
[h4 id=GameBoyAdvance 
	" Game Boy Advance
	$LF
]h4
[ul 
	[li 
		" If the movie uses VBA-Next, enable 
		[em 
			"Alternate Sync
		]em
		": File -> AVI/WAV -> Config and Record AVI/WAV.
		$LF
	]li
]ul
[h4 id=GenesisSegaCdMegaDriveMegaCdBizhawk210AndUp 
	" Genesis/Sega CD (Mega Drive/Mega CD) (BizHawk 2.10 and up)
	$LF
]h4
[ul 
	[li 
		" It is recommended to enable overscan: Settings -> Sync Settings -> set Overscan to All
		$LF
	]li
	[li 
		" It is recommended to use Nuked's YM2612 emulation, as it is the most accurate OPL emulation out there: Settings -> Sync Settings -> set 
		(__wikiLink|href=/Genesis/CD|implicitdisplaytext=Genesis/CD)
		" FM Sound Chip Type to 
		[code 
			"Nuked_YM2612
		]code
		$LF
		[ul 
			[li 
				" As both are sync settings, record a dummy BK2 with these settings set, then drag-and-drop the 
				[code 
					"SyncSettings.json
				]code
				" file from the created BK2 to the submission's BK2 (make sure to create a backup first) with e.g. 7-Zip.
				$LF
			]li
			[li 
				"Note: A movie using a different FM sound chip type or overscan mode may 
				[em 
					"not
				]em
				" sync with Nuked's OPL and/or with full overscan, in which case, keep the setting(s) as is. Ensure to verify sync beforehand.
				$LF
			]li
		]ul
	]li
]ul
[h4 id=N64 
	" N64
	$LF
]h4
[ul 
	[li 
		" Enable 
		[em 
			"Alternate Sync
		]em
		": File -> AVI/WAV -> Config and Record AVI/WAV.
		$LF
	]li
	[li 
		" Since 
		(__wikiLink|displaytext=Jabo video plugin has been deprecated|href=/Forum/Topics/20237)
		", no bug fixes or enhancements should be used for it. On the other hand, movies using GLideN64 should have all the enhancements that are possible to pull off. For movies using other plugins, reasonable effort should be invested to try to resync them on GLideN64 and apply possible enhancements.
		$LF
	]li
	[li 
		" In some cases, it's recommended to update the GLideN64 plugin before dumping to get the latest bug fixes and improved accuracy.
		$LF
		[ul 
			[li 
				" Recommended GLideN64 settings (note that "enhanced" is typically used for SD and HD publications, "accuracy" is listed as settings for anyone wishing to do additional native-resolution encodes with settings that better reflect the N64's native output). Only non-default or notable options are listed here.
				$LF
				[ul 
					[li 
						" HW lighting: enabled for enhanced, disabled for accuracy (if you experience severely brightened colors, disable this).
						$LF
					]li
					[li 
						" Multisampling: disabled (conflicts with other settings).
						$LF
					]li
					[li 
						" FXAA: enabled for enhanced at resolutions 4K and above, otherwise disabled (can cause visual problems at lower resolutions)
						$LF
					]li
					[li 
						" Max anisotropy: enabled for enhanced, disabled for accuracy.
						$LF
					]li
					[li 
						" Bilinear filtering: N64 3-point.
						$LF
					]li
					[li 
						" Use defaults for current game: unchecked.
						$LF
					]li
					[li 
						" Copy Depth to RDRAM: use software renderer.
						$LF
					]li
					[li 
						" Copy Color to RDRAM: copy in sync mode.
						$LF
					]li
					[li 
						" N64 depth compare: enabled
						$LF
					]li
				]ul
			]li
			[li 
				" Note: Because FXAA is not advised to be used at medium or low resolutions, anti-aliasing is not available on SD dumps. It's recommended you dump at a multiple of the game's internal resolution ("Show Internal Resolution" is a checkbox that can be enabled to discover this) and use 
				[a href=https://github.com/Aktanusa/AreaResize/releases rel=noopener external nofollow 
					"Aktan's modified AreaResize
				]a
				" AVISynth plugin to resize the dumped footage down to SD, while still preserving the clarity of the game's 2D elements.
				$LF
			]li
		]ul
	]li
]ul
[h4 id=Nes 
	" NES
	$LF
]h4
[ul 
	[li 
		" In Graphics Settings, disable 
		[em 
			"Allow more than 8 sprites
		]em
		" and 
		[em 
			"Clip Left and Right Sides
		]em
		".
		$LF
	]li
	[li 
		" Set drawing area to (0-239) for PAL, and to (8-231) for NTSC.
		$LF
	]li
	[li 
		" In Sound Channels, set APU Volume to 1.
		$LF
		[ul 
			[li 
				" For VRC6 games with the expansion audio (e.g. Akumajou Densetsu), the APU volume should be set to 5.
				$LF
			]li
		]ul
	]li
	[li 
		" If the movie uses SubNESHawk, enable 
		[em 
			"Alternate Sync
		]em
		": File -> AVI/WAV -> Config and Record AVI/WAV.
		$LF
	]li
]ul
[h4 id=Pce 
	" PCE
	$LF
]h4
[ul 
	[li 
		" Enable 
		[em 
			"Sprite Limit
		]em
		".
		$LF
	]li
]ul
[h4 id=PceTurbonyma 
	" PCE (TurboNyma)
	$LF
]h4
[ul 
	[li 
		" First rendered scanline: 0
		$LF
	]li
	[li 
		" Last rendered scanline: 239
		$LF
	]li
	[li 
		" Show horizontal overscan: True
		$LF
	]li
]ul
[h4 id=Psx 
	" PSX
	$LF
]h4
[ul 
	[li 
		" Enable Alternate Sync: File -> AVI/WAV -> Config and Record AVI/WAV.
		$LF
		[ul 
			[li 
				" If the version of BizHawk is pre-2.5 Alternate Sync must only be enabled for PAL titles.
				$LF
			]li
		]ul
	]li
	[li 
		" Resolution Mode: Hardcore Debug Mode
		$LF
	]li
	[li 
		" Horizontal Overscan Clipping: None
		$LF
	]li
	[li 
		" Deinterlacing: Weave or Bob
		$LF
	]li
	[li 
		" For Light Gun titles set the value of the lightgun color to 16777216
		$LF
	]li
]ul
[div class=p 
	"On the Nymashock core, as with the Saturn core below since version 2.5, Constant Frame Buffer needs to be set to false and Correct aspect ratio set to true, as well as Show horizontal overscan set to true.
	$LF
]div
[h4 id=SaturnSaturnPreferences 
	" Saturn (Saturn -> Preferences)
	$LF
]h4
[ul 
	[li 
		" Resolution Mode: Hardcore Debug
		$LF
	]li
	[li 
		" Horizontal Blend: False
		$LF
	]li
	[li 
		" Horizontal Overscan: True
		$LF
	]li
	[li 
		" ScanlineStartNtsc: 0
		$LF
	]li
	[li 
		" ScanlineEndNtsc: 239
		$LF
	]li
	[li 
		" ScanlineStartPal: 0
		$LF
	]li
	[li 
		" ScanlineEndPal: 255
		$LF
	]li
	[li 
		" For Light Gun titles set the value of the lightgun color to 16777216
		$LF
	]li
]ul
[div class=p 
	"BizHawk as of version 2.5 changed the configuration a little. On those, Constant Frame Buffer needs to be set to false, as it mimics Hardcore Debug Mode. Correct aspect ratio should be set to true. The other settings above are kept as is.
	$LF
]div
[h4 id=Sms 
	" SMS
	$LF
]h4
[ul 
	[li 
		" If you're using version 1.11.7 or greater, enable 
		[em 
			"Overscan
		]em
		". See 
		(__wikiLink|displaytext=this post|href=/Forum/Posts/440840)
		" for how to handle the resulting uneven resolution.
		$LF
	]li
	[li 
		" Enable 
		[em 
			"Sprite Limit
		]em
		$LF
	]li
	[li 
		" Enable 
		[em 
			"FM Chip
		]em
		" if it's a Japanese game (unless this causes a desync)
		$LF
	]li
	[li 
		" Disable 
		[em 
			"Overclock
		]em
		$LF
	]li
	[li 
		" Disable 
		[em 
			"Stereo Separation
		]em
		".
		$LF
	]li
]ul
[div class=p 
	"Genplus-GX specific (BizHawk 2.10 and up)
	$LF
]div
[ul 
	[li 
		" It is recommended to enable overscan: Settings -> Sync Settings -> set Overscan to All
		$LF
	]li
	[li 
		" It is recommended to use Nuked's YM2612 emulation, as it is the most accurate OPL emulation out there: Settings -> Sync Settings -> set 
		(__wikiLink|href=/SMS|implicitdisplaytext=SMS)
		" FM Sound Chip Type to 
		[code 
			"YM2413_NUKED
		]code
		$LF
		[ul 
			[li 
				" As both are sync settings, record a dummy BK2 with these settings set, then drag-and-drop the 
				[code 
					"SyncSettings.json
				]code
				" file from the created BK2 to the submission's BK2 (make sure to create a backup first) with e.g. 7-Zip.
				$LF
			]li
			[li 
				"Note: A movie using a different FM sound chip type or overscan mode may 
				[em 
					"not
				]em
				" sync with Nuked's OPL and/or with full overscan, in which case, keep the setting(s) as is. Ensure to verify sync beforehand.
				$LF
			]li
		]ul
	]li
]ul
[h4 id=Snes 
	" SNES
	$LF
]h4
[ul 
	[li 
		" If using any pre-2.0 BizHawk version, enable 
		[em 
			"Alternate Sync
		]em
		": File -> AVI/WAV -> Config and Record AVI/WAV.
		$LF
	]li
	[li 
		" For PAL games specifically on the (Sub)BSNESv115+ core: SNES -> Options -> check "Show Overscan".
		$LF
	]li
]ul
[h4 id=VirtualBoy 
	" Virtual Boy
	$LF
]h4
[ul 
	[li 
		" VirtualBoy -> Preferences -> ThreeDeeMode: SideBySide.
		$LF
	]li
	[li 
		" Note: Since BizHawk 2.9, the levels adjustment in AviSynth changed. For BizHawk 2.8 and earlier, you need to add 
		[code 
			"Levels(0, 1, 255, 0, 157)
		]code
		" to the script, whereas since 2.9, this has changed to 
		[code 
			"Levels(0, 1, 255, 0, 167)
		]code
		". Please follow 
		(__wikiLink|displaytext=this topic|href=/Forum/Topics/22936)
		" for more details on any AviSynth adjustments.
		$LF
	]li
]ul
[h2 id=Citra 
	" Citra
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"400x480
			]td
			[td 
				" roughly 32728Hz stereo
			]td
		]tr
	]tbody
]table
[ol 
	[li 
		" Make sure no saves are present for the game you want to dump. If there are, right-click on the game and select 
		[em 
			"Open Save Data Location
		]em
		". Go back to the 
		[em 
			"title
		]em
		" folder in the file explorer window that opens, and delete every folder there.
		$LF
	]li
	[li 
		" Under 
		[em 
			"Emulation -> Configuration
		]em
		", go to the 
		[em 
			"Graphics
		]em
		" settings and make sure the 
		[em 
			"Internal Resolution
		]em
		" is set to 
		[em 
			"Native (400x240)
		]em
		", 
		[em 
			"Linear Filtering
		]em
		" is enabled and no 
		[em 
			"Post-Processing Shader
		]em
		" and 
		[em 
			"Texture Filter
		]em
		" are used (
		[em 
			"None
		]em
		").
		$LF
		[ul 
			[li 
				" Additionally, 
				[em 
					"Stereoscopic 3D Mode
				]em
				" should be left off, 
				[em 
					"Screen Layout
				]em
				" is set to 
				[em 
					"Default
				]em
				", and everything in the 
				[em 
					"Layout
				]em
				" and 
				[em 
					"Utility
				]em
				" sections unchecked.
				$LF
			]li
			[li 
				" In the 
				[em 
					"Advanced
				]em
				" tab of the graphics settings, it is not required to 
				[em 
					"Enable Hardware Renderer
				]em
				", but it is recommended anyway, as the emulator runs really slowly otherwise. Everything in the 
				[em 
					"Renderer
				]em
				" section should be checked.
				$LF
			]li
		]ul
	]li
	[li 
		" Under 
		[em 
			"Tools -> Dump Video
		]em
		", select 
		[em 
			"AVI
		]em
		" as the output format and specify a filename path.
		$LF
		[ul 
			[li 
				" The audio encoder should be set to 
				[em 
					"PCM signed 16-bit little endian
				]em
				".
				$LF
			]li
			[li 
				" The video encoder can be either FFV1, libx264rgb or UT Video with the following settings, then click on OK:
				$LF
				[ul 
					[li 
						" UT Video: 
						[br 
						]br
						" 
						[code 
							"pixel_format:gbrp,pred:median
						]code
						$LF
					]li
					[li 
						" libx264rgb: 
						[br 
						]br
						" 
						[code 
							"pixel_format:rgb24,qp:0,preset:veryfast
						]code
						$LF
					]li
					[li 
						" FFV1: 
						[br 
						]br
						" 
						[code 
							"pixel_format:bgr0,level:1
						]code
						$LF
					]li
				]ul
			]li
		]ul
	]li
	[li 
		" Next, go to 
		[em 
			"Tools -> Movie -> Play
		]em
		" and select the CTM you want to dump. Click on 
		[em 
			"OK
		]em
		", and the game launches in movie playback mode and start dumping to AVI.
		$LF
	]li
	[li 
		" When the movie finishes, the emulator will pause. Select 
		[em 
			"Emulation -> Continue
		]em
		" to unpause emulation and dump the credits.
		$LF
	]li
	[li 
		" When you have reached the desired ending point, select 
		[em 
			"Emulation -> Stop
		]em
		" or close Citra.
		$LF
	]li
]ol
[div class=p 
	"Note: The audio starts a bit too early in the AVI dump, but it can be corrected via AviSynth. Just add 
	[code 
		"DelayAudio(3.7*4481136.0/268111856)
	]code
	" to the AVS+ script.
	$LF
]div
[h2 id=Dega 
	" Dega
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"256x192 (SMS)
			]td
			[td 
				"44.1KHz mono
			]td
		]tr
		[tr 
			[td 
				"160x144 (GG)
			]td
			[td 
				"44.1KHz stereo
			]td
		]tr
	]tbody
]table
[h3 id=Windows_2 
	" Windows
	$LF
]h3
[div class=p 
	"Dega's built-in VFW support is broken (causes audio desyncs), so external capture software is required; for this purpose, 
	[a href=http://www.farb-rausch.de/~fg/kkapture/ rel=noopener external nofollow 
		".kkapture
	]a
	" is used for its ability to preserve all of the frames in the input at the expected frame rate.
	$LF
]div
[ol 
	[li 
		" Open .kkapture.
		$LF
	]li
	[li 
		" Under 
		[em 
			"Demo
		]em
		", select the 
		[code 
			"dega
		]code
		" executable.
		$LF
	]li
	[li 
		" Under 
		[em 
			"target
		]em
		", select the desired target AVI file (such as 
		[code 
			"raw.avi
		]code
		").
		$LF
	]li
	[li 
		" Set the FPS to 60 for NTSC games or 50 for PAL games.
		$LF
	]li
	[li 
		" Select 
		[em 
			"kkapture!
		]em
		".  This will start Dega.
		$LF
	]li
	[li 
		" Make sure 
		[em 
			"Sound -> Enhanced PSG
		]em
		" is unchecked.
		$LF
	]li
	[li 
		" Make sure 
		[em 
			"Graphics -> Overlay
		]em
		" is set to 
		[em 
			"None
		]em
		".
		$LF
	]li
	[li 
		" If applicable, check 
		[em 
			"Sound -> FM chip
		]em
		"; use of this is normally specified in the submission text.
		$LF
	]li
	[li 
		" Load the ROM and start movie playback.
		$LF
	]li
	[li 
		" At the appropriate end point, close Dega.
		$LF
	]li
]ol
?IF 0
	[div class=p 
		"When processing the audio for Master System games, be sure to only use one audio channel in order to conserve space (The Master System doesn't actually output in Stereo, the emulator just duplicates the Mono track into a recorded Stereo track), selecting only one audio channel can be done in VirtualDub.
		$LF
		[em 
			"TODO
		]em
		": Explain how to do this in VirtualDub.
		$LF
	]div
	[div class=p 
		"Just in case anyone comes across this:  Every modern audio codec will successfully optimize out stereo tracks that are actually bit identical.  So this isn't really needed.
		$LF
	]div
?ENDIF 0
[h3 id=Linux_2 
	" Linux
	$LF
]h3
[ol 
	[li 
		" Play back the movie, noting the desired end frame of the video recording.
		$LF
	]li
	[li 
		" Calculate the number of frames past the end of the movie the target end frame is (the length of the movie in frames is specified at the end of the submission text).
		$LF
	]li
	[li 
		" Assuming the movie file is 
		[code 
			"movie.mmv
		]code
		" and the ROM filename is 
		[code 
			"rom.sms
		]code
		", invoke degavi with the following command line: 
		[br 
		]br
		" 
		[code 
			"dega -f <number from 2> -m movie.mmv -o raw.avi rom.sms -- -oac pcm -ovc lavc -lavcopts vcodec=ffv1:format=bgr32
		]code
		$LF
	]li
]ol
[div class=p 
	[code 
		"degavi
	]code
	" will terminate automatically when dumping is done, yielding 
	[code 
		"raw.avi
	]code
	".
	$LF
]div
[h2 id=Desmume 
	" DeSmuME
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"256x384
			]td
			[td 
				"44.1KHz stereo
			]td
		]tr
	]tbody
]table
[h3 id=Windows_3 
	" Windows
	$LF
]h3
[ol 
	[li 
		" Select 
		[em 
			"Config -> 3D Settings
		]em
		" and select 
		[em 
			"SoftRasterizer
		]em
		" as the Renderer.
		$LF
	]li
	[li 
		" Select 
		[em 
			"Config -> Frame Skip -> 0
		]em
		".
		$LF
	]li
	[li 
		" Optionally, uncheck 
		[em 
			"Config -> Frame Skip -> Limit framerate
		]em
		".
		$LF
	]li
	[li 
		" Open the ROM.
		$LF
	]li
	[li 
		" Pause emulation. (Pause key)
		$LF
	]li
	[li 
		" Load the movie.
		$LF
	]li
	[li 
		" Select 
		[em 
			"File -> Record AVI
		]em
		".
		$LF
	]li
	[li 
		" Choose a file name (such as 
		[em 
			"raw.avi
		]em
		"), and choose a lossless RGB codec of your choice (see 
		[em 
			"Common settings
		]em
		" for suggestions).  Click OK.
		$LF
	]li
	[li 
		" Unpause emulation. At this point, audio and video are now being captured.
		$LF
	]li
	[li 
		" When you reach the desired end point, select 
		[em 
			"File -> Stop AVI
		]em
		".
		$LF
	]li
]ol
[h3 id=Linux_3 
	" Linux
	$LF
]h3
[div class=p 
	"Linux builds of DeSmume do not, at present, have video capture ability.  You will need to use 
	[a href=http://winehq.org rel=noopener external nofollow 
		"Wine
	]a
	".
	$LF
]div
[h2 id=Dolphin 
	" Dolphin
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"variable, 4:3 or 16:9
			]td
			[td 
				"32KHz or 48KHz stereo
			]td
		]tr
	]tbody
]table
[ul 
	[li 
		" 
		[b 
			"Note:
		]b
		" Dolphin requires a setup and a procedure that may not be friendly to those new to video dumping. It is recommended to try out other emulators if you are.
		$LF
	]li
]ul
[div class=p 
	"See this 
	(__wikiLink|displaytext=dedicated page|href=/EncodingGuide/VideoDumping/Dolphin)
	".
	$LF
]div
[h2 id=Doom 
	" DOOM
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"320x200 (default)
			]td
			[td 
				"44.1kHz stereo
			]td
		]tr
	]tbody
]table
[ul 
	[li 
		" 
		[b 
			"Note:
		]b
		" This guide uses feos' customized PrBoom+ setup, which you can get 
		[a href=https://github.com/vadosnaprimer/prboom-plus/releases rel=noopener external nofollow 
			"here
		]a
		".
		$LF
	]li
	[li 
		" 
		[b 
			"Note 2:
		]b
		" This method produces video files that are at 70 fps, but the gameplay footage is actually at 35 fps, with every other frame repeated in the video files.
		$LF
	]li
]ul
[ol 
	[li 
		" If the WAD uses the original DOOM music, get the 
		[a href=http://sc55.duke4.net/games.php rel=noopener external nofollow 
			"MP3 or Vorbis soundpack
		]a
		" of the SC-55 recordings of the DOOM soundtracks and modify prboom-plus.cfg under the section 
		[code 
			"# Music
		]code
		" to use the sound files.
		$LF
	]li
	[li 
		" If the demo uses a custom PWAD that features higher resolution textures and sprites, in 
		[code 
			"prboom-plus.cfg
		]code
		" you can set the following. Otherwise, leave the settings as is.
		$LF
		[ul 
			[li 
				" 
				[em 
					"videomode -> OpenGL
					$LF
				]em
			]li
			[li 
				" 
				[em 
					"screen_resolution -> 640x400
				]em
				$LF
			]li
			[li 
				" 
				[em 
					"gl_texture_filter -> 2
				]em
				$LF
			]li
			[li 
				" 
				[em 
					"gl_sprite_filter -> 2
				]em
				$LF
			]li
			[li 
				" 
				[em 
					"gl_lightmode -> 3
				]em
				$LF
			]li
			[li 
				" 
				[em 
					"useglgamma -> 0
				]em
				$LF
			]li
		]ul
	]li
	[li 
		" Begin dumping the demo with the command 
		[code 
			"prboom-plus -iwad YourIWADFileHere.wad [-file YourPWADFileHere.wad] -timedemo YourDemoFileHere.lmp -viddump video.avi
		]code
		" You can do this either through the command line or with a batch file/bash script. This will produce an AVI file with UTVideo-encocded video and uncompressed PCM audio.
		$LF
	]li
	[li 
		" DOOM demos normally close the game themselves when they're finished. If they don't and you've reached your desired end point, access the menu and quit.
		$LF
		[ul 
			[li 
				" 
				[a href=https://github.com/vadosnaprimer/prboom-plus/releases/tag/feos2 rel=noopener external nofollow 
					"feos' build #2
				]a
				" is pre-configured to disable application shutdown after demo end (
				[code 
					"demo_endquit 0
				]code
				").
				$LF
			]li
		]ul
	]li
]ol
[h2 id=Famtasia 
	" Famtasia
	$LF
]h2
[pre 
	"* 
	[a class=intlink href=/Users/Profile/Dacicus 
		"Dacicus
	]a
	" doesn't understand why so many people are having trouble with Famtasia 
	$LF
	"<
	[a class=intlink href=/Users/Profile/sgrunt 
		"Grunt
	]a
	"> Famtasia *is* trouble. 
	$LF
]pre
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"256x224 (NTSC), 256x240 (PAL)
			]td
			[td 
				"44.1kHz mono
			]td
		]tr
	]tbody
]table
[ul 
	[li 
		" 
		[b 
			"WARNING
		]b
		": The emulator dumps video RAW uncompressed in real-time, and in 2 GB segments.
		[a id=r10 
		]a
		[sup 
			"[
			[a href=#10 
				"10
			]a
			"]
		]sup
		$LF
	]li
	[li 
		" 
		[b 
			"Note
		]b
		": Make sure you have the 
		[a href=http://bisqwit.iki.fi/utils/famtasiapatch.php rel=noopener external nofollow 
			"patched
		]a
		"  version. The 60 FPS, Windows fix, 240 scanlines
		[a id=r11 
		]a
		[sup 
			"[
			[a href=#11 
				"11
			]a
			"]
		]sup
		", and AVI recording patches are required; the Audio logger must not be selected. The others are optional.
		$LF
	]li
]ul
[ol 
	[li 
		" Start Famtasia
		$LF
	]li
	[li 
		" Config -> Display -> Option: Resolution should be "Window Mode," Size x1, Drawing method should be "Window 8bpp,x1 size"
		$LF
	]li
	[li 
		" Config -> Display -> Option: Check "Disable system messages"
		$LF
	]li
	[li 
		" Config -> Speed: Refresh should be 1, Auto unchecked, ExecSpeed 100, and Windows Occupation all the way to the left
		$LF
	]li
	[li 
		" Config -> Sound: No Reverberation should be checked, Sampling Rate should be 44,100Hz 8Bits
		$LF
	]li
	[li 
		" Open the ROM. (It will instantly start recording upon loading the ROM, you may consider waiting a few seconds for the intro to change to make cropping it off easier)
		$LF
	]li
	[li 
		" Edit -> Movie -> Play -> Play Movie -> click "..." and select the movie you want to record
		$LF
	]li
	[li 
		" When you're done recording, close Famtasia.
		$LF
	]li
]ol
[h3 id=MakingTheVideoFilesAvisynthCompatibleUsingVirtualdub 
	" Making the video files AviSynth-compatible using VirtualDub
	$LF
]h3
[ol 
	[li 
		" Open the first segment (usually recording00.avi).
		$LF
	]li
	[li 
		" Video -> Compression -> Select Lagarith/CamStudio/your favorite lossless RGB codec and click OK.
		$LF
	]li
	[li 
		" Fix display using the instructions below for NTSC or PAL, as appropriate.
		$LF
	]li
	[li 
		" Save as something else (e.g., recording00_fixed.avi).
		$LF
	]li
	[li 
		" Repeat for each segment.
		$LF
	]li
]ol
[h1 
	" Fixing the display using VirtualDub (NTSC)
	$LF
]h1
[ol 
	[li 
		" Video -> Filters -> Click "Add..." Select "null transform" and click OK.
		$LF
	]li
	[li 
		" With "null transform" selected, click "Cropping."
		$LF
	]li
	[li 
		" Set Y1 offset to 7 and Y2 offset to 9. Click OK twice.
		$LF
	]li
]ol
[h1 
	" Fixing the display using VirtualDub (PAL)
	$LF
]h1
[ol 
	[li 
		" Download 
		[a href=http://www.infognition.com/VirtualDubFilters/detailed.html#185 rel=noopener external nofollow 
			"Emiliano Ferrari's Shift filter
		]a
		" and extract the ef_shift.vdf file into VDub's plugins directory. (Note: 
		[a href=http://www.infognition.com/VirtualDubFilters/detailed.html#83 rel=noopener external nofollow 
			"Simon Walters' ShiftWrap filter
		]a
		" can also do this, but the processing settings aren't saved correctly for batch processing.)
		$LF
	]li
	[li 
		" Video -> Filters -> Click "Add..."
		$LF
	]li
	[li 
		" Select "Shift" in the filters list and click OK. (If it doesn't appear in the list, select "Load..." and navigate to the location of the ef_shift.vdf file.)
		$LF
	]li
	[li 
		" In the Shift configuration dialog, check "Repeat the picture."
		$LF
	]li
	[li 
		" Enter 1 into the Y text box, or click the down arrow once. Click OK twice.
		$LF
	]li
]ol
[h2 id=FceuFceux 
	" FCEU/FCEUX
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"256x224 (NTSC), 256x240 (PAL)
			]td
			[td 
				"48KHz mono
			]td
		]tr
	]tbody
]table
[ul 
	[li 
		" If capturing from 
		[b 
			"FCEU 0.98.12
		]b
		" or 
		[b 
			"FCEU 0.98.16
		]b
		" is needed for any reason, see 
		(__wikiLink|displaytext=this thread|href=/Forum/Topics/19567)
		" and download the "AVIfix" build.
		$LF
	]li
	[li 
		" For 0.98.12, do 
		[em 
			"not
		]em
		" increase emulation speed while dumping.
		$LF
	]li
]ul
[div class=p 
	"Download 
	[a href=https://github.com/TASEmulators/BizHawk/blob/master/Assets/NES/Palettes/QuickNes.pal?raw=true rel=noopener external nofollow 
		"QuickNES Palette
	]a
	$LF
]div
[div class=p 
	"Within FCEU/X:
	$LF
]div
[ul 
	[li 
		" Go to 
		[em 
			"Config -> Palette
		]em
		$LF
	]li
	[li 
		" Load Palette
		$LF
	]li
	[li 
		" Select QuickNES Palette
		$LF
	]li
]ul
[h3 id=Windows_4 
	" Windows
	$LF
]h3
[ol 
	[li 
		" Start FCEU or FCEUX.
		$LF
	]li
	[li 
		" Select 
		[em 
			"Config -> Video
		]em
		", and check 
		[em 
			"Disable hardware acceleration
		]em
		" (lower left corner).
		$LF
	]li
	[li 
		" Select 
		[em 
			"Config -> Sound
		]em
		". Set 
		[em 
			"Rate
		]em
		" to 48000 and 
		[em 
			"Quality
		]em
		" to high. Set all volume controls to their maximum.
		$LF
	]li
	[li 
		" In qFCEUX 2.5.0 and up, select 
		[em 
			"Options -> Movie Options
		]em
		", and set "libgwavi" as the AVI Backend Driver.
		$LF
	]li
	[li 
		" Open the ROM for the movie.
		$LF
	]li
	[li 
		" Set the emulator speed to about 400% or more (= key); how fast you should go is limited only by the speed of your computer.
		$LF
	]li
	[li 
		" Pause emulation (Pause key).
		$LF
	]li
	[li 
		" Load the target movie file.
		$LF
	]li
	[li 
		" Select 
		[em 
			"File -> AVI/Wav -> Record AVI
		]em
		" (
		[em 
			"Movie -> AVI Record As
		]em
		" in qFCEUX). Choose a file name (such as 
		[em 
			"raw.avi
		]em
		"), and choose a lossless RGB codec of your choice (see 
		[em 
			"Common settings
		]em
		" for suggestions). Click OK.
		$LF
	]li
	[li 
		" If the movie uses new PPU (check the file header in a text editor), there's a bug that makes on-screen messages, counters, and icons get captured to the video on the first frame. Disable the icons and counters under 
		[em 
			"Config -> Display
		]em
		" and wait for the messages to disappear before unpausing emulation.
		$LF
	]li
	[li 
		" Unpause emulation; audio and video are now being captured.
		$LF
	]li
	[li 
		" Once you have reached your desired capture end point (usually at the end of credits), select 
		[em 
			"File -> AVI/Wav -> Stop AVI
		]em
		" (
		[em 
			"Movie -> AVI Stop
		]em
		" in qFCEUX).
		$LF
	]li
]ol
[h3 id=Linux_4 
	" Linux
	$LF
]h3
[div class=p 
	"Assuming the ROM is 
	[code 
		"rom.nes
	]code
	" and the fm2 is 
	[code 
		"movie.fm2
	]code
	", issue the following command:
	$LF
]div
[div class=p 
	[code 
		"fceux --subtitles 0 --slstart 0 --slend 239 --xscale 1 --yscale 1 --special 0 --pal 0 --sound 1 --soundq 1 --soundrate 48000 --volume 150 --trianglevol 256 --square1vol 256 --square2vol 256 --noisevol 256 --pcmvol 256 --mute 1 --nospritelim 1 --no-config 1 --videolog "mencoder - -o raw.avi -ovc lavc -lavcopts vcodec=ffv1:format=bgr32 -oac pcm -noskip -nocache -mc 0 NESVSETTINGS" --playmov movie.fm2 rom.nes
	]code
	$LF
]div
[div class=p 
	"The 
	[code 
		"--videolog
	]code
	" argument for capturing with a more modern tool like ffmpeg is:
	$LF
]div
[div class=p 
	[code 
		"--videolog "ffmpeg -f s16le -ar 48000 -channels 1 -i /path/to/soundpipe/s.log -f rawvideo -r 60.0998 -s 256x224 -pix_fmt bgr24 -i - -c:a pcm_s16le -c:v libx264rgb -qp 0 -pix_fmt rgb24 output.mkv"
	]code
	$LF
]div
[div class=p 
	"Note: Figure out the 
	[code 
		"/path/to/soundpipe/
	]code
	" by setting 
	[code 
		"--videolog "NESVSETTINGS"
	]code
	" once.
	$LF
]div
[div class=p 
	"Once you have reached your desired capture end point (usually at the end of credits), close the emulator.
	$LF
]div
[div class=p 
	"In r3325 we added 
	[code 
		"--movielength int_number_of_frames
	]code
	" (experimental) which should automatically terminate the capture along with the emulator. Please let someone know whether this works out for you.
	$LF
]div
[div class=p 
	"In either case (linux or windows) you could try incorporating this one-liner lua script which should be self-explanatory: 
	$LF
]div
[pre 
	[code class=language-Lua 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	[b 
		"WARNING
	]b
	": Dumping video for publications usually requires a human to make sure it's safe to stop dumping, as the game usually keeps providing valuable content after the movie has ended.
	$LF
]div
[h2 id=FinalBurnAlpha 
	" Final Burn Alpha
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"(variable)
				[a id=r6 
				]a
				[sup 
					"[
					[a href=#6 
						"6
					]a
					"]
				]sup
			]td
			[td 
				"48KHz stereo
			]td
		]tr
	]tbody
]table
[div class=p 
	[b 
		"WARNING
	]b
	": FBA-rr does not automatically split the video file. It will dump video until the file reaches 4GB, after which the file will be invalid. To overcome this bug, track the size of the dumped video (update the folder containing it and hover the cursor, or check the File Properties), pause the emulator before 2GB is reached, stop dumping and then start again. Alternatively, import the file into VirtualDub and export again using a lossless codec.
	$LF
]div
[ol 
	[li 
		" Select 
		[em 
			"Audio -> Plugin Options -> 48000Hz samplerate
		]em
		".
		$LF
	]li
	[li 
		" Load the ROM.
		$LF
	]li
	[li 
		" Pause emulation (Pause key).
		$LF
	]li
	[li 
		" Start movie playback.
		$LF
	]li
	[li 
		" Disable input display (, key) and frame display (. key).
		$LF
	]li
	[li 
		" Select 
		[em 
			"Game -> Movie -> Record AVI
		]em
		".  Choose a file name (such as 
		[em 
			"raw.avi
		]em
		"), and choose a lossless RGB codec of your choice (see 
		[em 
			"Common settings
		]em
		" for suggestions).  Click OK.
		$LF
	]li
	[li 
		" Unpause emulation.  You are now capturing audio/video in real-time.
		$LF
	]li
	[li 
		" When you reach the desired end point, select 
		[em 
			"Game -> Movie -> Stop AVI
		]em
		".
		$LF
	]li
]ol
[h2 id=Gens 
	" Gens
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"320x224 (NTSC), 320x240 (PAL), 256x224 (low resolution mode)
			]td
			[td 
				"44.1KHz stereo
			]td
		]tr
	]tbody
]table
[div class=p 
	[b 
		"WARNING:
	]b
	" Use the build of Gens fixed for AVI dumping, 
	(__wikiLink|displaytext=Gens-SplitAVI|href=/EmulatorResources/Gens)
	". It fixes the frame drop on new segment start, and splits on resolution changes.
	$LF
]div
[ol 
	[li 
		" Select 
		[em 
			"Graphics -> Frame Skip -> 0
		]em
		". This enables turbo speed while not skipping frames.
		$LF
	]li
	[li 
		" Make sure 
		[em 
			"Graphics -> VSync
		]em
		" is unchecked.
		$LF
	]li
	[li 
		" Make sure 
		[em 
			"Sound -> PSG High Quality
		]em
		" is unchecked.
		[a id=r9 
		]a
		[sup 
			"[
			[a href=#9 
				"9
			]a
			"]
		]sup
		" This option is not present in the latest svn.
		$LF
	]li
	[li 
		" Check 
		[em 
			"Sound -> YM2612 High Quality
		]em
		" and 
		[em 
			"Sound -> DAC High Quality
		]em
		".
		$LF
	]li
	[li 
		" Uncheck 
		[em 
			"Sound -> Soften Filter
		]em
		".
		$LF
	]li
	[li 
		" Uncheck 
		[em 
			"Graphics -> Proper Aspect Ratio in low-resolution mode
		]em
		".
		$LF
	]li
	[li 
		" If the game is a Sega CD game, uncheck 
		[em 
			"Options -> General -> Show Sega-CD LED
		]em
		".
		$LF
	]li
	[li 
		" Check 
		[em 
			"Tools -> AVI -> Clean AVI screen
		]em
		".
		$LF
	]li
	[li 
		" Check 
		[em 
			"Tools -> AVI -> Fit AVI to game height
		]em
		".
		$LF
	]li
	[li 
		" Uncheck 
		[em 
			"Tools -> AVI -> Sync AVI with movie
		]em
		".
		$LF
	]li
	[li 
		" Uncheck 
		[em 
			"Options -> General... -> Message -> Enable
		]em
		".
		$LF
	]li
	[li 
		" If the game is a 32x game, check 
		[em 
			"Sound -> PWM
		]em
		".
		$LF
	]li
	[li 
		" If using any CamHack build for Sonic games, check 
		[em 
			"Graphics-> Layers-> Sprites-> "Sprites always on top"
		]em
		", then press the "Num Lock" key on your keyboard to remove sprite numbers on screen.
		$LF
	]li
	[li 
		" Open the ROM.
		$LF
	]li
	[li 
		" Pause emulation (Pause key).
		$LF
	]li
	[li 
		" Start movie playback.
		$LF
	]li
	[li 
		" Select 
		[em 
			"Tools -> AVI -> Start AVI dump
		]em
		".  Choose a file name (such as 
		[em 
			"raw.avi
		]em
		"), and choose a lossless RGB codec of your choice (see 
		[em 
			"Common settings
		]em
		" for suggestions).  Click OK.
		$LF
	]li
	[li 
		" Unpause emulation.  You are now capturing audio/video.
		$LF
	]li
	[li 
		" When you reach the desired end point, select 
		[em 
			"Tools -> AVI -> Stop AVI dump
		]em
		".
		$LF
	]li
]ol
[h2 id=Hourglass 
	" Hourglass
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"(variable)
			]td
			[td 
				"(variable)
			]td
		]tr
	]tbody
]table
[ul 
	[li 
		" 
		[b 
			"WARNING:
		]b
		" Playing back Hourglass movies may require the usage of Windows XP, as they may not play back properly in later Windows versions. This emulator may not be a good first choice for those new to encoding.
		$LF
	]li
	[li 
		" 
		[b 
			"Note:
		]b
		" Hourglass leaves out the MIDI track from games that use MIDI audio when dumping video and audio. Follow 
		(__wikiLink|displaytext=this guide|href=/Forum/Topics/23217)
		" for instructions on how to extract the MIDI track separately, which will then have to be edited into the dumped audio in post-processing.
		$LF
	]li
	[li 
		" 
		[b 
			"Note:
		]b
		" As of 
		[a href=https://github.com/TASEmulators/hourglass-win32/releases/tag/90 rel=noopener external nofollow 
			"r90
		]a
		", if the game's resolution's width is not mod4, it will append columns of pixels to the nearest resolution that's mod4. These will need to be cropped out. For Neko Project 21 in particular on the D3D renderer, the resulting dump will be 644x402, which needs to be cropped out with the following: 
		[code 
			"Crop(1, 1, -3, -1)
		]code
		". In addition, 100ms of audio need to be trimmed out at the beginning, as the audio buffer is usually set to 100ms. This can be done with 
		[code 
			"DelayAudio(-0.1)
		]code
		".
		$LF
	]li
	[li 
		" 
		[b 
			"Note:
		]b
		" Duplicate frames may get lost upon splitting. To remedy this, using pipedec or x264vfw (and setting the output mode to File) is strongly recommended.
		$LF
	]li
]ul
[ol 
	[li 
		" Figure out the options to get the run to sync (must be mentioned in the submission if they aren't default).
		$LF
	]li
	[li 
		" 
		[em 
			"Movie File
		]em
		" -> 
		[em 
			"Browse
		]em
		". Pick the TAS file.
		$LF
	]li
	[li 
		" 
		[em 
			"Game Executable
		]em
		" -> 
		[em 
			"Browse
		]em
		". Select the game executable.
		$LF
	]li
	[li 
		" 
		[em 
			"AVI
		]em
		" -> check 
		[em 
			"Capture Video and Audio
		]em
		".
		$LF
	]li
	[li 
		" Check 
		[em 
			"Fast-Forward
		]em
		".
		$LF
	]li
	[li 
		" 
		[em 
			"Run and Play Existing Movie
		]em
		". It will then prompt you to locate the output video and to select the codec.
		$LF
	]li
	[li 
		" When it's over, press 
		[em 
			"Stop Playing
		]em
		".
		$LF
	]li
]ol
[h2 id=JpcRr 
	" JPC-RR
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"(variable) 
				[a id=r7 
				]a
				[sup 
					"[
					[a href=#7 
						"7
					]a
					"]
				]sup
			]td
			[td 
				"(variable) 
				[a id=r8 
				]a
				[sup 
					"[
					[a href=#8 
						"8
					]a
					"]
				]sup
			]td
		]tr
	]tbody
]table
[div class=p 
	[b 
		"WARNING
	]b
	": JPC-RR encoding is quite different from other emulators; if you are new to encoding, you should try working with different platforms first.
	$LF
]div
[div class=p 
	"Get the latest JPC-RR build from 
	[a href=https://github.com/vadosnaprimer/jpcrr/releases rel=noopener external nofollow 
		"this link
	]a
	", as it has all the tools needed for video dumping.
	$LF
]div
[ol 
	[li 
		" From 
		[em 
			"Drives -> Import Image
		]em
		", create the HDD image JPC-RR will use to run the game. Make sure it has all the game files the author used in their run and that the resulting Disk ID matches the one they provided. If the author also provided checksums for each of their game files, make sure they match the checksums for your files as well.
		$LF
	]li
	[li 
		" In 
		[em 
			"System -> Assemble
		]em
		", set 
		[em 
			"Fda image
		]em
		" to "FreeDOS" and 
		[em 
			"Hdd image
		]em
		" to the HDD image you created. Click 
		[em 
			"Assemble
		]em
		".
		$LF
	]li
	[li 
		" Load the movie (JRSR) file under 
		[em 
			"Snapshot -> Load -> Movie
		]em
		".
		$LF
	]li
	[li 
		" Set up the video dump by going to 
		[em 
			"System -> Start Dumping
		]em
		". Name the file you want to save the dump to.
		$LF
	]li
	[li 
		" Start the video dump by clicking 
		[em 
			"System -> Start
		]em
		". The movie playback and dumping will begin.
		$LF
	]li
	[li 
		" When you have reached your desired endpoint, click 
		[em 
			"System -> Quit
		]em
		". The emulator will terminate the dump properly.
		$LF
	]li
	[li 
		" Drag the resulting JMD file onto dumpcovert.exe. The file will be converted into a series of CamStudio-encoded AVI files split by differing resolutions and frame rates.
		$LF
	]li
]ol
[div class=p 
	"Some DOS games will occasionally change framerates on certain screens.  It is recommended to set all the video splits to the framerate used in gameplay segments using 
	[code 
		"ChangeFPS(FPSnumerator, FPSdenominator)
	]code
	" in your AVISynth script.  To know what values you need to provide as numerator and denominator of the desired segment, drag'n'drop that segment onto this executable: 
	[a href=https://github.com/vadosnaprimer/avifps/releases rel=noopener external nofollow 
		"https://github.com/vadosnaprimer/avifps/releases
	]a
	$LF
]div
[h2 id=Libtas 
	" libTAS
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"(variable)
			]td
			[td 
				"(variable)
			]td
		]tr
	]tbody
]table
[ol 
	[li 
		" Install ffmpeg, or else dumping won't work (e.g. under Ubuntu: 
		[code 
			"sudo apt-get install ffmpeg
		]code
		").
		$LF
	]li
	[li 
		" In libTAS, set the path to the game to 
		[code 
			"/path/to/game
		]code
		" (or follow the instructions provided in the movie file's annotations)
		$LF
		[ul 
			[li 
				" If the movie uses 
				(__wikiLink|displaytext=Ruffle|href=/EmulatorResources/Ruffle)
				" or a 
				(__wikiLink|displaytext=PCem virtual machine|href=/EmulatorResources/PCem)
				", follow the setup instructions on their respective pages along with any additional instructions in the submission page.
				$LF
			]li
			[li 
				" If the game is a PICO-8 game, set the command line options for the PICO-8 game executable to the following line: 
				[code 
					"-windowed 1 -width 256 -height 256
				]code
				$LF
			]li
		]ul
	]li
	[li 
		" Check 
		[em 
			"Movie recording
		]em
		", then click on 
		[em 
			"Browse...
		]em
		". Select the movie file.
		$LF
	]li
	[li 
		" Under 
		[em 
			"Tools
		]em
		" -> 
		[em 
			"Configure encode...
		]em
		", set the encode file path to 
		[code 
			"/path/to/encode.avi
		]code
		$LF
		[ul 
			[li 
				" If you're using a VM, make sure to save to a shared folder both the host OS and the guest OS can access read+write).
				$LF
			]li
			[li 
				" Make sure to append the 
				[code 
					".avi
				]code
				" extension, or libTAS won't be able to recognize which format it should output.
				$LF
			]li
		]ul
	]li
	[li 
		" Copy one of the following commands in the ffmpeg options text box, then click 
		[em 
			"Ok
		]em
		":
		$LF
		[ul 
			[li 
				" For UTVideo: 
				[br 
				]br
				" 
				[code 
					"-c:v utvideo -pred median -pix_fmt gbrp -c:a pcm_s16le
				]code
				$LF
			]li
			[li 
				" For FFV1: 
				[br 
				]br
				" 
				[code 
					"-c:v ffv1 -pix_fmt bgr0 -level 1 -g 1 -c:a pcm_s16le
				]code
				$LF
			]li
			[li 
				" For H.264 RGB: 
				[br 
				]br
				" 
				[code 
					"-c:v libx264rgb -qp 0 -preset ultrafast -g 1 -pix_fmt rgb24 -context 1 -c:a pcm_s16le
				]code
				$LF
			]li
		]ul
	]li
	[li 
		" Start the encode by clicking on 
		[em 
			"Tools
		]em
		" -> 
		[em 
			"Start encode
		]em
		". This will start the encode when launching the game.
		$LF
	]li
	[li 
		" Click 
		[em 
			"Start
		]em
		", then press the Pause key to un-pause if you started the game paused. This will capture audio and video to AVI (even if audio is muted).
		$LF
	]li
	[li 
		" When you reach the desired end point, click on 
		[em 
			"Stop
		]em
		" or close the game window.
		$LF
	]li
]ol
[div class=p 
	[b 
		"IMPORTANT NOTE WHEN USING H.264 RGB
	]b
	": If you have x264vfw installed, absolutely make sure to open the AVI in AviSynth with the following line, or else it will use Microsoft's garbage H.264 codec instead:
	$LF
]div
[pre 
	[code class=language-avs 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[h3 id=EmulatorsInLibtas 
	" Emulators in libTAS
	$LF
]h3
[h4 id=Pcem 
	"PCem
	$LF
]h4
[div class=p 
	"There's a 80ms audio buffer that needs to be trimmed out. This can be done with the following:
	$LF
]div
[pre 
	[code class=language-avs 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[h4 id=NekoProject21Kai 
	" Neko Project 21 kai
	$LF
]h4
[div class=p 
	"There's a 150ms audio buffer in addition to 5 in-emulator frames that needs to be trimmed out (roughly 0.2386s in total). This can be done with the following:
	$LF
]div
[pre 
	[code class=language-avs 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"Additionally, for proper audio (where one channel doesn't drown out the rest), the following settings should be used by editing 
	[code 
		"np21kai.cfg
	]code
	":
	$LF
]div
[pre 
	"volume_F = 64
	$LF
	"volume_S = 25
	$LF
	"volume_A = 64
	$LF
	"volume_P = 90
	$LF
	"volume_R = 64
	$LF
]pre
[div class=p 
	"These are the actual defaults used by 
	[code 
		"xnp21kai
	]code
	" if you go to 
	[em 
		"Device -> Sound option
	]em
	" and then click on 
	[em 
		"Default
	]em
	"; however, that menu is unavailable on 
	[code 
		"sdlnp21kai
	]code
	", but these settings are identical between the two.
	$LF
]div
[h4 id=Mame 
	" MAME
	$LF
]h4
[div class=p 
	"Before dumping, ensure that the command-line arguments mentioned in 
	(__wikiLink|displaytext=this page|href=/EmulatorResources/MAME)
	" are present. The sampling rate in libTAS should be set to 48000 Hz (Sound -> Format -> 48000 Hz), as it outputs at that rate, otherwise, the audio quality may be degraded a bit. Additionally, the first frame is surrounded by grey borders. This can be remedied by doing either of the following:
	$LF
]div
[pre 
	[code class=language-avs 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"or
	$LF
]div
[pre 
	[code class=language-avs 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"The audio buffer that needs trimming is 5 in-game frames. To remove it, use the following code:
	$LF
]div
[pre 
	[code class=language-avs 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"For 
	[code 
		"cdimono1
	]code
	" specifically (PAL CD-i Mono I), the top 22 rows of pixels need to be cropped out:
	$LF
]div
[pre 
	[code class=language-avs 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[h4 id=Scummvm 
	" ScummVM
	$LF
]h4
[div class=p 
	"If the dump messes up when starting the dump before launching the emulator, you need to start dumping after launching the emulator while paused (so on frame 1). Note that that one frame will be lost; however, as it's a black frame, it can be simply re-added back in with the following:
	$LF
]div
[pre 
	[code class=language-avs 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[h4 id=Ruffle 
	" Ruffle
	$LF
]h4
[div class=p 
	"If the resulting dump has a skewed video output, specify 
	[code 
		"-g gl
	]code
	" in the command-line options.
	$LF
]div
[div class=p 
	"Note that the colours are washed out when using OpenGL on more recent Ruffle releases up until the 2023-05-24 nightly release (i.e. should be fixed by the 2023-05-25 nightly). TODO: Figure out when the colours became washed out. In such cases, make sure you're on libTAS 1.4.4 and the drivers are up to date, and see if the TAS syncs there instead using the Vulkan (default) renderer)
	$LF
]div
[div class=p 
	"This, of course, does not affect dumps done with the Vulkan renderer.
	$LF
]div
[div class=p 
	"If the AVI dump includes the GUI due to the author omitting 
	[code 
		"--no-gui
	]code
	" on build 
	[a href=https://github.com/ruffle-rs/ruffle/releases/tag/nightly-2023-08-03 rel=noopener external nofollow 
		"2023-08-03
	]a
	" or newer, the top 24 rows of pixels need to be cropped out with the following:
	$LF
]div
[pre 
	[code class=language-avs 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[h2 id=Lsnes 
	" lsnes
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"256/512x224/240/448/480
			]td
			[td 
				"44.1 KHz stereo
			]td
		]tr
	]tbody
]table
[ol 
	[li 
		" Open the emulator, load the ROM.
		$LF
	]li
	[li 
		" Select load movie/savestate tab, select the movie, check start paused and hit ok.
		$LF
	]li
	[li 
		" Set 
		[code 
			"avi-soundrate
		]code
		" to 5 (Settings, Advanced tab, or 
		[code 
			"set-setting avi-soundrate 5
		]code
		"). In lsnes-rr2, set 
		[em 
			"AVI Sound mode
		]em
		" to 
		[em 
			"High quality 48kHz
		]em
		" instead.
		$LF
	]li
	[li 
		" Select AVI capture (CamStudio / PCM) from capture menu.
		$LF
	]li
	[li 
		" Set speed to turbo (or other desired speed).
		$LF
	]li
	[li 
		" If you want to, you can mute audio by unchecking Config->Sounds enabled. This won't affect dumped audio.
		$LF
	]li
	[li 
		" Unpause the emulator
		$LF
	]li
	[li 
		" When reaching the end, select end avi dump.
		$LF
	]li
	[li 
		" Close the emulator.
		$LF
	]li
]ol
[ul 
	[li 
		" On Linux, TSCC can be used instead of CamStudio (it is usually bit faster and  compresses better).
		$LF
		[ul 
			[li 
				" The reason not to use that on Windows is the difficulty decoding it using VfW.
				$LF
			]li
		]ul
	]li
	[li 
		" If you're having issues with black screens not being completely black, use an 
		[b 
			"rrtest
		]b
		" build from 
		[a href=https://lsnes.tasbot.net/ rel=noopener external nofollow 
			"https://lsnes.tasbot.net
		]a
		".
		$LF
	]li
]ul
[h2 id=MameRr 
	" MAME-RR
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"Variable
			]td
			[td 
				"48KHz
			]td
		]tr
	]tbody
]table
[div class=p 
	"All the settings should be default.
	$LF
]div
[div class=p 
	"Put your rom into mame-rr's 
	[code 
		"roms
	]code
	" folder and the movie near mame-rr.exe. Use the following command line (assuming your ROM name is 
	[code 
		"myrom.zip
	]code
	", and your movie name is 
	[code 
		"myrom.mar
	]code
	"):
	$LF
]div
[pre 
	[code class=language-batch 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"Alternatively, save this script as 
	[code 
		"dump_avi.bat
	]code
	", put near mame-rr.exe, run it, and type in things into the console window as prompted:
	$LF
]div
[pre 
	[code class=language-batch 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"Unpause the emulator (
	[code 
		"P
	]code
	" key by default), since it autopauses to prevent timestamp desync. When you're done, just close the emulator. That will properly stop AVI dumping. The AVI file will appear in the 
	[code 
		"snap
	]code
	" folder.
	$LF
]div
[ul 
	[li 
		" 
		[b 
			"NOTE:
		]b
		" mame-rr v0.1-beta reports the intended aspect ratio for each game, make sure to use it when encoding.
		$LF
	]li
	[li 
		" 
		[b 
			"NOTE:
		]b
		" mame-rr v0.1-beta splits the dump at 2GB, but might desync if the run was made on -alpha, so check if it syncs and use -beta. Splitting is needed to avoid the annoyance with 
		(__wikiLink|displaytext=fixing the broken frames|href=/Forum/Posts/448290)
		" at 2GB border.
		$LF
	]li
]ul
[h2 id=Mednafen 
	" Mednafen
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"(variable)
				[a id=r4 
				]a
				[sup 
					"[
					[a href=#4 
						"4
					]a
					"]
				]sup
			]td
			[td 
				"44.1KHz stereo
			]td
		]tr
	]tbody
]table
[h3 id=WindowsOrLinux 
	" Windows or linux
	$LF
]h3
[ol 
	[li 
		" Use the following command-line to launch Mednafen and automatically start movie playback and .mmm recording: 
		[br 
		]br
		" 
		[code 
			"mednafen.exe -mmm 1 -mmmfile "where\to\save\movie.mmm" -mmmframes 5000 -mov "path\to\movie.mcm" -play 1 "path\to\rom.pce"
		]code
		$LF
		[ul 
			[li 
				" Change 5000 by the number of frames you want to dump.
				[em 
					$LF
				]em
			]li
		]ul
	]li
	[li 
		" Now transfert the 
		[code 
			".mmm
		]code
		" file on Linux to convert it to 
		[code 
			".mov
		]code
		" (quicktime).
		$LF
	]li
]ol
[h3 id=LinuxOnly 
	" Linux only
	$LF
]h3
[ul 
	[li 
		" You will need to compile the transcoder yourself on Linux
		$LF
		[ul 
			[li 
				" Souce: 
				[a href=https://storage.googleapis.com/google-code-archive-source/v2/code.google.com/mednafen-rr/source-archive.zip rel=noopener external nofollow 
					"https://storage.googleapis.com/google-code-archive-source/v2/code.google.com/mednafen-rr/source-archive.zip
				]a
				$LF
			]li
		]ul
	]li
	[li 
		" Install the following dependencies: 
		[br 
		]br
		" 
		[code 
			"sudo apt-get install subversion build-essential automake autoconf libtool patchutils binutils libc6-dev bison flex gawk gettext imagemagick zlib1g-dev libsndfile-dev libquicktime-dev
		]code
		$LF
	]li
	[li 
		" Go to 
		[code 
			"mednafen-rr/trunk/mednafen-mmmencode
		]code
		", execute 
		[br 
		]br
		" 
		[code 
			"sudo chmod +x ./autogen.sh
		]code
		$LF
	]li
	[li 
		" Edit 
		[code 
			"./po/Makefile.in.in
		]code
		" and change the 
		[code 
			"GETTEXT_MACRO_VERSION
		]code
		" version to 
		[code 
			"0.19
		]code
		$LF
	]li
	[li 
		" Run
		$LF
	]li
]ul
[pre 
	[code class=language-bash 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[ul 
	[li 
		" You will find the program in 
		[code 
			"/usr/local/bin/
		]code
		$LF
	]li
	[li 
		" Once compiled, go in the folder containing the .mmm file and use the following commang to convert it: 
		[br 
		]br
		" 
		[code 
			"mednafen-mmmencode mymovie.mmm
		]code
		$LF
	]li
	[li 
		" You will have a 
		[code 
			"test.mov
		]code
		" file
		$LF
		[ul 
			[li 
				" If the command 
				[code 
					"mednafen-mmmencode
				]code
				" is not recognized, make sure the program exist in the 
				[code 
					"/usr/local/bin
				]code
				" folder. If it exists there, this means 
				[code 
					"/usr/local/bin
				]code
				" is not in your $PATH variable, so use this command instead: 
				[br 
				]br
				" 
				[code 
					"{/usr/local/bin/mednafen-mmmencode mymovie.mmm
				]code
				"}
				$LF
			]li
		]ul
	]li
	[li 
		" Open the QuickTime movie in VirtualDub with the FFInput Plugin to convert it to .avi
		$LF
	]li
	[li 
		" 
		[em 
			"File -> Aave as AVI
		]em
		$LF
	]li
]ul
[h2 id=Mupen64 
	" Mupen64
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"variable, normally 320x240 (or multiple thereof)
				[a id=r2 
				]a
				[sup 
					"[
					[a href=#2 
						"2
					]a
					"]
				]sup
			]td
			[td 
				"44.1KHz stereo
			]td
		]tr
	]tbody
]table
[div class=p 
	[b 
		"NOTE
	]b
	": This guide is focused on the use of AngryLion as the video plugin.  while it should sync for most games, it’s not guaranteed.  If a game doesn’t sync on AngryLion, you will have to use different plugins and figure out a different method.
	$LF
]div
[h3 id=Guide 
	" Guide
	$LF
]h3
[h4 id=Windows_5 
	" Windows
	$LF
]h4
[div class=p 
	"It is recommended that you use the TASVideos Mupen64 package as it contains all the plugins and extra files you’ll need.  You can 
	[a href=https://github.com/TASEmulators/mupen64-rr-lua-/releases/latest rel=noopener external nofollow 
		"download it here
	]a
	".
	$LF
]div
[ol 
	[li 
		" Start Mupen.
		$LF
	]li
	[li 
		" 
		[em 
			"Options -> Settings -> General ->
		]em
		" uncheck 
		[em 
			"Limit FPS (auto)
		]em
		".
		$LF
	]li
	[li 
		" 
		[em 
			"Options -> Settings -> Advanced ->
		]em
		" uncheck 
		[em 
			"Force Internal AVI Capture
		]em
		$LF
	]li
	[li 
		" 
		[em 
			"Options -> Settings -> Other ->
		]em
		" select 
		[em 
			"Audio-Authoritative Sync
		]em
		$LF
	]li
	[li 
		" 
		[em 
			"Options -> Settings -> Config Plugins ->
		]em
		" select 
		[em 
			"AngryLion
		]em
		" as the video plugin and 
		[em 
			"Jabo’s audio plugin
		]em
		" for audio.
		$LF
	]li
	[li 
		" On the plugins page, select 
		[em 
			"Config
		]em
		" for AngryLion and do the following:
		$LF
		[ul 
			[li 
				" Un-Check 
				[em 
					"Multithreaded Rendering
				]em
				$LF
			]li
			[li 
				" Select 
				[em 
					"Filtered
				]em
				" for output mode
				$LF
			]li
			[li 
				" Leave the rest of the settings unchecked (however if the game is interlaced, check 
				[em 
					"Bob deinterlacing
				]em
				")
				$LF
			]li
			[li 
				" Click 
				[em 
					"Apply
				]em
				" then close the window.
				$LF
			]li
		]ul
	]li
	[li 
		" Load your game ROM
		$LF
	]li
	[li 
		" 
		[em 
			"Utilities -> Movie -> Start Movie Playback
		]em
		$LF
		[ul 
			[li 
				" Select the movie to play back
				$LF
			]li
			[li 
				" Check 
				[em 
					"Open Read-Only
				]em
				$LF
			]li
			[li 
				" Enter 0 for 
				[em 
					"Pause at frame:
				]em
				$LF
			]li
			[li 
				" Click 
				[em 
					"OK
				]em
				$LF
			]li
			[li 
				" The movie should now be paused on the first frame. Alternately, pause the game that's currently running, and then load the movie file, as it will start playback as soon as you unpause (or rather, the ROM gets reset).
				$LF
			]li
		]ul
	]li
	[li 
		" 
		[em 
			"Utilities -> Movie -> Start AVI capture
		]em
		" and select the desired location for the dump, as well as select your desired codec. This will start dumping video. 
		[b 
			"Do not
		]b
		" pause the emulator at all during playback or the movie will desync.
		$LF
	]li
	[li 
		" Once you reach the desired ending point, go to 
		[em 
			"Utilities -> Movie -> Stop AVI capture
		]em
		$LF
	]li
]ol
[h3 id=OldGuide 
	" Old Guide
	$LF
]h3
[div class=p 
	[b 
		"WARNING
	]b
	": Mupen64 is notoriously unstable and difficult to work with.  If you are new to encoding, you should try working with different platforms first.
	$LF
]div
[ul 
	[li 
		" 
		[a href=http://code.google.com/p/glidehqplusglitch64/downloads/detail?name=Glide64_Final.zip rel=noopener external nofollow 
			"http://code.google.com/p/glidehqplusglitch64/downloads/detail?name=Glide64_Final.zip
		]a
		$LF
	]li
	[li 
		" 
		[a href=http://rustedlogic.net/wikiold/index.php?title=Nintendo_64_Emulation_plugins rel=noopener external nofollow 
			"http://rustedlogic.net/wikiold/index.php?title=Nintendo_64_Emulation_plugins
		]a
		$LF
	]li
]ul
[h4 id=Windows_6 
	" Windows
	$LF
]h4
[div class=p 
	"Mupen64's built-in dumping is very unreliable and should not be used at all.  
	[a class=intlink href=/Users/Profile/Aktan 
		"Aktan
	]a
	" has developed the following alternate dumping method using 
	[a href=http://www.mediafire.com/?yvayu3xhxnqn5ow rel=noopener external nofollow 
		"a modified build of .kkapture
	]a
	".  It is recommended, where possible, to use the 
	[a href=http://glide64.emuxhaven.net/files/Glide64_Final.zip rel=noopener external nofollow 
		"Glide64 'Final'
	]a
	" video plugin and 
	[a href=http://www.emutalk.net/threads/27610-Audio-v0.56-WIP2-Download-Feedback rel=noopener external nofollow 
		"Azimer's audio plugin
	]a
	" (both plugins are mirrored 
	[a href=http://tv-games.ru/emulator/open/n64_plugins.html rel=noopener external nofollow 
		"on that page
	]a
	"); some segments of the following set of instructions may assume the use of those plugins.
	$LF
]div
[ol 
	[li 
		" 
		[b 
			"Make a backup of your plugin directory
		]b
		" so that your old settings are preserved, as necessary.  Also backup glide3x.dll in your Mupen64 root directory.
		$LF
	]li
	[li 
		" Place the above plugins into your Mupen plugins directory, and glide3x.dll from the "wrapper" directory in the Glide64 package into the Mupen64 base directory.
		$LF
	]li
	[li 
		" Edit Plugins/Glide64.ini; change instances of "filtering = 1" to "filtering = 0", and "hotkeys = 1" to "hotkeys = 0".
		$LF
	]li
	[li 
		" Start Mupen.
		$LF
	]li
	[li 
		" Options -> Settings -> General -> uncheck "Limit FPS (auto)".
		$LF
	]li
	[li 
		" Options -> Settings -> Config Plugins -> select Glide64 Napalm WX as the video plugin and Azimer's audio plugin for audio.
		$LF
	]li
	[li 
		" Go into the Glide64 configuration dialogue, check "show advanced emulation options", and close and reopen the dialogue.
		$LF
	]li
	[li 
		" Set video options as seen 
		[a href=http://imgur.com/IzHELMZ rel=noopener external nofollow 
			"here
		]a
		" and 
		[a href=http://imgur.com/zLS2E8d rel=noopener external nofollow 
			"here
		]a
		".  (Note: "use frame buffer objects" may be necessary for some video cards).
		$LF
	]li
	[li 
		" Select a video resolution that is a multiple of 320x240 (or 342x256), but smaller than your screen size (
		(__wikiLink|displaytext=antialiasing|href=/EncoderGuidelines#Antialiasing)
		").
		$LF
	]li
	[li 
		" Load your game ROM, and observe the Glide64 text at the bottom of the screen.  You should see "Filtering: Automatic" specified.  If it's not, you will need to exit Mupen64 and edit Glide64.ini as described in step 3.
		$LF
	]li
	[li 
		" Utilities -> Movies -> Start Movie Playback.  Select the movie to play back, check "Open Read-Only", and enter 1 for "Pause at frame:".  Click OK.  The movie should now be paused on the first frame.
		$LF
	]li
	[li 
		" Make a save state.
		$LF
	]li
	[li 
		" Close Mupen.
		$LF
	]li
	[li 
		" Check that there are no .eep files for your game in the Save directory in the Mupen root directory (playback from .kkapture as follows doesn't clear these files out, and their presence can cause desyncs).
		$LF
	]li
	[li 
		" Start .kkapture; configure it as seen 
		[a href=http://imgur.com/1hgq26p rel=noopener external nofollow 
			"here
		]a
		".  Note in particular the frame rate (120fps); this is to ensure that all frames in 60fps segments are captured.  There will be a lot of duplicate frames in the output; as such, use of a codec such as Lagarith that can store null frames is suggested.
		$LF
	]li
	[li 
		" Set "Demo" to your Mupen executable and set "Target" to a target filename, then click "kkapture!".  Mupen will start.
		$LF
	]li
	[li 
		" Load the game ROM; wait for the Glide64 text to disappear (and ideally for a recognisable action to appear on the screen, so that you know when playback of the movie starts).
		$LF
	]li
	[li 
		" Pause Mupen.
		$LF
	]li
	[li 
		" Utilities -> Movies -> Start Movie Playback; select the movie as earlier, 
		[b 
			"check "Open Read-Only"
		]b
		", and click OK (don't specify a pause frame).
		$LF
	]li
	[li 
		" Load your save state from earlier.
		$LF
	]li
	[li 
		" Unpause Mupen - you are now capturing. Do not attempt to move any part of the emulator window off-screen - it will ruin rendering on the off-screen area.
		$LF
	]li
	[li 
		" At the end of desired playback, highlight a non-Mupen window and press the right CTRL key.  (
		[b 
			"WARNING:
		]b
		" this means you can't use right CTRL during video capture!) Mupen will exit upon doing so.
		$LF
	]li
]ol
[div class=p 
	"Some notes on this method:
	$LF
]div
[ol 
	[li 
		" The capture may have an extra 20 pixel border at the bottom, which should be cropped out.
		$LF
	]li
	[li 
		" The audio plugin may add a audio delay of around 192 ms (could be a function of the sound card).
		$LF
	]li
	[li 
		" Duplicate frame removal is strongly recommended for captures using this method, given the number of duplicate frames in the video dump.
		$LF
	]li
	[li 
		" The sound output may not be 44.1kHz.  If it is not, it will generally be a very odd sampling rate, and you may resample the sound track to be 44.1kHz.
		$LF
	]li
	[li 
		" On certain games, the capture FPS can be set to 60 FPS for a smoother capture.
		$LF
	]li
]ol
[h4 id=Linux_5 
	" Linux
	$LF
]h4
[div class=p 
	"There is no known completely reliable way to get stock builds of Mupen to play back effectively on Linux with video dumping.  Some encoders have reported success with 
	[a href=http://winehq.org rel=noopener external nofollow 
		"Wine
	]a
	"; for others it fails miserably.  At least two encoders have modified builds of Mupen in order to dump video reliably; ask on the forums for more information.
	$LF
]div
[h2 id=Openmsx 
	" openMSX
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"640x480
			]td
			[td 
				"44.1 KHz mono/stereo
			]td
		]tr
	]tbody
]table
[div class=p 
	"openMSX dumps video with the lossless ZMBV (Zipped Motion-Blocks Video) codec and audio in uncompressed WAV. The ZMBV encoder is built in (and will thus work on any platform). On Windows, openMSX comes with a separate codec dll to be able to play the resulting AVI on any installed media player. Make you sure you install that dll to be able to import the AVI file to AVISynth and preview it in VirtualDub.
	$LF
]div
[div class=p 
	"The resolution used in this guide is 480p, but some games can safely be downscaled to 240p. 
	[a href=https://www.msx.org/wiki/SCREEN rel=noopener external nofollow 
		"Here's a list of resolutions
	]a
	" MSX screen modes use. Run the replay as described below and type 
	[code 
		"toggle_info_panel
	]code
	" in openMSX internal console, that will tell you the mode used by the game (only the mode used for actual gameplay is relevant here).
	$LF
]div
[div class=p 
	[b 
		"IMPORTANT NOTES
	]b
	$LF
]div
[ul 
	[li 
		" The replay file doesn't necessarily have to be on:
		$LF
		[ul 
			[li 
				" 
				[code 
					"C:\Documents and Settings\<user>\My Documents\openMSX\replays
				]code
				" (for Windows XP);
				$LF
			]li
			[li 
				" or on 
				[code 
					"C:\Users\<user>\Documents\openMSX\replays
				]code
				" (for Vista/Windows 7);
				$LF
			]li
			[li 
				" or on 
				[code 
					"/home
				]code
				" (
				[code 
					"Users
				]code
				" if you're using a Mac);
				$LF
			]li
			[li 
				" 
				[code 
					"/<user>/.openMSX/replays
				]code
				" (for Linux / Mac) (where 
				[code 
					"<user>
				]code
				" is your user folder)
				$LF
			]li
		]ul
	]li
]ul
[div class=p 
	"but it's highly recommended that the replay is in that folder, as it'll be a bit easier to load the replay file.
	$LF
]div
[ul 
	[li 
		" As openMSX will use the 
		[b 
			"exact same
		]b
		" machine as specified in the replay file, you also need the system ROMs for that machine, which is explained 
		[a href=http://openmsx.org/manual/setup.html#romlocation rel=noopener external nofollow 
			"in the openMSX Setup Guide
		]a
		". Of course, we don't provide them here.
		$LF
	]li
	[li 
		" If you get unlucky enough to experience openmsx switch the framerate on the fly during video recording, it'd cause an av desync. To fight it, make use of 
		[a href=https://gist.github.com/FiXato/475752 rel=noopener external nofollow 
			"this tcl script
		]a
		", it would split the file on each fps change.
		$LF
	]li
]ul
[h3 id=Windows_7 
	" Windows
	$LF
]h3
[div class=p 
	"The easiest way is to use this script.
	$LF
]div
[pre 
	[code class=language-batch 
		$UNPRINTABLE TEXT!!!
	]code
]pre
[div class=p 
	"Save this as a batch file (
	[code 
		"something.bat
	]code
	") near your 
	[code 
		"openmsx.exe
	]code
	", put the movie there too, and drag'n'drop the movie onto the script. 
	[code 
		"movie.avi
	]code
	" dump will appear in the same directory. When you're done, just close the emulator, it will properly stop the video recording.
	$LF
]div
[div class=p 
	"The following is the old, manual way.
	$LF
]div
[ol 
	[li 
		" Method 1: load manually from the console
		$LF
		[ol 
			[li 
				" Open Catapult (openMSX GUI) or openMSX (non-GUI).
				$LF
			]li
			[li 
				" In case you started Catapult, start openMSX with the 
				[em 
					"Start
				]em
				" button.
				$LF
			]li
			[li 
				" In the openMSX window where the emulation is running, hit 
				[em 
					"Pause
				]em
				" to pause emulation.
				$LF
			]li
			[li 
				" Hit 
				[em 
					"F10
				]em
				" to bring up the openMSX console.
				$LF
			]li
			[li 
				" Type 
				[code 
					"reverse loadreplay -viewonly <replay>
				]code
				" (where 
				[code 
					"<replay>
				]code
				" is the replay file you want to dump as AVI), then hit 
				[em 
					"Enter
				]em
				". You can use TAB-completion to find the replay file easier.
				$LF
			]li
		]ol
	]li
	[li 
		" Method 2: auto load
		$LF
		[ol 
			[li 
				" Drop the replay on openMSX.exe (or start openMSX from the command line with the replay file as only argument)
				$LF
			]li
			[li 
				" In the openMSX window where the emulation is running, hit 
				[em 
					"Pause
				]em
				" to pause emulation.
				$LF
			]li
			[li 
				" Hit 
				[em 
					"F10
				]em
				" to bring up the openMSX console.
				$LF
			]li
			[li 
				" Type 
				[code 
					"reverse goto 0
				]code
				" to jump back to the beginning of the replay
				$LF
			]li
		]ol
	]li
	[li 
		" Type 
		[code 
			"record start -doublesize raw
		]code
		" (where 
		[code 
			"raw
		]code
		" is the file name of the AVI, then hit Enter. You are now capturing audio/video.
		$LF
		[ul 
			[li 
				" 
				[b 
					"Note
				]b
				": the reason why 
				[code 
					"-doublesize
				]code
				" is needed is because some MSX2 modes are 512x212
				$LF
			]li
			[li 
				" 
				[b 
					"Note
				]b
				": it will automatically detect if the currently emulated MSX can output stereo sound or mono sound and use that in the resulting AVI
				$LF
			]li
		]ul
	]li
	[li 
		" Unpause emulation. (
		[em 
			"Pause
		]em
		" key)
		$LF
	]li
	[li 
		" Hit 
		[em 
			"F9
		]em
		" to speed up emulation (if you don't want to wait for the whole movie to play at normal time).
		$LF
	]li
	[li 
		" When you reach the desired end point, pause emulation, type 
		[code 
			"record stop
		]code
		", then hit 
		[em 
			"Enter
		]em
		".
		$LF
	]li
]ol
[div class=p 
	"The AVI dump is to be found on 
	[code 
		"C:\Documents and Settings\<user>\My Documents\openMSX\videos
	]code
	" (for Windows XP) or on 
	[code 
		"C:\Users\<user>\Documents\openMSX\videos
	]code
	" (for Vista/Windows 7) (where 
	[code 
		"<user>
	]code
	" is your user folder)
	$LF
]div
[h3 id=LinuxMac 
	" Linux / Mac
	$LF
]h3
[ol 
	[li 
		" Basically the same as for Windows, except that the AVI file is to be found on 
		[code 
			"/home
		]code
		" (
		[code 
			"Users
		]code
		" if you're using a Mac)
		[code 
			"/<user>/.openMSX/videos
		]code
		" (where 
		[code 
			"<user>
		]code
		" is your user folder).
		$LF
	]li
	[li 
		" The hot keys to open the console, pause and speed up emulation are different on Mac, though, 
		[a href=http://openmsx.org/manual/user.html#keymapping rel=noopener external nofollow 
			"see the openMSX User's manual
		]a
		".
		$LF
	]li
]ol
[div class=p 
	"If you don't know if the emulated MSX can output mono or stereo sound, open the AVI dump in any media player, e.g. VLC or MPlayer.
	$LF
]div
[div class=p 
	"This whole guide can also be found (in other words) 
	[a href=http://openmsx.org/manual/faq.html#perfect_videos rel=noopener external nofollow 
		"in the openMSX FAQ part of the manual
	]a
	".
	$LF
]div
[div class=p 
	"For more information about openMSX, please check 
	[a href=http://openmsx.org/manual/ rel=noopener external nofollow 
		"the complete openMSX manual
	]a
	".
	$LF
]div
[h2 id=Pcejin 
	" PCEjin
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"(variable)
				[a id=r5 
				]a
				[sup 
					"[
					[a href=#5 
						"5
					]a
					"]
				]sup
			]td
			[td 
				"44.1KHz stereo
			]td
		]tr
	]tbody
]table
[h3 id=Windows_8 
	" Windows
	$LF
]h3
[ol 
	[li 
		" Load the ROM.
		$LF
	]li
	[li 
		" Turn on Fast-Forward mode by pressing T.
		$LF
	]li
	[li 
		" Pause emulation. (Pause key)
		$LF
	]li
	[li 
		" Load the movie file.
		$LF
	]li
	[li 
		" Select 
		[em 
			"File -> Record AVI
		]em
		". Choose a file name (such as 
		[code 
			"raw.avi
		]code
		"), and choose a lossless RGB codec of your choice (see 
		[em 
			"Common settings
		]em
		" for suggestions). Click OK.
		$LF
	]li
	[li 
		" Unpause emulation. At this point, audio and video are now being captured in real-time.
		$LF
	]li
	[li 
		" When you reach the desired end point, select 
		[em 
			"File -> Stop AVI
		]em
		".
		$LF
	]li
]ol
[h3 id=Linux_6 
	" Linux
	$LF
]h3
[div class=p 
	"PCEjin is Windows-only, but works well with 
	[a href=http://winehq.org rel=noopener external nofollow 
		"Wine
	]a
	".  You may also be able to play back the movie with recent builds of Mednafen (see above).
	$LF
]div
[h2 id=Pcsx 
	" PCSX
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"(variable)
				[a id=r3 
				]a
				[sup 
					"[
					[a href=#3 
						"3
					]a
					"]
				]sup
			]td
			[td 
				"44.1KHz stereo
			]td
		]tr
	]tbody
]table
[ul 
	[li 
		" 
		[b 
			"WARNING
		]b
		": PCSX is not particularly stable and requires an unusual video dumping setup. It also dumps video files that may require a not-insignificant amount of video post-processing effort. It is not a good first choice of emulator for new encoders.
		$LF
	]li
	[li 
		" 
		[b 
			"NOTE
		]b
		": Don't forget to pick the bios. 
		[a class=intlink href=/Users/Profile/Spikestuff 
			"Spikestuff
		]a
		" has 
		[a href=https://files.tasvideos.org/common/PcsxrrEncodeWofkflow/SyncNotes.txt rel=noopener external nofollow 
			"compiled sync notes
		]a
		" for each problematic movie.
		$LF
	]li
	[li 
		" 
		[b 
			"NOTE
		]b
		": If it's a multi-disc movie, leave the ISO path field in the CD-ROM config blank. That will let you select both discs at proper time.
		$LF
	]li
	[li 
		" 
		[b 
			"WARNING
		]b
		": This guide will not produce publication quality captures. Use of 
		[a class=intlink href=/Users/Profile/Aktan 
			"Aktan
		]a
		"'s 
		[a href=http://pastebin.com/g26ksKNa rel=noopener external nofollow 
			"special methods
		]a
		" is required. The automated version of the resync setup 
		(__wikiLink|displaytext=can be found here|href=/EmulatorResources/PCSX/Resync)
		".
		$LF
	]li
]ul
[h3 id=Windows_9 
	" Windows
	$LF
]h3
[div class=p 
	"PCSX's native AVI dumping is broken - it does not result in synchronised sound - so external capture software is required; for this purpose, 
	[a href=http://www.mediafire.com/?oq4491c34o373nh rel=noopener external nofollow 
		"custom PCSX .kkapture
	]a
	" is used for its ability to preserve all of the frames in the input at the expected frame rate.
	$LF
]div
[div class=p 
	"You may wish to use an alternate sound plugin for improved sound compatibility.  The 
	[a href=http://www.pbernert.com/html/old_spu.htm rel=noopener external nofollow 
		"MIDAS plugin
	]a
	" has been reported to be sync-compatible with the TAS Sound plugin while offering slightly better sound emulation; alternatively, you can attempt to use the 
	[a href=http://www.zophar.net/utilities/psspuplugins/eternal-spu.html rel=noopener external nofollow 
		"Eternal SPU
	]a
	" plugin which offers the best known sound emulation but which does not sync reliably, use of the automated version of the resync setup which 
	(__wikiLink|displaytext=can be found here|href=/EmulatorResources/PCSX/Resync)
	" is highly recommended.
	$LF
]div
[div class=p 
	"If the game has graphical issues where characters are not visible then grab 
	[a href=http://www.pbernert.com/gpupete154.zip rel=noopener external nofollow 
		"Pete's Soft Driver 1.54
	]a
	" and Activate Special Game Fixes and Enable 
	[em 
		"No Sprite Transparancy Abe games
	]em
	".
	$LF
]div
[ol 
	[li 
		" Configure PCSX's plugins for playback and close PCSX.
		$LF
	]li
	[li 
		" Go to 
		[em 
			"Configuration
		]em
		" -> 
		[em 
			"Graphics
		]em
		" (You must use TAS Soft Plugins 0.2)
		$LF
	]li
	[li 
		" In 
		[em 
			"Stretching
		]em
		", select 
		[em 
			"1:1 (faster with some cards)
		]em
		$LF
	]li
	[li 
		" In 
		[em 
			"Dithering
		]em
		", select 
		[em 
			"Always dither g-shaded polygons (slowest)
		]em
		$LF
	]li
	[li 
		" If you are using 
		(__wikiLink|displaytext=PCSX-Resync|href=/EmulatorResources/PCSX/Resync)
		" enable 
		[em 
			"Skip SPU Loadstate
		]em
		" in the Tools menu, this will correct any lost audio.
		$LF
	]li
	[li 
		" Open .kkapture.
		$LF
	]li
	[li 
		" Under 
		[em 
			"Demo
		]em
		", select the 
		[code 
			"pcsx
		]code
		" executable.
		$LF
	]li
	[li 
		" Under 
		[em 
			"Arguments
		]em
		", enter 
		[code 
			"-play movie.pxm
		]code
		" (where 
		[code 
			"movie.pxm
		]code
		" is the name of the movie file).
		$LF
	]li
	[li 
		" Under 
		[em 
			"Target
		]em
		", select the desired target AVI file (such as 
		[code 
			"raw.avi
		]code
		").
		$LF
	]li
	[li 
		" Set the FPS to 60 for NTSC games or 50 for PAL games.
		$LF
	]li
	[li 
		" Select 
		[em 
			"kkapture!
		]em
		".  This will start PCSX and start the dumping process.
		$LF
	]li
	[li 
		" Once the desired endpoint is reached, close PCSX.
		$LF
	]li
]ol
[h3 id=Linux_7 
	" Linux
	$LF
]h3
[div class=p 
	"PCSX is Windows-only.  Further, .kkapture does not work with Wine.  There has been at least one report of using a version of 
	[a href=http://nullkey.ath.cx/projects/glc/ rel=noopener external nofollow 
		"glc
	]a
	" modified to sync video and capture all frames for a successful PCSX encode in a Linux environment.
	$LF
]div
[h2 id=Psxjin 
	" PSXjin
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"(variable)
				[a id=r3 
				]a
				[sup 
					"[
					[a href=#3 
						"3
					]a
					"]
				]sup
			]td
			[td 
				"44.1KHz stereo
			]td
		]tr
	]tbody
]table
[ul 
	[li 
		" 
		[b 
			"NOTE
		]b
		": Dumps from versioned releases of PSXjin are slightly wrong. Use this 
		[code 
			"PSXjin-svn725
		]code
		" from 
		(__wikiLink|href=/EmulatorResources/PSXjin|implicitdisplaytext=EmulatorResources/PSXjin)
		" instead.
		$LF
	]li
	[li 
		" 
		[b 
			"NOTE
		]b
		": Don't forget to pick the bios. SCPH-1001 for NTSC-U, SCPH-1000 for NTSC-J, SCPH-1002 for PAL. If you have problems, ask the judge or the author.
		$LF
	]li
]ul
[ol 
	[li 
		" Go to 
		[em 
			"Configuration
		]em
		" -> 
		[em 
			"Graphics
		]em
		$LF
	]li
	[li 
		" In 
		[em 
			"Stretching
		]em
		", select 
		[em 
			"1:1 (faster with some cards)
		]em
		$LF
	]li
	[li 
		" In 
		[em 
			"Dithering
		]em
		", select 
		[em 
			"Always dither g-shaded polygons (slowest)
		]em
		$LF
	]li
	[li 
		" Uncheck 
		[em 
			"FPS limit
		]em
		$LF
	]li
	[li 
		" Make sure 
		[em 
			"Use Frame skipping
		]em
		" is unchecked.
		$LF
	]li
	[li 
		" Click OK.
		$LF
	]li
	[li 
		" Go to 
		[em 
			"Configuration
		]em
		" -> 
		[em 
			"Sound
		]em
		$LF
	]li
	[li 
		" In 
		[em 
			"Mode
		]em
		", select 
		[em 
			"2: Synchronous (tas safe, buffering glitches)
		]em
		".
		$LF
	]li
	[li 
		" Click OK.
		$LF
	]li
	[li 
		" Load the ISO by going to 
		[em 
			"File
		]em
		" -> 
		[em 
			"Open CD
		]em
		".
		$LF
	]li
	[li 
		" Pause emulation. (Pause key)
		$LF
	]li
	[li 
		" Select 
		[em 
			"File
		]em
		" -> 
		[em 
			"Movie
		]em
		" -> 
		[em 
			"Start playback
		]em
		", or press 
		[em 
			"CTRL + R
		]em
		" to load a movie file.
		$LF
	]li
	[li 
		" Select 
		[em 
			"File
		]em
		" -> 
		[em 
			"Record AVI
		]em
		". Choose a file name (such as 
		[em 
			"raw.avi
		]em
		"), and a lossless RGB codec of your choice (see 
		[em 
			"Common settings
		]em
		" for suggestions). Click OK.
		$LF
	]li
	[li 
		" Unpause emulation. At this point, an audio file and multiple video files (one per resolution change) are now being captured
		$LF
	]li
	[li 
		" When you reach the desired end point, select 
		[em 
			"File
		]em
		" -> 
		[em 
			"Stop AVI
		]em
		$LF
	]li
	[li 
		" You'll need to resize each video part into the largest width and largest height captured.
		$LF
	]li
]ol
[h2 id=Snes9x 
	" Snes9x
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"256x224 (NTSC), 256x240 (PAL)
			]td
			[td 
				"48KHz stereo
				[a id=r1 
				]a
				[sup 
					"[
					[a href=#1 
						"1
					]a
					"]
				]sup
			]td
		]tr
	]tbody
]table
[h3 id=Windows_10 
	" Windows
	$LF
]h3
[div class=p 
	[em 
		"Note
	]em
	": This applies to v1.43 v17 and most revisions of v1.51.  Earlier versions of v1.43 have a different menu layout.
	$LF
]div
[ol 
	[li 
		" Select 
		[em 
			"Config -> Speed -> Frame skip -> skip 0
		]em
		".
		$LF
	]li
	[li 
		" Select 
		[em 
			"Config -> Sound -> Playback rate -> 48KHz
		]em
		".
		[a id=r1 
		]a
		[sup 
			"[
			[a href=#1 
				"1
			]a
			"]
		]sup
		$LF
	]li
	[li 
		" If you're using v1.43, select 
		[em 
			"Config -> Video -> Display Configuration...
		]em
		" and make sure that "Bi-Linear Mode 7" is unchecked.
		$LF
	]li
	[li 
		" Load the ROM.
		$LF
	]li
	[li 
		" Set speed to about 400% (= key or 
		[em 
			"Config -> Speed -> Set Speed
		]em
		").
		$LF
	]li
	[li 
		" Pause emulation (Pause key).
		$LF
	]li
	[li 
		" Load the movie file, with 
		[em 
			"Sync samples with sound CPU
		]em
		" checked (it increases sound resolution).
		$LF
	]li
	[li 
		" Select 
		[em 
			"File -> Audio/Video Recording -> Start AVI Recording
		]em
		".  Choose a file name (such as 
		[code 
			"raw.avi
		]code
		"), and choose a lossless RGB codec of your choice (see 
		[em 
			"Common settings
		]em
		" for suggestions).  Click OK.
		$LF
	]li
	[li 
		" Unpause emulation.  You are now capturing audio/video.
		$LF
	]li
	[li 
		" When you reach the desired end point, select 
		[em 
			"File -> Audio/Video Recording -> Stop AVI Recording
		]em
		".
		$LF
	]li
]ol
[h3 id=Linux_8 
	" Linux
	$LF
]h3
[div class=p 
	"At present, there's no known method other than 
	[a href=http://winehq.org rel=noopener external nofollow 
		"Wine
	]a
	" to get video output from v1.51 movies.  A 
	[a href=http://bisqwit.iki.fi/src/snes9x-bisqwit-makingavi-patch.txt rel=noopener external nofollow 
		"patch
	]a
	" has been written for the v1.43 source code in order to get video output, but this may not be compatible with newer movies.
	$LF
]div
[h2 id=Vbjin 
	" VBjin
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"384x224
			]td
			[td 
				"44.1KHz stereo
			]td
		]tr
	]tbody
]table
[div class=p 
	[b 
		"NOTE:
	]b
	" 
	(__wikiLink|displaytext=Special encoding steps|href=/Forum/Posts/435440)
	" are required.
	$LF
]div
[h3 id=Windows_11 
	" Windows
	$LF
]h3
[ol 
	[li 
		" Load the ROM.
		$LF
	]li
	[li 
		" Pause emulation. (Pause key)
		$LF
	]li
	[li 
		" Load the movie file.
		$LF
	]li
	[li 
		" Select 
		[em 
			"File -> Record AVI
		]em
		". Choose a file name (such as 
		[code 
			"raw.avi
		]code
		"), and choose a lossless RGB codec of your choice (see 
		[em 
			"Common settings
		]em
		" for suggestions). Click OK.
		$LF
	]li
	[li 
		" Unpause emulation. At this point, audio and video are now being captured.
		$LF
	]li
	[li 
		" When you reach the desired end point, select 
		[em 
			"File -> Stop AVI
		]em
		".
		$LF
	]li
]ol
[h3 id=Linux_9 
	" Linux
	$LF
]h3
[div class=p 
	"VBjin is Windows-only, but works well with 
	[a href=http://winehq.org rel=noopener external nofollow 
		"Wine
	]a
	".
	$LF
]div
[h2 id=Visualboyadvance 
	" VisualBoyAdvance
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"160x144 (GB), 240x160 (GBA)
			]td
			[td 
				"44.1KHz stereo
			]td
		]tr
	]tbody
]table
[ol 
	[li 
		" Go to 
		[em 
			"Options -> Sound -> 44 KHz
		]em
		".
		$LF
	]li
	[li 
		" Go to 
		[em 
			"Options -> Gameboy Mode -> Gameboy Colors
		]em
		". If the TAS doesn't sync on v23.6 or newer, leave it at 
		[em 
			"Real Colors
		]em
		", as the 
		[em 
			"Gameboy Colors
		]em
		" palette is completely washed out and dull in older versions (up to v23.5).
		$LF
	]li
	[li 
		" Open the ROM.
		$LF
	]li
	[li 
		" Speed up to 300% or more. (
		[code 
			"=
		]code
		" key)
		$LF
	]li
	[li 
		" Pause emulation. (
		[code 
			"Pause
		]code
		" key)
		$LF
	]li
	[li 
		" Select 
		[em 
			"Tools -> Movie -> Play Movie
		]em
		" and select the movie file you want to dump to AVI.
		$LF
	]li
	[li 
		" If you are running a Game Boy game that is Super Game Boy compatible but the movie does not run in Super Game Boy mode, enable 
		[em 
			"Options -> Gameboy Mode -> Game Boy (GB)
		]em
		".
		$LF
	]li
	[li 
		" Select 
		[em 
			"Tools -> Start AVI Recording
		]em
		".  Choose a file name (such as 
		[code 
			"raw.avi
		]code
		"), and choose a lossless RGB codec of your choice (see 
		[em 
			"Common settings
		]em
		" for suggestions).  Click 
		[em 
			"OK
		]em
		".
		$LF
	]li
	[li 
		" Unpause emulation. At this point, audio and video are now being captured.
		$LF
	]li
	[li 
		" When you reach the desired end point, select 
		[em 
			"Tools -> Stop AVI Recording
		]em
		".
		$LF
	]li
]ol
[h2 id=Yabause 
	" Yabause
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				"Resolution
			]th
			[th 
				"Sound
			]th
		]tr
		[tr 
			[td 
				"320x240
			]td
			[td 
				"44.1KHz stereo
			]td
		]tr
	]tbody
]table
[div class=p 
	"TODO
	$LF
]div
[hr 
]hr
[div class=p 
	"[
	[a id=1 
	]a
	[a href=#r1 
		"1
	]a
	"]
	": The SNES has a 32KHz native sampling rate, but using this option in Snes9x tends to result in sound desynchronisation.
	[br 
	]br
	$LF
	"[
	[a id=2 
	]a
	[a href=#r2 
		"2
	]a
	"]
	": For the N64, you can rip at an integer multiple of this resolution and scale it down to the appropriate size during the 
	(__wikiLink|displaytext=Pre-encoding|href=/EncodingGuide/Legacy/PreEncoding)
	" stage.
	[br 
	]br
	$LF
	"[
	[a id=3 
	]a
	[a href=#r3 
		"3
	]a
	"]
	": Games for the PSX use many resolutions; 320x240 is the most common.
	[br 
	]br
	$LF
	"[
	[a id=4 
	]a
	[a href=#r4 
		"4
	]a
	"]
	": Mednafen, being cross-platform, uses the resolution of whatever platform it is currently emulating.
	[br 
	]br
	$LF
	"[
	[a id=5 
	]a
	[a href=#r5 
		"5
	]a
	"]
	": Most games for the PCE that have been run are one of 256x224, 256x232, 320x232, or 320x240.
	[br 
	]br
	$LF
	"[
	[a id=6 
	]a
	[a href=#r6 
		"6
	]a
	"]
	": There is no standard resolution for this platform.
	[br 
	]br
	$LF
	"[
	[a id=7 
	]a
	[a href=#r7 
		"7
	]a
	"]
	": Depends on game. Usually 640x400, sometimes 640x480, rarely something else (measure size of frames shown during in-game sequences. Some games have different resolution in menu and in actual game).
	[br 
	]br
	$LF
	"[
	[a id=8 
	]a
	[a href=#r8 
		"8
	]a
	"]
	": Depends on game. If game only uses PCM output with constant sampling rate, that sampling rate should be used. Otherwise sampling rate should be set to  44.1kHz or 48kHz. 
	[br 
	]br
	$LF
	"[
	[a id=9 
	]a
	[a href=#r9 
		"9
	]a
	"]
	": PSG High Quality actually distorts PSG noises by performing filtering on the sound. As a result, sharp noises become very washed out and soft. For example, Sonic's jumping noise.
	[br 
	]br
	$LF
	"[
	[a id=10 
	]a
	[a href=#r10 
		"10
	]a
	"]
	": Famtasia was not meant to have video dumping capabilities. It had the feature hacked into it by blip.
	[br 
	]br
	$LF
	"[
	[a id=11 
	]a
	[a href=#r11 
		"11
	]a
	"]
	": Famtasia incorrectly renders the NES's 240 scanlines. It shifts the topmost one to the bottom of the display. Furthermore, the 224 scanlines version (without the 240 scanlines patch) cuts off the bottom 16 scanlines instead of 8 from the top and 8 from the bottom. This results in 8 extra scanlines being displayed at the top and 8 fewer at the bottom. The best practice is to apply the 240 scanlines patch and remove the extra scanlines (NTSC) or move the bottom one to the proper location (PAL) after dumping.
]div
