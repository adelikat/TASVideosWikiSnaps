4
[p 
	"This tool, written by 
	[a class=intlink href=/Users/Profile/Sgrunt 
		"sgrunt
	]a
	" for use in 
	[a class=intlink href=/EncodingGuide 
		"encoding
	]a
	" in conjunction with 
	[tt 
		"mencoder
	]tt
	", takes a raw RGB24 video stream on 
	[tt 
		"stdin
	]tt
	", removes duplicate frames, and writes the resulting stream to 
	[tt 
		"stdout
	]tt
	" and the associated timecodes to a specified file.
	$LF
]p
[h3 
	" Usage
	$LF
]h3
[p 
	"Usage is:
	$LF
]p
[blockquote 
	" dedup <outfile> <fpsnum> <fpsden> <width> <height> 
	"[<max consecutive dup frames>]
	$LF
]blockquote
[p 
	"where:
	$LF
]p
[ul 
	[li 
		" 
		[tt 
			"<outfile>
		]tt
		" is the time code file to be written;
		$LF
	]li
	[li 
		" 
		[tt 
			"<fpsnum>
		]tt
		" and 
		[tt 
			"<fpsden>
		]tt
		" are the numerator and denominator of the frame rate of the input stream;
		$LF
	]li
	[li 
		" 
		[tt 
			"<width>
		]tt
		" and 
		[tt 
			"<height>
		]tt
		" are the dimensions of the video stream; and
		$LF
	]li
	[li 
		" 
		[tt 
			"<max consecutive dup frames>
		]tt
		" is the maximum number of consecutive duplicate frames that will be removed from a stream. If not specified, the default value is 20, which tends to be a good trade off between disk space and usability.
		$LF
	]li
]ul
[p 
	[tt 
		"mencoder
	]tt
	" can produce a raw RGB24 output with:
	$LF
]p
[blockquote 
	" mencoder -nosound -of rawvideo -ovc raw -vf format=rgb24,scale <input/output files>
	$LF
]blockquote
[p 
	"and can read a raw RGB24 input with:
	$LF
]p
[blockquote 
	" mencoder -demuxer rawvideo -rawvideo format=rgb24:w=<width>:h=<height>:fps=<fps> <input/output/codec settings>
	$LF
]blockquote
[p 
	"This is best used in conjunction with pipes or FIFOs to avoid having to write large raw files to disk.
	$LF
]p
[h3 
	" Example: logo-combining
	$LF
]h3
[blockquote 
	" mkfifo dedupin
	[br 
	]br
	$LF
	" mkfifo dedupout
	[br 
	]br
	$LF
	" mencoder -nosound -of rawvideo -ovc raw -vf format=rgb24,scale logo.avi raw.avi -sub subtitle.srt -subpos 98 -subalign 2 -o dedupin &
	[br 
	]br
	$LF
	" dedup times.txt <fps> <width> <height> 20 <dedupin >dedupout &
	[br 
	]br
	$LF
	" mencoder -demuxer rawvideo -rawvideo format=rgb24:w=<width>:h=<height>:fps=<fps> dedupin -ovc x264 -x264encopts crf=0:fullrange=on -sws 9 -o in.avi
	$LF
]blockquote
[p 
	"(Note that sound will need to be extracted from 
	[tt 
		"raw.avi
	]tt
	" and delayed by hand, perhaps with 
	[tt 
		"sox
	]tt
	", for encoding purposes.)
	$LF
]p
[h3 
	" Code
	$LF
]h3
[pre 
	[code class=language-sh 
		"#include <stdlib.h>
		$LF
		"#include <stdio.h>
		$LF
		"#include <string.h>
		$LF
		$LF
		"int main(int argc, char** argv)
		$LF
		"{
		$LF
		"  unsigned char *prevframe, *curframe;
		$LF
		"  unsigned int width = 0, height = 0, framesize = 0;
		$LF
		"  unsigned int i = 0, tot = 20;
		$LF
		"  unsigned long framenum = 0;
		$LF
		"  unsigned short dup = 255;
		$LF
		"  unsigned long fpsnum = 0, fpsden = 0;
		$LF
		"  FILE* outfile = 0;
		$LF
		"  char outfilename[256];
		$LF
		"  if (argc < 6)
		$LF
		"  {
		$LF
		"    fprintf(stderr, "usage: dedup <outfile> <fpsnum> <fpsden> <width> <height> [<max consecutive dup frames>]\n");
		$LF
		"    exit(1);
		$LF
		"  }
		$LF
		"  strncpy(outfilename, argv[1], 256);
		$LF
		"  fpsnum = atoi(argv[2]);
		$LF
		"  fpsden  = atoi(argv[3]);
		$LF
		"  width = atoi(argv[4]);
		$LF
		"  height = atoi(argv[5]);
		$LF
		"  if (argc >= 7)
		$LF
		"  {
		$LF
		"    tot = atoi(argv[6]);
		$LF
		"  }
		$LF
		"  framesize = width*height*3;
		$LF
		"  prevframe = (unsigned char *)malloc(sizeof(unsigned char)*framesize);
		$LF
		"  if (!prevframe)
		$LF
		"  {
		$LF
		"    perror("Couldn't malloc prevframe");
		$LF
		"    exit(2);
		$LF
		"  }
		$LF
		"  curframe = (unsigned char *)malloc(sizeof(unsigned char)*framesize);
		$LF
		"  if (!curframe)
		$LF
		"  {
		$LF
		"    perror("Couldn't malloc prevframe");
		$LF
		"    free(curframe);
		$LF
		"    exit(3);
		$LF
		"  }
		$LF
		"  outfile = fopen(outfilename, "w");
		$LF
		"  if (!outfile)
		$LF
		"  {
		$LF
		"    perror("Couldn't open output file");
		$LF
		"    free(prevframe);
		$LF
		"    free(curframe);
		$LF
		"    exit(4);
		$LF
		"  }
		$LF
		"  fprintf(outfile, "# timecode format v2\n");
		$LF
		"  while (!feof(stdin))
		$LF
		"  {
		$LF
		"    if (fread(curframe, sizeof(unsigned char), framesize, stdin) < framesize)
		$LF
		"      break;
		$LF
		"    if (dup != 255)
		$LF
		"    {
		$LF
		"      if (!memcmp(prevframe, curframe, framesize))
		$LF
		"      {
		$LF
		"        dup = 1;
		$LF
		"	i++;
		$LF
		"	if (tot > 0 && i >= tot)
		$LF
		"	{
		$LF
		"	  dup = 0;
		$LF
		"	  i = 0;
		$LF
		"	}
		$LF
		"      }
		$LF
		"    }
		$LF
		"    if (!dup || dup == 255)
		$LF
		"    {
		$LF
		"      if (fwrite(curframe, sizeof(unsigned char), framesize, stdout) < framesize)
		$LF
		"        break;
		$LF
		"      memcpy(prevframe, curframe, framesize);
		$LF
		"      fprintf(outfile, "%lu.%06lu\n", 
		$LF
		"          framenum*1000*fpsden/fpsnum,
		$LF
		"	  (framenum*10000000000*fpsden/fpsnum+5)/10%1000000);
		$LF
		"    }
		$LF
		"    framenum++;
		$LF
		"    dup = 0;
		$LF
		"  }
		$LF
		"  fclose(outfile);
		$LF
		"  free(prevframe);
		$LF
		"  free(curframe);
		$LF
		"  return 0;
		$LF
		"}
		$LF
	]code
]pre
