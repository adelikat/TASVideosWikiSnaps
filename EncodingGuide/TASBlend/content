8
[p 
	"Some streaming sites, in particular YouTube, don't support frame rates much larger than 30 fps. As such, they do a poor job of displaying 30Hz flicker effects present in games such as Super Metroid and the Mega Man X series.
	$LF
]p
[p 
	"To combat this, creaothceann 
	[a class=intlink href=/Forum/Viewtopic.php?p=279714#279714 
		"proposed some frame blending techniques
	]a
	". The best-received of these has been one which combines pairs of frames in a 33%/67% ratio, with which frame in a pair being more visible alternating for every pair (thus, 33%/67% for one pair, 67%/33% for the following pair, and so on). This technique has come to be known as TASBlend.
	$LF
]p
[p 
	"Some implementations of TASBlend follow.
	$LF
]p
[div class= 
	[ul class=nav nav-tabs role=tablist 
		[li class=nav-item 
			[a class=active nav-link data-toggle=tab href=#tabs-679-0 
				"AVISynth
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-679-1 
				"Command-line filter (C)
			]a
		]li
	]ul
	[div class=tab-content 
		[div class=tab-pane active id=tabs-679-0 
			[pre 
				[code class=language-sh 
					"function TASBlend(clip c, float "ratio")  { 
					$LF
					"        # reduces framerate to 1/2 but leaves flicker effects partly visible 
					$LF
					"        # blends frame pairs with alternating opacity (default is 2/3+1/3;1/3+2/3) 
					$LF
					"        # optional "ratio" is the opacity of the first frame out of the four 
					$LF
					"        ratio    = default(ratio, 2.0 / 3) 
					$LF
					"        opacity1 = round((1 - ratio) * 257) 
					$LF
					"        opacity2 = round((    ratio) * 257) 
					$LF
					"        c 
					$LF
					"        Interleave(Layer(SelectEvery(4, 0), SelectEvery(4, 1), level=opacity1), 
					$LF
					"        \          Layer(SelectEvery(4, 2), SelectEvery(4, 3), level=opacity2)) 
					$LF
					"}
					$LF
				]code
			]pre
			[p 
				"If only certain segments of the clip are to be blended, creaothceann 
				[a class=intlink href=/Forum/Viewtopic.php?p=280007#280007 
					"suggests
				]a
				" using this in the following fashion:
				$LF
			]p
			[pre 
				[code class=language-sh 
					"function Replace(clip c, int i, int j, clip d)  { 
					$LF
					"        Assert(i >= 0, "Replace: parameter i is negative") 
					$LF
					"        Assert(j >= 0, "Replace: parameter j is negative") 
					$LF
					"        p1 = c.Trim(0    , -i) 
					$LF
					"        p2 = d.Trim(i    ,  j) 
					$LF
					"        p3 = c.Trim(j + 1,  0) 
					$LF
					"        p1 = (i == 0)  ?  c.Trim(0, -1).DeleteFrame(0)  :  p1 
					$LF
					"        p3 = (j == 0)  ?  c.Trim(0, -1).DeleteFrame(0)  :  p3 
					$LF
					"        p1 + p2 + p3 
					$LF
					"        return (c.HasAudio)  ?  last.AudioDub(c)  :  last 
					$LF
					"}
					$LF
					$LF
					"AVISource("video.avi") 
					$LF
					$LF
					"blended = TASBlend 
					$LF
					"ChangeFPS(FrameRate / 2) 
					$LF
					$LF
					"Replace(  500,   999, blended) 
					$LF
					"Replace( 2000,  2999, blended) 
					$LF
					"Replace(70000, 71999, blended) 
					$LF
					"... 
					$LF
				]code
			]pre
		]div
		[div class=tab-pane fade id=tabs-679-1 
			[p 
				[a class=intlink href=/Users/Profile/Sgrunt 
					"sgrunt
				]a
				" has written the following filter in the spirit of 
				[a class=intlink href=/EncodingGuide/DedupC 
					"his duplicate frame filter
				]a
				", which accepts raw RGB24 frames on 
				[tt 
					"stdin
				]tt
				" and outputs blended/unblended frames at half the framerate on 
				[tt 
					"stdout
				]tt
				".
				$LF
			]p
			[p 
				"Usage is:
				$LF
			]p
			[blockquote 
				" tasblend <width> <height>ã€€<startframe> <endframe> 
				"[<startframe> <endframe> [...] ]
				"]
				$LF
			]blockquote
			[p 
				"where
				$LF
			]p
			[ul 
				[li 
					" 
					[tt 
						"<width>
					]tt
					" and 
					[tt 
						"<height>
					]tt
					" are the height of a frame; and
					$LF
				]li
				[li 
					" each pair of 
					[tt 
						"<startframe>
					]tt
					" and 
					[tt 
						"<endframe>
					]tt
					" signifies frame ranges from the input to be blended - to blend an entire clip, set 
					[tt 
						"<startframe>
					]tt
					" to 0 and 
					[tt 
						"<endframe>
					]tt
					" to a value larger than the number of frames in the clip.
					$LF
				]li
			]ul
			[p 
				"This has not been tested thoroughly, so use at your own risk (and report bugs to 
				[a class=intlink href=/Users/Profile/Sgrunt 
					"sgrunt
				]a
				").
				$LF
			]p
			[p 
				"A version that has gamma correction is available at http://engelsish.org/tasblend-lookup.c
				$LF
			]p
			[pre 
				[code class=language-sh 
					"#include <stdlib.h>
					$LF
					"#include <stdio.h>
					$LF
					"#include <string.h>
					$LF
					$LF
					"int main(int argc, char** argv)
					$LF
					"{
					$LF
					"  unsigned char *firstframe, *secondframe, *outframe;
					$LF
					"  unsigned int width = 0, height = 0, framesize = 0, curarg = 3;
					$LF
					"  unsigned long startframe = 0, endframe = 0, curframe = 0, i = 0;
					$LF
					"  unsigned short first33 = 1;
					$LF
					"  FILE* outfile = 0;
					$LF
					"  if (argc < 5)
					$LF
					"  {
					$LF
					"    fprintf(stderr, "usage: tasblend <width> <height> <startframe> <endframe> [<startframe> <endframe> [...]]\n");
					$LF
					"    exit(1);
					$LF
					"  }
					$LF
					"  width = atoi(argv[1]);
					$LF
					"  height = atoi(argv[2]);
					$LF
					"  startframe = atoi(argv[3]);
					$LF
					"  endframe = atoi(argv[4]);
					$LF
					"  framesize = width*height*3;
					$LF
					"  firstframe = (unsigned char *)malloc(sizeof(unsigned char)*framesize);
					$LF
					"  if (!firstframe)
					$LF
					"  {
					$LF
					"    perror("Couldn't malloc firstframe");
					$LF
					"    exit(2);
					$LF
					"  }
					$LF
					"  secondframe = (unsigned char *)malloc(sizeof(unsigned char)*framesize);
					$LF
					"  if (!secondframe)
					$LF
					"  {
					$LF
					"    perror("Couldn't malloc secondframe");
					$LF
					"    free(firstframe);
					$LF
					"    exit(3);
					$LF
					"  }
					$LF
					"  outframe = (unsigned char *)malloc(sizeof(unsigned char)*framesize);
					$LF
					"  if (!outframe)
					$LF
					"  {
					$LF
					"    perror("Couldn't malloc outframe");
					$LF
					"    free(firstframe);
					$LF
					"    free(secondframe);
					$LF
					"    exit(4);
					$LF
					"  }
					$LF
					"  while (!feof(stdin))
					$LF
					"  {
					$LF
					"    if (fread(firstframe, sizeof(unsigned char), framesize, stdin) < framesize)
					$LF
					"      break;
					$LF
					"    if (fread(secondframe, sizeof(unsigned char), framesize, stdin) < framesize)
					$LF
					"    {
					$LF
					"      fwrite(firstframe, sizeof(unsigned char), framesize, stdout);
					$LF
					"      break;
					$LF
					"    }
					$LF
					"    if (curframe >= startframe && curframe < endframe)
					$LF
					"    {
					$LF
					"      if (first33 > 0)
					$LF
					"      {
					$LF
					"        for (i = 0; i < framesize; i++)
					$LF
					"          outframe[i] = (firstframe[i] * 33 + secondframe[i] * 67) / 100; 
					$LF
					"      }
					$LF
					"      else
					$LF
					"      {
					$LF
					"        for (i = 0; i < framesize; i++)
					$LF
					"          outframe[i] = (firstframe[i] * 67 + secondframe[i] * 33) / 100; 
					$LF
					"      }
					$LF
					"      fwrite(outframe, sizeof(unsigned char), framesize, stdout);
					$LF
					"      first33 = (first33 > 0) ? 0 : 1;
					$LF
					"    }
					$LF
					"    else
					$LF
					"    {
					$LF
					"      if (curframe >= endframe && curarg+1 < argc)
					$LF
					"      {
					$LF
					"        curarg += 2;
					$LF
					"	if (curarg+1 < argc)
					$LF
					"	{
					$LF
					"          first33 = 1;
					$LF
					"	  startframe = atoi(argv[curarg]);
					$LF
					"	  endframe = atoi(argv[curarg+1]);
					$LF
					"	}
					$LF
					"      }
					$LF
					"      fwrite(firstframe, sizeof(unsigned char), framesize, stdout);
					$LF
					"    }
					$LF
					"    curframe += 2;
					$LF
					"  }
					$LF
					"  free(firstframe);
					$LF
					"  free(secondframe);
					$LF
					"  free(outframe);
					$LF
					"  return 0;
					$LF
					"}
					$LF
				]code
			]pre
		]div
	]div
]div
[hr 
]hr
[p 
	"Return to the 
	(__wikiLink|/EncodingGuide|Encoding Guide)
	".
]p
