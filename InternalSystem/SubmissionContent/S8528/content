5
[div class=card mb-2 
	[div class=card-header 
		[strong 
			"Table of contents
		]strong
	]div
	[div class=card-body 
		[ul 
			[li 
				[a href=#Introduction 
					" Introduction:
					$LF
				]a
			]li
			[li 
				[a href=#SyncSettings 
					" Sync Settings:
					$LF
				]a
			]li
			[li 
				[a href=#Controls 
					" Controls:
					$LF
				]a
				[ul 
					[li 
						[ul 
							[li 
								[a href=#Mouse 
									" Mouse:
									$LF
								]a
							]li
							[li 
								[a href=#Escape 
									" Escape:
									$LF
								]a
							]li
							[li 
								[a href=#Period 
									" Period:
									$LF
								]a
							]li
						]ul
					]li
				]ul
			]li
			[li 
				[a href=#Route 
					" Route:
					$LF
				]a
			]li
			[li 
				[a href=#SequenceBreaks 
					" "Sequence Breaks":
					$LF
				]a
				[ul 
					[li 
						[ul 
							[li 
								[a href=#PenguinCutsceneSkip 
									" Penguin Cutscene Skip:
									$LF
								]a
							]li
							[li 
								[a href=#ToolboxDialogSkip 
									" Toolbox Dialog Skip:
									$LF
								]a
							]li
						]ul
					]li
				]ul
			]li
			[li 
				[a href=#Conclusion 
					" Conclusion:
					$LF
				]a
			]li
		]ul
	]div
]div
[h2 id=Introduction 
	" Introduction:
	$LF
]h2
[div class=p 
	"Putt-Putt Saves the Zoo is a point-and-click children's adventure game developed by Humongous Entertainment, and released in 1995. In this game, you play as a talking car named Putt-Putt, who needs to perform various "difficult tasks" (i.e. clicking on stuff) in order to save various animals so that the new zoo can open. However, much to the shock of the developers, we complete the whole game in under 30 seconds! I know you can get a free pizza if it takes more than 30 minutes to be delivered to you. Similarly, I feel like I should get a free copy of this game for completing the whole thing in under 30 seconds! :D
	$LF
]div
[hr 
]hr
[h2 id=SyncSettings 
	" Sync Settings:
	$LF
]h2
[div class=p 
	"I used the Ubuntu operating system on VirtualBox in order to make this TAS. I then downloaded LibTAS (version 1.4.3). After this, I downloaded ScummVM version 2.7.1 (the program/engine which is used to play these old Humongous Entertainment games from 1995 on a modern PC). I then put the Putt-Putt Saves the Zoo data files into a folder, added them to ScummVM, and started TASing. The following are the 5 Putt-Putt data files that I put into a folder, along with their MD5 checksum:
	$LF
]div
[ul 
	[li 
		" PUTTZOO.HE0 - 1005456bfe351c1b679e1ff2dc2849e9
		$LF
	]li
	[li 
		" PUTTZOO.HE1 - 1399aaabdfc340203ac63aff57abf8a0
		$LF
	]li
	[li 
		" PUTTZOO.HE2 - 225991e6f8d3d6ac5e519413392c34f3
		$LF
	]li
	[li 
		" PUTTZOO.HE3 - 4417ea03a6d1b0b7522526f41d1097f6
		$LF
	]li
	[li 
		" PUTTZOO.HE4 - d3235443d88751acd3412c1b0c6cec35
		$LF
	]li
]ul
[hr 
]hr
[h2 id=Controls 
	" Controls:
	$LF
]h2
[div class=p 
	"This game, like most Humongous Entertainment PC games from the 90s, was programmed in the Scumm engine. This is just a simple scripting language that let devs write things like "if user clicks on object, trigger cutscene" etc. ScummVM is a recreation of the Scumm engine, which can therefore run Scumm games. This TAS uses only 3 buttons: the left mouse button click, the escape key, and the period key. We also move the mouse around the screen (although that's not technically a key).
	$LF
]div
[h4 id=Mouse 
	" Mouse:
	$LF
]h4
[div class=p 
	"We click on items that are on the ground in order to pick them up. We can also click on items in our inventory and then click on an object on-screen in order to use the item on that object. Lastly, we click on the entrances/exits to screens in order to go to the next screen.
	$LF
]div
[h4 id=Escape 
	" Escape:
	$LF
]h4
[div class=p 
	"Every time we pick up an item or enter a new screen, it triggers a long cutscene. Pressing escape cancels that cutscene, so we do that each time. However, if you press escape within 5 frames of clicking on an object, then pressing escape will cancel clicking on that object/exit, so we need to wait a little bit between each time we click on something and when we press escape.
	$LF
]div
[h4 id=Period 
	" Period:
	$LF
]h4
[div class=p 
	"There's one (and only one) dialog in the game which can only be skipped by pressing the period key, instead of the escape key. This occurs when we find the Tool-Box in the tree, and it's the only time we use the period key in this TAS.
	$LF
]div
[hr 
]hr
[h2 id=Route 
	" Route:
	$LF
]h2
[div class=p 
	"The game requires you to rescue 6 animals, and it ends as soon as you rescue the last of the 6 animals. You can choose to rescue the animals in any order you like. However, I use an order that minimizes backtracking in order to save time.
	$LF
]div
[div class=p 
	"Because everything happens so quickly, I'm just going to list all the actions that I do in order:
	$LF
]div
[ol 
	[li 
		" Talk to the car that gives Putt-Putt the Zoo Chow bag to deliver to the zoo.
		$LF
	]li
	[li 
		" Click on the intercom button to open the gate to the zoo, and give the Zoo Chow bag to Outback Al.
		$LF
	]li
	[li 
		" Grab Hot Cacao and Cheese Squiglies from the snack cart.
		$LF
	]li
	[li 
		" Go forwards into the Grasslands exhibit, and grab the log blocking the way.
		$LF
	]li
	[li 
		" Go right, and grab the shovel by the paint stand.
		$LF
	]li
	[li 
		" Head back to the left, and give the Cheese Squiglies to the Mouse in order to save the elephant (our 1st of the 6 animals we need to rescue).
		$LF
	]li
	[li 
		" Head to the Arctic Land exhibit, and grab the rope from behind the gate.
		$LF
	]li
	[li 
		" Use the shovel to dig a hole through the snowfall.
		$LF
	]li
	[li 
		" Give the Hot Cacao to the snake in order to save it (our 2nd of 6 animals saved).
		$LF
	]li
	[li 
		" Move the ice blocks to rescue the Hippo trapped on an iceberg (our 3rd of 6 animals saved).
		$LF
	]li
	[li 
		" Head right, and enter the Jungle Land exhibit.
		$LF
	]li
	[li 
		" Use the vine to swing over the crocodile (or is it an alligator? idk...)
		$LF
	]li
	[li 
		" Grab the toolbox from the log, and head left.
		$LF
	]li
	[li 
		" Use the log to repair the raft, and then head down the river.
		$LF
	]li
	[li 
		" Push the rock out of the way that's blocking the drawbridge in front of the giraffe (have to click on it twice to get it to move).
		$LF
	]li
	[li 
		" Head up the path, and drop the rope down to save the Lion cub that's trapped on a ledge in the waterfall (our 4th of 6 animals saved).
		$LF
	]li
	[li 
		" Head back across the water on the raft, head right, and then lower the drawbridge in front of the giraffe (our 5th of 6 animals saved).
		$LF
	]li
	[li 
		" Head back to The Grasslands exhibit, but this time head left.
		$LF
	]li
	[li 
		" Use the toolbox to open the dam to free Sammy Seal (our 6th of 6 animals saved).
		$LF
	]li
]ol
[hr 
]hr
[h2 id=SequenceBreaks 
	" "Sequence Breaks":
	$LF
]h2
[div class=p 
	"I put the term sequence breaks in quotes here, because this TAS is so short that any sequence break saves barely any time. However, there are 2 things we do that save a few seconds (which is a lot in a ~30-seconds long TAS).
	$LF
]div
[h4 id=PenguinCutsceneSkip 
	" Penguin Cutscene Skip:
	$LF
]h4
[div class=p 
	"Each time we move an ice block on the screen with the Hippo, the penguins do a little dance. The hippo-being-freed cutscene can't be canceled until the penguins stop dancing. However, if we place all but one ice block, leave the screen, re-enter, and then place the last ice block, then the penguins will do a much shorter dance (since they won't also be trying to do the dances from the previous pushes), which means we can skip the cutscene sooner. This occurs at around 0:11 in my encode, and it saves around ~3 seconds.
	$LF
]div
[h4 id=ToolboxDialogSkip 
	" Toolbox Dialog Skip:
	$LF
]h4
[div class=p 
	"When we click on the wood panel to reveal the toolbox, Putt-Putt does a 2-3 second dialog about how he found a toolbox. Unlike all of the other cutscenes in this game, this one can't be skipped by pressing escape. Instead, we need to press period. This skip saves about 2-3 seconds, and occurs at around 0:17 in my encode.
	$LF
]div
[hr 
]hr
[h2 id=Conclusion 
	" Conclusion:
	$LF
]h2
[div class=p 
	"This TAS has twice as many re-records as it does frames, which is probably a record for me in terms of re-records per second. The RTA world record for this game is 31.317 seconds, while my TAS finishes in 28.10 seconds (using RTA timing). You can click here to see the current RTA record for this game as of July 2023, which I used to figure out the route + tricks for this TAS: 
	[a href=https://www.youtube.com/watch?v=pTe7vk9NlrQ&t=32s&ab_channel=plank rel=noopener external nofollow 
		"https://www.youtube.com/watch?v=pTe7vk9NlrQ&t=32s&ab_channel=plank
	]a
	$LF
]div
[div class=p 
	"I hope you enjoy!
	$LF
]div
[hr 
]hr
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/CasualPokePlayer 
		"CasualPokePlayer
	]a
	": Claiming for judging.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/CasualPokePlayer 
		"CasualPokePlayer
	]a
	": The submission looks fine optimization wise. As for authenticity, the game files can be found in the original 
	[a href=http://redump.org/disc/56612/ rel=noopener external nofollow 
		"1995 release disc
	]a
	" or the 
	[a href=http://redump.org/disc/32787/ rel=noopener external nofollow 
		"1997 re-issue
	]a
	" (both have the same game files, with the same hashes as reported in this submission).
	$LF
]div
[div class=p 
	"Also, replacing the movie file with the correct platform (the release the game files were derived from was released on Windows).
	$LF
]div
[div class=p 
	"Accepting.
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/EZGames69 
		"EZGames69
	]a
	": Processing...
]div
