19
[div class=p 
	"Note: At the time of the submission of this run, it was just barely still April 1st in a few islands in the pacific.  Please enjoy what follows.
	$LF
]div
[h3 id=NethackFastestRealtime 
	" NetHack "Fastest Realtime"
	$LF
]h3
[ul 
	[li 
		" Really does complete NetHack, the right way
		$LF
	]li
	[li 
		" Does so faster than any human has accomplished to date
		$LF
	]li
	[li 
		" Partially breaks the submission form, the emulator, and several other things
		$LF
	]li
	[li 
		" Contains speed and entertainment trade-offs
		$LF
	]li
	[li 
		" Includes the efforts of many people spanning a timeframe of more than half a decade, including ais523, dwangoAC, Ilari, and recently ChrisS67
		$LF
	]li
	[li 
		" Contains known potential improvements, albeit ones that will potentially take time on the scale listed above to implement
		$LF
	]li
	[li 
		" Requires a *lot* of explaining
		$LF
	]li
]ul
[h3 id=HowToWatchThisRun 
	" How to watch this run
	$LF
]h3
[div class=p 
	"Because jpc-rr is far too slow and a video encode is far too fast, the best way to watch this run is to download Jettyplay from 
	[a href=http://nethack4.org/projects/jettyplay/ rel=noopener external nofollow 
		"http://nethack4.org/projects/jettyplay/
	]a
	" and play back the ttyrec file [dead link removed] - this allows you to go forward and backward and keep up with what's going on in the turn-by-turn description below.  Finally, here are two different video encodes:
	$LF
]div
[div class=p 
	"Thanks to the capabilities of Jettyplay, there is now a (mostly watchable, but slow at 4 fps) encode up:
	$LF
]div
[div class=p 
	"If speed is your thing, enjoy the full 60 fps compressed (i.e. inaccurately timed) version:
	$LF
]div
[div class=p 
	(youtube|v=VKOA37B7oZ4)
	$LF
]div
[h3 id=Comments 
	" Comments
	$LF
]h3
[div class=p 
	"First off, this specific submission is partly a prank on ais523 for April 1st, who did not know about this run being submitted.  I (dwangoAC) have granted him extra edit privileges in case he decides to nuke the submission off the face of the earth.
	$LF
]div
[div class=p 
	"To explain why I submitted this, take a look at 
	[a href=http://nethack4.org/pastebin/2015-turn-plan.txt rel=noopener external nofollow 
		"http://nethack4.org/pastebin/2015-turn-plan.txt
	]a
	" which is the original ascension plan that ais523 created in 2010 when I started helping him by creating the 
	[a href=https://gitorious.org/nethack-tas-tools/mainline rel=noopener external nofollow 
		"nethack-tas-tools
	]a
	" "emulator" project (which wraps KVM virtual machines with rerecording constructs such as savestates and scripting which produces files that Ilari is capable of converting for jpc-rr, but I digress).  Within the last week, ais523 created 
	[a href=http://nethack4.org/pastebin/new-2003-turn-plan.txt rel=noopener external nofollow 
		"http://nethack4.org/pastebin/new-2003-turn-plan.txt
	]a
	" (from 
	(__wikiLink|href=/Forum/Posts/431348|implicitdisplaytext=Forum/Posts/431348)
	") based on recently discovered changes which completely uproot many of the things we have been working on for the last 5+ years.
	$LF
	"I had been mourning the loss of some of the work we had done that I knew we would have to delete when I had an epiphany - speed TAS NetHack and finish the run by April 1st, with a goal of creating a run that beats vanilla NetHack 3.4.3 in the lowest turncount and in the shortest time of any existing records.  This turned out to be harder than anticipated, but the end result is quite impressive given the constraints we placed on ourselves.  The fastest human records are around an hour long or more as noted at 
	[a href=http://www.codehappy.net/nethacktheatre/fastgames.htm rel=noopener external nofollow 
		"http://www.codehappy.net/nethacktheatre/fastgames.htm
	]a
	" and this run will likely be less than 10 minutes.  (I say likely because the timing in the submitted file is incorrect.)  The focus was on conserving keystrokes, so rather than investing in heavy luck manipulation the focus was on the fastest realtime by not pressing more buttons than needed.  Despite this, this run ascends in only 2,071 turns, faster than the current unassisted turncount of 2,130 as described at 
	[a href=https://nethackwiki.com/wiki/Speed_ascension rel=noopener external nofollow 
		"https://nethackwiki.com/wiki/Speed_ascension
	]a
	" and elsewhere.
	$LF
]div
[h3 id=StageByStageComments 
	" Stage by stage comments
	$LF
]h3
[div class=p 
	"This is long enough it may break the submission system.  This text is taken from the extremely detailed turn-by-turn document written by ais523 and dwangoAC which can be found at: 
	[a href=http://nethack4.org/pastebin/turnbyturn.txt rel=noopener external nofollow 
		"http://nethack4.org/pastebin/turnbyturn.txt
	]a
	$LF
]div
[div class=p 
	"Before the first turn there is some setup we need to do to get an
	$LF
	"optimal start.  One of the most important variables for the run is the
	$LF
	"date and time that the computer's clock is set to upon loading
	$LF
	"NetHack; this is what controls the initial RNG seed, and several
	$LF
	"elements essential to getting the fastest possible time are decided
	$LF
	"right at the start of the game before we have any chance to manipulate
	$LF
	"the RNG.  NetHack is also pretty unusual in that the date and time are
	$LF
	"what determine the difficulty level, with some days being luckier or
	$LF
	"unluckier than others.
	$LF
]div
[div class=p 
	"In order to allow us to "play on the hardest difficulty", Ilari
	$LF
	"searched for maximally unlucky days; it turns out that there have been
	$LF
	"none at all since the release of NetHack 3.4.3, so we picked the first
	$LF
	"one that will occur, Friday 13 November 2015.  In addition to being a
	$LF
	"Friday 13, there will also be a new moon on that day, making the game
	$LF
	"even harder (although Friday 13 has a much stronger effect than the
	$LF
	"phase of the moon).  (Amusingly, this dependence on the moon phase can
	$LF
	"cause desyncs on occasion; this is likely the only TAS that will have
	$LF
	"been desynced by running a script on a full moon by mistake.)  The
	$LF
	"time chosen (by dwangoAC, who wrote the luck manipulation bots, and
	$LF
	"who did most of the early luck manipulation while ais523 got up to
	$LF
	"speed with how to use them) was 00:13:02; playing just after midnight
	$LF
	"leaves undead at their most dangerous, and the minutes and seconds are
	$LF
	"chosen for luck manipulation purposes.  This means that there's a hard
	$LF
	"limit of 46 minutes 58 seconds for the run, because at 1am, the game
	$LF
	"would become slightly less difficult as undead damage reverted to
	$LF
	"normal, so we would no longer be playing at highest difficulty.  The 
	$LF
	"seed value was 1447373582 which maps to Fri, 13 Nov 2015 00:13:02 GMT.
	$LF
]div
[div class=p 
	"We were looking for several things in our luck manipulation. The most
	$LF
	"obvious is the depth of the dungeon; the length of the game is
	$LF
	"slightly randomized, and leaving it as short as possible is obviously
	$LF
	"helpful.  The seed we chose leaves it at the minimum possible depth of
	$LF
	"45 levels.  We also controlled the location of some of the special
	$LF
	"levels to increase the gain from sequence breaks; in particular, the
	$LF
	"portal to the Wizard of Yendor's Tower (with that seed, on level 43)
	$LF
	"was manipulated to be as far as possible from the tower itself (which
	$LF
	"occupies levels 36 to 38 inclusive with that seed).  In addition to
	$LF
	"the dungeon layout, we also manipulated the materials of which some
	$LF
	"rings were made.  Eating rings is the only way to get certain
	$LF
	"properties intrinsically, saving on ring slots, but not all rings are
	$LF
	"edible in any given game, and it's random which are which.  We needed
	$LF
	"to ensure that, at least, polymorph and polymorph control were edible.
	$LF
]div
[div class=p 
	"Character selection was also important (in fact, we originally messed
	$LF
	"up and had to hex in a different character; this required redoing the
	$LF
	"first level of the run, but luckily it synched after that, which says
	$LF
	"something about NetHack's incredible sync-stability).  We chose to
	$LF
	"play as a Wizard due to the possibility of eventually learning to cast
	$LF
	"a four-square jumping spell, something which no other class has the
	$LF
	"magical ability to manage.  Playing neutral is required to be able to
	$LF
	"use certain artifacts, most importantly the Eyes of the Overworld,
	$LF
	"which enable even blind monsters to see.  This is vital because the
	$LF
	"fastest polymorph form in the game is blind, and yet vision is
	$LF
	"required at several points which means the Eyes are needed to avoid
	$LF
	"having to change into a suboptimal form on occasion.  Race and gender
	$LF
	"are less important; we play as a gnome for entertainment purposes
	$LF
	"(they can see warm-blooded monsters in the dark, thus giving a better
	$LF
	"clue as to what's going on towards the start of the run), and although
	$LF
	"we specified an explicit gender (male) for luck manipulation purposes,
	$LF
	"being female would have worked just as well, as gender is almost
	$LF
	"cosmetic in NetHack.  (Not to mention that we end up changing gender
	$LF
	"frequently during the run itself for various reasons.)
	$LF
]div
[div class=p 
	"Our starting inventory wasn't massively important as we can always get
	$LF
	"more items later, but we end up using much of it anyway.  For
	$LF
	"reference, it contains a quarterstaff and cloak of magic resistance
	$LF
	"(as always for a wizard), scrolls of gold detection, teleportation,
	$LF
	"and light, spellbooks of force bolt and scare monster, potions of
	$LF
	"enlightenment, object detection, and extra healing, rings of free
	$LF
	"action and teleportation, and a wand of striking.  The most important
	$LF
	"for our purposes are the scroll of teleportation and potion of object
	$LF
	"detection; the scroll is used for a sequence break (one which was
	$LF
	"placed there deliberately by the game's developers, but nonetheless
	$LF
	"not the normal course of things), and although we never actually drink
	$LF
	"the potion, it was invaluable in luck manipulation early on (when
	$LF
	"manipulating for particular items, we could see if we succeeded by
	$LF
	"drinking the potion, then loadstating to revert the turn it spent;
	$LF
	"this was considerably easier than memory watching would have been).
	$LF
]div
[div class=p 
	"We also change some options at the start of the game.  These are
	$LF
	"chosen for four main reasons.  First, some options are required for
	$LF
	"the fastest speed through the game, most notably the autopickup
	$LF
	"options (autopickup and pickup_types), which tell our character what
	$LF
	"they should and shouldn't pick up as they move (saving turns picking
	$LF
	"up and/or dropping items manually).  Incidentally, we had to adjust
	$LF
	"these options several times after the run was underway to hex in
	$LF
	"different things to pick up, such as statues.  Next, we turn off the
	$LF
	"mail option in order to avoid desyncs (it causes the RNG to depend to
	$LF
	"a small extent on the number of keystrokes typed; not by enough for it
	$LF
	"to be at all efficient for luck manipulation, but by enough to make it
	$LF
	"very hard to hex in corrections for past mistakes with the option on).
	$LF
	"Some options were also changed (or kept at their original values) to
	$LF
	"streamline the controls to allow us to reduce the amount of input
	$LF
	"required: confirm prayconfirm cmdassist autodig number_pad.  (This is
	$LF
	"a large difference between a TAS and an unassisted run already; no
	$LF
	"sane player turns off confirm in an unassisted run, because it's so
	$LF
	"useful for catching typos.)  Finally, some option values were chosen
	$LF
	"in order to make the game look visually better and to remove
	$LF
	"time-consuming animations: IBMgraphics color sparkle timed_delay
	$LF
	"runmode.  (Whether IBMgraphics or DECgraphics looks better is a
	$LF
	"typical flamewar subject among NetHack fans, but luckily DECgraphics
	$LF
	"doesn't work on the DOS version, making the choice obvious.)  Options
	$LF
	"we didn't care about were just left at their defaults.  Most options
	$LF
	"can be changed without affecting luck, meaning that DECgraphics can be
	$LF
	"optionally used as part of a ttyrec of the Linux execution of the run.
	$LF
]div
[h4 id=Turns113 
	" Turns 1-13
	$LF
]h4
[div class=p 
	"At the very start of the game, there's not much we can do to speed up
	$LF
	"our play as we have basically no resources (although some of the
	$LF
	"equipment in our starting inventory could be used here, we have better
	$LF
	"use for it later).  Thus, we demonstrate the most obvious use for TAS
	$LF
	"tools in a roguelike game by walking directly to the stairs to the
	$LF
	"next level via the shortest route.  The lichen (green F) touches us,
	$LF
	"but fails to grab hold of us, while our pet kitten roams the level
	$LF
	"picking up items.  (We leave the kitten, a white f, behind: it would
	$LF
	"only slow us down, and it would take far too much manipulation to keep
	$LF
	"it alive with the strategy we're using.  The kitten does survive the
	$LF
	"TAS, though, making it one of the few starting pets in NetHack to
	$LF
	"escape with its life.)  We ignore all the items in view which we don't
	$LF
	"care about, which as it happens is all of them.
	$LF
]div
[h4 id=Turns1416 
	" Turns 14-16
	$LF
]h4
[div class=p 
	"This is the first break from a typical NetHack strategy, as we decide
	$LF
	"to pray to our god for help; this takes 3 turns, taking us through to
	$LF
	"turn 17.  Because it's only turn 14 (waiting until turn 300, or 100 if
	$LF
	"we were actually in trouble, would be required in order for the prayer
	$LF
	"to have any chance of success), and because it's Friday 13 (which
	$LF
	"prevents prayer until at least one point of good luck is gained to
	$LF
	"cancel out its bad luck, arguably the most dangerous effect from
	$LF
	"difficulty in NetHack), the prayer fails quite drastically, with our
	$LF
	"god Thoth getting justifiably angry with us.  His response is to send
	$LF
	"a curse at our inventory, although due to the first real luck
	$LF
	"manipulation of the game, it only affects the scroll of teleport.
	$LF
	"Cursed scrolls of teleport teleport vertically rather than
	$LF
	"horizontally, making it possible to skip levels and thus go through
	$LF
	"the game in an unusual sequence; however, with our current equipment,
	$LF
	"it would skip only about one or two levels, so it isn't worth using
	$LF
	"yet.
	$LF
]div
[h4 id=Turn17 
	" Turn 17
	$LF
]h4
[div class=p 
	"This is the first really major luck manipulation of the game.  The
	$LF
	"largest source of useful items in the game is upon level generation,
	$LF
	"especially on levels high in the dungeon which often contain shops.
	$LF
	"Most pressing for us is to generate a particular set of rings, to
	$LF
	"enable the polymorph-self strategy used in all the fastest gametime
	$LF
	"speedruns (whether tool-assisted or not), so we manipulate a huge
	$LF
	"ring shop that contains all the rings we need (together with a large
	$LF
	"number that we don't, as it happens) as we go downstairs.  Luck
	$LF
	"manipulation is typically done by walking into a wall, incidentally,
	$LF
	"which we can do up to 750 times a second, and advances the RNG with,
	$LF
	"generally, no other effects (the random number is generated for the
	$LF
	"purpose of eroding engravings on the current square, but typically
	$LF
	"there aren't any); we explicitly try to stay next to walls throughout
	$LF
	"the TAS for this reason.
	$LF
]div
[h4 id=Turn18 
	" Turn 18
	$LF
]h4
[div class=p 
	"We end up in our first real combat of the game as we go down the
	$LF
	"stairs; we're next to a newt (the yellow colon), and apparently the
	$LF
	"only exit to the room is to the east, beyond the newt, and apparently
	$LF
	"without enough space to run around it without taking a hit.  Although
	$LF
	"we could beat the newt easily, we have no need to, and so we
	$LF
	"demonstrate here how a TAS can avoid combat much more perfectly than
	$LF
	"an unassisted game can.  We start off by exploiting the fact that
	$LF
	"monsters cannot move on the turn they are generated (a consequence of
	$LF
	"the game's speed system) to move next to a wall (and in the direction
	$LF
	"we want to go anyway).
	$LF
]div
[h4 id=Turn19 
	" Turn 19
	$LF
]h4
[div class=p 
	"The newt is now able to move, but we're now next to a wall and so able
	$LF
	"to manipulate.  The door in the east wall actually goes in the wrong
	$LF
	"direction, but it turns out that there's a secret door in this room
	$LF
	"(something trivial to verify in a TAS; we routinely looked for secret
	$LF
	"doors by savestating, going into debug mode, then loadstating again).
	$LF
	"The guaranteed starting spell for a Wizard, "force bolt", destroys
	$LF
	"doors, so we use it to destroy the secret door to avoid having to
	$LF
	"first locate it and then open it, wasting time.  The newt attacks us,
	$LF
	"but just misses; an incredibly lucky result (if you try this in
	$LF
	"realtime, you'll find that a newt nearly always hits a starting
	$LF
	"wizard, although for a negligible amount of damage).
	$LF
]div
[h4 id=Turns2034 
	" Turns 20-34
	$LF
]h4
[div class=p 
	"Leaving the newt behind (as we can outrun it), we simply continue
	$LF
	"along the corridor via the shortest path.  Nothing particularly
	$LF
	"interesting here.
	$LF
]div
[h4 id=Turn35 
	" Turn 35
	$LF
]h4
[div class=p 
	"A grid bug blocks our path, so we show off the Wizard's melee combat
	$LF
	"ability by oneshotting it with our quarterstaff (which takes a small
	$LF
	"amount of luck manipulation, but not a lot; grid bugs are really weak,
	$LF
	"and a quarterstaff isn't ridiculously bad as weapons go).  This is
	$LF
	"actually the only time in the entire game where we simply hit an enemy
	$LF
	"with a stick to kill it, and only possible because we're still facing
	$LF
	"very early-game monsters.
	$LF
]div
[h4 id=Turns3659 
	" Turns 36-59
	$LF
]h4
[div class=p 
	"More simple and boring walking to the shop via the shortest path.
	$LF
	"This is still interesting due to how quickly it goes in realtime,
	$LF
	"though, managing some incredibly fast movement speeds due to the game
	$LF
	"accepting input several times a frame; also, this is one of your last
	$LF
	"real chances to see us walking around, as we'll have faster means of
	$LF
	"movement soon.
	$LF
]div
[h4 id=Turn60 
	" Turn 60
	$LF
]h4
[div class=p 
	"We couldn't just walk diagonally into the shop because you need to
	$LF
	"line up with a doorway that still has an open door in order to walk
	$LF
	"through it (another reason we destroyed the secret door altogether
	$LF
	"earlier, rather than just opening it and walking through).  So this
	$LF
	"turn is spent moving next to the doorway so we can walk through.
	$LF
]div
[h4 id=Turn61 
	" Turn 61
	$LF
]h4
[div class=p 
	"Finally, we've entered the shop; it's a shame it was generated this
	$LF
	"far from the stairs, but it was necessary to get the rings we needed
	$LF
	"in a reasonable amount of realtime (and no gametime is lost from our
	$LF
	"final time due to the turn 2000 barrier).  We're greeted by Juyn, who
	$LF
	"is apparently a jeweler, and who wants to sell us rings and gems.
	$LF
	"Shopkeepers are some of the most dangerous monsters in NetHack; to
	$LF
	"beat one this early unassisted would be basically impossible (it can
	$LF
	"be done via a combination of AI abuses and getting incredibly lucky,
	$LF
	"but even then requires a weapon capable of damaging the shopkeeper
	$LF
	"quickly, which we don't have).  Still, with no gold, we aren't exactly
	$LF
	"going to be able to afford anything here.
	$LF
]div
[h4 id=Turns6263 
	" Turns 62-63
	$LF
]h4
[div class=p 
	"Note that we're toggling autopickup as we walk about the shop.  We
	$LF
	"know exactly which rings here are valuable to us, and which are
	$LF
	"worthless; the @ command that changes autopickup settings is used to
	$LF
	"instruct our character in advance of stepping onto a square whether he
	$LF
	"should pick up the item on that square or not.  Thus, we save turns
	$LF
	"in the shop that would otherwise be needed to look at the items
	$LF
	"available and pick up the ones we wanted.
	$LF
]div
[h4 id=Turns6466 
	" Turns 64-66
	$LF
]h4
[div class=p 
	"Time to go shopping!  Although we can't afford any of the rings in
	$LF
	"this shop (being completely broke), the shopkeeper will at least let
	$LF
	"us try them on.  We pick up a silver, sapphire, and shiny ring, each
	$LF
	"of which is incredibly expensive for an early-game character.  The
	$LF
	"silver ring is a ring of polymorph, the sapphire ring a ring of
	$LF
	"teleport control, and the shiny ring a ring of polymorph control.
	$LF
]div
[h4 id=Turn67 
	" Turn 67
	$LF
]h4
[div class=p 
	"We put on the ring of teleport control.  This lets us choose the
	$LF
	"destination of random teleports; although in a TAS you would expect us
	$LF
	"to be able to manipulate the destinations anyway, and we can to some
	$LF
	"extent, there are a large number of possibilities for a typical
	$LF
	"vertical teleport that have no chance of happening unless controlled,
	$LF
	"so the teleport control is absolutely vital for our strategy to work
	$LF
	"(as well as having the pleasant side effect of making luck
	$LF
	"manipulation much simpler).
	$LF
]div
[h4 id=Turn68 
	" Turn 68
	$LF
]h4
[div class=p 
	"OK, so this is where we leave the usual sequence of the game behind
	$LF
	"forever.  It's intentional that you can use a cursed scroll of
	$LF
	"teleport to skip levels (although because you have to do them anyway
	$LF
	"right at the end of the game during the escape sequence, most players
	$LF
	"prefer to clear them out in advance), but our destination is level 26,
	$LF
	"far too deep for a typical level 1 character with almost no useful
	$LF
	"equipment to survive.  This is actually the deepest it's possible to
	$LF
	"get with a single scroll from level 2, but we're actually aiming for
	$LF
	"dungeon level 25, the Castle, with its wand of wishing. The Castle is
	$LF
	"considered something of a threshold in a typical non-speedrun game, in
	$LF
	"that if you can reach the Castle, the wishes you will be granted there
	$LF
	"are normally enough to win the game.  The reason we go via dungeon
	$LF
	"level 26 is that we want to raid the Castle from below, to allow us to
	$LF
	"escape it more easily after grabbing the wand; so instead of going
	$LF
	"there directly, we go to the level below so we can approach it from
	$LF
	"behind.
	$LF
]div
[div class=p 
	"There's a bunch of manipulation going on here, incidentally; although
	$LF
	"we're going to leave level 26 almost immediately, it's still important
	$LF
	"to have it arranged as we want it for later on, with levels being
	$LF
	"generated the first time you visit them.  Thus, as well as
	$LF
	"manipulating a landing near the stairs, we also manipulate a
	$LF
	"favourable level layout, even though it won't become relevant until
	$LF
	"later.
	$LF
]div
[div class=p 
	"Our dramatic exit from the shop, of course, gets the shopkeeper angry
	$LF
	"at us, and we have a nice little bunch of messages explaining what's
	$LF
	"going on.  Our theft of 1200 zorkmids of merchandise summons the
	$LF
	"police, the Keystone Kops, to chase us down; but fortunately, they're
	$LF
	"all stuck up on dungeon level 2 looking for a player who's since
	$LF
	"sequence-broken all the way to the Valley of the Dead.  Who knows,
	$LF
	"maybe we'll turn up later and see how they're getting on looking for
	$LF
	"us.
	$LF
]div
[h4 id=Turns6970 
	" Turns 69-70
	$LF
]h4
[div class=p 
	"We can hardly see any of the Valley as we arrive; we just get an
	$LF
	"ominous message about the awful smells and sounds of this place.
	$LF
	"Don't worry, you'll get to see more of it later; in fact, we come back
	$LF
	"here several times in the TAS for various reasons.  What is notable,
	$LF
	"though, is that we landed right next to the stairs (and better, right
	$LF
	"next to a wall); after a swift bit of luck manipulation, we walk to
	$LF
	"the stairs, and up them, to the Castle.
	$LF
]div
[h4 id=Turns7173 
	" Turns 71-73
	$LF
]h4
[div class=p 
	"The Castle looks pretty uninspiring at first glance; we're actually in
	$LF
	"a small maze of corridors behind it.  (The stairs up from the Valley
	$LF
	"are one-way; they can be used upwards, but not downwards, so we're
	$LF
	"currently trapped in this maze.)  Out of the three rings we stole, the
	$LF
	"ring of teleport control's been used already to sequence-break all the
	$LF
	"way down here, but we stole another two as well; it's time to put them
	$LF
	"to use. We spend one turn removing the original ring to free up ring
	$LF
	"fingers, then put on the rings of polymorph control and polymorph (in
	$LF
	"that order).  The ring of polymorph is the #1 most important item for
	$LF
	"a TAS of NetHack, for several reasons.  What it does is to every now
	$LF
	"and then (at a 1% chance per turn) polymorph the player into a
	$LF
	"monster; polymorph control makes it possible to choose which monster
	$LF
]div
[pre 
	"to polymorph into (rather than spend several minutes or even hours of
	$LF
]pre
[div class=p 
	"realtime luck-manipulating getting the right one by chance, especially
	$LF
	"on top of the 1% chance that a polymorph happens at all).  Obviously,
	$LF
	"quite a bit of manipulation was needed to make the ring trigger
	$LF
	"immediately.
	$LF
]div
[div class=p 
	"The ability to become a monster is hugely useful for several different
	$LF
	"purposes; pretty much anything you might want to do, some monster will
	$LF
	"be good at it.  Thus, the ring of polymorph effectively substitutes
	$LF
	"for hundreds of different other items.  Better still, there are some
	$LF
	"monster forms that have abilities that can't be replicated any other
	$LF
	"way.  The other massive reason to use a polymorph-based strategy is
	$LF
	"that the stats of a monster form are effectively fixed; this makes
	$LF
	"them weaker than a typically overpowered player late-game (although
	$LF
	"still strong enough to win even unassisted), but much stronger earlier
	$LF
	"on, and the fact that we're still only experience level 1 is thus
	$LF
	"strongly mitigated; this is pretty much the only reason we can survive
	$LF
	"this deep in the game.  This first form we use, the xorn, is one that
	$LF
	"we will return to several times during the TAS (although TASing in
	$LF
	"xorn form is really annoying, to the point that an effective
	$LF
	"collective groan went up whenever we had to use it again).  Its major
	$LF
	"ability is that it can walk through most walls as if they aren't
	$LF
	"there, being a monster who lives its entire life swimming through
	$LF
	"rock.  Over the next few turns, we're going to abuse this property to
	$LF
	"sequence-break the Castle quite badly.
	$LF
]div
[div class=p 
	"Polymorphing into a xorn has one other immediate effect that may seem
	$LF
	"irrelevant or even negative, but becomes important later.  Xorns are
	$LF
	"too large to fit in a typical magical cloak, so our cloak of magic
	$LF
	"resistance, which previously protected us from not only magic, but
	$LF
	"also a wide range of monster special attacks, broke during the
	$LF
	"polymorph.  This was entirely deliberate; generally speaking, if we
	$LF
	"get hit by a special attack, it's because we want to be, and we'll be
	$LF
	"taking quite a lot of deliberate hits over the course of the TAS in
	$LF
	"order to abuse various side-effects of them; having near-perfect
	$LF
	"resistance from them would have required a huge amount of manipulation
	$LF
	"just to get monsters to hit us, which would have been ironic to say
	$LF
	"the least.
	$LF
]div
[div class=p 
	"(Incidentally, we also became female at this point; the gender change
	$LF
	"is permanent, and an occupational hazard of repeatedly polymorphing.
	$LF
	"Our gender changes back and forth repeatedly this TAS, and is
	$LF
	"irrelevant anyway, so we're going to stop mentioning it.)
	$LF
]div
[h4 id=Turn74 
	" Turn 74
	$LF
]h4
[div class=p 
	"With perfect luck, this turn wouldn't actually be needed, but we were
	$LF
	"faced with large amounts of "RNG jitter".  A quick explanation:
	$LF
	"NetHack's RNG works by always returning a fixed sequence of numbers
	$LF
	"(where it starts depends on the initial date and time, and the
	$LF
	"sequence is really stupidly long, around 31*2^31*(2^31-1) = 
	$LF
	"142962266504677031936 or approximately 2^66.95 elements), and all
	$LF
	"luck manipulation does is determine which element in the sequence
	$LF
	"is used to determine random events in the game.  Of course, different
	$LF
	"numbers have different meanings in different contexts, so it's not as
	$LF
	"if there are "good random numbers" or "bad random numbers" to use in
	$LF
	"different places; we just try to find a nearby location in the
	$LF
	"sequence that gives favourable luck.  (What walking into walls does is
	$LF
	"use numbers in the sequence for engraving erosion, which is a
	$LF
	"side-effect that is basically irrelevant to us.)
	$LF
]div
[div class=p 
	"The RNG jitter issue happens when the number of random numbers
	$LF
	"consumed by something is itself random, as happens quite a bit in
	$LF
	"NetHack, especially on very crowded levels like the Valley or Castle,
	$LF
	"and double especially when generating them for the first time.  As
	$LF
	"anyone who studies randomness knows, using an RNG to advance itself
	$LF
	"actually makes it less random (rather than more random as some
	$LF
	"programmers seem to think), because several positions in the sequence
	$LF
	"will probably end up jumping to the same position, effectively making
	$LF
	"the two seeds identical.  RNG jitter can get very bad sometimes, with
	$LF
	"20, 30, or even 50 different seeds generating essentially the same
	$LF
	"level; this severely dilutes the effectiveness of luck manipulation.
	$LF
	"As a result, we had to choose what we would manipulate on the Castle
	$LF
	"level and what we wouldn't, and settled for getting merely near to the
	$LF
	"best possible location in the maze, rather than at that location.  In
	$LF
	"this case, we'd want to be at the left edge of the small maze over the
	$LF
	"right, but settled for being a space away from that edge, in order to
	$LF
	"get more favourable randomness elsewhere in the level; thus, this turn
	$LF
	"is spent moving to where we'd like to have arrived.  As noted, the
	$LF
	"goal choice is to complete the game in the fewest number of in-game
	$LF
	"turns, but the 2,000 turn limit boundary means that we have the
	$LF
	"flexibility to (ab)use those extra turns like this every once in a
	$LF
	"while.  We strive to use every turn in the most entertaining and
	$LF
	"efficient way possible despite this freedom, however.
	$LF
]div
[h4 id=Turn76 
	" Turn 76
	$LF
]h4
[div class=p 
	"First off, one of you (the only one who actually read this far and is
	$LF
	"still paying attention) is probably asking "Hey, what happened to turn
	$LF
	"75?".  This demonstrates the first drawback of xorn form (hey, there
	$LF
	"had to be tradeoffs somewhere…); xorns are rather slow, and skip a
	$LF
	"turn every now and then for this reason.  (They aren't nearly as bad
	$LF
	"in this respect as some forms we use later, but unlike what we do
	$LF
	"later on in those forms, we aren't abusing the speed system yet,
	$LF
	"because it would take too much realtime and is anyway unnecessary
	$LF
	"here.)
	$LF
]div
[div class=p 
	"This turn also shows another nasty disadvantage of xorn form.
	$LF
	"Remember that we're doing nearly all our luck manipulation by walking
	$LF
	"into walls?  Well, xorns exist for the purpose of walking through
	$LF
	"walls, and so obviously walking into them would actually succeed,
	$LF
	"rather than fail and advance the RNG.  Thus, this next section doesn't
	$LF
	"get perfect luck like in some other places in the TAS, because
	$LF
	"manipulation via non-turn-consuming means would take a huge amount of
	$LF
	"realtime (we could exploit an artifact naming glitch at this point to
	$LF
	"advance the RNG, but it takes ages).  Some amount of manipulation is
	$LF
	"necessary, though, and it's easiest here to simply manipulate via the
	$LF
	"route we take; however, some aspects of the route cannot easily be
	$LF
	"changed, and what we do here is actually to wait a turn in order to
	$LF
	"get more favourable randomness and AI behaviour over the next several
	$LF
	"turns.  (In particular, we're manipulating a nearby shark to go in the
	$LF
	"wrong direction; we'd be bitten to death by the shark if we didn't
	$LF
	"wait now, but as it is, with its AI manipulated to go the wrong way we
	$LF
	"never even see the shark.)
	$LF
]div
[h4 id=Turn77 
	" Turn 77
	$LF
]h4
[div class=p 
	"A quick demonstration of a xorn's ability to walk through walls.  Who
	$LF
	"needs to solve mazes when you can just slip through the side wall and
	$LF
	"escape that way?
	$LF
]div
[h4 id=Turns788082 
	" Turns 78, 80-82
	$LF
]h4
[div class=p 
	"Here's another advantage of being in monster form.  Typically
	$LF
	"speaking, moving along the bottom of a moat causes a character to
	$LF
	"drown, but xorns, used as they are to living inside solid rock, don't
	$LF
	"actually need to breathe.  Thus, we can drop harmlessly to the bottom
	$LF
	"of the Castle moat. It takes us four actions (five turns due to being
	$LF
	"forced to skip turn 79) to move along the moat to the particular
	$LF
	"location we want to phase through the Castle wall.  (We're going round
	$LF
	"this way to avoid dangerous wildlife in the moat, which would
	$LF
	"otherwise join in while we tried to attack the soldiers inside the
	$LF
	"castle through the wall.)  There's also a side-effect to this that
	$LF
	"would ruin most games, but again we're using deliberately; our
	$LF
	"scrolls, spellbooks and potions end up being "blanked" by all the
	$LF
	"water damage, with the ink running off the scrolls and spellbooks and
	$LF
	"leaving them as blank paper, and the potions likewise diluting into
	$LF
	"pure water.  Surprisingly, they're actually more useful this way;
	$LF
	"blank paper to write on tends to be at a premium during speedruns.
	$LF
]div
[h4 id=Turn84 
	" Turn 84
	$LF
]h4
[div class=p 
	"(Turn 83 was lost to xorn slowness, as is every fourth turn in xorn
	$LF
	"form.  We'll stop noting this from now on.)  This is an example of why
	$LF
	"being underwater can be a bad idea; we end up unable to move this turn
	$LF
	"due to turbulence in a moat (and unable to manipulate it away due to
	$LF
	"being a xorn).  (This may seem a little implausible, but
	$LF
	"water in NetHack tends to be incredibly dangerous, with hard-hitting
	$LF
	"sharks, eels that can instakill the character, and electric eels that
	$LF
	"can destroy rings and wands.  With that amount of dangerous wildlife
	$LF
	"around, a little turbulence doesn't really surprise me.)
	$LF
]div
[h4 id=Turn85 
	" Turn 85
	$LF
]h4
[div class=p 
	"We finally manage to clamber out of the water and through the wall of
	$LF
	"the castle, where we're faced with a couple of soldiers.  This is
	$LF
	"almost certainly the easiest direction to raid the Castle from; the
	$LF
	"rest of the castle is much, much worse.  The Yendorian Army seems to 
	$LF
	"be equal-opportunities, with a female soldier swinging her sword at us
	$LF
	"and missing (both the soldiers guarding this tower happen to be girls,
	$LF
	"for some reason); unfortunately, she doesn't have the sense to run.
	$LF
]div
[h4 id=Turns868889 
	" Turns 86, 88-89
	$LF
]h4
[div class=p 
	"The combat against the first of the two soldiers.  (The other one is
	$LF
	"in range, but not doing a whole lot.)  Notice what's happening to our
	$LF
	"HP bar; we sit there and take damage rather than trying to dodge around
	$LF
	"the soldier.  We're also a whole lot more effective in melee combat than
	$LF
	"we were in natural form (grid bugs notwithstanding); we start off with
	$LF
	"our quarterstaff in any given turn, but also get to attack with some
	$LF
	"of our other hands, and also bite, doing quite a lot more than the
	$LF
	"staff alone would.  The damage taken would have been hard to
	$LF
	"manipulate away, but anyway is, surprisingly, wanted.  While
	$LF
	"polymorphed, damage, rather than killing you, forces you out of
	$LF
	"monster form when you accumulate enough; this is by far the easiest
	$LF
	"way to stop being a xorn, as the 1% chance of spontaneously
	$LF
	"polymorphing into something else can be hard to manipulate.  We also
	$LF
	"get a level-up for killing an enemy that's massively more powerful
	$LF
	"than you'd typically expect to fight at experience level 1.
	$LF
]div
[h4 id=Turns9092 
	" Turns 90, 92
	$LF
]h4
[div class=p 
	"The combat against the other soldier.  This one went rather better;
	$LF
	"not because of the level-up, simply due to luck.  As we wanted, we
	$LF
	"ended up low on health, but not completely out of it; and got another
	$LF
	"level-up as a result.  Ironically, we'd be better off at a lower level
	$LF
	"here, but not by much, and it ends up not really mattering.
	$LF
]div
[h4 id=Turn93 
	" Turn 93
	$LF
]h4
[div class=p 
	"Here is the reason we killed the soldiers.  (At least the first one
	$LF
	"had to die due to standing on this square.)  The word "Elbereth" has
	$LF
	"quite some significance in NetHack, and we use it later on ourselves;
	$LF
	"when you see it in the game naturally, especially burnt into the
	$LF
	"ground, it's a big clue that there's an important item on the square
	$LF
	"(although it very occasionally turns up at random).  This is the chest
	$LF
	"that contains the Castle wand, that the soldiers were guarding; there
	$LF
	"are a huge number of other guards, too, but we sequence-broke past
	$LF
	"them all, making this one of the fastest ways to get the wand (it
	$LF
	"would normally take well over 100 turns to fight through the Castle
	$LF
	"itself, let alone the whole game up to that point.)  The other
	$LF
	""several objects" are the dead soldier's equipment.  Autopickup is off
	$LF
	"for this, because we don't care about the chest the wand is in, just
	$LF
	"the wand itself which is a platinum wand.
	$LF
]div
[h4 id=Turn94 
	" Turn 94
	$LF
]h4
[div class=p 
	"Just being able to open the chest and take the wand out is somewhat
	$LF
	"anti-climactic; also flukishly lucky, and well worth arriving a square
	$LF
	"further from the chest than we'd have wanted to.  Typically speaking,
	$LF
	"it'd be locked or trapped; quite possibly both.  (And it's not unheard
	$LF
	"of for the chest to contain a trap which destroys the wand…)
	$LF
]div
[h4 id=Turns9698100101 
	" Turns 96-98, 100-101
	$LF
]h4
[div class=p 
	"In order to avoid most of the rest of the guards here in the Castle,
	$LF
	"we take a shortcut through a gem storeroom on our way back out; there
	$LF
	"are guards outside the door to the storeroom (a secret door to its
	$LF
	"west), but none inside the room itself.  However, one of the guards in
	$LF
	"the Castle is itself a Xorn, which catches up with us on the way out
	$LF
	"by phasing through the walls itself and does the last few points of
	$LF
	"damage needed to force us back into gnomish form, while failing to
	$LF
	"hurt us any further.  (This was actually a pretty sensible strategy
	$LF
	"for the castle guards; xorns are almost impossible to chase due to
	$LF
	"their crazy movement properties, so it would make sense to set another
	$LF
	"xorn after them.)  We end up embedded in a wall as we unpolymorph, but
	$LF
	"can still move out of it; this is pretty useful as it gives us a wall
	$LF
	"to luck-manipulate with, even though we're going to exit the Castle on
	$LF
	"our next step.
	$LF
]div
[h4 id=Turn102 
	" Turn 102
	$LF
]h4
[div class=p 
	"Here's our exit to the Castle.  The storerooms have a bunch of
	$LF
	"trapdoors outside that lead to the Valley; why bother spending
	$LF
	"soldiers and ammunition on killing an enemy when you can just drop
	$LF
	"them directly to the gateway to  ?  A little luck-manipulation is
	$LF
	"used here to land in the right part of the Valley (comfortably near to
	$LF
	"a vampire, who we're going to use soon to trigger a glitch), although
	$LF
	"it's impossible to land too far away from the stairs, so our choice of
	$LF
	"destinations is limited.
	$LF
]div
[h4 id=Turn103 
	" Turn 103
	$LF
]h4
[div class=p 
	"Time to start using that wand of wishing we went through so much
	$LF
	"effort to get.  Generally speaking, when you're as unlucky as we are
	$LF
	"(starting on Friday 13 is bad enough, but annoying your god makes
	$LF
	"things much worse), wands of wishing tend to malfunction quite badly,
	$LF
	"and in fact a lot of luck manipulation is needed to make the wand work
	$LF
	"at all.  And our wish?  "4 dark".  Although not nearly as broken as
	$LF
	"Family Feud for NES's text parser, NetHack's wish text parser allows
	$LF
	"for some pretty weird input at times; in this case, we went for the
	$LF
	"minimalist option of a surprisingly short wish, and the game rewards
	$LF
	"us with something dark, in this case a set of dark potions.  These
	$LF
	"happen to be potions of full healing in this game, which will be used
	$LF
	"soon to set up a glitch; and not only did the game give us the wish in
	$LF
	"the first place (unlikely), it also gave us all four potions we
	$LF
	"requested (also unlikely), and blessed them for us (also unlikely).
	$LF
	"As you can imagine, this turn took quite a lot of manipulation.
	$LF
]div
[h4 id=Turns104106 
	" Turns 104-106
	$LF
]h4
[div class=p 
	"This is the start of the setup for an infinite max HP and max Pw
	$LF
	"glitch.  (Pw in NetHack is vaguely like MP in other games, and is
	$LF
	"spent to use magical effects like spells and monster special magical
	$LF
	"attacks, and regenerates over time.)  One of the prerequisites for the
	$LF
	"glitch to work is that our max HP and max Pw need to be considerably
	$LF
	"higher than average for our stats, class, and experience level; here,
	$LF
	"we use 3 of the 4 the blessed potions of full healing for an
	$LF
	"overhealing effect, where healing via potion if at max HP already
	$LF
	"increases your max HP slightly.  In the case of a blessed potion of
	$LF
	"full healing, the highest-possible quality of healing potion, the
	$LF
	"increase is 8 points, and takes us up to 48 max HP, twice the value we
	$LF
	"originally had, and noticeably above average for our stats.
	$LF
	"Meanwhile, the time we spend drinking the potions allows a vampire
	$LF
	"(red V) to catch up with us (and also a ghost, but ghosts in NetHack
	$LF
	"are very defensive, taking hardly any damage from attacks but doing
	$LF
	"hardly any either, and so it can be safely ignored).
	$LF
]div
[h4 id=Turns107108 
	" Turns 107-108
	$LF
]h4
[div class=p 
	"This is the start of the glitch proper, which relies on the fact that
	$LF
	"the formula for max HP and max Pw gain from gaining a level from stat
	$LF
	"randomisation due to failed polymorph is different from the formula
	$LF
	"for max HP and max Pw loss from level drain.  What happens is that the
	$LF
	"vampire's level-drain attack reduces our max HP and max Pw by a fixed
	$LF
	"amount, so we still have 39 of our max HP remaining even though we
	$LF
	"were just drained from level 3 to level 1, hugely above average for
	$LF
	"our stats at that level.  Our max Pw is not high enough to benefit
	$LF
	"from the glitch; but as the glitch involves deliberately taking
	$LF
	"damage, we first use the glitch to increase our max HP enough to be
	$LF
	"able to set up the glitch for Pw as well; basically, partially
	$LF
	"applying the glitch in order to be able to apply it completely.
	$LF
]div
[h4 id=Turns109110 
	" Turns 109-110
	$LF
]h4
[div class=p 
	"Here's the other half of the glitch.  We spend two turns running away
	$LF
	"from the vampire in order to get our polymorphitis from the ring
	$LF
	"(which we haven't taken off since we used it to become a xorn) to
	$LF
	"trigger (the RNG jitter here is sufficiently bad that doing it in just
	$LF
	"one turn would have required so much walking into walls that there'd
	$LF
	"be a long pause in realtime).  When asked what to polymorph into, we
	$LF
	"say "gnome"; because we're a gnome already anyway, our stats are
	$LF
	"randomized as a result, and due to luck manipulation, our level
	$LF
	"increases to 2, approximately doubling our max HP.  This interaction
	$LF
	"of losing a fixed amount of max HP, then gaining a proportion,
	$LF
	"exponentially quickly increases our max HP to amounts that we want.
	$LF
]div
[h4 id=Turn111 
	" Turn 111
	$LF
]h4
[div class=p 
	"We take another hit in order to get drained back down to level 1; we
	$LF
	"now have 68 max HP, as opposed to the 39 max HP we had last time we
	$LF
	"were at level 1.  Unfortunately, we only have 3 current HP left; this
	$LF
	"is a typical issue with glitches that require you to take damage to
	$LF
	"work.  Unlike in a regular game, though, in a TAS there's no urgent
	$LF
	"need to heal up instantly; as we only take hits when we want to, we're
	$LF
	"in no actual danger of dying.
	$LF
]div
[h4 id=Turns112116 
	" Turns 112-116
	$LF
]h4
[div class=p 
	"We continue to run away from the vampire to get polymorphitis to
	$LF
	"trigger, and end back up at experience level 2.  Our route through the
	$LF
	"level at the moment is actually quite complicated; it might look like
	$LF
	"we're just running around aimlessly until we get the glitch to
	$LF
	"trigger, but we're actually trying to manipulate the movement of other
	$LF
	"monsters in the level to not interfere with the glitch.  By far the
	$LF
	"biggest influence on enemy monster movement is your own movement,
	$LF
	"although a random factor is sometimes involved as well.
	$LF
]div
[h4 id=Turn117 
	" Turn 117
	$LF
]h4
[div class=p 
	"So as to be able to continue taking damage to do the glitch without
	$LF
	"death, we drink the remaining potion of full healing to get back up to
	$LF
	"full HP (plus 8 to max HP, as some of the 400 points of healing it
	$LF
	"provided were wasted, the trigger for the overhealing effect).  As
	$LF
	"we'd taken level drain in the past, the potion also restored one of
	$LF
	"our drained levels as a side-effect; this was slightly undesirable (in
	$LF
	"that it needs to be drained again to continue the glitch), but not a
	$LF
	"massive problem.  Note that due to the difficulty level, this glitch
	$LF
	"requires taking much more damage than we normally would; within an
	$LF
	"hour after midnight, damage from undead, including the vampire, is
	$LF
	"doubled.
	$LF
]div
[h4 id=Turn118 
	" Turn 118
	$LF
]h4
[div class=p 
	"Now that our HP is high enough that we're not in danger of death from
	$LF
	"taking damage to perform the glitch, we prepare to do the glitch
	$LF
	"properly, with both a max HP and max Pw boost.  Therefore, we need to
	$LF
	"increase our max Pw to substantially above average values, so we use
	$LF
	"the wand of wishing to wish for "4 gain energy potions" (a very mild
	$LF
	"parser abuse as the item is actually called "potions of gain energy";
	$LF
	"the "of" reversal can be used on all non-artifact items, and is
	$LF
	"intended for things like "speed boots" vs "boots of speed" where it
	$LF
	"may be hard for the player to remember which way round the item is).
	$LF
	"Not only does the wish work, and grant us all 4 potions we requested,
	$LF
	"but they even come out blessed; with our large amounts of negative
	$LF
	"luck, this is rather unlikely and takes substantial manipulation.
	$LF
	"Therefore, we unfortunately couldn't get the vampire to drain us on
	$LF
	"the same turn as we'd have wanted, but it isn't a major issue.
	$LF
]div
[h4 id=Turn119 
	" Turn 119
	$LF
]h4
[div class=p 
	"Here's where we use our other starting spell, "slow monster", to slow
	$LF
	"down the vampire.  (Vampires actually have a pretty good chance to
	$LF
	"resist it, but we manipulated it to affect this one.)  The vampire
	$LF
	"responds by draining us back to level 2.  Slowing the vampire like
	$LF
	"this allows us to run round it and back the way it came without
	$LF
	"getting blocked in by a huge number of monsters at once (the Valley is
	$LF
	"swarming with monsters, even though it might not have looked like it
	$LF
	"so far); most undead are rather slow, and with the (comparatively
	$LF
	"fast) vampire slowed to a comparable speed to a zombie, we can herd
	$LF
	"the undead and manipulate their AIs more easily.
	$LF
]div
[h4 id=Turns120121 
	" Turns 120-121
	$LF
]h4
[div class=p 
	"We start going round the vampire, back the way we came.  Turn 120
	$LF
	"moves round it; turn 121 stays in the same position so that the
	$LF
	"vampire can catch up with us and drain a level.  We're now back to
	$LF
	"level 1, but with 135 max HP this time.
	$LF
]div
[h4 id=Turns122125 
	" Turns 122-125
	$LF
]h4
[div class=p 
	"These turns are spent running round the pack of monsters that was
	$LF
	"chasing us; we avoid a kobold zombie (brown Z), and encounter a ghost
	$LF
	"(who will be used to manipulate the vampire's movement path, as two
	$LF
	"monsters can't occupy the same square).  Ghosts are rather hard to
	$LF
	"see, incidentally; the trick is that adjacent squares, which normally
	$LF
	"show . if nothing is there or a wall or monster symbol, are replaced
	$LF
	"by blank space if there's a ghost on the square.
	$LF
]div
[h4 id=Turns126127 
	" Turns 126-127
	$LF
]h4
[div class=p 
	"We drink the first two potions of gain energy, getting unusually high
	$LF
	"max Pw gain from each of them (towards the top of the range).  Note
	$LF
	"how the zombie catches up with us, but due to being very slow-moving,
	$LF
	"cannot hit us; as a result of the ghost and zombie blocking the way,
	$LF
	"the vampire is forced to go a bit of a longer way round.
	$LF
]div
[h4 id=Turns128130 
	" Turns 128-130
	$LF
]h4
[div class=p 
	"Here's the third potion of gain energy, preceded by running away in
	$LF
	"order to get the monsters to stay behind us rather than surrounding
	$LF
	"us.  There's a vampire bat nearby (out of sight), which also needs to
	$LF
	"be manipulated to not turn up (they deal decent damage, but move
	$LF
	"randomly, so unlike other monsters can be manipulated to go the wrong
	$LF
	"way very easily).  Because we aren't next to a wall when we drink the
	$LF
	"potion, we can't easily manipulate the Pw gain from it directly; the
	$LF
	"gain was actually manipulated in advance on turn 128 when we were.
	$LF
]div
[h4 id=Turns131132 
	" Turns 131-132
	$LF
]h4
[div class=p 
	"And here's the final potion of gain energy, again running away in
	$LF
	"order to keep the crowd of monsters behind us.  Our max Pw is now high
	$LF
	"enough that doing the polyself glitch will increase it as well as our
	$LF
	"max HP (previously, it was decreasing slightly).
	$LF
]div
[h4 id=Turn133 
	" Turn 133
	$LF
]h4
[div class=p 
	"After a lot of luck manipulation (to control the next few turns, as we
	$LF
	"won't be next to a wall for one of them), we step to the left, and
	$LF
	"autopickup a scroll labeled YUM YUM as we do so.  This is actually a
	$LF
	"scroll of charging, which we can use to refill our wand of wishing
	$LF
	"(such wands can be recharged only once, for 3 wishes (before charge) +
	$LF
	"3 wishes (after charge) + 1 wish ("wresting" a charge from an empty
	$LF
	"wand), a total of 7).  This was all the more surprising to us because
	$LF
	"we didn't actually manipulate the scroll to spawn, it was just there
	$LF
	"by chance.  Although in a TAS you can manipulate away bad luck or
	$LF
	"cause good luck, you aren't also manipulating away any good luck you'd
	$LF
	"have got naturally; on top of the luck you make yourself there are
	$LF
	"also nice bonuses like this to discover that save us from having to
	$LF
	"come up with another method to recharge the wand.
	$LF
]div
[h4 id=Turns134136 
	" Turns 134-136
	$LF
]h4
[div class=p 
	"Nothing particularly special here, just more uses of the polyself
	$LF
	"glitch.  We cut across the corridor and then move back towards the
	$LF
	"vampire in order to help keep the mob of enemies behind us rather than
	$LF
	"getting surrounded although there are new enemies turning up, a human
	$LF
	"zombie (white Z) and kobold mummy (brown M).  Along the way, we take
	$LF
	"another failed polyself and a level drain to almost double our max Hp
	$LF
	"and Pw again.  Our new max HP of 255 is a little above the average for
	$LF
	"a typical character upon completing the entire game.
	$LF
]div
[h4 id=Turns137140 
	" Turns 137-140
	$LF
]h4
[div class=p 
	"More repeats of the polyself glitch, this time moving along the south
	$LF
	"wall and manipulating an extra-large level gain from the polyself to
	$LF
	"level 3, rather than level 2, almost tripling our stats rather than
	$LF
	"almost doubling them.  (Due to the RNG jitter here, we weren't aiming
	$LF
	"for a doubling or tripling in particular, but just any boost that we
	$LF
	"could get reasonably quickly.)  Other results from a failed polyself
	$LF
	"include a stat randomization while staying at the same level (useless
	$LF
	"for performing the glitch), and a level and stat reduction (which, at
	$LF
	"level 1, is fatal, making this glitch a dangerous one to try
	$LF
	"unassisted although it can be done via the use of a huge number of
	$LF
	"amulets of life saving which are NetHack's equivalent of extra lives).
	$LF
]div
[h4 id=Turns141142 
	" Turns 141-142
	$LF
]h4
[div class=p 
	"We move diagonally back towards the crowd and take another level-drain
	$LF
	"from the vampire; our HP is now high enough that we can effectively
	$LF
	"ignore hits from everything else, as they don't do significant damage
	$LF
	"compared to the amount of HP we have, and care about the vampire only
	$LF
	"because of the level drain effect.  This strategy of moving
	$LF
	"horizontally away and then running diagonally back, incidentally,
	$LF
	"helps to avoid an even larger crowd chasing us because it leaves
	$LF
	"monsters less certain as to our position and also reduces the chance
	$LF
	"of guessing it correctly, although some enemies have infravision and
	$LF
	"are able to see our body heat through the darkness anyway and chase us
	$LF
	"regardless (just like we can see the vampire at range, because gnomes
	$LF
	"also have infravision).
	$LF
]div
[h4 id=Turn143 
	" Turn 143
	$LF
]h4
[div class=p 
	"Despite being almost surrounded, we can actually afford to just wait a
	$LF
	"turn here, and do so; this exploits the fact that undead are generally
	$LF
	"slow (vampires aren't, but we slowed it ourselves), and this turn we
	$LF
	"happen to get a free turn against all of them but the vampire, who
	$LF
	"courteously level-drains us down to 1, allowing us to perform the
	$LF
	"glitch again.  (The glitch works best at level 1 because the max HP
	$LF
	"and max Pw gain is approximately equal to the ratio between the old
	$LF
	"and new levels; so going from 1 to 2 would double the maximum, whereas
	$LF
	"going from, say, 10 to 11 would only increase it by around 10
	$LF
	"percent.)
	$LF
]div
[h4 id=Turns144146 
	" Turns 144-146
	$LF
]h4
[div class=p 
	"These turns demonstrate just how almost surrounded we were, ending up
	$LF
	"confined to the north edge of this wide corridor due to a whole row of
	$LF
	"monsters below us.  We nevertheless can move just about fast enough to
	$LF
	"slip past the west end of the row, because the ghost at the end of the
	$LF
	"row moves very slowly, and out into the middle of the corridor, where
	$LF
	"we failed-polyself to level 3 again (thanks to manipulation on earlier
	$LF
	"turns).  The vampire also manages to push through the crowd to end up
	$LF
	"only one space away from us.
	$LF
]div
[h4 id=Turns147153 
	" Turns 147-153
	$LF
]h4
[div class=p 
	"Again, we manipulate the vampire to level-drain us twice, this time
	$LF
	"over at the south end of the corridor, first moving back the way we
	$LF
	"came then forwards again, then cross back up to the north end and
	$LF
	"trigger a polyself.  This movement pattern causes some of the monsters
	$LF
	"chasing us to think we're going east and move in the wrong direction,
	$LF
	"or at least stay where they are, whilst allowing the vampire (who's
	$LF
	"slightly faster than most of the other monsters despite being slowed)
	$LF
	"to come towards us.
	$LF
]div
[h4 id=Turns154158 
	" Turns 154-158
	$LF
]h4
[div class=p 
	"Our final iteration of the polyself glitch, running back to be drained
	$LF
	"then away to polymorph, takes us up to 2222 current / 8763 max HP and
	$LF
	"2625 current / 3101 max Pw, values high enough to be pretty much
	$LF
	"impractical to reach without use of a glitch (whether the polyself
	$LF
	"glitch as used here, or the much slower pudding farming method which
	$LF
	"is used occasionally in unassisted games that aim to show off with
	$LF
	"high statistics rather than speed).  Because we no longer have a need
	$LF
	"to manipulate the vampire to stay ahead of the other monsters
	$LF
	"involved, we simply run away in a straight line in order to trigger
	$LF
	"polyself, to leave the crowd as far as possible behind us.  The blue !
	$LF
	"is a potion, but we ignore it because it's worthless to us.
	$LF
]div
[h4 id=Turn159 
	" Turn 159
	$LF
]h4
[div class=p 
	"We use the third of our wishes, emptying the wand of wishing.  Our
	$LF
	"wish here is for "5 blessed scrolls of teleportation".  NetHack
	$LF
	"players might have been wondering why we didn't just specify "blessed"
	$LF
	"in previous wishes rather than manipulating them to give blessed items
	$LF
	"at random; the reason is shown here, in that requesting blessed items
	$LF
	"has no chance to work when you're as unlucky as we are, instead
	$LF
	"causing the items to be automatically cursed.  Of course, cursed
	$LF
	"scrolls of teleportation are what we actually wanted, as they're our
	$LF
	"only real means of moving around the dungeon, with walking from stairs
	$LF
	"to stairs being far too slow.  Also of note is that wishing for a
	$LF
	"quantity of 5 is rarely attempted in normal runs due to the low
	$LF
	"success rate of 1 out of 6 although this ratio is trivial to overcome
	$LF
	"with luck manipulation abuse.
	$LF
]div
[h4 id=Turn160 
	" Turn 160
	$LF
]h4
[div class=p 
	"Before leaving the Valley, we recharge our wand of wishing using the
	$LF
	"scroll of charging we randomly picked up.  This one happens to be
	$LF
	"merely uncursed (NetHack's description of an item which isn't blessed,
	$LF
	"but isn't cursed either), rather than blessed like is normally used to
	$LF
	"recharge a wand of wishing, so a small amount of manipulation is
	$LF
	"required to ensure that it really does fully recharge the wand so
	$LF
	"we get the maximum possible number of wishes out of it.
	$LF
]div
[h4 id=Turns161162 
	" Turns 161-162
	$LF
]h4
[div class=p 
	"Several monsters in NetHack can follow the player when they change
	$LF
	"levels (imagine them sharing in your teleport by touching you just as
	$LF
	"it takes place, or something like that).  Of the monsters near us, the
	$LF
	"vampire can, but the vampire bat can't; so since we can outrun the
	$LF
	"slowed vampire, we simply do so, leaving us alone and ready to leave
	$LF
	"the Valley without being chased.  (Don't worry, Valley of the Dead
	$LF
	"fans, if indeed there are any reading this: we come back here several
	$LF
	"times later.)
	$LF
]div
[h4 id=Turn163 
	" Turn 163
	$LF
]h4
[div class=p 
	"As we're no longer wearing the ring of teleport control, when we read
	$LF
	"one of the cursed scrolls of teleportation we just wished for, we end
	$LF
	"up on a random level.  A huge amount of manipulation (several hours of
	$LF
	"work by a luck manipulation bot, together with trying out various
	$LF
	"possibilities it found by hand) went into this turn to make sure we
	$LF
	"landed somewhere useful; we land on dungeon level 16, a normal
	$LF
	"randomly-generated level (as opposed to a "special level" like the
	$LF
	"Castle or Valley which has its own generation rules).  This level will
	$LF
	"serve a bit like a home base for us; this particular level layout for
	$LF
	"level 16 was manipulated to contain useful terrain, useful items,
	$LF
	"useful monsters, and to be almost free of RNG jitter (it's almost
	$LF
	"empty of monsters, and what monsters are there mostly have non-jittery
	$LF
	"AIs).
	$LF
]div
[div class=p 
	"Where we landed on the level was incredibly lucky, though; we
	$LF
	"manipulated for the level itself, but not for a particular location on
	$LF
	"it.  As it happens, we landed right on top of a magic lamp, in a shop;
	$LF
	"such lamps contain djinn, and upon releasing them they have a chance
	$LF
	"to give you a wish.  Complicating things is the shopkeeper;
	$LF
	"shopkeepers are some of the most dangerous monsters in NetHack when
	$LF
	"they get angry, and will fight to the death to protect their shops
	$LF
	"from thieves.  They also charge for pretty much everything, so it's
	$LF
	"not surprising that they'd charge for releasing a djinni.  Autopickup
	$LF
	"was set before even arriving on the level so that we'd pick up the
	$LF
	"lamp upon arrival.
	$LF
]div
[h4 id=Turn164 
	" Turn 164
	$LF
]h4
[div class=p 
	"Right next to the magic lamp is another extremely useful item, a magic
	$LF
	"marker.  These things are almost better than multiple wishes, in that
	$LF
	"they can be used to write on blank spells or spellbooks in order to
	$LF
	"make them into magical scrolls or spellbooks, letting us equip
	$LF
	"ourselves quite easily; this one also happens to have a lot of ink
	$LF
	"remaining (although the game won't tell us that yet).  The shopkeeper
	$LF
	"attempts to charge us for the marker, although as always, shopkeepers
	$LF
	"allow you to examine merchandise before paying for it, something which
	$LF
	"can be exploited quite heavily in both a TAS and a regular game.
	$LF
]div
[h4 id=Turn165 
	" Turn 165
	$LF
]h4
[div class=p 
	"We rub the magic lamp in order to release the djinni (unwielding our
	$LF
	"quarterstaff as a side effect, because we need to hold the lamp in one
	$LF
	"hand to rub it with the other; we never use the quarterstaff again).
	$LF
	"The shopkeeper rather amusingly tries to charge us for using the lamp,
	$LF
	"and won't let us out of the shop until we pay for it.  The djinni
	$LF
	"offers us a wish in return for releasing him (presumably he doesn't
	$LF
	"like being trapped in a lamp and then charged for); we ask him for a
	$LF
	""very dull spellbook", a little in-joke, because we're going to end up
	$LF
	"using the spell from the resulting spellbook a lot in order to level
	$LF
	"up our divination skills.  (This is another parser abuse; you can
	$LF
	"write "very" in front of pretty much arbitrary items and the game
	$LF
	"won't complain.)  The djinni gives us a dull spellbook of detect
	$LF
	"monsters in return for his freedom, then vanishes, never to be seen
	$LF
	"again.  The weight of the spellbook burdens us (we have rather low
	$LF
	"Strength and Constitution), slowing down our actions slightly, but in
	$LF
	"a peaceful area like this it isn't a major problem.
	$LF
]div
[h4 id=Turns166169 
	" Turns 166-169
	$LF
]h4
[div class=p 
	"Reading spellbooks takes quite some time in-game; inside a shop, with
	$LF
	"the shopkeeper guarding the door (primarily to prevent you leaving,
	$LF
	"but it works just as well to prevent anything else entering), is a
	$LF
	"very safe place to do so in an unassisted run; in a TAS, you have a
	$LF
	"broader range of safe locations due to the ability to manipulate luck,
	$LF
	"but if you're in a shop already, why bother looking for anywhere else?
	$LF
	"Reading the book to learn the detect monsters spell takes four turns,
	$LF
	"relatively fast compared to most spells.  The learning of the spell is
	$LF
	"slowed marginally due to being burdened, but dropping items to avoid
	$LF
	"burden, then needing to pick them up afterwards, would waste more time
	$LF
	"than it saves.
	$LF
]div
[div class=p 
	"It's worth a quick explanation as to why we learnt a divination spell,
	$LF
	"something which would seem mostly useless in a TAS.  We actually don't
	$LF
	"need detect monsters to complete the game at all, nor to make things
	$LF
	"faster; however, later in the game, having a constant detect monsters
	$LF
	"effect up is more or less the only way that people watching the TAS
	$LF
	"would be able to follow what was going on.  Thus, this would be a
	$LF
	"speed-entertainment tradeoff in most cases.  However, the T:2000
	$LF
	"barrier means that we can actually spend the time it takes to practice
	$LF
	"divination casting enough to reach skilled divination (for a level 1
	$LF
	"spell like detect monsters, 80 casts), and not lose any time overall;
	$LF
	"and yet allow people watching to see exactly what happens later in
	$LF
	"the game.
	$LF
]div
[h4 id=Turn170 
	" Turn 170
	$LF
]h4
[div class=p 
	"Ugh, the dreaded xorn form, again.  Although a huge pain to TAS in,
	$LF
	"there are several reasons to use xorn form unrelated to its ability to
	$LF
	"walk through walls.  This turn demonstrates the first: the physical
	$LF
	"size and strength of a xorn means it can carry heavier items without
	$LF
	"being burdened, and although the gnome was struggling with a backpack
	$LF
	"of spellbooks, the xorn has no such issues.
	$LF
]div
[h4 id=Turn172 
	" Turn 172
	$LF
]h4
[div class=p 
	"(Xorn slowness made us skip turn 171, and will continue to make us
	$LF
	"skip every fourth turn while in xorn form.)  Here's another use of
	$LF
	"xorn form.  As a monster that swims through rock, it isn't surprising
	$LF
	"that a xorn would have an unusual diet; and as it happens, xorns are
	$LF
	"capable of eating metal.  The ring of polymorph on our finger happens
	$LF
	"to be cursed (not really a major issue, it just prevents removal of
	$LF
	"the ring); we eat it off our own finger (well, claw), and its effect
	$LF
	"is manipulated to spread throughout our body (a 1 in 3 chance),
	$LF
	"meaning we now have its polymorphitis effect permanently, freeing up
	$LF
	"the ring finger for other purposes.  Because the ring is cursed, the
	$LF
	"silver is rotten; this would typically have bad side-effects but
	$LF
	"we manipulated them away.
	$LF
]div
[h4 id=Turns173174 
	" Turns 173-174
	$LF
]h4
[div class=p 
	"We need luck manipulation for the next few turns but xorns walk
	$LF
	"straight through walls and thus cannot walk into them for luck
	$LF
	"manipulation purposes.  So what we do instead, here, is to change the
	$LF
	"order in which we do things; we want to practice detect monsters up to
	$LF
	"skilled, and so by casting detect monsters whenever we'd get
	$LF
	"unfavourable luck for whatever we actually want to do, we can wait
	$LF
	"until a turn on which we get favourable luck for the luck-requiring
	$LF
	"parts, and yet still get something accomplished in the meantime.
	$LF
]div
[div class=p 
	"The result of the spell itself also shows the paucity of monsters on
	$LF
	"this level; there are two hidden mimics (brown m) pretending to be
	$LF
	"items, which we don't need to worry about as they don't jitter the RNG
	$LF
	"while hidden; ourself, a xorn (brown X); the shopkeeper (white @); and
	$LF
	"a tengu (cyan i), a sort of minor demon, which becomes important
	$LF
	"later.
	$LF
]div
[h4 id=Turns176177 
	" Turns 176-177
	$LF
]h4
[div class=p 
	"We eat two more of our rings. First is the ring of polymorph control,
	$LF
	"which we've been using to keep the ring of polymorph in check all TAS
	$LF
	"already; second is the ring of teleportation that was in our starting
	$LF
	"inventory, and that so far we haven't used.  Teleportitis (granted by
	$LF
	"the ring of teleportation we just ate) plus teleport control (which we
	$LF
	"do not yet have) is a similar combo to polymorphitis plus polymorph
	$LF
	"control; every turn from now on, we have a 1 in 100 chance of
	$LF
	"polymorphing into a creature of our choice (as before), but also now a
	$LF
	"1 in 85 chance of teleporting onto a square of our choice.  This
	$LF
	"basically puts an end to any walking around dungeons that might
	$LF
	"happen, apart from the very many levels which ban horizontal teleports
	$LF
	"(most of the special levels), where teleportitis does nothing at all.
	$LF
	"Still, the ability to teleport horizontally will come in useful on
	$LF
	"occasion, such as on this level, an ordinary level without any
	$LF
	"teleport restrictions.
	$LF
]div
[h4 id=Turns178180182184186188 
	" Turns 178, 180-182, 184-186, 188
	$LF
]h4
[div class=p 
	"More casting of detect monsters for luck manipulation purposes.  The
	$LF
	"tengu has teleportitis itself, and demonstrates what effect it
	$LF
	"normally has in an unassisted game by bouncing around the level to
	$LF
	"some extent (compare its position on successive casts of the spell);
	$LF
	"teleportitis is considered incredibly annoying by most NetHack
	$LF
	"players, but in a TAS it can be manipulated away (or caused to happen)
	$LF
	"when necessary, meaning we don't have to act like the tengu
	$LF
	"demonstrates here.  The tengu finishes up by landing right in the
	$LF
	"shop, just next to us.
	$LF
]div
[h4 id=Turns189190 
	" Turns 189-190
	$LF
]h4
[div class=p 
	"One nice thing about being in xorn form is that it doesn't really
	$LF
	"matter what weapon you're wielding, as you have a mouth and lots of
	$LF
	"spare hands.  We demonstrate this here by bashing the tengu to death
	$LF
	"with our lamp in only two turns; of course, it isn't the lamp itself
	$LF
	"that's doing most of the damage, but our bite and remaining hands.
	$LF
	"(It was just faster to do it this way than to waste time unwielding
	$LF
	"the lamp, now an ordinary oil lamp because the djinni has left).  We
	$LF
	"also get a level up from the tengu, an enemy typically too difficult
	$LF
	"to fight at experience level 2; levels are welcome rather than
	$LF
	"unwelcome from now on, as we've already done the polyself glitch, and
	$LF
	"they improve our spell failure chances (which will be important later,
	$LF
	"as we need to get the chance of casting various hard-to-cast spells
	$LF
	"above 0%), and reaching at least level 14 is required to complete the
	$LF
	"game.
	$LF
]div
[h4 id=Turns192194196198200213 
	" Turns 192-194, 196-198, 200-213
	$LF
]h4
[div class=p 
	"We step onto the tengu corpse (instructing our character not to pick
	$LF
	"it up), and cast some more detect monsters for luck manipulation.
	$LF
	"Finally, we eat the corpse, and Yad the shopkeeper, being a complete
	$LF
	"moneygrubber like NetHack shopkeepers are, rather hilariously tries to
	$LF
	"charge us for its corpse (hey, it landed in the shop when we killed
	$LF
	"it…).  As tengu are rather large, it takes a lot of turns to finish
	$LF
	"eating the corpse (which aren't affected by xorn slowness).  One of
	$LF
	"the less likely results from eating a tengu corpse but the one
	$LF
	"everyone typically actually wants is teleport control, which we got
	$LF
	"here; if you're wondering why we didn't just eat the ring, it's that
	$LF
	"teleport control rings aren't made of metal with this game seed and
	$LF
	"thus xorns can't digest them (and nor can anything else, as it
	$LF
	"happens).  Finally, we move back to where we were, again for luck
	$LF
	"manipulation.
	$LF
]div
[h4 id=Turn214 
	" Turn 214
	$LF
]h4
[div class=p 
	"Unpolymorphing from xorn form is always a tricky issue, as we can't
	$LF
	"easily manipulate the 1% chance of polymorphitis triggering without a
	$LF
	"sufficiently solid wall to walk against.  In this case, we do
	$LF
	"something really quite dramatic.  Remember the wand of striking in our
	$LF
	"starting inventory?  These wands are quite hilarious (they attack by
	$LF
	"flying through the air and physically beating up whatever they target,
	$LF
	"a pity that the game doesn't animate that onscreen…), but exactly
	$LF
	"duplicate the "force bolt" spell that we already have, and so we have
	$LF
	"no real use for the wand.  However, a xorn is easily strong enough to
	$LF
	"snap the wand in two, causing all the magical energy in it to be
	$LF
	"released at once, and that's what we do here.  First, there's a small
	$LF
	"explosion which has several effects: it hits the shopkeeper, doing
	$LF
	"only slight damage (as he resists it); it hits a nearby small mimic
	$LF
	"pretending to be an item (worrying it into switching back into its
	$LF
	"natural form, ready for combat); and it hits us, doing minimal damage.
	$LF
	"The resulting pieces of the wand, however, fly into the surrounding
	$LF
	"region and start beating things up.  One piece hits Yad, again doing
	$LF
	"slight damage; another misses the mimic, and finally the wand is laid
	$LF
	"to rest.
	$LF
]div
[div class=p 
	"Obviously, the surrounding monsters are going to reply to this on
	$LF
	"their turn.  The shopkeeper uses a wand of magic missile against us,
	$LF
	"hitting us on both the main attack and the rebound; and the small
	$LF
	"mimic does enough damage to unpolymorph us.  (We actually manipulated
	$LF
	"the enemies into doing a lot of damage here; typically, they wouldn't
	$LF
	"do quite enough to unpolymorph us.)
	$LF
]div
[h4 id=Turn215 
	" Turn 215
	$LF
]h4
[div class=p 
	"We don't get to move this turn due to the speed penalty of being
	$LF
	"burdened, but the shopkeeper does.  Twice.  (We told you they were
	$LF
	"dangerous; that's one of the reasons why.)  He continues pelting us
	$LF
	"with the wand of magic missile, but the damage is pretty minimal
	$LF
	"compared to our insane number of hitpoints.
	$LF
]div
[h4 id=Turn216 
	" Turn 216
	$LF
]h4
[div class=p 
	"After a huge amount of luck manipulation, we drop our entire
	$LF
	"inventory, apart from the scrolls of teleport.  There are three main
	$LF
	"reasons to do this: first, it prevents us being burdened, letting us
	$LF
	"do this fight more efficiently (the least major reason); second, we
	$LF
	"want to transport one very heavy object soon, and need to free up
	$LF
	"inventory weight to do so; third, we're going to do two of the game's
	$LF
	"mandatory sidequests, one of which is pretty difficult, without any
	$LF
	"inventory but the scrolls because going around the game without
	$LF
	"inventory is generally considered suicidal; it's a case of picking a
	$LF
	"particular route for entertainment reasons.
	$LF
]div
[div class=p 
	"One other thing to note here; normally, we allow the game to display
	$LF
	"messages to show what's going on, but in this case we skipped them (by
	$LF
	"pressing escape) because it's just a lot of "You drop the item.  Yad
	$LF
	"seems uninterested."  (If you were a shopkeeper, wouldn't you be
	$LF
	"uninterested in buying items if someone had released a djinni you were
	$LF
	"trying to sell, and then tried to blow you up?)
	$LF
]div
[div class=p 
	"Once the dropping is over (and Yad shoots a couple of magic missile
	$LF
	"bolts at us), polymorphitis triggers (this is what all the luck
	$LF
	"manipulation at the start of the turn was for).  We choose to become a
	$LF
	"master mind flayer (purple h), who has one of the most powerful
	$LF
	"attacks in the game, as a demonstration of how a TAS can deal with a
	$LF
	"shopkeeper at pretty much any stage of the game.  (This tactic would
	$LF
	"have worked just as well up on dungeon level 2; it's just that we had
	$LF
	"no reason to kill the shopkeeper there.)
	$LF
]div
[h4 id=Turn217 
	" Turn 217
	$LF
]h4
[div class=p 
	"After a bit of manipulation to do above-average damage, we punch Yad,
	$LF
	"then attach our tentacles to his head and start eating his brain.  We
	$LF
	"hit every time (which is sort-of unlikely at -4 luck against a
	$LF
	"shopkeeper), and oneshot him (raising our experience to level 4 in the
	$LF
	"process).  As the shopkeeper is human, and always starts out peaceful,
	$LF
	"the game considers this murder, and reduces our luck further to -6 as
	$LF
	"a penalty, meaning we're now sufficiently unlucky that most sources of
	$LF
	"wishing have no chance of working at all.  (That -6 is -1 from Friday
	$LF
	"13, -2 from murder, and -3 from trying to pray too early back near the
	$LF
	"start of the game.)  
	$LF
]div
[h4 id=Turn218 
	" Turn 218
	$LF
]h4
[div class=p 
	"Our next aim is to make amends to our god for all our bad behaviour
	$LF
	"over the previous turns.  Angry gods are generally quite hard to
	$LF
	"please, demanding the sacrifice of a single very poweful monster to
	$LF
	"make amends (rather than several sacrifices of anything like they
	$LF
	"usually do, which is typically easier to come across).  Luckily, we
	$LF
	"happen to have a shopkeeper corpse handy; unluckily, they're very
	$LF
	"heavy.  So as we step onto the corpse, we spontaneously polymorph into
	$LF
	"a red dragon (red D), a form sufficiently strong to carry the corpse.
	$LF
	"(Dragons are some of the strongest monsters in the game, not only
	$LF
	"having the maximum possible natural Strength, but also being
	$LF
	"incredibly large physically.  As for why we picked red, it's because
	$LF
	"not only do they have the second most powerful breath but several of
	$LF
	"the monsters we're going to encounter soon are vulnerable to fire, the
	$LF
	"element with which red dragons are associated.)
	$LF
]div
[h4 id=Turn219 
	" Turn 219
	$LF
]h4
[div class=p 
	"We pick up the shopkeeper corpse, which is sufficiently heavy that
	$LF
	"even a dragon struggles with it slightly, becoming burdened.  (There
	$LF
	"are several other burden statuses as well as unburdened and burdened:
	$LF
	"stressed, strained, overtaxed, and overloaded.  Nearly all other
	$LF
	"polyforms would be doing much worse on that scale; for instance, the
	$LF
	"master mind flayer isn't strong enough to pick up the corpse at all.)
	$LF
	"The small mimic hits us, doing a tiny amount of damage, but we don't
	$LF
	"particularly care; what we manipulated this turn was for our
	$LF
	"newly-obtained teleportitis to trigger, letting us go to a square of
	$LF
	"our choice.  We pick a square well out of view, that "just happens" to
	$LF
	"have an altar to Thoth on it (of course, we knew it was there already,
	$LF
	"and had in fact manipulated for the level to create one back when it
	$LF
	"first generated).
	$LF
]div
[div class=p 
	"Although we're not aiming for a perfect realtime duration in this run
	$LF
	"preferring entertainment instead, that's no reason to waste time when
	$LF
	"we can help it, and thus a cursor movement trick is used at this point
	$LF
	"(and at every teleportitis prompt from now on).  Normally, to move the
	$LF
	"cursor to an altar, you can just press underscore to mean altar
	$LF
	"(they're drawn as underscores onscreen), but that obviously doesn't
	$LF
	"work if the character doesn't know the altar is there.  Instead, we
	$LF
	"exploit an interesting feature; we're playing using the number_pad
	$LF
	"controls where 12346789 are used to move around (and the main
	$LF
	"keyboard numbers work just as well for this as the actual numeric
	$LF
	"keypad; such a control scheme is really confusing, but we had to get
	$LF
	"used to it for making the TAS partly due to using keyboards without
	$LF
	"numeric keypads on them), but the game has a second control scheme
	$LF
	"that we aren't using where hjklyubn are used to move (which is more
	$LF
	"suited towards laptops and simialr systems).  A little-known feature
	$LF
	"of NetHack is that at direction prompts when using numpad controls
	$LF
	"you can use the letter-based controls to move 8 squares at a time,
	$LF
	"even though they normally do something entirely different when using
	$LF
	"numpad controls.  This lets us move the cursor to the altar square
	$LF
	"much more quickly than would typically be possible.
	$LF
]div
[h4 id=Turn220 
	" Turn 220
	$LF
]h4
[div class=p 
	"Time to go mollify Thoth.  We sacrifice the shopkeeper corpse on the
	$LF
	"altar and he forgives us for all our past misdeeds, resetting the
	$LF
	"god's mood to its default and setting our luck up to +0 (note that
	$LF
	"the Friday 13 penalty was wiped out along with the penalty for
	$LF
	"violating a neutral code of conduct; I'm not sure if this is a glitch
	$LF
	"or not, but it's definitely useful).  Thanks to a lot of manipulation
	$LF
	"this turn, teleportitis immediately triggers again and we choose to
	$LF
	"teleport into an apparently uninteresting room.  (We use the cursor
	$LF
	"movement trick we used last turn, and actually overshoot the room in
	$LF
	"order to reduce the number of keypresses needed altogether, and thus
	$LF
	"the amount of processing time and thus lag; it's faster for the
	$LF
	"distance we teleport to move beyond and then back than it would be to
	$LF
	"not overshoot.)
	$LF
]div
[h4 id=Turn221 
	" Turn 221
	$LF
]h4
[div class=p 
	"Here we demonstrate why we went to this room in particular; there's a
	$LF
	"level teleport trap here, and using it helps to save on cursed scrolls
	$LF
	"of teleportation.  Our actual intended destination is in Gehennom
	$LF
	"(also known as  ), in the deepest depths of the dungeon; however,
	$LF
	"we can't go past the Valley on the way down in just one level
	$LF
	"teleport.  (It works rather like the warp whistles in Super Mario Bros
	$LF
	"3; you can warp to the Valley from anywhere but in order to warp past
	$LF
	"it you need to be there already.)  We manipulate our arrival point
	$LF
	"within the Valley to be on the south path, but not so far along it
	$LF
	"that we take damage upon arrival.
	$LF
]div
[h4 id=Turns223224 
	" Turns 223-224
	$LF
]h4
[div class=p 
	"(Like xorns, dragons are slower than normal so we skipped turn 222 due
	$LF
	"to our slowness and continue skipping every fourth turn while we
	$LF
	"remain in dragon form.)  As we have to go via the Valley anyway, we
	$LF
	"may as well exploit it while we're here.  The next portion of the TAS
	$LF
	"is dedicated to gaining experience levels while en route to our next
	$LF
	"destination; we're going to start off by killing several of the undead
	$LF
	"here.  We start off next to a different vampire from the one we were
	$LF
	"exploiting for the polyself glitch earlier and demonstrate one of the
	$LF
	"abilities of a red dragon by breathing fire at it twice (while
	$LF
	"dodging the bounce of our own breath weapon against the wall, although
	$LF
	"it wouldn't do any damage to us even if it hit).  This takes us up to
	$LF
	"experience level 5.
	$LF
]div
[h4 id=Turns225227229 
	" Turns 225, 227-229
	$LF
]h4
[div class=p 
	"We continue along the south path in the Valley (which is actually a
	$LF
	"dead end as it happens but we're aiming for the large mass of
	$LF
	"monsters at the end of it in order to gain more levels).  We ignore a
	$LF
	"dwarf zombie along the route (red Z; it really isn't very threatening)
	$LF
	"and the corpses (variously-coloured % signs strewn around for flavour
	$LF
	"reasons), and breathe fire once into the darkness, and again at the
	$LF
	"vampire who comes into view, two-shotting it and gaining experience
	$LF
	"level 6.  This was one of the hardest luck manipulations in the TAS,
	$LF
	"and for relatively little gain at that; it's just that being
	$LF
	"suboptimal is frustrating.  (The vampire in question had 59 hitpoints,
	$LF
	"and will always regenerate 1 between attacks, thus 60 damage is needed
	$LF
	"to two-shot it.  The fire breath attack of a red dragon does damage
	$LF
	"equal to the total of six 6-sided dice to a vampire; and so on
	$LF
	"average, we need to roll at least 5 on each of those twelve dice.  A
	$LF
	"special tool was used for this, showing the results of die rolls into
	$LF
	"the future, scanning for runs with a high average by eye; because the
	$LF
	"RNG sequence is fixed and all that luck manipulation does is choose
	$LF
	"which location in the sequence is used for which random event, we
	$LF
	"could aim for those particular combinations of dice via repeated
	$LF
	"wallwalking once we knew where they'd be in the sequence.)
	$LF
]div
[h4 id=Turns231233235237239 
	" Turns 231-233, 235-237, 239
	$LF
]h4
[div class=p 
	"As the ghost nearby would take too long to kill, and the zombie is
	$LF
	"worthless, we just fly round them and onwards along the corridor.  We
	$LF
	"blast fire into the distance in order to wound a vampire bat that's
	$LF
	"blocking the way, then walk up to it, and bite it and claw it to
	$LF
	"finish it off.  (Like xorns, dragons get multiple melee attacks in a
	$LF
	"turn, although unlike xorns, none are with a weapon.)  The vampire bat
	$LF
	"takes us up to experience level 7; it might look like we're getting
	$LF
	"these levels really easily, but it's because we're fighting monsters
	$LF
	"massively powerful compared to our own level, and thus we get a huge
	$LF
	"amount of bonus experience.  (It isn't possible to gain more than one
	$LF
	"level per kill, by the way, which is why we're going up one level at a
	$LF
	"time.)
	$LF
]div
[h4 id=Turns240259SkippingEveryFourthTurn 
	" Turns 240-259 (skipping every fourth turn)
	$LF
]h4
[div class=p 
	"Nothing much happens within these turns; we just continue flying along
	$LF
	"the corridor.  The valley is a no-horizontal-teleport level, so we
	$LF
	"can't just teleport to where we're aiming, but rather have to fly
	$LF
	"there by hand.  Eventually, we end up next to a gray W and a wraith,
	$LF
	"which is the reason we came here in the first place; the area around
	$LF
	"us is swarming with the things, and eating a wraith corpse causes an
	$LF
	"instant level gain, being one of the easiest ways to gain levels when
	$LF
	"we're already at a high enough level that we can't easily gain levels
	$LF
	"from normal combat.
	$LF
]div
[div class=p 
	"Incidentally, here we encounter one of the very few visual differences
	$LF
	"between the unhacked, official NetHack game itself that the run plays,
	$LF
	"and the hacked version that syncs against it that was used to create
	$LF
	"the run.  In the hacked Linux version, wraiths are blue instead of
	$LF
	"gray.  (This was a side effect of using a different codepath to draw
	$LF
	"the screen, due to using a different operating system with different
	$LF
	"rules for console color code specification.)  Thus, people watching us
	$LF
	"make the TAS live will have seen a slightly different color scheme
	$LF
	"here from the run itself.
	$LF
]div
[h4 id=Turn260 
	" Turn 260
	$LF
]h4
[div class=p 
	"One of the big problems with trying to play in this "graveyard" area
	$LF
	"of the Valley is that there are a lot of monsters, some of which we
	$LF
	"care about (wraiths), some of which are weak, get in the way, and
	$LF
	"don't even give useful experience (most of the zombies and mummies),
	$LF
	"and some of which are hard to kill and interfere with our attempts to
	$LF
	"round up wraiths (ghosts, demons).  Thus, our first action upon
	$LF
	"arriving here is to fire a bolt of fire into the crowd, destroying two
	$LF
	"weak monsters and waking some other monsters in the region.  The
	$LF
	"adjacent wraith responds by touching us, but the touch does not do
	$LF
	"much (it can drain levels, but we manipulated it so it didn't.)
	$LF
]div
[h4 id=Turn261 
	" Turn 261
	$LF
]h4
[div class=p 
	"An eventful turn, this one.  We walk north into the graveyard area
	$LF
	"proper, and are instantly greeted with a warning.  Typically, you get
	$LF
	""Run away!  Run away!" upon entering a graveyard during the hour after
	$LF
	"midnight, the period in which undead do double damage, in order to
	$LF
	"remind you that you probably did something quite stupid; however,
	$LF
	"dragons don't run but fly, and so the game does a rather amusing
	$LF
	"substitution of verb.  Then, a nearby wraith decides to drink its
	$LF
	"cursed potion of invisibility; such potions do turn their drinker
	$LF
	"invisible, but also alert all their enemies to their current location,
	$LF
	"so we get to see where the wraith was when it drank the potion.  (This
	$LF
	"is not particularly useful in a TAS, as we know where it was anyway;
	$LF
	"as we don't have see invisible, this will actually be more confusing
	$LF
	"than useful, as although we knew its position when making the run it
	$LF
	"won't come up on the screen when replaying it.  We'll try to point out
	$LF
	"where it went when it's relevant.)  Then, we take a couple of weak
	$LF
	"attacks; then, teleportitis triggers (but does nothing as it's a
	$LF
	"no-teleport level), then, polymorphitis triggers, and we choose to
	$LF
	"become a quantum mechanic, a monster form we haven't used so far.
	$LF
]div
[div class=p 
	"Quantum mechanics (cyan Q) are a bit weird as they're relatively weak
	$LF
	"in most respects, and don't do much damage.  They're pretty much
	$LF
	"completely based on silly physics jokes; upon hitting things they make
	$LF
	"their position uncertain, upon being eaten they make their consumer's
	$LF
	"speed uncertain, and enemy quantum mechanics sometimes carry a box
	$LF
	"which contain a cat that might be either alive or dead (and, of
	$LF
	"course, the state of the cat isn't determined until you open the box).
	$LF
	"The on-hit effect is the reason we turned into quantum mechanic form
	$LF
	"here; several of the monsters around here would take too long to kill,
	$LF
	"but all that we care about is getting them out of the way, so we can
	$LF
	"use the uncertainty attack to send them to a different part of the
	$LF
	"level.
	$LF
]div
[h4 id=Turns263265 
	" Turns 263-265
	$LF
]h4
[div class=p 
	"Here's the uncertainty attack in action.  In order to start
	$LF
	"surrounding ourselves with wraiths, we send away a ghost, a vampire,
	$LF
	"and a human zombie (white Z) to other parts of the level.  We now have
	$LF
	"two wraiths adjacent rather than one.
	$LF
]div
[h4 id=Turn266 
	" Turn 266
	$LF
]h4
[div class=p 
	"We finish off our quantum mechanic usage by sending away the other
	$LF
	"human zombie (the order in which we attacked them was very relevant
	$LF
	"as we were manipulating the AI, via luck manipulation and via actions,
	$LF
	"to send wraiths near us and other monsters further away); and
	$LF
	"polymorph back into a master mind flayer in order to continue our
	$LF
	"combat against the surrounding enemies in a form better suited for it.
	$LF
	"Unfortunately, we also ended up getting level-drained in the process;
	$LF
	"due to all the RNG jitter around here, it was impossible to get
	$LF
	"perfect luck for this turn.  It's irrelevant anyway, though; if you
	$LF
	"are only drained one level, your next kill will immediately regain
	$LF
	"that level, as you're drained to 1 experience point below the amount
	$LF
	"needed to level up.  Thus, it ends up making no difference in the long
	$LF
	"run.
	$LF
]div
[h4 id=Turn267 
	" Turn 267
	$LF
]h4
[div class=p 
	"Ghosts might be incredibly defensive and hard to kill in NetHack, but
	$LF
	"it seems that they nonetheless have edible brains, so we oneshot this
	$LF
	"one via the good old brain consumption method.  (Mind flayers can see
	$LF
	"invisible, so the invisible wraith shows up onscreen.)  Manipulation
	$LF
	"was used here, and over the next several turns, to mostly avoid level
	$LF
	"drains from the wraiths in question, although avoiding damage
	$LF
	"altogether would have been nearly impossible.  Killing the ghost
	$LF
	"regains us level 7.
	$LF
]div
[h4 id=Turn268 
	" Turn 268
	$LF
]h4
[div class=p 
	"Killing wraiths in the Valley and getting them to leave corpses is not
	$LF
	"an easy task; not only are there a lot of enemies that need to be
	$LF
	"manipulated to not level-drain you in the process, but they only have
	$LF
	"a very small chance (around 6%) of actually leaving a corpse here
	$LF
	"(it's higher on most levels, but as it happens all the wraith-killing
	$LF
	"this run is done on levels with the lowest chance).  Nonetheless, we
	$LF
	"aren't surrounded yet, so we have time to kill the wraith,
	$LF
	"manipulating it to leave a corpse, and manage to avoid being
	$LF
	"level-drained in the process.
	$LF
]div
[h4 id=Turn269 
	" Turn 269
	$LF
]h4
[div class=p 
	"Although we're not going to actually eat the wraith corpse yet (we'll
	$LF
	"eat it somewhere quieter, although we have to eat it relatively soon
	$LF
	"to avoid it spoiling), we nonetheless need to pick it up so we can
	$LF
	"take it somewhere less crowded.  The version of autopickup used in the
	$LF
	"official version of NetHack only lets you distinguish between item
	$LF
	"classes, so at first it might seem impossible to autopickup the wraith
	$LF
	"corpse without also picking up the elf corpse that happens to be on
	$LF
	"the same square.  However, we use a trick with burden levels; you're
	$LF
	"warned if you try to pick up something too heavy for you to easily
	$LF
	"carry, and we exploit the fact that the warning happens between the
	$LF
	"pickup of the two corpses to cancel one pickup whilst allowing the
	$LF
	"other to occur, ending up with just the item we want.  At the same
	$LF
	"time, the AI manipulation finally reaches the conclusion we want, with
	$LF
	"five wraiths and no other monsters adjacent.
	$LF
]div
[h4 id=Turn270 
	" Turn 270
	$LF
]h4
[div class=p 
	"The next issue is how to get the wraiths out of here so we can kill
	$LF
	"and eat them in peace.  Although there are five wraiths visible, one
	$LF
	"is actually asleep; so we kick it in order to wake it up, so it's
	$LF
	"alert enough to chase it from level to level.  (This does only minimal
	$LF
	"damage to it.)  The combined damage of the wraiths, now all alert and
	$LF
	"trying to kill us, is enough to send us back to our natural form, but
	$LF
	"we manage to take no leveldrain even from five draining attacks.
	$LF
]div
[h4 id=Turn271 
	" Turn 271
	$LF
]h4
[div class=p 
	"This is one of the more disappointing turns in the TAS, due to our
	$LF
	"inability to get anything near what perfect luck would be.  One of the
	$LF
	"good things we can say about it is that we didn't take any level
	$LF
	"drain, and that we safely managed to transport all five wraiths to
	$LF
	"dungeon level 36 via a cursed scroll of teleportation (we can go below
	$LF
	"the Valley now, as our teleport started from it already).  The amount
	$LF
	"of RNG jitter here was enormous; only about eight or nine different
	$LF
	"versions of dungeon level 36 were generated in the first hundred
	$LF
	"seeds, and so in the end we settled for something good enough, if
	$LF
	"hardly optimal.
	$LF
]div
[div class=p 
	"Anyway, as to why we're here.  Although this level also only has
	$LF
	"around a 6% chance of wraiths leaving a corpse, it has a maze layout
	$LF
	"(as do most levels below the Valley), meaning that only a couple of
	$LF
	"wraiths can get at us at a time, and also that they have limited
	$LF
	"places to run (and if they run, monsters can't get between us and them
	$LF
	"as it's just corridor in the way).  In fact, multiple wraiths ended up
	$LF
	"on the other side of a wall in a more or less completely different
	$LF
	"part of the maze; this is good for avoiding attacks from them while we
	$LF
	"hunt them down to kill and eat them, but bad for actually finding
	$LF
	"them, and the reason I'm so disappointed is that one of the wraiths
	$LF
	"ends up too far away to reasonably hunt down, meaning that we only get
	$LF
	"to kill and eat four of them over the next few turns.
	$LF
]div
[h4 id=Turn272 
	" Turn 272
	$LF
]h4
[div class=p 
	"It's time for us to use Elbereth ourselves, to scare the wraiths into
	$LF
	"running away so that we can kill them one at a time.  Quickly
	$LF
	"scribbling it in the dust with our fingers, like we do here, has a 72%
	$LF
	"chance of working, and scares most sorts of adjacent enemies into
	$LF
	"running away and being incapable of attacking in melee.  (The history
	$LF
	"of Elbereth is an interesting one, incidentally; for years it was a
	$LF
	"cheat code, kept a closely guarded secret by NetHack developers, but
	$LF
	"word of it leaked out (as is inevitable with an open source game), and
	$LF
	"it became such an integral part of gameplay over the years that the
	$LF
	"developers relented and placed a note about it in the manual.
	$LF
	"Nowadays it's just another tool in the toolbox, if a rather clunky
	$LF
	"one, and many players feel it's rather overpowered; in an unassisted
	$LF
	"game, it's at its most broken when it's repeatedly spammed, but
	$LF
	"ironically, in a TAS its only real use is to manipulate monster AI,
	$LF
	"like we do here.)
	$LF
]div
[div class=p 
	"We also trigger polymorphitis this turn (this level is also
	$LF
	"no-teleport but we can polymorph just fine) and become a jabberwock
	$LF
	"(orange J), another new form.  Jabberwocks are just a pure combat
	$LF
	"form, with nothing much to distinguish them but a powerful melee
	$LF
	"attack; playing as a jabberwock here allows us to oneshot wraiths
	$LF
	"pretty much guaranteed allowing us to focus our efforts on making
	$LF
	"them leave corpses.
	$LF
]div
[h4 id=Turns273280 
	" Turns 273-280
	$LF
]h4
[div class=p 
	"We start off our wraith-hunting with the two nearby wraiths, killing
	$LF
	"each of them (going to experience level 8 after killing the first) and
	$LF
	"immediately autopickuping their corpses as we move onto their square.
	$LF
	"The third wraith manages to get a few squares away in the process but
	$LF
	"is almost as easy to hunt down and kill as the first two; we turn into
	$LF
	"a xorn as we step onto its corpse so that we can phase through the
	$LF
	"wall to chase the next wraith. This bit went as well as could be
	$LF
	"hoped; unfortunately, the time spent doing this allowed the other two
	$LF
	"wraiths to get away to some extent.
	$LF
]div
[h4 id=Turns281282 
	" Turns 281-282
	$LF
]h4
[div class=p 
	"Here's a nice example of randomly occurring luck (rather than
	$LF
	"manipulated luck) in TASes; we phase through the wall separating us
	$LF
	"from the fourth wraith, and immediately polymorph back into a
	$LF
	"jabberwock on the other side due to happening to hit that 1% chance at
	$LF
	"just the right moment saving us from worrying about how we were going
	$LF
	"to unpolymorph this time.
	$LF
]div
[div class=p 
	"The other interesting thing to note here is that unlike other times we
	$LF
	"became a xorn we didn't skip any turns (normally, the turns skipped
	$LF
	"in xorn form start with the second).  The reason for this is NetHack's
	$LF
	"version of subpixel carryover in the form of movement energy carryover;
	$LF
	"the game remembers what fraction of a turn you had remaining when you
	$LF
	"polymorph and applies its effect to whatever new form you choose.
	$LF
	"The last time we were in a slower-than-normal form it was the red
	$LF
	"dragon and it skipped turn 262, the last turn before turning into a
	$LF
	"normal-speed monster once more.  Thus, the skipped turn next time we
	$LF
	"become a slow monster comes later than it would normally.  This can be
	$LF
	"abused, but it's mostly only useful to abuse it on enemy monsters than
	$LF
	"on the player ourself because later on past T:2000, when we're going
	$LF
	"for as many actions per turn as possible, there's a much better abuse
	$LF
	"we can use.
	$LF
]div
[h4 id=Turns283285 
	" Turns 283-285
	$LF
]h4
[div class=p 
	"Here, we're hunting down the fourth wraith.  This one's invisible but
	$LF
	"we know where it is anyway.  In order to get the first hit on it we
	$LF
	"let it come to us on the final turn rather than us coming to it so
	$LF
	"after taking two steps towards it, we spend a turn practicing our
	$LF
	"monster detection in order to not waste the turn.
	$LF
]div
[div class=p 
	"This is a good time to talk about the level we're on, too.  Rather
	$LF
	"than just being an ordinary maze level this level also contains the
	$LF
	"Wizard of Yendor's Tower, a squarish space in the middle of the level
	$LF
	"surrounded by impenetrable walls.  This is the final level of a
	$LF
	"sidequest; the game lets you see the outside of the level early to
	$LF
	"taunt you but there's meant to be no way to enter the centre of the
	$LF
	"level to actually fight the Wizard of Yendor (that purple @ in the
	$LF
	"middle of the level, nicknamed "Rodney") without doing a lot more of
	$LF
	"the game and entering the tower via a magic portal much deeper in the
	$LF
	"dungeon.
	$LF
]div
[div class=p 
	"Another important feature to note of the monsters on this level is
	$LF
	"that although the fourth wraith is very near, the fifth wraith has
	$LF
	"mostly escaped, and we don't put in the turns and extra uses of xorn
	$LF
	"form to chase it now; it would just take too long for too little gain.
	$LF
	"Thus, we settle with getting enough wraith corpses to reach level 13
	$LF
	"for now; there's plenty of time before we need to become level 14,
	$LF
	"after all.  There are two other enemies around here that become
	$LF
	"relevant; the bright cyan D nearby is a silver dragon who we end up in
	$LF
	"combat with soon and the other purple @ (not in the centre), an
	$LF
	"Elvenking who chases us through the next several turns and almost
	$LF
	"ends up catching us.
	$LF
]div
[h4 id=Turn286 
	" Turn 286
	$LF
]h4
[div class=p 
	"Although it's pretty obvious that the invisible wraith moved next to
	$LF
	"us last turn the character doesn't know that, so merely stepping on
	$LF
	"its square wouldn't attack it.  Instead, we use the F command to
	$LF
	"attack a square regardless if there seems to be a monster there and
	$LF
	"oneshot the invisible wraith.  (The game says "it" rather than "the
	$LF
	"invisible wraith"; NetHack uses pronouns to refer to monsters you
	$LF
	"can't see to keep up the suspense about what they actually are.)
	$LF
]div
[h4 id=Turn287 
	" Turn 287
	$LF
]h4
[div class=p 
	"Manipulating the wraith to drop a corpse last turn also made it
	$LF
	"death-drop something else, a tin.  There's no possible autopickup
	$LF
	"abuse we can use in order to pick up the wraith corpse but not the tin
	$LF
	"(they both fall into the category of "comestibles" or edible items,
	$LF
	"and the wraith corpse has no weight so we can't use a carry capacity
	$LF
	"abuse), so we simply take the tin as well.  (Incidentally, the tin
	$LF
	"happens to contain elf meat, an excellent source of sleep resistance,
	$LF
	"but that's a resistance we don't really need at the moment.)
	$LF
]div
[h4 id=Turns288290 
	" Turns 288-290
	$LF
]h4
[div class=p 
	"Now that we've collected all the wraith corpses we're going to get we
	$LF
	"continue with the reason we picked this level in particular to lure
	$LF
	"the wraiths to: sequence-breaking the Wizard of Yendor sidequest (this
	$LF
	"has nothing to do with the wraiths but saves on level teleports to
	$LF
	"get from wherever we would have been to here).  Actually solving the
	$LF
	"maze would take far too long and be very boring (as even though we
	$LF
	"know the shortest path it's still quite a long one), so we do what
	$LF
	"we've been doing all TAS and turn into xorn form so as to be able to
	$LF
	"simply walk through the walls.  These turns are also spent manipulating
	$LF
	"the silver dragon's AI from out of sight to go easy on us when we walk
	$LF
	"past it.
	$LF
]div
[h4 id=Turn291 
	" Turn 291
	$LF
]h4
[div class=p 
	"Yep, that's a silver dragon going easy on us.  At least we survived
	$LF
	"the attack without being forced out of xorn form; this might look like
	$LF
	"one of the worse results we could have got, but it's actually one of
	$LF
	"the better ones.
	$LF
]div
[h4 id=Turns293309SkippingEveryFourthTurn 
	" Turns 293-309, skipping every fourth turn
	$LF
]h4
[div class=p 
	"These turns are simply spent phasing through the walls of the maze to
	$LF
	"reach the right position to do the Rodney sequence-break.  There are
	$LF
	"several positions from which the sequence break in question can be
	$LF
	"done; three of them are actually in the accessible area of the
	$LF
	"corridor (meaning that it isn't just an off-by-one error, but an
	$LF
	"off-by-two error!), but the nearest is actually this one which is
	$LF
	"weirdly embedded in the wall and so can only be reached in xorn form.
	$LF
]div
[h4 id=Turns310311313315 
	" Turns 310-311, 313-315
	$LF
]h4
[div class=p 
	"We now have five wraith corpses on us, one carried from the Valley and
	$LF
	"the other four freshly killed; the first was obtained on turn 268, so
	$LF
	"we have to eat them relatively soon to avoid them spoiling.  (Exactly
	$LF
	"how quickly corpses spoil is random to some extent; although we didn't
	$LF
	"need it, we actually used a trick here to make the corpses last
	$LF
	"longer, as instead of taking the age of the oldest corpse in a stack,
	$LF
	"the game takes the average age, and so the set of corpses collectively
	$LF
	"would spoil later than the first corpse would spoil alone.)  This is
	$LF
	"as good a time to eat them as any, so we eat them now.  As we finish
	$LF
	"eating the fifth corpse, getting us up to level 13, we polymorphitis
	$LF
	"back into a master mind flayer; strangely, we're selecting it not for
	$LF
	"its powerful melee attack, but for its very weak and almost useless
	$LF
	"ranged attack, as it's that attack that's needed to perform the
	$LF
	"sequence break in question.  (If you're wondering about how we
	$LF
	"manipulated the polymorph in xorn form, remember that Rodney's tower
	$LF
	"is surrounded by impenetrable walls which not even xorns can walk
	$LF
	"through; walking against these unphasable walls lets us wallwalk in
	$LF
	"xorn form just like a gnome walking into an ordinary wall.)  Right at
	$LF
	"the end, the Elvenking comes into view; we managed to finish eating
	$LF
	"just in time to avoid getting into combat with it.
	$LF
]div
[h4 id=Turn317 
	" Turn 317
	$LF
]h4
[div class=p 
	"Time to actually do the Rodney's Tower sequence break.  (Strictly
	$LF
	"speaking, we don't need to do this one as we'd have time to do this
	$LF
	"sidequest the normal way but it's still more interesting to see a
	$LF
	"quest sequence-broken past than done normally.)  The way this works
	$LF
	"is by exploiting a cheating AI; even though this level is
	$LF
	"no-teleport, Rodney has a teleport-regardless-of-anything ability.
	$LF
	"Thus, although we can't teleport over to meet him, he can teleport out
	$LF
	"to meet us; the issue is trying to persuade him to do so.
	$LF
]div
[div class=p 
	"The walls around here, which are basically impenetrable, prevent us
	$LF
	"using any of the usual methods to damage Rodney at range or to make
	$LF
	"enough noise to wake him, or anything like that.  However, the mind
	$LF
	"flayer's mind blast attack is a weak attack which randomly targets all
	$LF
	"targets in a radius, and does not respect the usual barrier that
	$LF
	"unphaseable walls provide.  Although it only does tiny amounts of
	$LF
	"damage even a tiny amount of damage is enough to wake Rodney up to
	$LF
	"make him come out and chase us for revenge.
	$LF
]div
[div class=p 
	"This sequence break is a really annoying one to get right; due to the
	$LF
	"huge number of monsters near Rodney, the chance of hitting the right
	$LF
	"one is quite remote and the mind blast attack often doesn't hit
	$LF
	"anyone at all.  Additionally, there's no visible indication that it's
	$LF
	"worked either; hitting Rodney with the attack just refers to him as
	$LF
	""it" just like it would refer to all the other out-of-sight monsters.
	$LF
	"Thus, we went to quite a lot of effort writing a patch to the game
	$LF
	"that effectively memory-watches boss HPs, mostly simply so that we
	$LF
	"could determine whether this sequence-break worked on any particular
	$LF
	"RNG seed.
	$LF
]div
[div class=p 
	"Therefore, it was incredibly ironic when it worked on the first try.
	$LF
]div
[div class=p 
	"Although this turn gives no visual indication that Rodney actually
	$LF
	"woke up as a result, he did indeed wake up from the mind blast we did
	$LF
	"on this turn; he never acts immediately upon waking, though (he'll
	$LF
	"start to act on the next turn).  Amazingly, despite the low chance of
	$LF
	"it working, this glitch is regularly done in unassisted gametime
	$LF
	"speedruns via the simple method of trying it repeatedly until it
	$LF
	"works (because there's no penalty for failure), although it can take
	$LF
	"several tens of tries before anything happens.
	$LF
]div
[h4 id=Turn318 
	" Turn 318
	$LF
]h4
[div class=p 
	"Now Rodney is awake, the next issue is to get him to actually use his
	$LF
	"ability to teleport out of his tower even though that isn't allowed on
	$LF
	"this level.  Unlike most monsters, Rodney's AI is very complex with a
	$LF
	"huge number of possible actions; and rather than depending mostly on
	$LF
	"our own actions, it depends mostly on a random factor.  This makes him
	$LF
	"a real pain to fight unassisted (at least, unless you exploit his
	$LF
	"weakness to instadeath weapons), but unexpectedly easy to control in a
	$LF
	"TAS.  A bit of luck manipulation on this turn caused him to teleport
	$LF
	"over to us and attack immediately (rather than buffing himself or
	$LF
	"healing up, some of the other possibilities), and also summon a winged
	$LF
	"gremlin at us (which we ignore as we're about to leave the level
	$LF
	"anyway, and it doesn't follow).
	$LF
]div
[div class=p 
	"The other thing to note on this turn is the hilarious fate of the
	$LF
	"Elvenking.  We knew that bear trap was there all along, but the
	$LF
	"Elvenking didn't, so we stopped it chasing us (it has quite a powerful
	$LF
	"attack) by letting it stumble into the trap.  (It does get itself
	$LF
	"disentangled eventually, but we're long gone by then.)
	$LF
]div
[h4 id=Turn319 
	" Turn 319
	$LF
]h4
[div class=p 
	"We're done with dungeon level 36 for the time being so it's time to
	$LF
	"go fight the next boss (and kill Rodney along the way).  This is
	$LF
	"actually a reverse-sidequest-order run; the Quest, normally the first
	$LF
	"mandatory sidequest, has to be done last of all in order to get a
	$LF
	"perfect turncount and we did Rodney, normally the last of those three
	$LF
	"quests, first.  (Upon dying, Rodney harasses the player for the rest
	$LF
	"of the game, hurling spells from afar and even respawning on occasion;
	$LF
	"this is dangerous in a normal game but harmless or even beneficial in
	$LF
	"a TAS, as his effects can be manipulated away when unwanted, and
	$LF
	"manipulated to occur if they happen to be useful for whatever reason.)
	$LF
	"Our destination is dungeon level 34, which coincidentally happens to
	$LF
	"be the level of a minor boss (which is mostly annoying because it ends
	$LF
	"up being no-teleport for that reason; we never actually meet the boss
	$LF
	"on the TAS); we're here not because of that, but because it also
	$LF
	"contains the entrance to Vlad's Tower, which unlike Rodney's is not
	$LF
	"embedded in the main dungeon, but off to one side, and thus has to be
	$LF
	"entered the normal way.  Although Rodney follows us, his AI decides to
	$LF
	"spend the turn healing, so he's waiting on the stairs to level 33, a
	$LF
	"couple of squares from where we land.
	$LF
]div
[div class=p 
	"This is another level with a suboptimal layout, by the way; we're very
	$LF
	"physically near to both sets of upstairs on the level, but the ones we
	$LF
	"want to go up via are on the other side of a wall.  Again, we settled
	$LF
	"for this because the level generation had huge RNG jitter causing most
	$LF
	"of the levels that were generated through luck manipulation to be
	$LF
	"identical; most of the levels down here in Gehennom are like that,
	$LF
	"both due to the way the maze generator works and because they have a
	$LF
	"lot more monsters than regular dungeon levels do.
	$LF
]div
[h4 id=Turn320 
	" Turn 320
	$LF
]h4
[div class=p 
	"It takes over half a second of walking into a wall to manipulate it
	$LF
	"(ouch jitter…), but we manage to polymorph after walking just one
	$LF
	"square and Rodney teleports over to us in the process.  We're using
	$LF
	"another new polymorph form, the black dragon; this is mostly similar
	$LF
	"to the red dragon but instead of the fire breath we now have a
	$LF
	"disintegration breath weapon that instakills enemies.  (We didn't use
	$LF
	"this in the Valley, incidentally, because disintegrating wraiths would
	$LF
	"have been counterproductive due to not leaving a corpse behind so we
	$LF
	"settled for the second-most-powerful dragon form there.)  As usual,
	$LF
	"Rodney does a couple of attacks after teleporting; first punching us
	$LF
	"(doing damage that is completely irrelevant as we immediately
	$LF
	"polymorph afterwards and reset the damage-to-unpolymorph counter),
	$LF
	"then casting "aggravate monster", one of his least threatening spells
	$LF
	"(it alerts other monsters on the level to your location, but we won't
	$LF
	"be here long).
	$LF
]div
[h4 id=Turn321 
	" Turn 321
	$LF
]h4
[div class=p 
	""The Wizard of Yendor is disintegrated!"  Easiest boss kill ever.
	$LF
]div
[div class=p 
	"The design of Rodney is pretty interesting; he's relatively tough to
	$LF
	"kill in regular combat, but weak to instant-death weapons, which
	$LF
	"encourages you to use your death charges against him (and indeed,
	$LF
	"people mostly do save them for that purpose).  However, he keeps
	$LF
	"respawning after death (although in a TAS, we can manipulate him to
	$LF
	"respawn no more than once, which is the absolute minimum), and so
	$LF
	"often you eventually have to settle for killing him the other way.
	$LF
	"And yet, there are monsters later in the game that are arguably better
	$LF
	"targets for instant-death attacks than Rodney is, so it's an
	$LF
	"interesting tradeoff when to use them.  In this TAS, we can ignore the
	$LF
	"issue completely; black dragon breath costs just 20 Pw to use which
	$LF
	"is normally a lot (and a limiting factor on black dragon abuse in an
	$LF
	"unassisted game, as Pw can take ages to regenerate), but we certainly
	$LF
	"aren't short of Pw at the moment.
	$LF
]div
[h4 id=Turn322327 
	" Turn 322-327
	$LF
]h4
[div class=p 
	"Annoyingly, although the stairs are incredibly close as the crow
	$LF
	"flies they're a very long away following the maze from where we are,
	$LF
	"so we pretty much have no other option than to use xorn form again to
	$LF
	"reach them.  Doubly annoyingly, this level has a lot of RNG jitter,
	$LF
	"and it took us an entire six turns before we could manipulate
	$LF
	"polymorphitising into a xorn in a reasonable length of time, which we
	$LF
	"spent walking back and forth.  In the process, we pick up the "papyrus
	$LF
	"spellbook" (the Book of the Dead), the reward for beating Rodney, and
	$LF
	"one of only a few items absolutely required to win the game.  (We
	$LF
	"won't have much use for it for many turns, though.)
	$LF
]div
[h4 id=Turns329331 
	" Turns 329-331
	$LF
]h4
[div class=p 
	"Now we're in xorn form again, it's just a short walk through the wall
	$LF
	"and up the stairs to Vlad's Tower.  This level has a mostly fixed
	$LF
	"layout, such that there isn't anything all that useful to manipulate
	$LF
	"here; we tried several different seeds to see if there was anything
	$LF
	"worth manipulating, but it turned out there wasn't (at least not
	$LF
	"within the reasonably accessible seeds) so we just took the first one
	$LF
	"available to spare the trouble of manipulating in xorn form.
	$LF
]div
[h4 id=Turns333335 
	" Turns 333-335
	$LF
]h4
[div class=p 
	"Normally, to do the first level of Vlad's you have to walk all the
	$LF
	"way over to the other side of the level and back again.  In xorn form,
	$LF
	"we don't care about that, and just walk directly to the ladder up to
	$LF
	"the next level (32).
	$LF
]div
[div class=p 
	"These turns also show off yet another special property of xorn form.
	$LF
	"Something is breathing fire at us from the east (we're not entirely
	$LF
	"sure whether it's the red dragon or the red naga which are both over
	$LF
	"there; we'd need to write a complicated memory watch script to find
	$LF
	"out, which isn't worth it as it doesn't matter at all), but being made
	$LF
	"mostly of rock, a little heat doesn't harm us at all.  Elemental
	$LF
	"resistance tends to be absolute in NetHack; it can be gained
	$LF
	"intrinsically just like we have intrinsic controlled polymorphitis and
	$LF
	"controlled teleportitis, but as long as we can keep polymorphing,
	$LF
	"there isn't really a need.
	$LF
]div
[h4 id=Turns337339 
	" Turns 337-339
	$LF
]h4
[div class=p 
	"We go up to the second level of Vlad's Tower and continue our plan of
	$LF
	"just phasing around the intended route to avoid fighting anything.
	$LF
	"(We do take some damage from a   hound pup along the way, useful as
	$LF
	"we use combat damage to turn back into regular form once we've reached
	$LF
	"our destination.)  The place we end up at the end of turn 339 (as turn
	$LF
	"341 starts) is actually out of bounds, although it's hard to see on
	$LF
	"this run; why fight past monsters when you can just go round?  (As for
	$LF
	"how we managed to get out of bounds here, it's just a trivial
	$LF
	"oversight; the NetHack developers forgot to mark the bounds of the
	$LF
	"level as unphaseable for xorns.  It's not exploitable in any way other
	$LF
	"than to come back in bounds on the other side of a monster; the game
	$LF
	"simply doesn't let you move past the normal valid range of
	$LF
	"coordinates on the outer border.)
	$LF
]div
[h4 id=Turns341343345347349 
	" Turns 341-343, 345-347, 349
	$LF
]h4
[div class=p 
	"The rest of the second floor of Vlad's Tower is extremely uneventful,
	$LF
	"just more phasing through walls at a weird angle.  It should be noted
	$LF
	"that moving diagonally around the edge of the level like we did there
	$LF
	"is the same distance as going in a straight line; diagonal movement is
	$LF
	"just as fast as straight movement in NetHack, meaning that there are
	$LF
	"many possible shortest routes from one square to a square some
	$LF
	"distance north, west, south, or east of it.
	$LF
]div
[h4 id=Turns350351353355 
	" Turns 350-351, 353-355
	$LF
]h4
[div class=p 
	"Vlad's Tower is three floors high, and so we enter the third floor
	$LF
	"(31) and walk straight through the wall to the throne Vlad sits on.
	$LF
	"He wakes up and deals damage to us, unpolymorphing us just as we reach
	$LF
	"the throne, which is exactly what we wanted; we don't even take damage
	$LF
	"to our regular health bar.  Vlad (a purple V) has the same
	$LF
	"teleport-anywhere ability that Rodney has, but it ends up working
	$LF
	"against him here, letting us reach the throne and leaving him forced
	$LF
	"to wait next to it.
	$LF
]div
[h4 id=Turns357358 
	" Turns 357-358
	$LF
]h4
[div class=p 
	"There are many possible uses for a throne.  The one we use here is the
	$LF
	"approximately 1.7% chance that sitting on a throne will grant a wish,
	$LF
	"and that the throne will remain afterwards to allow more wishes to be
	$LF
	"made on it.  (Running out of wishes is not really an issue in a TAS;
	$LF
	"thrones allow unlimited numbers of wishes to be farmed with perfect
	$LF
	"luck manipulation. And they aren't even the only unlimited source of
	$LF
	"wishes.)  We use this throne to wish for artifacts; the Eyes of the
	$LF
	"Overworld on turn 357, the Orb of Fate on turn 358.
	$LF
]div
[div class=p 
	"Both of these artifacts aren't too happy about being wished for (they
	$LF
	"like neutral players, but not wizards), but after blasting us and
	$LF
	"doing a bit of damage, they settle down for their new lives in our
	$LF
	"inventories.  The Eyes are vital to save turns later on in the game;
	$LF
	"although they have several different abilities, the one that we care
	$LF
	"about is the ability to cure all forms of blindness, important because
	$LF
	"later on we'll be using polymorph forms which have no eyes.  (Being an
	$LF
	"artifact, it's powerful enough to overcome even such an apparently
	$LF
	"final obstacle to sight as eyelessness.)  The Orb is less necessary,
	$LF
	"but we have two main reasons to wish for it; one is that it has a
	$LF
	"level teleport power that saves on cursed scrolls of teleport, and the
	$LF
	"other is that it halves all damage take from any source, meaning that
	$LF
	"it takes twice as much damage to unpolymorph us.  It also levels the
	$LF
	"playing field against Vlad, with its damage halving cancelling out the
	$LF
	"damage doubling from the difficulty level (Vlad, being a vampire, is
	$LF
	"undead).
	$LF
]div
[h4 id=Turns359419 
	" Turns 359-419
	$LF
]h4
[div class=p 
	"As is mentioned earlier, we need to do a lot of skill grinding on the
	$LF
	"detect monsters spell in order to be able to keep it up constantly,
	$LF
	"and doing so would normally be very boring, so what better time to do
	$LF
	"it than the middle of a boss fight?  Hopefully, instead of becoming
	$LF
	"more and more boring as time goes on like grinding normally does, this
	$LF
	"becomes more and more ridiculous instead.  Vlad is famous for being
	$LF
	"incredibly weak, almost a joke boss; he isn't actually weak on an
	$LF
	"absolute scale, but he's much weaker than you'd expect a boss to be in
	$LF
	"his place in the game (it's said that the most dangerous thing he can
	$LF
	"do to you is to read a cursed scroll of teleport, forcing you to
	$LF
	"figure out where he ran to and chase him down).  Thus, here's a little
	$LF
	"demonstration to demonstrate what he's actually like: we cast 61 of
	$LF
	"the 80 casts of detect monsters required to exercise it up to the
	$LF
	""skilled" level right now in combat with Vlad, to see how much damage
	$LF
	"is taken.  (We do use a little luck manipulation in order to avoid him
	$LF
	"level-draining us, and a little more to manipulate enemy AIs to
	$LF
	"prevent any other monsters joining the fight, but this is otherwise a
	$LF
	"completely fair fight, with our orb of fate cancelling out the
	$LF
	"midnight damage bonus.)  Other things to note during the fight are the
	$LF
	""you feel vaguely nervous" at the end of turn 373 (start of turn 374),
	$LF
	"which is Rodney trying to cast a spell from beyond the grave, but
	$LF
	"failing; the trapper (green t) spawning but not doing anything (as
	$LF
	"it's hiding waiting for us to stumble into it, and we aren't going to
	$LF
	"as we know where it is); and the orcish shaman (bright blue o) taking
	$LF
	"one look at us tanking a major boss's attacks and running away (we
	$LF
	"manipulated this, but it's still pretty funny, and exactly what you
	$LF
	"would expect an orc to do in that situation).
	$LF
]div
[div class=p 
	"During our skill training, we took a little under 900 points of
	$LF
	"damage, which would be enough to kill any normal character.  On the
	$LF
	"other hand, we had no armour and weren't attacking; most players would
	$LF
	"have had a lot of defense against Vlad's attacks, reducing his combat
	$LF
	"damage to effectively zero, by the time they reached this point (as
	$LF
	"well as immunity or resistance to his level-drain attack, simulated
	$LF
	"here by manipulating it to fail).  Therefore, the obvious conclusion
	$LF
	"is that if you're prepared enough to survive everything else around
	$LF
	"here you're almost certainly prepared enough to trivially beat Vlad,
	$LF
	"even if he isn't that weak in an absolute sense.
	$LF
]div
[h4 id=Turn420 
	" Turn 420
	$LF
]h4
[div class=p 
	"It's not entirely clear if we're being cruel or kind to Vlad this run.
	$LF
	"On the one hand, we didn't just outright kill him like some players
	$LF
	"do, or kill him in a hideously embarrassing fashion to demonstrate how
	$LF
	"weak he is like most players do; but on the other side, we must be
	$LF
	"making him feel pretty impotent.  After tanking nearly 900 points of
	$LF
	"damage, we just sit on his throne again, and miraculously are healed
	$LF
	"up to full health!  (The 1.7% chance of this happening with the throne
	$LF
	"surviving is the same as the chance of getting a wish with the throne
	$LF
	"surviving, incidentally.)  Getting to full health when you have as
	$LF
	"much max HP as we do is kind-of tricky, with potions of full healing
	$LF
	"only healing 400 hitpoints; doing it this way was likely simplest.
	$LF
]div
[h4 id=Turn421 
	" Turn 421
	$LF
]h4
[div class=p 
	"Of course, one issue with people typically killing Vlad in some
	$LF
	"hilariously embarrassing fashion is that most of the ways to do that
	$LF
	"have already been done unassisted, so replicating one of them in a
	$LF
	"TAS would not be particularly impressive or entertaining.  Instead,
	$LF
	"as we do the 80th cast of detect monsters (we cast it 18 times
	$LF
	"before entering Vlad's, and 62 times inside), we polymorphitis into
	$LF
	"a succubus.  Instead of killing the boss and getting the mandatory
	$LF
	"item he guards that way, we're going to leave Vlad alive and get the
	$LF
	"Candelabrum a different way.
	$LF
]div
[h4 id=Turn422 
	" Turn 422
	$LF
]h4
[div class=p 
	"This is us technically defeating Vlad (or, at least, getting the
	$LF
	"Candelabrum of Invocation, the reward for beating him and an item
	$LF
	"required to defeat the game).  In case you aren't watching with frame
	$LF
	"advance, here's the text for this turn: "You smile at Vlad the Impaler
	$LF
	"seductively.  You steal:  I - a candelabrum (no candles attached).
	$LF
	"You hit Vlad the Impaler.  You hit Vlad the Impaler.  Vlad the Impaler
	$LF
	"hits!  Vlad the Impaler bites!".  Yep, we just flirted the MacGuffin
	$LF
	"off him.  Given that there are no sufficiently embarrassing ways to
	$LF
	"kill him, we'll just leave him now.  He survives the entire TAS, which
	$LF
	"is kind of unusual for bosses in any game (and particularly unusual
	$LF
	"for Vlad in NetHack.)
	$LF
]div
[h4 id=Turn423 
	" Turn 423
	$LF
]h4
[div class=p 
	"It's time to leave Vlad's, but first we need to take steps to ensure
	$LF
	"he doesn't chase us or leaving him alive will have been pointless.
	$LF
	"Thus, we scrawl an Elbereth on the floor in blood, a fittingly
	$LF
	"gruesome way for a demon like a succubus to write it.  This scares
	$LF
	"Vlad into not wanting to follow when we level teleport away next turn.
	$LF
]div
[h4 id=Turn424 
	" Turn 424
	$LF
]h4
[div class=p 
	"Before leaving Vlad's we first go into the skills menu and specify
	$LF
	"that we do in fact want to enhance divination spells.  Future castings
	$LF
	"of "detect monsters" will now, instead of just giving us a snapshot of
	$LF
	"enemy monster locations, give us a continuous effect for several turns
	$LF
	"letting us see monsters; we'll put this up whenever it would be useful
	$LF
	"to follow what's going on for your viewing entertainment.
	$LF
]div
[div class=p 
	"Once that's done (which takes no in-game time) we return to level 16
	$LF
	"via invoking the Orb of Fate's level teleport power (which also
	$LF
	"returns us to gnomish form).  Unfortunately, it would take too much
	$LF
	"manipulation to land exactly on the square in level 16 where we want
	$LF
	"to be, and manipulate the Orb of Fate to have a low invoke timeout
	$LF
	"(letting it recharge sooner, enabling us to be able to use it again in
	$LF
	"the near future), at the same time; the invoke timeout is more
	$LF
	"important, so we end up at the wrong end of the shop.
	$LF
]div
[h4 id=Turn425 
	" Turn 425
	$LF
]h4
[div class=p 
	"This turn, we return to our stash on dungeon level 16 (using
	$LF
	"teleportitis) and pick up all the items there.  Together with the
	$LF
	"invocation artifacts (Book of the Dead and Candelabrum of Invocation)
	$LF
	"and other artifacts (Orb of Fate and Eyes of the Overworld) we're
	$LF
	"carrying the weight is enough to make us stressed, which would double
	$LF
	"the time it takes us to do all actions (or to be more precise, halve
	$LF
	"the amount of movement energy we got per turn, which comes to much the
	$LF
	"same thing).  (The Orb of Fate is so heavy that it is frequently
	$LF
	"referred to as the Orb of Weight.)  In order to fix this, we
	$LF
	"polymorphitis into a titan (purple H) in the same turn; this form was
	$LF
	"chosen because it was strong and large (immediately fixing the carry
	$LF
	"capacity issue), and humanoid; being in a form with actual fingers
	$LF
	"allows us to use the magic marker to write scrolls and spellbooks.  It
	$LF
	"is also faster than our regular form, being able to take one and a
	$LF
	"half actions per turn (to be more precise, it alternates between
	$LF
	"one-action and two-action turns, based on the amount of remaining
	$LF
	"movement energy, as always); however, our temporary stressedness
	$LF
	"reduces our movement energy reservoir (equivalent to having a bad
	$LF
	"subpixel), preventing this action boost kicking in for a bit.
	$LF
]div
[h4 id=Turn426 
	" Turn 426
	$LF
]h4
[div class=p 
	"In order that we can perform very time-consuming actions in peace
	$LF
	"(without being constantly interrupted by monsters), we need to kill
	$LF
	"the mimic adjacent to us.  (There is actually a second mimic on the
	$LF
	"level, but its AI is set to hide and attempt an ambush rather than to
	$LF
	"attack, and we don't do anything that might cause it to come out of
	$LF
	"hiding, so it's irrelevant.)  Therefore, we simply use our basic
	$LF
	"attack spell, force bolt, to attack the mimic, manipulating it to miss
	$LF
	"in response.
	$LF
]div
[h4 id=Turn427 
	" Turn 427
	$LF
]h4
[div class=p 
	"One hit of a force bolt isn't enough to kill a small mimic at this
	$LF
	"depth in the dungeon, so we attack it again to finish it off.  A
	$LF
	"moderate amount of luck manipulation was needed here to get a high
	$LF
	"damage roll; two hits would not typically be enough either.
	$LF
]div
[h4 id=Turn428Action12 
	" Turn 428 (action 1/2)
	$LF
]h4
[div class=p 
	"Now we don't have to fear interference by the mimic, we can start on
	$LF
	"the next part of our strategy: obtaining the spells we will need for
	$LF
	"the rest of the game.  There are several methods of obtaining
	$LF
	"spellbooks; one of the simplest methods is to use the magic marker
	$LF
	"that we found in the shop in order to write on the blank spellbooks we
	$LF
	"have in our inventory.  (These are our starting spellbooks; we washed
	$LF
	"the ink off their pages as a side effect of walking along the bottom
	$LF
	"of the Castle moat, which we set up all the way back at turn 82.)  The
	$LF
	"first spellbook we write is "charm monster" (unfortunately, the magic
	$LF
	"marker parser has no amusing abuses), a spell which has a chance (that
	$LF
	"can be luck-manipulated to always work) of turning enemies permanently
	$LF
	"tame, causing them to fight on our side for the rest of the game or
	$LF
	"until angered.  This is actually one of the most powerful spells in
	$LF
	"the game, especially in combination with TAS tools, and we make use of
	$LF
	"it to avoid or trivialise combat at points later on; however, the only
	$LF
	"reason we actually need it is that the ally AI does some things the
	$LF
	"enemy AI doesn't, allowing us to manipulate monsters in ways necessary
	$LF
	"for a glitch later on.
	$LF
]div
[h4 id=Turn428Action22 
	" Turn 428 (action 2/2)
	$LF
]h4
[div class=p 
	"(Unlike earlier, where we lost turns due to slow polyforms, the fast
	$LF
	"polyform we are in allows us to perform multiple actions in a turn,
	$LF
	"sometimes.  The number of actions in a turn is determined at the start
	$LF
	"of the turn, based on a number of factors, but at the moment it
	$LF
	"strictly alternates between 1-action and 2-action turns.)
	$LF
]div
[div class=p 
	"On the other blank spellbook, we write the "jumping" spell.  When
	$LF
	"fully trained up, this spell gives us the ability to jump up to four
	$LF
	"squares orthogonally; although useful to cross moats and similar
	$LF
	"situations, its use in a TAS is as a very fast form of horizontal
	$LF
	"movement, in situations where teleportation does not work.  (The
	$LF
	"timing properties of jumps are a little unusual; they cost one action
	$LF
	"plus the remainder of the turn, and thus are only worth using on the
	$LF
	"last action of a turn, a limitation that is mostly irrelevant now but
	$LF
	"will become very important later on when we become fast enough to take
	$LF
	"four actions per turn.)  Incidentally, this sort of spellbook writing
	$LF
	"is far from guaranteed to work, especially given our neutral luck, but
	$LF
	"luck manipulation allows us to guarantee that we always write the
	$LF
	"right magic words in the book on the first attempt.
	$LF
]div
[h4 id=Turns429434Action12 
	" Turns 429-434 (action 1/2)
	$LF
]h4
[div class=p 
	"We read the spellbook of charm monster that we just wrote.  (Somehow,
	$LF
	"writing the words then reading them again are what's necessary to
	$LF
	"actually end up learning the spell…)  Reading spellbooks can take a
	$LF
	"long time, especially high-level ones, and being in a fast polymorph
	$LF
	"form does not reduce the time.  We make good use of the forced delay,
	$LF
	"though, as while we read the Orb of Fate has time to recharge, meaning
	$LF
	"that it will be ready for another level teleportation when we need it.
	$LF
]div
[h4 id=Turns434Action22437 
	" Turns 434 (action 2/2)-437
	$LF
]h4
[div class=p 
	"We read the other spellbook, the spellbook of jumping, and learn that
	$LF
	"spell too.  The Orb of Fate is anyway still not fully recharged, so no
	$LF
	"real time is wasted by the time-consuming action.
	$LF
]div
[h4 id=Turn438Action12 
	" Turn 438 (action 1/2)
	$LF
]h4
[div class=p 
	"We want to write and read one more spellbook while here, because it
	$LF
	"will be needed in the near future (so it can't be left until later),
	$LF
	"and because we need to wait for the Orb to recharge anyway.  However,
	$LF
	"we have no more blank spellbooks, so we need to wash the ink off one
	$LF
	"in order to be able to write in it again.  This is an opportunity to
	$LF
	"use the otherwise useless potions we had at the start of the game (the
	$LF
	"potion of object detection was important to own as it made the TASing
	$LF
	"process easier, but useless in terms of actually using it ingame);
	$LF
	"back around turn 82, we let the potions dilute in the Castle moat (at
	$LF
	"the same time as sneaking into the Castle, and washing the ink off
	$LF
	"scrolls and spellbooks), and we can use the water that ended up in the
	$LF
	"potion bottle to wash the ink off a spellbook by hand.  Although
	$LF
	"spells in NetHack are not memorised forever, they last for twenty
	$LF
	"thousand turns, and we'll have won by then.  Thus, all our existing
	$LF
	"spellbooks are now only useful for their paper, not for their spells;
	$LF
	"and we wash the spellbook of charm monster (an arbitrary choice) clean
	$LF
	"by hand, by dipping it into one of the diluted potions.
	$LF
]div
[h4 id=Turn438Action22 
	" Turn 438 (action 2/2)
	$LF
]h4
[div class=p 
	"Time to write the last of the spellbooks that we obtain via writing.
	$LF
	"(Magic markers have limited ink; although there's still plenty left in
	$LF
	"this marker, even a relatively full marker struggles to write
	$LF
	"high-level spells, and so it's most efficient to write low-level
	$LF
	"spells with the marker and gain the high-level spells we need via
	$LF
	"other means.)  This time, we write the "stone to flesh" spell, a
	$LF
	"utility spell which finds a range of interesting uses throughout the
	$LF
	"run.  The main reason we're writing it is because it's a necessary
	$LF
	"part of a glitch (the gold duplication glitch) that we need to pull
	$LF
	"off soon, using its ability to turn statues into the creatures they
	$LF
	"represent; but its ability to convert ordinary rock into generic meat
	$LF
	"also comes in handy later.
	$LF
]div
[h4 id=Turn439 
	" Turn 439
	$LF
]h4
[div class=p 
	"This turn is spent moving onto the square where the shopkeeper died;
	$LF
	"although shopkeepers tend not to have too many possessions that aren't
	$LF
	"already on sale, some of his personal items will come in useful later
	$LF
	"on the run.
	$LF
]div
[h4 id=Turn440Action1 
	" Turn 440 (action 1)
	$LF
]h4
[div class=p 
	"We actually pick up the items we wanted.  One minor gain is a skeleton
	$LF
	"key; the shopkeeper had one of these in order to chase shoplifters who
	$LF
	"locked doors behind them in an attempt to foil pursuit, but we can use
	$LF
	"it ourselves to open locked containers if necessary (and later on, it
	$LF
	"will become necessary; there are other methods to open locked
	$LF
	"containers, but they all have drawbacks, and as we're picking up items
	$LF
	"on this square anyway we may as well pick up the key as it doesn't add
	$LF
	"anything to the time taken).  More importantly, though, we swipe the
	$LF
	"contents of the cash register, picking up 1960 gold pieces that the
	$LF
	"shopkeeper would have used to pay us for items we sold him.  Although
	$LF
	"gold would seem useless to us (given our typical treatment of
	$LF
	"shopkeepers so far…), it's a necessary component of the gold
	$LF
	"duplication glitch, which as you will see has ramifications far beyond
	$LF
	"mere infinite wealth.
	$LF
]div
[h4 id=Turn440Action2 
	" Turn 440 (action 2)
	$LF
]h4
[div class=p 
	"We wait an action to allow polymorphitis to kick in, as we need to be
	$LF
	"in a different polymorph form to prepare for the next part of the run.
	$LF
	"(It couldn't be triggered last action, as it only happens on turn
	$LF
	"boundaries; thus, waiting a turn lets us polymorph at the transition
	$LF
	"to turn 441.)  Our new polymorph form, the stone golem, is one that is
	$LF
	"rarely used, due to its very slow speed (skipping every second turn),
	$LF
	"but has three properties we require for the next section: a strength
	$LF
	"and carry capacity equal to that of the titan (we're still carrying an
	$LF
	"amount of junk that would burden or even stress any normal character);
	$LF
	"hands, allowing us to hold items; and most importantly, a body made of
	$LF
	"stone.  We're going to be slinging around very powerful petrification
	$LF
	"weapons in the near future, which need precautions to be taken to
	$LF
	"avoid falling to the same petrification effect ourselves; and being
	$LF
	"made of stone already is a foolproof defense against being turned to
	$LF
	"stone, meaning that we can ignore the normal balancing effects of
	$LF
	"petrify-on-touch weapons.  (More normally, gloves would be used, but
	$LF
	"we'd need to waste the time to find or wish for them, and put them on,
	$LF
	"as well as needing to use a polymorph form which not only had hands,
	$LF
	"but human-shaped hands, so that the gloves would fit.)
	$LF
]div
[div class=p 
	"Note that it may get a little hard to track the location of the
	$LF
	"character while we stay in stone golem form; the symbol for a stone
	$LF
	"golem is a grey apostrophe, which rather blends in with all the grey
	$LF
	"dots around.  Sorry; there's not much we could do about that.
	$LF
]div
[h4 id=Turn441446 
	" Turn 441-446
	$LF
]h4
[div class=p 
	"We spend these turns reading the "stone to flesh" spellbook; the Orb
	$LF
	"of Fate recharges as we read it.  There's actually a "mistake" at this
	$LF
	"point in the run: I was under the impression that slow polymorph forms
	$LF
	"read spellbooks as fast as our natural form, but I was wrong, thus
	$LF
	"wasting a small amount of time.  It ends up making no difference in
	$LF
	"the long run, because we have to wait for the Quest to open anyway,
	$LF
	"but looks bad.  (We aren't redoing the run because of this, though.)
	$LF
]div
[h4 id=Turn448 
	" Turn 448
	$LF
]h4
[div class=p 
	"Now the Orb of Fate has recharged, we use it to visit a previously
	$LF
	"unvisited level: level 6, the Oracle level.  (Coincidentally, many of
	$LF
	"the levels that are important to this run seem to have numbers ending
	$LF
	"in 6…)  This is (when taking a normal route!) the first "special level"
	$LF
	"in the game, which has a fixed or semi-fixed rather than random
	$LF
	"layout; its main purpose is as a source of spoilers for unspoiled
	$LF
	"players (the Oracle can be paid money in exchange for advice), and as
	$LF
	"a marker that indicates the location of the Sokoban branch (which is
	$LF
	"always entered from the level below the Oracle level).  However, we
	$LF
	"don't care about either of those things (as they just give information
	$LF
	"that we either know anyway or can discover with memory watch), and
	$LF
	"instead use this level because it has very skewed probabilities for
	$LF
	"certain things we want.  (It should also be noted that the difficulty
	$LF
	"of getting exactly what we wanted combined with busy schedules caused
	$LF
	"a multiple month delay in the making of this TAS at this point in the
	$LF
	"run.)
	$LF
]div
[div class=p 
	"As usual, the entire level is generated when we visit it; although it
	$LF
	"does not become relevant for a while, we need to manipulate certain
	$LF
	"things the instant we arrive on the level, because there is no chance
	$LF
	"to change them later.  In this case, we're taking advantage of the
	$LF
	"unusually high chance of spellbooks on this level; it contains eight
	$LF
	"guaranteed statues, each of which has a moderately good chance of
	$LF
	"containing a random spellbook.  This particular item set took quite a
	$LF
	"while to manipulate, because one of the spellbooks (polymorph) that
	$LF
	"was manipulated here is both incredibly costly to write, and very
	$LF
	"rare; another spellbook we need, haste self, also generates on the
	$LF
	"level at the same time, saving us the trouble of writing it (although
	$LF
	"we have enough marker charges left that we could write it if we needed
	$LF
	"to).  Due to their current confinement inside statues, though, neither
	$LF
	"spellbook will be visible for a while.  (Just to add to the confusion,
	$LF
	"we now have floor as grey dot, the player as a grey apostrophe, and
	$LF
	"the statues as grey backquotes; you'll need good eyes to be able to
	$LF
	"follow this bit unless you watch with a lot of slowdown.)
	$LF
]div
[div class=p 
	"A lot more manipuation was needed to get the rare spellbook we needed
	$LF
	"than it might seem from the luck-manipulation-caused delay before we
	$LF
	"turn up here; what actually happened is that we worked out what RNG
	$LF
	"seed we needed at this point here first, then designed some of the
	$LF
	"actions on previous turns around it, to spread the delay needed over
	$LF
	"several turns.  (Thus, the long delays for luck manipulation happened
	$LF
	"on previous turns instead.)  This is nicer aesthetically, but the real
	$LF
	"reason to do it was to be able to more easily "hex in" changes to
	$LF
	"mistakes we might make (although an ordinary editor is enough to
	$LF
	"change the input files we were using, so "hexing" is a bit of a
	$LF
	"misnomer here).
	$LF
]div
[h4 id=Turn450 
	" Turn 450
	$LF
]h4
[div class=p 
	"So, given that the spellbooks needed later are trapped inside statues,
	$LF
	"what should we do with them?  The obvious answer might be to break the
	$LF
	"statue (which we can trivially do with our force bolt spell), but
	$LF
	"given that we're in a hugely strong polymorph form at the moment, it's
	$LF
	"simpler to just autopickup the statue (a rather large statue of a
	$LF
	"plains centaur) and take it with us, so we do that.  (This is also
	$LF
	"useful because we have a use for the statue itself later in the run…)
	$LF
	"Note that the adjacent mummy does not attack us; although we are slow,
	$LF
	"so are mummies, and it simply didn't get an action in all this time.
	$LF
]div
[h4 id=Turn452 
	" Turn 452
	$LF
]h4
[div class=p 
	"In addition to teleportitis making us sometimes teleport at random, we
	$LF
	"can also now use it to teleport deliberately (a perk of being a
	$LF
	"high-level wizard, although other classes get it too at even higher
	$LF
	"levels).  On this turn, we demonstrate the ability; it costs us some
	$LF
	"Pw (irrelevant given the infinite maxhp/maxpw bug), and some nutrition
	$LF
	"(relevant because we don't have infinite amounts of that, although we
	$LF
	"can use polyself to reset our nutrition levels if necessary; it'd just
	$LF
	"be awkward as we'd have to drop everything to change into our natural
	$LF
	"form to do the reset).  The blue open-braces are fountains, and four
	$LF
	"are guaranteed on the Oracle level; although the statues on this level
	$LF
	"are the reason we came here at all, the fountains are the reason we
	$LF
	"came here now, rather than some other time.  They're also next to the
	$LF
	"Oracle, a light blue at sign, who is completely irrelevant to the run
	$LF
	"(except that she gets in the way of both us and monsters); we're about
	$LF
	"to do some crazy things, but the Oracle will just sit there and watch
	$LF
	"the madness unfold.  She does, however, give us a nice greeting as we
	$LF
	"teleport into her room.
	$LF
]div
[h4 id=Turn454 
	" Turn 454
	$LF
]h4
[div class=p 
	"Now is the start of a tricky luck-manipulation sequence involved with
	$LF
	"the infinite gold glitch.  This turn took quite a bit of manipulation
	$LF
	"in order to get the least likely (and normally, most beneficial) of
	$LF
	"all results from drinking from a fountain; our attempt to drink
	$LF
	"releases a water demon, but instead of attacking us like demons
	$LF
	"normally do, she's sufficiently grateful that she decides to grant us
	$LF
	"a wish instead.  (For some reason, I always find it hilarious when
	$LF
	"incidental monsters turn out to be randomly female; most computer
	$LF
	"games don't have touches like that…)  We're back using the abusable
	$LF
	"wish parser again, and we go for some eye-of-newt style grammar,
	$LF
	"wishing for a "corpse of cockatrice", and a dead cockatrice turns up
	$LF
	"in our inventory as a result.
	$LF
]div
[div class=p 
	"Cockatrices are one of the most deadly creatures in NetHack, having a
	$LF
	"remarkably high number of different ways to kill someone.  (I don't
	$LF
	"have an exhaustive list to hand, although such lists do exist; I think
	$LF
	"there are over thirty ways.)  The general rule is that touching a
	$LF
	"cockatrice (dead or alive) with bare skin is enough to instantly cause
	$LF
	"creatures to turn to stone, something that we can exploit by picking
	$LF
	"up the dead cockatrice (or "rubber chicken" as it's nicknamed by
	$LF
	"NetHack players, given that a cockatrice is physically very like a
	$LF
	"chicken except for the bizarre petrification property), and hitting
	$LF
	"enemies with it.  Our stony body protects us from the effects
	$LF
	"ourselves, so we can use the corpse, one of the most powerful weapons
	$LF
	"in the game, with abandon.  The reason we get the corpse, though, is
	$LF
	"not for its combat effects, but as a component of the infinite gold
	$LF
	"glitch.
	$LF
]div
[h4 id=Turn456 
	" Turn 456
	$LF
]h4
[div class=p 
	"Wow, this turn needed a lot of luck manipulation.  (There were over
	$LF
	"500 rerecords, mostly automated, on this turn alone.)  We now have
	$LF
	"almost all the components for the gold duplication glitch: the gold
	$LF
	"itself to duplicate, a method of turning monsters to stone (cockatrice
	$LF
	"corpse), a method of turning monsters back from stone (stone to flesh
	$LF
	"spell), and a method of manipulating monster AI (charm monster spell).
	$LF
	"(A lot of experimentation in a testrun concluded that the default
	$LF
	"enemy AI, rather than the ally AI, would not perform the actions we
	$LF
	"wanted no matter what happened, so some method of AI manipulation was
	$LF
	"needed.)  However, one last component is needed for the glitch; a
	$LF
	"monster that's capable of carrying the gold in question, and that has
	$LF
	"something about it that requires the game to save information about
	$LF
	"the monster's previous life in its corpse or statue.  (The glitch
	$LF
	"itself works by exploiting a bug in the routine for saving the
	$LF
	"monster's stats in its remains, which is why the extra data is needed;
	$LF
	"we don't actually care about what the extra data in question is, but
	$LF
	"it needs to be there so that the buggy codepath is used.)
	$LF
]div
[div class=p 
	"If we just wanted a few thousands of gold pieces, or maybe tens of
	$LF
	"thousands of gold pieces, we could use pretty much any monster with
	$LF
	"the right sort of carry capacity.  However, we're performing the
	$LF
	"glitch not to get moderate amounts of useless gold, but rather to
	$LF
	"overflow the gold counter, and so we need something with truly amazing
	$LF
	"carry capacity.  There is one class of monsters in the game which
	$LF
	"actually have infinite carry capacity: nymphs.  (It's unclear whether
	$LF
	"this is deliberate, or a bug; it's worth noting that players in nymph
	$LF
	"form don't get infinite carry capacity, so there's at least a weird
	$LF
	"asymmetry there.)  As a result, we need to obtain a nymph as the last
	$LF
	"component in the glitch, and conveniently, another of the results from
	$LF
	"drinking from a fountain is that a water nymph (blue n) is attracted.
	$LF
]div
[div class=p 
	"Although water nymphs are quite likely to turn up when drinking from a
	$LF
	"fountain (a 1 in 30 chance), the nymph would typically immediately
	$LF
	"follow that up by stealing one of our items and teleporting away (the
	$LF
	"Oracle level is not a no-teleport level).  Rather than waste time
	$LF
	"trying to hunt her down (nontrivial even with TAS tools due to the way
	$LF
	"the speed system works, and which would anyway look sloppy), we
	$LF
	"manipulate the nymph to miss with her theft attack on the turn she is
	$LF
	"summoned; I think that's a 1 in 20 chance, although I'm not entirely
	$LF
	"sure (it's kind-of hard to calculate enemy hit chances, but the number
	$LF
	"of rerecords is consistent with that).  The "pretends to be friendly"
	$LF
	"is the standard miss message for a nymph's theft attack.
	$LF
]div
[h4 id=Turn458 
	" Turn 458
	$LF
]h4
[div class=p 
	"Now we have all the components needed for the glitch, it's time to
	$LF
	"start with the glitch itself.  We start off by charming the nymph,
	$LF
	"accomplishing three objectives at once: it stops her attacking us (and
	$LF
	"therefore stops her teleporting away), marks the nymph as containing
	$LF
	"information that must be stored in her corpse (because corpses of
	$LF
	"former allies give different results when sacrificed at altars than
	$LF
	"monsters that were never charmed), and changes her AI to one that
	$LF
	"performs a wider range of actions.  In particular, we care that the AI
	$LF
	"is now capable of dropping items, and the nymph obligingly
	$LF
	"demonstrates by instantly dropping her looking glass.
	$LF
]div
[h4 id=Turn460 
	" Turn 460
	$LF
]h4
[div class=p 
	"The next bit of manipulation is less unlikely than some of the results
	$LF
	"on previous turns, but was a lot more fiddly, as it could not be
	$LF
	"easily automated; although there are still bursts of walking into
	$LF
	"walls in the next section of actions, that only has a limited effect
	$LF
	"on monster AI, which is one of the major things that needed
	$LF
	"manipulating in order to do the glitch.  (The Wizard of Yendor is
	$LF
	"rather easy to defeat in a TAS for the same reason he's a pain in a
	$LF
	"real game: his AI is random.  Most monsters, the nymph included, have
	$LF
	"an AI that depends much more strongly on player actions than on random
	$LF
	"factors.)  Thus, for tens of turns from now on, all our actions that
	$LF
	"are not directly part of the glitch are seemingly random behaviour
	$LF
	"that was designed to manipulate the monster AI into doing what we
	$LF
	"needed.  On this turn, for instance, it might seem more useful to
	$LF
	"throw our gold onto an empty square, allowing the nymph to pick it up;
	$LF
	"but it turned out to be faster overall to drop it on our own square,
	$LF
	"letting the nymph pick it up the turn after instead.
	$LF
]div
[h4 id=Turn462 
	" Turn 462
	$LF
]h4
[div class=p 
	"More actions to manipulate monster AI.  This time, we stepped
	$LF
	"diagonally around the Oracle (who was presumably either curious as to
	$LF
	"what on earth we were doing, or had used her oracular powers to see it
	$LF
	"coming in advance…).  The nymph responded by stepping onto the money
	$LF
	"(meaning that she's just done a full circle of the Oracle, something
	$LF
	"that I wouldn't have expected would be the easiest way to manipulate
	$LF
	"her to end up with the cash, but it turned out that it was).
	$LF
]div
[h4 id=Turn464 
	" Turn 464
	$LF
]h4
[div class=p 
	"An important turn where both our character and the nymph prepare for
	$LF
	"the glitch.  Our character wields the cockatrice corpse, ready to turn
	$LF
	"things into stone; the nymph picks up the gold (one stack of 1960 gold
	$LF
	"pieces), as it needs to be in her inventory for the glitch to work.
	$LF
	"(Note that this action would probably count as "incredibly stupid" or
	$LF
	"worse if TAS tools were not involved; the transformation into a stone
	$LF
	"golem lasts a random number of turns, and might end at any time due to
	$LF
	"failed polymorphitis, and so until we get rid of the corpse again we
	$LF
	"have a chance of losing our polymorph and instantly turning to stone.
	$LF
	"This lead to quite a lot of deaths during the making of the TAS, but
	$LF
	"hey, that's what savestates are for, right?)
	$LF
]div
[h4 id=Turn466 
	" Turn 466
	$LF
]h4
[div class=p 
	"Step two of the glitch: we hit the nymph with the cockatrice corpse
	$LF
	"(using the force-fight command in order to attack an ally) and turn
	$LF
	"her to stone.  I'm sure the nymph herself didn't mind (I mean, she's
	$LF
	"been magically charmed, she has to approve of everything we do,
	$LF
	"right?) but the rumble of distant thunder indicates that our god
	$LF
	"Thoth, at least, rather dislikes our mistreatment of an ally.  (The
	$LF
	"punishment we get for acting like this (reduced alignment record,
	$LF
	"reduced in-game luck stat) is an unfortunate side-effect of the
	$LF
	"glitch, and becomes a nuisance later on, but there's no getting around
	$LF
	"it, as all the other methods we tried to perform the glitch failed at
	$LF
	"the AI manipulation stage.)
	$LF
]div
[h4 id=Turn468 
	" Turn 468
	$LF
]h4
[div class=p 
	"Step three of the glitch: we use our stone to flesh spell to turn the
	$LF
	"statue back into a nymph again.  (Fortunately, the way the timings
	$LF
	"work for unpetrifying a nymph, rather than attracting one through
	$LF
	"fountain quaffing, is that we get the next action, rather than her,
	$LF
	"afterwards; this prevents her stealing things and teleporting away,
	$LF
	"because if you attack and kill a tamed or charmed ally they end up no
	$LF
	"longer tame when resurrected.)
	$LF
]div
[h4 id=Turn470 
	" Turn 470
	$LF
]h4
[div class=p 
	"We cast our charm monster spell again, to manipulate the nymph's AI,
	$LF
	"and she follows up with step four of the glitch: dropping the stack of
	$LF
	"1960 gold pieces, and dropping another stack of 1960 gold pieces.  We
	$LF
	"just successfully duplicated the stack of gold!  (In a way, it's a
	$LF
	"pity that the glitch only works with stacks of gold, but it does; it
	$LF
	"relies on the fact that the same stack is stored both as an object in
	$LF
	"the monster's inventory, and as a number (representing gold ownership)
	$LF
	"in the monster's stats, and whilst the game would normally only use
	$LF
	"one or the other, it gets commands in the wrong order and ends up
	$LF
	"storing it both ways in the statue, with both stacks becoming real
	$LF
	"upon unpetrification.)  The two dropped stacks of gold combine,
	$LF
	"leading to a stack of 3920 gold pieces on the ground.
	$LF
]div
[h4 id=Turn472 
	" Turn 472
	$LF
]h4
[div class=p 
	"So now that we have a larger stack of gold, we merely continue by
	$LF
	"repeatedly duplicating it.  Due to the various things we need to do to
	$LF
	"manipulate the monster AI (this turn, we're standing still and not
	$LF
	"doing anything), the glitch unfortunately can't simply be repeated by
	$LF
	"repeating the same actions, although the general idea remains the
	$LF
	"same.
	$LF
]div
[h4 id=Turn474 
	" Turn 474
	$LF
]h4
[div class=p 
	"After the nymph picks up 3920 gold pieces, turning the nymph back to
	$LF
	"stone is, at least, pretty standard and requires no manipulation.
	$LF
]div
[h4 id=Turn476 
	" Turn 476
	$LF
]h4
[div class=p 
	"Unpetrifying the nymph, however, does.  One of our problems is that
	$LF
	"the success rate on our stone to flesh spell isn't too good (our
	$LF
	"character has no training in healing magic, and will have to learn on
	$LF
	"the job), so we have to manipulate it to work.  Also important is for
	$LF
	"the nymph to behave correctly in the next few turns, which requires
	$LF
	"getting the RNG in the right sort of state in advance.  Finally, we
	$LF
	"aren't alone on the level; the red numbers you may have seen moving
	$LF
	"around represent monsters detected by the Orb of Fate (an effect less
	$LF
	"strong than the detect monsters spell we learnt, and which doesn't
	$LF
	"show monsters it deems too weak to be a threat at all, but active
	$LF
	"constantly), and their behaviour needs to be manipulated too.  As you
	$LF
	"can see, immediately upon unpetrifying the nymph, a pair of coyotes
	$LF
	"(brown d) turn up, although they are just about out of attack range.
	$LF
]div
[h4 id=Turn478 
	" Turn 478
	$LF
]h4
[div class=p 
	"Due to our manipulation last turn, the nearer coyote is in range of
	$LF
	"the charm monster spell (which is area-effect), in addition to the
	$LF
	"nymph.  Thus, casting the spell this turn not only has the usual
	$LF
	"effects on the nymph's AI, but also charms the nearer coyote,
	$LF
	"preventing it attacking us, and indirectly attacking the further one
	$LF
	"as well.  This means that we can get away with offensive, defensive,
	$LF
	"and glitch-advancing uses of one spell all in the same turn, a useful
	$LF
	"method of saving actions in a polymorph form as slow as this one.
	$LF
	"(Just leaving the coyotes to attack would have been a bad idea; they
	$LF
	"could deal enough damage to cause a depolymorph quite quickly, and
	$LF
	"while wielding the cockatrice corpse, a depolymorph would mean
	$LF
	"instadeath.)  While the fight happens (and unfortunately, the hostile
	$LF
	"coyote does get in a hit on us), the nymph obligingly drops two stacks
	$LF
	"of 3920 gold pieces, so we now have a stack of 7840 gold on the
	$LF
	"ground.
	$LF
]div
[h4 id=Turn480 
	" Turn 480
	$LF
]h4
[div class=p 
	"More multitasking, and more manipulation of lots of things
	$LF
	"simultaneously.  We hit the hostile coyote with the cockatrice corpse
	$LF
	"(hey, if we're wielding a weapon this powerful, may as well use it,
	$LF
	"right?) and trigger random teleportitis, which we use to move just one
	$LF
	"square.  Meanwhile the tame coyote moves up to box in the nymph (she
	$LF
	"was showing something of a tendency to run away rather than pick up
	$LF
	"the gold otherwise), and the nymph picks up the gold.
	$LF
]div
[h4 id=Turns482486 
	" Turns 482-486
	$LF
]h4
[div class=p 
	"Continuing with repeats of the glitch; we stone, unstone, charm, and
	$LF
	"the nymph drops two stacks of 7840 gold, so the new stack is 15680
	$LF
	"gold large.
	$LF
]div
[h4 id=Turn488 
	" Turn 488
	$LF
]h4
[div class=p 
	"It took quite a lot of experimentation to find an action that would
	$LF
	"manipulate the AI suitably this turn.  In the end, it turned out that
	$LF
	"teleporting into the doorway of the Oracle's room worked, and made the
	$LF
	"nymph pick up the gold and move adjacent to us.  Meanwhile, that mummy
	$LF
	"we saw when we entered the level has finally ambled far enough round
	$LF
	"the level that we can actually see it.
	$LF
]div
[h4 id=Turn490 
	" Turn 490
	$LF
]h4
[div class=p 
	"Surprisingly, we actually needed some manipulation here to prevent the
	$LF
	"coyote standing on the nymph statue (which prevents unpetrifying it
	$LF
	"having the right effect), the first time in this sequence that the
	$LF
	"petrification turn has needed to be manipulated.  (The mummy wisely
	$LF
	"decides to run away…)
	$LF
]div
[h4 id=Turns492494 
	" Turns 492-494
	$LF
]h4
[div class=p 
	"Unpetrify, charm, again.  Luckily, walking into walls was enough to
	$LF
	"manipulate these two turns the way we needed them.
	$LF
]div
[h4 id=Turn496 
	" Turn 496
	$LF
]h4
[div class=p 
	"This turn, however, needed something really bizarre to work properly.
	$LF
	"We step away from the nymph, to get her to pick up the gold; then
	$LF
	"teleportitis triggers and we teleport to the square in the other
	$LF
	"direction instead, manipulating the nymph to not drop the gold and to
	$LF
	"be unable to run to a square where we couldn't petrify her.
	$LF
	"Autopickup was turned off in order to avoid picking up the coyote
	$LF
	"statue (we're very near our burden limit at the moment, and it would
	$LF
	"have sent us over the top, making us even slower).
	$LF
]div
[h4 id=Turn498 
	" Turn 498
	$LF
]h4
[div class=p 
	"More standard turning things to stone; meanwhile, a rothe (brown q)
	$LF
	"turns up to join in the fun.  (Hopefully, the various combat going on
	$LF
	"during the glitch helps to vary things up a bit and make it less
	$LF
	"repetitive; in non-TAS runs that used this glitch, it would typically
	$LF
	"be done in a no-teleport area with no other monsters and the nymph in
	$LF
	"a confined area to prevent her running away, but that's not only a lot
	$LF
	"more boring, but makes it much harder to find crazy actions with which
	$LF
	"to manipulate her to do her thing quickly.)
	$LF
]div
[h4 id=Turn500 
	" Turn 500
	$LF
]h4
[div class=p 
	"Although avoiding depolymorph is important, we can survive a turn
	$LF
	"(indeed, around three turns, or more with luck manipulation) against a
	$LF
	"rothe, so we unpetrify the nymph as normal and just ignore the rothe,
	$LF
	"taking a hit so that we can incidentally charm it in the blast of a
	$LF
	"charm monster spell next turn.  Meanwhile, a second rothe comes into
	$LF
	"view.
	$LF
]div
[h4 id=Turn502 
	" Turn 502
	$LF
]h4
[div class=p 
	"We cast charm monster, manipulating both a fight between the two
	$LF
	"rothes (I hope they weren't brothers or something, that would be
	$LF
	"tragic…) and the nymph to both drop two stacks of gold and pick up
	$LF
	"the combined stack within the same one of our turns (we're in such a
	$LF
	"slow polymorph form that she's getting more turns than we are).
	$LF
	"However, this leaves the nymph out of range of our cockatrice corpse;
	$LF
	"it doesn't actually lose any time, though, as otherwise we'd have to
	$LF
	"wait for the nymph to pick up the money, rather than to make her wait
	$LF
	"for us to get into petrification range.
	$LF
]div
[h4 id=Turn504 
	" Turn 504
	$LF
]h4
[div class=p 
	"We move into range of the nymph.  The rothe fight continues, but we
	$LF
	"can no longer see what's happening because walls get in the way, so we
	$LF
	"merely hear the combat continue.
	$LF
]div
[h4 id=Turn506 
	" Turn 506
	$LF
]h4
[div class=p 
	"More standard petrification of the nymph.  However, the rothe moves up
	$LF
	"towards the nymph; this was hard to avoid, and ends up benefiting us
	$LF
	"eventually, but makes life harder over the next couple of turns.
	$LF
]div
[h4 id=Turn508 
	" Turn 508
	$LF
]h4
[div class=p 
	"This is why the rothe being near is an issue; the charmed rothe, and
	$LF
	"the hostile-for-two-turns nymph, are obviously hostile to each other,
	$LF
	"and so fight as soon as the nymph is unpetrified again.  We clearly
	$LF
	"don't want the nymph to die; but we also don't want her to steal
	$LF
	"anything from the rothe, as it would make her teleport away.  Luckily,
	$LF
	"the rothe doesn't have any items at the moment, so her steal attacks
	$LF
	"fail, and it doesn't do enough damage to kill her either.
	$LF
]div
[h4 id=Turn510 
	" Turn 510
	$LF
]h4
[div class=p 
	"Recharming the nymph again; she now drops two stacks of 62720 gold
	$LF
	"pieces.  (The great thing about doubling-up glitches like this is the
	$LF
	"exponential growth; overflowing a counter would take far too long
	$LF
	"otherwise.)  Meanwhile, the hostile rothe runs up to us, ready to
	$LF
	"attack, but doesn't quite reach us before our turn.
	$LF
]div
[h4 id=Turns512516 
	" Turns 512-516
	$LF
]h4
[div class=p 
	"As if there weren't enough statues around here already, we use our
	$LF
	"turn to turn the hostile rothe to stone, while the nymph picks up the
	$LF
	"gold again.  Then we follow the normal routine of stone, unstone,
	$LF
	"manipulating the charmed rothe to not get in the way.
	$LF
]div
[h4 id=Turns518534 
	" Turns 518-534
	$LF
]h4
[div class=p 
	"We've now cast enough stone-to-flesh spells that we get a chance to
	$LF
	"train our healing spell ability; we take it, in order to reduce the
	$LF
	"fail chance for the spell to zero.  (This is mostly just to make luck
	$LF
	"manipulation easier and less frustrating, and it doesn't take any
	$LF
	"in-game time.)  Then we continue as before: charm the nymph into
	$LF
	"dropping gold, manipulate her into picking it up again (this time by
	$LF
	"stepping away from her), petrify her, unpetrify her.  (At this point,
	$LF
	"in a slight change to the routine, we trigger teleportitis and
	$LF
	"teleport next to her, as she would otherwise be out of range for the
	$LF
	"charm monster spell.)  Then the routine continues, with us performing
	$LF
	"random-looking movements interspersed with stoning, unstoning, and
	$LF
	"charming (catching yet another hostile rothe in the area of effect to
	$LF
	"prevent it being a problem); at the end of turn 534, the nymph has
	$LF
	"picked up a stack of just over a million gold pieces, and another
	$LF
	"monster turns up (the mummy that was following us earlier, a gray M,
	$LF
	"which turns out to be an orc mummy).
	$LF
]div
[h4 id=Turns536540 
	" Turns 536-540
	$LF
]h4
[div class=p 
	"A million gold pieces might be a huge amount by both real-life
	$LF
	"standards, and compared to a typical NetHack game, but it's not enough
	$LF
	"to overflow the gold counter, so we continue with the same routine,
	$LF
	"ignoring the orc mummy for now: stone, unstone, charm, moving into
	$LF
	"position when necessary.  The orc mummy gets several hits in (reducing
	$LF
	"us to less than half health) but eventually ends up getting caught in
	$LF
	"the radius of a charm effect, and drops some money itself (a pitiful
	$LF
	"19 gold pieces, compared to the millions that the nymph dropped).
	$LF
]div
[h4 id=Turns542572 
	" Turns 542-572
	$LF
]h4
[div class=p 
	"The next cycle of the glitch requires unusual actions again; this
	$LF
	"time, we swap places with the orc mummy, which is apparently what was
	$LF
	"needed to manipulate the nymph into picking up the gold.  Then stone,
	$LF
	"choose not to change polymorph form when polymorphitis randomly
	$LF
	"triggers (this extends the duration of our polymorph, so that we can
	$LF
	"get the glitch finished without randomly instadying), unstone (which
	$LF
	"happens to catch the statue of a coyote in the same beam, but it gets
	$LF
	"finished off by the charmed monsters almost instantly), charm, move
	$LF
	"into position, stone, unstone (and one of the rothes decides, rather
	$LF
	"cutely, that maybe it should fetch that 19 gold for me), charm (and
	$LF
	"watch a fourth rothe turn up and start fighting the charmed rothes),
	$LF
	"teleport past the Oracle (oh, the weird actions needed to manipulate
	$LF
	"monster AIs), stone, unstone, charm, charm again (to manipulate AI),
	$LF
	"stone, unstone, charm.  After a while, there's only so much that can
	$LF
	"be said about the glitch…
	$LF
]div
[h4 id=Turn574 
	" Turn 574
	$LF
]h4
[div class=p 
	"This turn was a bit of a break from the norm just because the
	$LF
	"manipulation was unusually difficult; we got the nymph to pick up the
	$LF
	"gold using nothing but walking into walls, but it took a surprisingly
	$LF
	"large number of manipulations.  The nymph now has 32112640 gold
	$LF
	"pieces.
	$LF
]div
[h4 id=Turns576598 
	" Turns 576-598
	$LF
]h4
[div class=p 
	"More standard gold duplication: stone, unstone, charm, teleportitis to
	$LF
	"manipulate AI, wait one turn for the nymph to pick gold up again, step
	$LF
	"towards the nymph, stone, unstone, charm, wait for the nymph to pick
	$LF
	"up gold, stone, unstone, charm…
	$LF
]div
[h4 id=Turn600 
	" Turn 600
	$LF
]h4
[div class=p 
	"This turn was another one that require a lot of manipulation; it
	$LF
	"seemed that doing it before stoning the nymph helped get a good random
	$LF
	"behaviour sequence when she was unstoned again.  More interestingly,
	$LF
	"though, this was turn 600, significant because some things in the game
	$LF
	"happen on 600-turn timers, either every 600 turns, or first on turn
	$LF
	"600 and then randomly after that.  In this case, two things happened:
	$LF
	"we regained a point of luck (not visible to the character, but luck
	$LF
	"penalties time out at the rate of 1 point per 600 turns, changing on
	$LF
	"multiples of 600), and we gained a point of Wisdom (which is visible
	$LF
	"and produced a message), due to the "exercise timer".  The way this
	$LF
	"works is that the game tracks which of your actions are likely to
	$LF
	"increase and decrease your stats, and every so often changes your
	$LF
	"stats according to whether you've been exercising or abusing them.  In
	$LF
	"our case, we just got a Wisdom boost; this has very minor positive
	$LF
	"effects, but is mostly irrelevant (and in fact, our abilities are
	$LF
	"pretty much irrelevant overall, which is why we didn't manipulate the
	$LF
	"exercise timer).
	$LF
]div
[h4 id=Turns602610 
	" Turns 602-610
	$LF
]h4
[div class=p 
	"More continuing with the same old glitch: stone, unstone, charm, wait
	$LF
	"a turn for AI manipulation, stone again.  At this point, the game does
	$LF
	"a check to see what the Wizard of Yendor will do from beyond the
	$LF
	"grave (this cannot be manipulated away, and its timing is set when we
	$LF
	"kill the Wizard).  However, we can manipulate what the event is, and
	$LF
	"we manipulate it to a neutral result (in fact, the only neutral
	$LF
	"result, with all the others generally being bad except for a TAS):
	$LF
	""You feel vaguely nervous.", which simply causes the Wizard of
	$LF
	"Yendor to do nothing this time, and just set the timing for his next
	$LF
	"reappearance.
	$LF
]div
[h4 id=Turns612628 
	" Turns 612-628
	$LF
]h4
[div class=p 
	"With Rodney safely out of the way, we can continue the glitch.
	$LF
	"Unstone, charm (and the nymph drops over a billion gold pieces, but
	$LF
	"even that isn't enough for us!), wait one turn to manipulate AI, stone
	$LF
	"again, polymorphitis into a stone golem again to refresh the polymorph
	$LF
	"timeout, unstone, charm (nymph drops over 2 billion gold pieces), wait
	$LF
	"a turn for AI manipulation, stone nymph, unstone nymph.
	$LF
]div
[h4 id=Turn630 
	" Turn 630
	$LF
]h4
[div class=p 
	"Finally, we've reached the end of our huge, long, repetitive, AI
	$LF
	"manipulating glitch session.  At this point, for the pattern to
	$LF
	"continue, the nymph should drop just over 4 billion gold pieces if we
	$LF
	"charm her.  However, gold is stored in a 32-bit signed integer, which
	$LF
	"just goes up to a little over 2 billion (but higher than our just over
	$LF
	"2 billion value used for the gold); so as soon as the nymph drops the
	$LF
	"gold, we get an overflow.  Instead of charming the nymph, we just kill
	$LF
	"her with our force bolt spell, which has the same effect of making her
	$LF
	"drop her gold.  The two stacks of over 2 billion gold drop on the
	$LF
	"ground, and combine to form a stack of -184549376 gold pieces.  (We
	$LF
	"also trigger teleportitis on the same turn to move over to the
	$LF
	"negative gold more quickly.)
	$LF
]div
[h4 id=Turn632 
	" Turn 632
	$LF
]h4
[div class=p 
	"After we've gone to all that trouble to produce negative gold, we pick
	$LF
	"it up, in order to enjoy its strange properties.  The major useful
	$LF
	"property for a TAS (or indeed, an unassisted run) is the weight of the
	$LF
	"gold; a negative quantity of gold has negative weight.  The result is
	$LF
	"that once the gold is in our wallet, the negative weight of the wallet
	$LF
	"cancels out the weight of anything else we might want to carry,
	$LF
	"effectively leading to infinite carry capacity (there's a separate
	$LF
	"limit of 52 items in open inventory, but if we needed to circumvent
	$LF
	"that we could do so using containers).  From now on, we don't need to
	$LF
	"worry about the strength or carry capacity of the polymorph forms we
	$LF
	"change into; we can just use the amazing properties of antigold to
	$LF
	"sweep the problem under the carpet, meaning that we have a much wider
	$LF
	"range of forms to choose from in the future (many polymorph forms are
	$LF
	"unusable in normal play due to their tiny carry capacities).
	$LF
]div
[div class=p 
	"Of course, this sort of glitch often comes with bizarre side-effects.
	$LF
	"The most obvious one in the case of this glitch in particular is that
	$LF
	"the stack of antigold cannot be split; we have to move the entire
	$LF
	"stack at at time, and cannot adjust its size in any way (except by
	$LF
	"picking up regular gold to cancel out the antigold).  Luckily, this
	$LF
	"isn't much of a problem.  The antigold also reacts strangely to a
	$LF
	"variety of other commands, generally in negative ways; but we don't
	$LF
	"care about that, as we can just leave it in inventory.  Finally, it
	$LF
	"prevents us doing anything that might require us to own a positive
	$LF
	"amount of gold, but that isn't much of an issue anyway, as most such
	$LF
	"actions aren't useful to the run (there's one that would be, absolving
	$LF
	"alignment, but it can't be done before turn 5000, and if we spent that
	$LF
	"long we wouldn't even beat the unassisted record).
	$LF
]div
[h4 id=Turn634 
	" Turn 634
	$LF
]h4
[div class=p 
	"(Around this time we changed the platform we were using for
	$LF
	"virtualization from VirtualBox to KVM which significantly improved the
	$LF
	"restore time between luck manipulation attempts (moving to a faster
	$LF
	"computer shortly after the switch didn't hurt either).  This proved to
	$LF
	"be especially helpful in the next two sections which required a
	$LF
	"significant amount of luck manipulation in order to trigger things
	$LF
	"like teleporting, polymorphing, and attack damage levels.)
	$LF
]div
[div class=p 
	"Now that we can carry anything we like we immediately abuse it by
	$LF
	"picking up every remaining statue on the level.  We trigger a teleport
	$LF
	"to land in the upper-right corner, immediately picking up a statue of
	$LF
	"a mountain centaur.
	$LF
]div
[h4 id=Turns6361163722 
	" Turns 636(1/1)-637(2/2)
	$LF
]h4
[div class=p 
	"Between turns at the end of turn 635 (start of turn 636), we
	$LF
	"manipulate a polymorph to trigger.  Our stone golem form has served us
	$LF
	"well but it's time to switch to something a bit faster so we become a
	$LF
	"queen bee (purple a).  This form isn't used frequently due to its
	$LF
	"incredibly poor carry capacity (generally insufficient to carry even a
	$LF
	"single item, as might be expected of a bee), but with the power of
	$LF
	"antigold, carrying several full-size statues is no problem.
	$LF
	"Polymorphing into a queen bee causes us to drop our weapon because we
	$LF
	"no longer have any hands, making us let go of the cockatrice corpse
	$LF
	"we've been (ab)using just before it has a chance to turn us to stone.
	$LF
]div
[div class=p 
	"NetHack's speed system is slightly confused by polymorphs;
	$LF
	"polymorphitis triggering doesn't actually affect the actions per turn
	$LF
	"count until the turn after.  Thus, we get one action on turn 636, as
	$LF
	"would be correct for a stone golem (because we got no actions on turn
	$LF
	"635).  Now that we're a queen bee, though, we get two actions on every
	$LF
	"turn from turn 637 onwards.  (We abbreviate the actions-inside-turn
	$LF
	"count from now on, because many of the turns will have multiple
	$LF
	"actions and it would be wordy to write it out every time.)  It's not
	$LF
	"far to the next statue so we fly down and to the left and pick up a
	$LF
	"statue of a plains centaur.
	$LF
]div
[h4 id=Turn6381263822 
	" Turn 638(1/2)-638(2/2)
	$LF
]h4
[div class=p 
	"We fly down a couple of spaces to trigger teleportitis and hop to the
	$LF
	"upper-left corner of the room to grab a statue of a forest centaur.
	$LF
]div
[h4 id=Turns6391263922 
	" Turns 639(1/2)-639(2/2)
	$LF
]h4
[div class=p 
	"A large amount of luck manipulation gets us a teleportitis teleport on
	$LF
	"the edge of the turn (as always, teleportitis only happens at the end
	$LF
	"of a turn), so we had to wait to skip the first action of turn 639.
	$LF
	"This nets us a statue of a mountain centaur.
	$LF
]div
[h4 id=Turns6401264212 
	" Turns 640(1/2)-642(1/2)
	$LF
]h4
[div class=p 
	"Rather than forcing a teleport through Ctrl+T (which uses nutrition)
	$LF
	"or manipulating a teleport through wallwalking (which proved to
	$LF
	"require an unusually large number of wallwalks), we instead simply
	$LF
	"fly to the next statue, which is a plains centaur.
	$LF
]div
[h4 id=Turns6422264322 
	" Turns 642(2/2)-643(2/2)
	$LF
]h4
[div class=p 
	"Teleportitis gets us to another plains centaur to the right of the
	$LF
	"room the oracle is in.  Again, it proves hard to manipulate on this
	$LF
	"level (which is rather prone to RNG jitter), and thus the end of turn
	$LF
	"643 had to be used rather than 642 in order to avoid a massive luck
	$LF
	"manipulation delay, with the movements in between serving to advance
	$LF
	"the RNG the right distance.
	$LF
]div
[h4 id=Turns6441264422 
	" Turns 644(1/2)-644(2/2)
	$LF
]h4
[div class=p 
	"After some manipulation, we wait another two actions to trigger
	$LF
	"teleportitis; it triggers at the end of turn 644, and we finally pick
	$LF
	"up the last statue, a forest centaur.
	$LF
]div
[h4 id=Turn64512 
	" Turn 645(1/2)
	$LF
]h4
[div class=p 
	"It's now time to fix our alignment, which at this point is somewhere
	$LF
	"near -325 (an astronomically, unrealistically bad alignment) as well
	$LF
	"as our luck (-7; the lower cap is -10, but there's a +3 bonus to our
	$LF
	"luck provided by the Orb of Fate that's unaffected by caps).  This is
	$LF
	"a side effect of the infinite carry capacity glitch; turning a charmed
	$LF
	"monster (such as the nymph) to stone carries a 15-point alignment
	$LF
	"penalty, as well as a 1-point luck penalty.  There are a number of
	$LF
	"ways to fix bad alignment but most of them are incredibly
	$LF
	"time-consuming (and more than likely boring).  One way to raise
	$LF
	"alignment is to kill monsters; each kill gives us a few points of
	$LF
	"positive alignment (typically around 5 per kill) to help us dig our
	$LF
	"way out of the hole we're in.  No RPG would be complete without a bit
	$LF
	"of grinding, but with that said, this is a TAS of an RPG, so if
	$LF
	"there's going to be grinding we might as well make it a one-sided
	$LF
	"slaughter-fest.
	$LF
]div
[div class=p 
	"There aren't nearly enough monsters on the Oracle level for our
	$LF
	"purposes, so the next matter of business is levelporting somewhere
	$LF
	"else.  We would ordinarily use the Orb to levelport, but this is not
	$LF
	"currently possible due to our horrible alignment (with negative
	$LF
	"alignment, none of our current artifacts will obey us).  We have two
	$LF
	"cursed scrolls of teleport left so we read one now and choose to
	$LF
	"levelport to level 25, which may look familiar.  We're back at the
	$LF
	"Castle, but this time, because we arrived from above, we're at the
	$LF
	"front entrance in a little maze on the left.
	$LF
]div
[h4 id=Turn64522 
	" Turn 645(2/2)
	$LF
]h4
[div class=p 
	"One of the rothes we charmed happened to follow us from the oracle
	$LF
	"level, but we'll essentially ignore it completely, as we've had a
	$LF
	"habit of doing with charmed monsters lately.  We displace it (swapping
	$LF
	"places with it) to get closer to a minotaur that happens to be
	$LF
	"wandering around in the left maze area.
	$LF
]div
[h4 id=Turn64612 
	" Turn 646(1/2)
	$LF
]h4
[div class=p 
	"A minotaur is a very powerful monster but we go slightly out of our
	$LF
	"way to prove a point – don't mess with a queen bee that has the
	$LF
	"ability to dispense deadly poison.  Bees in NetHack have three
	$LF
	"attacks: regular sting, poisoned sting, and deadly poisoned sting, and
	$LF
	"which one is used is random.  With a little bit of manipulation, our
	$LF
	"first attack stings the minotaur, the sting turns out to be poisoned,
	$LF
	"and in fact our poison turns out to be deadly, killing any
	$LF
	"non-poison-resistant enemy (such as the minotaur) outright.  This is a
	$LF
	"very unlikely result, making it another reason why queen bee form is
	$LF
	"bad for regular play, but the ability to manipulate it makes it very
	$LF
	"powerful in a TAS.
	$LF
]div
[div class=p 
	"It's worth noting that deadly poison is more famous for working
	$LF
	"against the player, rather than in favour, being a common cause of
	$LF
	"early near-unavoidable deaths if the Random Number Generator is
	$LF
	"feeling particularly cruel that day.  The attack we saw here (which is
	$LF
	"used by some other things too, such as spiked pits) is a major reason
	$LF
	"why poison resistance is considered one of the most vital resistances
	$LF
	"in NetHack.  (In a TAS, though, it isn't needed, as anything that
	$LF
	"would poison us can simply be manipulated away.)
	$LF
]div
[h4 id=Turns6462265022 
	" Turns 646(2/2)-650(2/2)
	$LF
]h4
[div class=p 
	"Unlike the Oracle level, the Castle is a no-teleport level, so we have
	$LF
	"to walk (or in our case, fly) wherever we go.  We deftly buzz past our
	$LF
	"rothe and head toward the entrance to the Castle.
	$LF
]div
[h4 id=Turn65112 
	" Turn 651(1/2)
	$LF
]h4
[div class=p 
	"We meet an Aleax and immediately run into a conundrum – an Aleax has
	$LF
	"various resistances, and specifically, has resistance to poison.  This
	$LF
	"negates our ability to perform a oneshot kill (or even damage it
	$LF
	"significantly), so instead we completely ignore it by flying over the
	$LF
	"castle moat (which we can do in bee form).  We manipulate the Aleax to
	$LF
	"change weapons rather than attack, and we also manipulate a giant eel
	$LF
	"that was hidden under the water in the moat to miss us twice (for the
	$LF
	"first attack we cannot see it, so we just get "It misses.", for the
	$LF
	"second attack it has surfaced so we get "The giant eel brushes against
	$LF
	"your rear limb.").  Note that we could not have afforded a hit from
	$LF
	"the eel, as they have a two-turn instadeath attack that would have
	$LF
	"been hard to escape except via immediate level teleport or polyself.
	$LF
]div
[h4 id=Turns6511265312 
	" Turns 651(1/2)-653(1/2)
	$LF
]h4
[div class=p 
	"After leaving the Aleax and the eel behind (we easily outspeed them
	$LF
	"both), we approach the Castle's drawbridge.  Typically, speedrunners
	$LF
	"would use a musical instrument to play a game of Mastermind against
	$LF
	"the drawbridge (which consumes no in-game time), eventually causing it
	$LF
	"to open, but we have no musical instrument, and anyway no usable hands
	$LF
	"to play it with (musical instruments are typically not designed to be
	$LF
	"played by bees).  Instead, we just hit it with a force bolt (ever a
	$LF
	"useful spell against inanimate objects), causing the drawbridge to
	$LF
	"fall into the moat.
	$LF
]div
[h4 id=Turn65322 
	" Turn 653(2/2)
	$LF
]h4
[div class=p 
	"As we fly toward the drawbridge and into the courtyard, a mysterious
	$LF
	"force prevents us from teleporting (the usual message obtained upon
	$LF
	"attempts to teleport on a no-teleport level); this was an
	$LF
	"un-manipulated triggering of teleportitis, but it has no effect here,
	$LF
	"so we can simply ignore it.
	$LF
]div
[h4 id=Turns6541265512 
	" Turns 654(1/2)-655(1/2)
	$LF
]h4
[div class=p 
	"Just inside the castle's courtyard, we meet our first of many
	$LF
	"soldiers.  We happen to be next to a wall so manipulating an instant
	$LF
	"kill is trivial.  NetHack queen bees can apparently kill more than
	$LF
	"once just as well as their real-life counterparts.
	$LF
]div
[h4 id=Turns6552265822 
	" Turns 655(2/2)-658(2/2)
	$LF
]h4
[div class=p 
	"We make a beeline across the courtyard (pun intended) and enter a
	$LF
	"narrow corridor that leads to the throne room.
	$LF
]div
[h4 id=Turns6591266122 
	" Turns 659(1/2)-661(2/2)
	$LF
]h4
[div class=p 
	"As we enter the corridor a number of thrown projectiles miss us
	$LF
	"(thanks to luck manipulation), all thrown by enemies we cannot see.  A
	$LF
	"number of monsters are referred to as "it" as we fly through this
	$LF
	"section and are shown on the screen as red numbers such as 1 and 2 (a
	$LF
	"consequence of the Orb of Fate's "warning" feature, which locates
	$LF
	"nearby monsters and assigns numbers to them according to how dangerous
	$LF
	"they are).  The full magnitude of how many monsters are nearby should
	$LF
	"be more apparent now, but we'll worry about the monsters on the other
	$LF
	"side of the wall later.  For now, we barrel down the corridor directly
	$LF
	"into a soldier who we quickly take out.
	$LF
]div
[h4 id=Turns6621266322 
	" Turns 662(1/2)-663(2/2)
	$LF
]h4
[div class=p 
	"A common theme on this level is that we completely ignore corpses and
	$LF
	"anything a monster may have been holding before turning green and
	$LF
	"immediately keeling over; there are a huge number of items dropped on
	$LF
	"this level, but they are typically standard soldier equipment, which
	$LF
	"is not useful to a run heavily based around polyself, and which would
	$LF
	"clog up our 52 inventory slots if we picked it up (although of course
	$LF
	"the weight is irrelevant).  We fly over the corpse we just created and
	$LF
	"run smack-dab into a gnome mummy.  As with the Aleax the gnome mummy
	$LF
	"is resistant to poison attacks (being undead), but being in a
	$LF
	"corridor, we can't just fly around it like we did before; instead, our
	$LF
	"options are to repeatedly sting the gnome mummy with our normal attack
	$LF
	"(which would take a very long time), or to ignore the problem by yet
	$LF
	"again employing charm monster (which is possibly the most broken spell
	$LF
	"in the game, although some we use later arguably compete).  Walking to
	$LF
	"the right displaces our new pet gnome mummy, and we proceed down the
	$LF
	"corridor to meet our next fate.
	$LF
]div
[h4 id=Turns6641266522 
	" Turns 664(1/2)-665(2/2)
	$LF
]h4
[div class=p 
	"After oneshotting a couple of soldiers (and manipulating a miss by
	$LF
	"another) we approach a xorn that's embedded in the wall (remember the
	$LF
	"xorn we came across hundreds of turns earlier, back when we were a
	$LF
	"xorn as well?).  The xorn may be able to phase through walls, but our
	$LF
	"deadly poison quickly creates a xorn corpse in the wall.  (It would be
	$LF
	"possible to free it from the wall if it were useful for anything, but
	$LF
	"there's no reason to bother.)
	$LF
]div
[h4 id=Turns6661266622 
	" Turns 666(1/2)-666(2/2)
	$LF
]h4
[div class=p 
	"After taking out another soldier we meet yet another poison-resistant
	$LF
	"monster, in the form of a dwarf mummy.  Instead of taming it like we
	$LF
	"did with the gnome mummy, we instead wait one action to allow turn 666
	$LF
	"to end, manipulating a polymorph at the turn boundary.  We turn into a
	$LF
	"jabberwock (orange J), as the next few enemies on the level are all
	$LF
	"poison resistant.  Being a Jabberwock isn't as fast as a queen bee
	$LF
	"(it's the same speed as our natural, gnomish form), but it's great at
	$LF
	"destroying monsters regardless of poison resistance, with probably the
	$LF
	"most powerful standard melee attack in the game (it hits four times
	$LF
	"per action, for huge damage each time).
	$LF
]div
[h4 id=Turns6671266722 
	" Turns 667(1/2)-667(2/2)
	$LF
]h4
[div class=p 
	"We take out the dwarf mummy in one action's worth of attacks, then
	$LF
	"move onto the next monster.  Note that we got two actions this turn
	$LF
	"despite being in a one-action-per-turn form, again exploiting the
	$LF
	"turn's delay between a polymorph and its effects on the speed system.
	$LF
]div
[h4 id=Turn668 
	" Turn 668
	$LF
]h4
[div class=p 
	"The (guaranteed) liches in the Castle are generally some of the most
	$LF
	"dangerous monsters there (knowing a variety of spells, sometimes
	$LF
	"including annoying spells like item cursing or armour destruction, and
	$LF
	"possibly even instadeaths if the player was at a high enough level
	$LF
	"when the level was generated).  However, the huge attack power of a
	$LF
	"jabberwock makes it look as trivial as many of the other enemies
	$LF
	"around here.
	$LF
]div
[h4 id=Turns669670 
	" Turns 669-670
	$LF
]h4
[div class=p 
	"After the lich, the next monster, the human zombie, is rather easier
	$LF
	"in general, but we still manipulate monsters to miss us (or in one
	$LF
	"case, hit each other by mistake and miss us that way).
	$LF
]div
[h4 id=Turn671 
	" Turn 671
	$LF
]h4
[div class=p 
	"We start hitting a literate lieutenant, triggering a polymorph back
	$LF
	"into a queen bee at the turn boundary so we have more actions per turn
	$LF
	"to work with.  Meanwhile, the lieutenant reads a scroll labeled THARR,
	$LF
	"which happens to be a scroll of create monster (and a glass piercer
	$LF
	"appears behind the lieutenant as a result); this is not a problem for
	$LF
	"us at all, because the created monster just gives us even more things
	$LF
	"to kill on our killing spree.
	$LF
]div
[h4 id=Turns6721167322 
	" Turns 672(1/1)-673(2/2)
	$LF
]h4
[div class=p 
	"We're easily able to finish off the lieutenant, and the glass piercer
	$LF
	"he summons; it apparently also has an adverse reaction when stung with
	$LF
	"poison.  Meanwhile, the game tells us that the monsters have become
	$LF
	""aware of your presence"; this is actually a result of an offscreen
	$LF
	"demilich casting the "aggravate" spell (which locates enemies, even
	$LF
	"outside LOS, and causes them to broadcast their location to
	$LF
	"surrounding monsters).  The result is beneficial to us, as it causes
	$LF
	"monsters to tend to come to us rather than us having to chase them.
	$LF
	"(Again, notice the wonky actions-in-turn count caused by the
	$LF
	"polymorph.)
	$LF
]div
[h4 id=Turn6741267522 
	" Turn 674(1/2)-675(2/2)
	$LF
]h4
[div class=p 
	"As we enter the opulent throne room, we meet a disenchanter; it took
	$LF
	"an unusually high amount of manipulation, but the disenchanter was
	$LF
	"eventually poisoned, followed by a hapless soldier trapped in the
	$LF
	"action.  At this point it is possible to see a large number of
	$LF
	"monsters on either side of the throne room but we'll leave the ones by
	$LF
	"the throne itself alone for now.  We take some damage from a human
	$LF
	"zombie (we ignore it, as we cannot oneshot it and it would waste time
	$LF
	"to change form to eliminate it that way, and making it miss proved far
	$LF
	"too time-consuming to manipulate in addition to the oneshots), so
	$LF
	"instead we turn our focus on a hapless rust monster.  These guaranteed
	$LF
	"equipment-damaging monsters are very annoying to most NetHack players,
	$LF
	"but we avoid any problems with them not merely by killing them
	$LF
	"quickly, but by not having any equipment in the first place.
	$LF
]div
[h4 id=Turn67612 
	" Turn 676(1/2)
	$LF
]h4
[div class=p 
	"We're currently blocked by a purple "4"; this is a demilich, by far
	$LF
	"the most powerful monster on the level, as it has a dangerous
	$LF
	"repertoire of spells (including the invisibility spell that prevents
	$LF
	"us seeing what it is).  It's impossible to walk diagonally out of a
	$LF
	"door in NetHack; however, we have the "jump" spell memorised from
	$LF
	"earlier, so we simply jump diagonally through the doorway to the space
	$LF
	"the rust monster had been in (the range is somewhat limited at the
	$LF
	"moment due to our lack of practice in escape spells).  We still can't
	$LF
	"see the demilich, but it uses its weak melee attack to cover us in
	$LF
	"frost causing some minor damage, and also casts a spell, making
	$LF
	""monsters appear from nowhere!", giving us even more enemies to kill
	$LF
	"for alignment.  It must be a rough crowd.
	$LF
]div
[div class=p 
	"Note that the "jump" spell ends the turn when used; thus, we lose our
	$LF
	"second action in turn 676 and go straight to turn 677.  This was 
	$LF
	"deliberate as jumping later in the turn resulted in less favorable
	$LF
	"monster movement that kept blocking the square we were jumping to.
	$LF
]div
[h4 id=Turns6771267722 
	" Turns 677(1/2)-677(2/2)
	$LF
]h4
[div class=p 
	"It's our turn to do some damage, so we take out the rock troll that
	$LF
	"had just been summoned; but we're immediately clobbered by everything
	$LF
	"from the demilich's frost attack, to a gnome mummy.  This puts us near
	$LF
	"to unpolymorph range; we want to change forms anyway, given all the
	$LF
	"poison-immune undead nearby, but not unpolymorphing means we get to
	$LF
	"carry the two actions per turn over to turn 678.  To waste an action
	$LF
	"to manipulate a polymorph, we sting the gnome mummy, doing irrelevant
	$LF
	"damage but manipulating the random numbers the right way (on a very
	$LF
	"jittery level like the Castle, different actions can have a wildly
	$LF
	"different impact on the number of wallwalks required to manipulate
	$LF
	"something), and polymorph into a jabberwock at the turn boundary.
	$LF
]div
[h4 id=Turns67812682 
	" Turns 678(1/2)-682 
	$LF
]h4
[div class=p 
	"Whilst being pummeled from all sides we take out an earth elemental, a
	$LF
	"gnome mummy, an "it" we can't see (the demilich, which is spamming
	$LF
	"both a regular melee attack and its frost attack), a human zombie, and
	$LF
	"a guardian naga hatchling.  The amount of damage we take through this
	$LF
	"is basically impossible to manipulate away given the cramped
	$LF
	"circumstances and huge number of monsters around us, so instead we
	$LF
	"manipulate a new polymorph to happen just as the old one wears off
	$LF
	"through excessive damage.  (We take a small amount of damage in our
	$LF
	"gnomish form as this happens, taking us from our max of 8,799 HP to
	$LF
	"8,788, an obviously irrelevant injury.)  At the end of turn 682, we
	$LF
	"turn back into a much faster queen bee, now that the nearby poison-
	$LF
	"resistant enemies are gone.
	$LF
]div
[h4 id=Turn6831168412 
	" Turn 683(1/1)-684(1/2)
	$LF
]h4
[div class=p 
	"We use our deadly sting to finish off a soldier, and a baluchitherium,
	$LF
	"while still taking damage from nearby enemies.
	$LF
]div
[h4 id=Turns6842268522 
	" Turns 684(2/2)-685(2/2)
	$LF
]h4
[div class=p 
	"At this point there are still a fair number of enemies that can't be
	$LF
	"seen by the viewer, as well as several unidentified enemies; although
	$LF
	"taking out monsters "blind" can be impressive, the next portion,
	$LF
	"clearing out the barracks, is probably easier to watch with all the
	$LF
	"monsters revealed.  Thus, we cast our "detect monsters" spell to show
	$LF
	"just how much is still left on the level, and to allow the viewers to
	$LF
	"watch the next section with full information as to what is happening.
	$LF
	"(It was a good time to cast the spell for luck manipulation purposes
	$LF
	"as well.) The spell also turns up two adjacent invisible stalkers, and
	$LF
	"we quickly ensure that they can stalk us no more.  Meanwhile, the
	$LF
	"other xorn on this level demonstrates that it's not just players who
	$LF
	"can eat rings.  Whatever it was planning to do with it probably isn't
	$LF
	"nearly as insane as what we've been doing…
	$LF
]div
[h4 id=Turns6861268622 
	" Turns 686(1/2)-686(2/2)
	$LF
]h4
[div class=p 
	"The xorn who just ate a ring, despite being out in the open instead of
	$LF
	"being embedded in the wall, is just as vulnerable to our deadly poison
	$LF
	"as the first one.  (It seems we never will get to find out what it was
	$LF
	"planning with that ring after all.  We can only hope it wasn't
	$LF
	"speedrunning…) There's an ettin nearby which meets a similar fate,
	$LF
	"leaving this part of the throne room mostly empty, save for an air
	$LF
	"elemental that we intentionally leave alone, as it will come in useful
	$LF
	"later.
	$LF
]div
[h4 id=Turns6871268812 
	" Turns 687(1/2)-688(1/2)
	$LF
]h4
[div class=p 
	"We employ our force bolt spell to blast open the door to a narrow room
	$LF
	"that serves as a barracks and is chock full of soldiers, lieutenants,
	$LF
	"and various other officers.  We're in queen bee form with 12 health as
	$LF
	"we step into the threshold of the room and enter the military barracks
	$LF
	"which triggers melee and ranged attacks from every soldier that thinks
	$LF
	"they can hit us with something.  We manipulate them all to miss us,
	$LF
	"although several attacks hit the soldiers themselves in the confusion
	$LF
	"(and to add to the fun, one of the soliders has a wand of sleep, which
	$LF
	"would probably mean near-certain unpolymorph for us if it hit as we
	$LF
	"have no sleep resistance).
	$LF
]div
[h4 id=Turns6882270112 
	" Turns 688(2/2)-701(1/2)
	$LF
]h4
[div class=p 
	"There are 12 soldiers, 1 lieutenant, 4 sergeants, and one captain in
	$LF
	"the upper barracks.  To say that what happens here is a slaughter is
	$LF
	"an understatement.  Knives and daggers are thrown, sleep rays ricochet
	$LF
	"around the barracks, short swords are thrust, and military personnel
	$LF
	"of all caliber are mown down by a crazed queen bee on a mission of
	$LF
	"alignment improvement; throughout the fight, we manipulate every
	$LF
	"single attack against us to miss.  Some highlights are using a force
	$LF
	"bolt at turn 690(1/2) and 694(1/2) to manipulate soldier positions and
	$LF
	"damage multiple soldiers at once, a bubbly potion thrown on the enemy
	$LF
	"turn at the end of 694(1/2) which we don't bother to name (because we
	$LF
	"know what every item in the game is anyway via memory watch; it's an
	$LF
	"uncursed potion of paralysis), and the fact that we essentially just
	$LF
	"keep going left in a straight line without slowing down.
	$LF
]div
[h4 id=Turn70122 
	" Turn 701(2/2)
	$LF
]h4
[div class=p 
	"We're now standing knee-deep (rather deeper, in fact, given how short
	$LF
	"a bee's legs are) in a pile of 18 corpses (strewn about the barracks)
	$LF
	"still with 12 health and a lot of blood on our stinger; but there's
	$LF
	"another barracks to clear out.  Our alignment is at -135, much better
	$LF
	"than it was, but still a long way off from +0 where we need it to be.
	$LF
]div
[h4 id=Turns7021270612 
	" Turns 702(1/2)-706(1/2)
	$LF
]h4
[div class=p 
	"The trip to the lower barracks is relatively uneventful, although at
	$LF
	"turn 704(1/2) we ignore a poison resistant guardian naga hatchling,
	$LF
	"and at turn 705(1/2) we fly one step away from the wall to avoid being
	$LF
	"attacked by the air elemental which we want to keep alive for now.
	$LF
]div
[h4 id=Turn70622 
	" Turn 706(2/2)
	$LF
]h4
[div class=p 
	"As with the other barracks door we use a force bolt to get it out of
	$LF
	"the way.  Unlike the other barracks, we throw caution to the wind and
	$LF
	"allow ourselves to be surrounded by soldiers, just to mix things up a
	$LF
	"bit; instead of going for a flawless clearance like we did with the
	$LF
	"first barracks, we instead show just how easily we can survive even
	$LF
	"hopeless-looking situations like being completely boxed in by
	$LF
	"monsters.
	$LF
]div
[h4 id=Turn70712 
	" Turn 707(1/2)
	$LF
]h4
[div class=p 
	"Also as with the last barracks entrance there is a lot of action as
	$LF
	"soon as we step into the doorway.  We take some damage at various
	$LF
	"points while going through the second barracks, including here.
	$LF
]div
[h4 id=Turns7072270912 
	" Turns 707(2/2)-709(1/2)
	$LF
]h4
[div class=p 
	"We exact our revenge for our recent wound by flying into the corner
	$LF
	"and commencing a familiar slaughter.
	$LF
]div
[h4 id=Turn70922 
	" Turn 709(2/2)
	$LF
]h4
[div class=p 
	"We want to be truly surrounded so we opt to jump to the empty space
	$LF
	"down and two spaces to our left.  This jump might seem implausible,
	$LF
	"especially for a bee; given that we're doing it via spellcasting,
	$LF
	""it's magic" seems like a plausible enough explanation, except that
	$LF
	"nonmagical jumping sources would allow the same effect.
	$LF
]div
[h4 id=Turns7101272322 
	" Turns 710(1/2)-723(2/2)
	$LF
]h4
[div class=p 
	"Now that we're in the thick of things we return to our modus operandi,
	$LF
	"which is to say we poison everything in sight.  Interesting moments in
	$LF
	"this segment include unpolymorphing at turn 711(1/2) and
	$LF
	"re-polymorphing into a bee at the end of turn 711 (this causes us to
	$LF
	"lose one action on turn 712 as a result of polymorph time system
	$LF
	"delay, although this was an acceptable trade-off as it allowed for
	$LF
	"better monster manipulation), re-casting detect monsters at turn
	$LF
	"719(1/2), and the lack of the soldiers doing anything interesting
	$LF
	"(which is to say, anything that the soldiers did that impeded us has
	$LF
	"been manipulated away).  After clearing out the second barracks, our
	$LF
	"alignment is now at -30.
	$LF
]div
[h4 id=Turns7241272822 
	" Turns 724(1/2)-728(2/2)
	$LF
]h4
[div class=p 
	"We now follow the lower wall and avoid a couple of boulders that are
	$LF
	"thrown at us before reaching and defeating the thrower, a stone giant,
	$LF
	"followed by a rock troll who happens to be holding a cream pie for
	$LF
	"reasons known only to him.  (This item is key to one of the most
	$LF
	"powerful glitches in NetHack, an arbitrary memory corruption glitch,
	$LF
	"which is not used in this run because it can trivialize basically the
	$LF
	"entire game, making nearly all this strategy redundant.  We may make a
	$LF
	"glitched run that abuses it at some point, but it's hard to work out
	$LF
	"the best way to use it.)
	$LF
]div
[h4 id=Turns7291273422 
	" Turns 729(1/2)-734(2/2)
	$LF
]h4
[div class=p 
	"Our next target is a troll, then a diagonal jaunt up and to the
	$LF
	"right-most wall where we off an ogre, then another diagonal flight up
	$LF
	"and to the left to poison another ogre.  We step next to a wall to
	$LF
	"manipulate a deadly poison attack against a rock troll and last but
	$LF
	"not least we sting an ogre lord on turn 734(2/2).  (It should be noted
	$LF
	"that in all cases where we've wandered away from the wall the luck
	$LF
	"manipulation happened a couple of turns ahead of time while we were
	$LF
	"still within range of a wall; luck manipulation is theoretically
	$LF
	"possible when not adjacent to a wall, but it looks a lot uglier and is
	$LF
	"much more timeconsuming in realtime, making it not worthwhile if at
	$LF
	"all avoidable.)
	$LF
]div
[h4 id=Turn7351273522 
	" Turn 735(1/2)-735(2/2)
	$LF
]h4
[div class=p 
	"Dispatching the ogre lord was the last kill we needed, setting our
	$LF
	"alignment exactly back to 0.  This means that we now regain the
	$LF
	"ability to use the Orb of Fate to levelport, although our luck is
	$LF
	"still -7 (-10 with a +3 bump from the orb).  The easiest way to reset
	$LF
	"our luck is to make a sacrifice to our god, so we turn on autopickup
	$LF
	"and step onto a square with a stone giant corpse, picking up a scroll
	$LF
	"of light and a scroll of create monster in the process, followed by
	$LF
	"walking back next to a wall to allow for easier luck manipulation.
	$LF
]div
[h4 id=Turn73612 
	" Turn 736(1/2)
	$LF
]h4
[div class=p 
	"We invoke the Orb of Fate which returns us to gnomish form and allows
	$LF
	"us to levelport back to our base at level 16.  We manipulated a low
	$LF
	"Orb of Fate cooldown timeout of 17 here.
	$LF
]div
[h4 id=Turn73622 
	" Turn 736(2/2)
	$LF
]h4
[div class=p 
	"Now that we're back at a level with an altar, we're faced with a bit
	$LF
	"of a dilemma – normally, sacrificing at an altar only regains 1 point
	$LF
	"of luck, and we're down many more than that.  We solve the conundrum
	$LF
	"by praying, manipulating "You feel that Thoth is displeased" after
	$LF
	"all of 13 wallwalks (we were struck by lightning, punished, and
	$LF
	"otherwise abused with all of the other results we tried); as a result,
	$LF
	"Thoth ends up angry with us (an independent axis from alignment and
	$LF
	"luck).  The amusing side effect of this is that when we mollify him
	$LF
	"next turn, we regain all our luck back at once rather than just one
	$LF
	"point; it seems unlikely that this was intended as a strategy, but it
	$LF
	"is likely too risky to use in a non-TAS game anyway.
	$LF
]div
[div class=p 
	"Prayer takes some time to take effect.  Normally you're protected from
	$LF
	"monsters during this time, but with a non-responsive god (in this case
	$LF
	"due to negative luck), we're helpless and vulnerable.  It doesn't
	$LF
	"matter in this case because there are no hostile monsters near anyway.
	$LF
]div
[h4 id=Turns739740 
	" Turns 739-740
	$LF
]h4
[div class=p 
	"We use Ctrl+T to teleport to the altar and offer the stone giant,
	$LF
	"which is enough to mollify our god and reset our luck to 0 with an
	$LF
	"additional +3 bonus from the orb.  After a massive slaughter we have
	$LF
	"finally reversed the effects acquired while gaining the infinite carry
	$LF
	"capacity glitch and we're ready to move on.
	$LF
]div
[h4 id=Turns741743 
	" Turns 741-743
	$LF
]h4
[div class=p 
	"We drop all the statues we picked up almost 100 turns ago, then break
	$LF
	"them all with force bolt (which continues to be useful for its ability
	$LF
	"to break pretty much any inanimate object that can be broken), and
	$LF
	"pick up the 433 rocks the statues broke into, as well as the
	$LF
	"spellbooks that were in the statue.  We're doing this now because the
	$LF
	"spellbooks will come in useful soon; the large amount of manipulation
	$LF
	"on this turn was so that the statues would produce a particularly
	$LF
	"large number of rocks. (We'll need a very large number of rocks much
	$LF
	"later on; 433 is not nearly enough, but it's a start.)
	$LF
]div
[h4 id=Turn744 
	" Turn 744
	$LF
]h4
[div class=p 
	"We put on the Eyes of the Overworld for the first time. These have the
	$LF
	"following effects: resistance to several magical effects even when
	$LF
	"merely carried (this is in general a negative for us, because many of
	$LF
	"these effects would be useful); ability to see three spaces through
	$LF
	"walls when worn (neutral because we can see things via memory watch,
	$LF
	"but helps for entertainment because it makes it easier to see what's
	$LF
	"going on); immunity to all forms of blindness when worn (essential to
	$LF
	"saving time later on, when we use blind polymorph forms but
	$LF
	"nonetheless need to see, and the reason we wished for them in the
	$LF
	"first place); immunity to being stunned due to the gaze of Archons
	$LF
	"when worn (incredibly tangential, but amusingly, actually becomes
	$LF
	"relevant at one point).  Additionally, they can be invoked to view
	$LF
	"your own stats, but that would be a huge waste of time when we can see
	$LF
	"them via savestating, entering debug mode, checking them, and
	$LF
	"loadstating again.
	$LF
]div
[div class=p 
	"However, we didn't put them on now for any of these reasons.  Instead,
	$LF
	"we exploit the fact that they happen to be (very heavily and
	$LF
	"specifically enchanted) lenses, which means that we can use them to
	$LF
	"read spellbooks faster.  We could have used ordinary lenses for this,
	$LF
	"but we had the Eyes handy, so they're more convenient.
	$LF
]div
[div class=p 
	"Note that we can only use the Eyes at all because we've just fixed our
	$LF
	"alignment; they require 2 out of 3 of being a monk, being neutral,
	$LF
	"having nonnegative alignment to use.  Because we don't satisfy all 3
	$LF
	"conditions (we aren't a monk), they do some damage to us when we put
	$LF
	"them on.
	$LF
]div
[h4 id=Turn745 
	" Turn 745
	$LF
]h4
[div class=p 
	"Having improved our spell-learning ability with the Eyes, we follow up
	$LF
	"by obtaining an item with which to improve our spell-casting ability;
	$LF
	"we wish for a "blessed robe of a master assassin". This is another
	$LF
	"parser abuse; there's no such item as a "robe of a master assassin",
	$LF
	"but the game can parse "<item> of <monster name>", as in "tin of blue
	$LF
	"jelly", and as such accepts the wish. (The Master Assassin is a boss
	$LF
	"who would be fought by certain other characters, but does not appear
	$LF
	"if you play as a wizard.)
	$LF
]div
[h4 id=Turn746 
	" Turn 746
	$LF
]h4
[div class=p 
	"We wear the (actually perfectly ordinary) robe we just wished for.
	$LF
	"Robes reduce spell failure rates when worn; this is used later on, not
	$LF
	"only to make luck manipulation easier, but also because it brings the
	$LF
	"failure rate for some spells below 100% (thus making it possible
	$LF
	"rather than impossible to cast them).
	$LF
]div
[h4 id=Turns747753 
	" Turns 747-753
	$LF
]h4
[div class=p 
	"We learn the "haste self" spell.  We won't use it for a while, but we
	$LF
	"wanted the Orb of Fate timeout to have time to run down, and that
	$LF
	"spell takes just the right length of time to learn to let us use the
	$LF
	"Orb again.
	$LF
]div
[h4 id=Turn754 
	" Turn 754
	$LF
]h4
[div class=p 
	"After a huge amount of manipulation, we use the Orb of Fate to
	$LF
	"levelport to level 3.  We haven't been here before, so this generates
	$LF
	"a new level.  The Orb's timeout ends up at a mediocre 66, but we were
	$LF
	"manipulating something rather more important on this turn: this level
	$LF
	"contains a particularly large potion shop.  The main reason we need
	$LF
	"potions is to, much later on, escape Gehennom and the Dungeons as
	$LF
	"quickly as possible after picking up the Amulet of Yendor; a cursed
	$LF
	"potion of gain level, in a terrible pun, gains you a dungeon level on
	$LF
	"the way up (rather than a character level), and works (75% of the time
	$LF
	"due to holding the Amulet) regardless of the properties of the level.
	$LF
	"Because there's no faster way to travel, we need a source of gain
	$LF
	"level potions; and because there are various ways to transmute potions
	$LF
	"into other potions, we need a large supply of potions generally to
	$LF
	"transform into them.
	$LF
]div
[div class=p 
	"Because so much manipulation was required just to generate the level
	$LF
	"we wanted, we cannot manipulate a couple of other things we'd like; we
	$LF
	"don't end up inside the shop itself (in fact it isn't visible from our
	$LF
	"arrival point), and we don't trigger teleportitis to teleport there.
	$LF
]div
[h4 id=Turn755 
	" Turn 755
	$LF
]h4
[div class=p 
	""Hello, wizard!  Welcome to Sablja's liquor emporium!"  We control-T
	$LF
	"teleport into the shop.  As a 6 by 8 shop, it has 6 times 7 or 42
	$LF
	"squares which sell items, and all but 2 of them are potions (the other
	$LF
	"two are mimics, one pretending successfully to be a potion, the other
	$LF
	"one whose disguise isn't nearly as good).
	$LF
]div
[h4 id=Turn756 
	" Turn 756
	$LF
]h4
[div class=p 
	"We read the scroll of create monster we picked up back in the Castle
	$LF
	"(a stone giant was planning to use it against us, but never got the
	$LF
	"chance, and we picked it up while picking up the corpse).  Here's
	$LF
	"where we get to use it; some manipulation causes the scroll to create
	$LF
	"a hostile gelatinous cube (cyan 'b').  Gelatinous cubes are quite
	$LF
	"strange among monsters; not only do living cubes paralyze on touch
	$LF
	"(whether you touching them, or them touching you), but they also
	$LF
	"absorb items that they walk over.  While organic materials get
	$LF
	"digested, gelatinous cubes cannot digest glass, so any potions it
	$LF
	"passes over will end up stuck in its body.  Our strategy, therefore,
	$LF
	"is to speed up the raiding of the shop via allowing the cube to gather
	$LF
	"potions at the same time we are, halving the time it will take.
	$LF
]div
[h4 id=Turn757 
	" Turn 757
	$LF
]h4
[div class=p 
	"We teleport manually to the northeast corner of the shop (away from
	$LF
	"the cube).  This not only starts to pick up the potions, but also
	$LF
	"helps manipulate the cube's movements.  We couldn't trigger
	$LF
	"teleportitis last turn because it would be hard to manipulate at the
	$LF
	"same time as manipulating the created monster; and doing it manually
	$LF
	"lets us cause polymorphitis at the turn boundary.  We also end up
	$LF
	"feeling hungry because of the nutrition spent in the manual
	$LF
	"teleport…
	$LF
]div
[h4 id=Turns758765 
	" Turns 758-765
	$LF
]h4
[div class=p 
	"…but we don't stay hungry for long!  We specify our natural form,
	$LF
	""gnome", leading to another stat randomization, and get two benefits
	$LF
	"from it.  One benfit is a gain in level (giving us intrinsic warning –
	$LF
	"which is redundant to the Orb of Fate's warning ability – and also
	$LF
	"increasing our max HP to over ten thousand, a truly staggering health
	$LF
	"total).  The other is that it resets our nutrition level to midway,
	$LF
	"fixing our hunger and allowing us to do more manual teleports in the
	$LF
	"turns ahead.
	$LF
]div
[div class=p 
	"The turn itself is spent starting to read our spellbook of polymorph.
	$LF
	"We're reasonably safe inside the shop, with Sablja guarding the
	$LF
	"entrance (because we owe him money).  While we read, the gelatinous
	$LF
	"cube moves towards us, engulfing 4 potions; our character
	$LF
	"automatically stops reading when it gets near enough.
	$LF
]div
[h4 id=Turn766 
	" Turn 766
	$LF
]h4
[div class=p 
	"We manually teleport to the next corner of the shop, going round
	$LF
	"anti-clockwise; the gelatinous cube moves diagonally and engulfs
	$LF
	"another potion.  We also pick up the potion in the corner while we're
	$LF
	"at it.  (Because the gelatinous cube has a very strong tendency to
	$LF
	"move towards us and will move diagonally if necessary to keep moving
	$LF
	"towards us, there's no way to manipulate it to pick up the items in
	$LF
	"the far corners of the shop short of digging, so it's easiest to
	$LF
	"simply pick up those corner potions ourselves.)
	$LF
]div
[h4 id=Turns767790 
	" Turns 767-790
	$LF
]h4
[div class=p 
	"We continue to read the spellbook of polymorph; it takes a long time
	$LF
	"to memorize, but we're making good use of the turns by getting the
	$LF
	"gelatinous cube to multitask for us.  While we're busy reading, we
	$LF
	"spontaneously teleport around – twice – and eventually end with
	$LF
	"another polyself to natural form when the cube catches up with us.
	$LF
	"This stretch of book-reading went better than could be hoped, really;
	$LF
	"it required very little manipulation (none on turn 767 itself) to get
	$LF
	"a result as good as this, although it isn't quite perfect (the cube
	$LF
	"misses a couple of potions we'd want it to get).
	$LF
]div
[h4 id=Turn791 
	" Turn 791
	$LF
]h4
[div class=p 
	"We start picking up some potions by hand alongside the cube.  Although
	$LF
	"it might look like the cube could attack us from there (which would
	$LF
	"paralyze us and make us lose a lot of time), it's rather slower than
	$LF
	"we are even in our natural form, so we can run round it due to gaining
	$LF
	"a turn over it just now.
	$LF
]div
[h4 id=Turns792800 
	" Turns 792-800
	$LF
]h4
[div class=p 
	"We pick up potions alongside the cube (which moves one space for every
	$LF
	"two we get).  This is mostly just a case of finding a pattern that
	$LF
	"both moves us over as many potions as possible, and misses ones that
	$LF
	"the cube can pick up behind us.  (The white potion four spaces north of
	$LF
	"the closing square bracket, which is a badly-hidden mimic, is also a
	$LF
	"mimic.)  For some added amusement, look at Sablja's compliments to us
	$LF
	"as we pick up the potions, ranging from "esteemed" up to "most
	$LF
	"renowned and sacred"; he presumably thinks he's going to get a lot of
	$LF
	"money from us.  He's going to be rather disappointed…
	$LF
]div
[h4 id=Turn801 
	" Turn 801
	$LF
]h4
[div class=p 
	"Having no adjacent potions, we teleport up to one of the few remaining
	$LF
	"potions, encouraging the cube to go visit them as well.
	$LF
]div
[h4 id=Turns802803 
	" Turns 802-803
	$LF
]h4
[div class=p 
	"We've almost finished learning to polymorph things; just a few pages
	$LF
	"left in the spellbook to read, and a couple of turns left to read
	$LF
	"them.  At the end of turn 803, before the cube even reaches a potion,
	$LF
	"we finish memorizing the spell.
	$LF
]div
[h4 id=Turns804805 
	" Turns 804-805
	$LF
]h4
[div class=p 
	"Only three potions left to pick up now, too (the white one is a
	$LF
	"mimic).  We pick up two of them as the cube picks up one, again using
	$LF
	"our superior speed to run round it.
	$LF
]div
[h4 id=Turn806 
	" Turn 806
	$LF
]h4
[div class=p 
	"We drop all the potions we picked up; for ease of transport, we want
	$LF
	"to give them all to the cube.  We use Escape to skip the many boring
	$LF
	"messages about potions getting dropped, so the message about the cube
	$LF
	"touching us (and failing to do anything further, like paralyzing us;
	$LF
	"the paralysis attack was luck-manipulated to have no effect) is
	$LF
	"skipped.
	$LF
]div
[h4 id=Turn807 
	" Turn 807
	$LF
]h4
[div class=p 
	"We walk next to the wall.  This is both so that the cube can step onto
	$LF
	"and engulf the potions we just dropped, and because we're about to
	$LF
	"manipulate an unlikely event on the next turn.
	$LF
]div
[h4 id=Turn808 
	" Turn 808
	$LF
]h4
[div class=p 
	"Time to start off with the polymorph spell we just learned.  The spell
	$LF
	"is a very high level – level 6 – meaning that even as an experienced
	$LF
	"level 17 wizard, we're going to have immense trouble casting it, due
	$LF
	"to having no skill with matter spells.  This is why we're wearing the
	$LF
	"robe, which brings its failure rate from 100% down to 91%.  Later on
	$LF
	"we need to be casting it without access to the robe, so while we're
	$LF
	"waiting for the cube to pick up the potions (which also happens on
	$LF
	"this turn), we cast the spell at a wall, just for the practice.  (The
	$LF
	"spell has no effect, because walls cannot be polymorphed.)
	$LF
]div
[h4 id=Turn809 
	" Turn 809
	$LF
]h4
[div class=p 
	"More polymorph casting.  Again, this is for the practice, but this
	$LF
	"time it's also for another purpose too; we cast the spell at the cube,
	$LF
	"and it changes from being a gelatinous cube with a huge number of
	$LF
	"potions engulfed in its body, to an elf mummy with a huge number of
	$LF
	"potions in its backpack.  The reasoning behind this is that gelatinous
	$LF
	"cubes are acidic, and as such immune to being turned to stone, and we
	$LF
	"want to petrify it in the next few turns.
	$LF
]div
[h4 id=Turn810 
	" Turn 810
	$LF
]h4
[div class=p 
	"More polymorph practice.  This time, just for variety, we cast it at
	$LF
	"the ceiling rather than a wall.  Naturally, this has no interesting
	$LF
	"effect apart from the spell practice.
	$LF
]div
[h4 id=Turn811 
	" Turn 811
	$LF
]h4
[div class=p 
	"And one more cast, this time at ourself.  The fourth cast of a level 6
	$LF
	"spell is enough practice to be able to bring our matter skill up to
	$LF
	"basic, although we don't do that immediately because there's no need
	$LF
	"to.  We choose to turn into a cockatrice; earlier on we used a
	$LF
	"cockatrice corpse to turn monsters into stone, this time we're going
	$LF
	"to do it directly.  The elf mummy, being particularly mindless,
	$LF
	"decides to attack us anyway, and turns into stone as soon as it
	$LF
	"touches us.  Meanwhile, our robe falls onto the floor, because as a
	$LF
	"cockatrice we're too small for it to fit.
	$LF
]div
[h4 id=Turn813 
	" Turn 813
	$LF
]h4
[div class=p 
	"[Cockatrices are sufficiently slow that we had to skip turn 812.]
	$LF
]div
[div class=p 
	"We still need the robe, so (after rather more luck manipulation than
	$LF
	"is usually necessary – we were particularly unlucky on this turn) we
	$LF
	"pick it back up off the floor.  (Cockatrices also have a very low
	$LF
	"carry capacity, but the antigold is sorting out that problem for us.)
	$LF
	"With a manipulated spontaneous polymorph, we turn into a wood nymph,
	$LF
	"a polymorph form useful because it has a theft attack, just like a
	$LF
	"succubus or incubus.  (All three types of nymph are essentially
	$LF
	"identical for this purpose, so we picked the one with the shortest
	$LF
	"name to make the realtime marginally faster.)
	$LF
]div
[div class=p 
	"As a note about the making of this run, we didn't continue past this
	$LF
	"point for many months, because we'd reached the end of our route plan
	$LF
	"up to that point.  Instead, we spent our time exhaustively testing a
	$LF
	"wide range of endgame possibilities; we greatly improved our emulation
	$LF
	"platform in that time as well.  As such, the run only continued when
	$LF
	"we'd finally decided what we wanted to do and what sort of setup would
	$LF
	"be needed in order to speed up the ascension run post-turn-2000.  We
	$LF
	"also were willing to do things that were much more unlikely and hard
	$LF
	"to manipulate past this point, because we had the technology in place
	$LF
	"to manipluate it for us.
	$LF
]div
[h4 id=Turn815 
	" Turn 815
	$LF
]h4
[div class=p 
	"(We were still in cockatrice form on turn 814, so had to skip that one
	$LF
	"too.)
	$LF
]div
[div class=p 
	"On this turn, we simply pick up the statue full of potions.  We don't
	$LF
	"need the potions now, and they'd take up most of our 52 inventory
	$LF
	"slots if we left them all in separate slots, so carrying them around
	$LF
	"inside the statue is the most sensible option.  (Containers are often
	$LF
	"used in NetHack to save on inventory slots in this fashion.  However,
	$LF
	"it's very rare to use a statue for this purpose; they're heavy, and
	$LF
	"you cannot put items in them once they've been created, nor remove
	$LF
	"them without smashing or reanimating the statue.)  At the start of the
	$LF
	"next turn, a manipulated teleport takes us to the shop entrance.
	$LF
]div
[h4 id=Turn816 
	" Turn 816
	$LF
]h4
[div class=p 
	"We close the door of the shop.  Amazingly, this requires some luck
	$LF
	"manipulation to do; our character isn't particularly strong, nymphs
	$LF
	"aren't particularly large, and the door is bulky and prone to
	$LF
	"sticking.  The reason we do this is that open doors aren't targetable
	$LF
	"by most spells (locking-based spells being the exception); the game
	$LF
	"assumes that casting a spell at an open doorway is intended to cast
	$LF
	"the spell through the doorway, rather than to hit the door.  While
	$LF
	"this might be intended by most players in most cases, we genuinely
	$LF
	"want to hit the door, and so have to waste a turn closing it so that
	$LF
	"we can target it.
	$LF
]div
[h4 id=Turn817 
	" Turn 817
	$LF
]h4
[div class=p 
	"Were you were trying to guess what we were targeting the door with?
	$LF
	"It's our old favourite inanimate-object-destroying-spell, force bolt!
	$LF
	"Destroying the shop door is a little random-seeming and apparently
	$LF
	"illogical, but it has to do with how the game handles peaceful
	$LF
	"monsters (like Sablja).  The game gives alignment penalties for
	$LF
	"attacking peaceful monsters; in most cases, this doesn't matter, but
	$LF
	"we happen to be on 0 alignment exactly, and the Orb of Fate won't work
	$LF
	"from negative alignment.  In order to pull off a glitch much, much
	$LF
	"later in the game (over a thousand turns from now), we need an angry
	$LF
	"shopkeeper on dungeon level 1 (specifically, we need the combination
	$LF
	"of monster flags "follow across levels" and "speed > 24", and this is
	$LF
	"the easiest way we discovered to achieve that); we want to use Sablja
	$LF
	"for this, but peaceful shopkeepers won't follow through vertical
	$LF
	"teleports, so we need Sablja angry at us first.  Teleporting out of
	$LF
	"the shop would work eventually, but Sablja would give us some time to
	$LF
	"pay first (at least if we were still nearby); and so, the most
	$LF
	"time-efficient way to anger him without losing alignment is to destroy
	$LF
	"part of his shop, in this case the door.
	$LF
]div
[div class=p 
	"Sablja's reaction is the intended "How dare you destroy my door!"
	$LF
	"(normally shopkeepers give you a chance to pay for the door, but we
	$LF
	"can't afford to do that by several hundred million zorkmids), followed
	$LF
	"up by attacking us with his wand of striking.  (It ends up harmlessly
	$LF
	"bouncing off us, due to the Eyes of the Overworld in our inventory
	$LF
	"granting us protection from purely magical attacks.)
	$LF
]div
[h4 id=Turn818 
	" Turn 818
	$LF
]h4
[div class=p 
	"Now that Sablja is angry, we can attack him without alignment
	$LF
	"penalties (even though he was peaceful once).  A nymph's attack is a
	$LF
	"theft attack that triggers twice per action.  The item we need to
	$LF
	"steal is Sablja's wand of striking; but stealing from monsters always
	$LF
	"steals the item that was most recently added to their inventory first.
	$LF
	"Sablja hasn't picked up any items since he was generated, so the items
	$LF
	"we steal depend on the details of the monster generation algorithm; in
	$LF
	"this case, the first item we steal will always be his scroll of create
	$LF
	"monster, and the wand of striking the second.  As such, we manipulate
	$LF
	"such that we will steal both the scroll and the wand in the same turn.
	$LF
	"(The scroll is far from useless, as it happens; even though we're
	$LF
	"forced to pick it up, we'll make good use of it later on.)  A couple
	$LF
	"of seductive smiles (both of which are somewhat unlikely to work,
	$LF
	"incidentally), and Sablja hands over his magical items.  Then he comes
	$LF
	"to his senses again, and hits us four times, draining our nymph-form
	$LF
	"hitpoints and making us return to gnomish form.  Angry shopkeepers do
	$LF
	"not mess around.
	$LF
]div
[h4 id=Turn819 
	" Turn 819
	$LF
]h4
[div class=p 
	"After quickly stopping to put skill points into matter (we'll be
	$LF
	"polymorphing things again soon), we drop the wand of striking we just
	$LF
	"stole; again, this is to make it a targetable object (items in
	$LF
	"inventory cannot be targeted by most spells, but items on the floor
	$LF
	"can).  Sablja hits us twice in response.  (If you're wondering about
	$LF
	"how Sablja's action timing works: he alternates between acting once
	$LF
	"per turn and twice per turn, and can hit us twice per action.)
	$LF
]div
[h4 id=Turn820 
	" Turn 820
	$LF
]h4
[div class=p 
	"We never got a chance to put our robe back on; however, with our newly
	$LF
	"skilled-up matter school, we can still just about cast polymorph (it's
	$LF
	"currently at 90% fail).  We need a large number of manipulations both
	$LF
	"to make polymorph cast successfully, and to control what the wand
	$LF
	"polymorphs into; our intrinsic polymorph control lets us choose our
	$LF
	"own polymorph form, but doesn't let us control the polymorphs of other
	$LF
	"things.
	$LF
]div
[h4 id=Turn821 
	" Turn 821
	$LF
]h4
[div class=p 
	"We pick the polymorphed wand back up again.  It's now a zinc wand; our
	$LF
	"character doesn't know what the wand is, but TAS tools (specifically,
	$LF
	"memory watch) give us that information (we manipulated it to be a wand
	$LF
	"of speed monster, which we're going to need shortly).
	$LF
]div
[h4 id=Turn822 
	" Turn 822
	$LF
]h4
[div class=p 
	"With the largest amount of manipulation we've needed so far in the run
	$LF
	"(around a second in realtime), we drag Sablja up to dungeon level 1
	$LF
	"with us.  (The Orb of Fate's timeout has just ended; it was 66 when we
	$LF
	"arrived on the level all the way back on turn 758, and we've spent 68
	$LF
	"turns on the level.)  Because there are a bunch of items we haven't
	$LF
	"paid for (a huge stack of potions, and a door), this summons the
	$LF
	"Keystone Kops, just like it did on dungeon level 2, but just like we
	$LF
	"did there, they're left behind on dungeon level 3, too far away to be
	$LF
	"relevant (monsters in NetHack cannot leave a level except at two
	$LF
	"times: the same time that the player leaves it, or on their own turn;
	$LF
	"and monsters don't get turns when there isn't a player on the level).
	$LF
]div
[div class=p 
	"The manipulation itself was required to land next to a wall at the
	$LF
	"same time as keeping the Orb of Fate's timeout low; we'll be needing
	$LF
	"it again soon, and the manipulation gave us a particularly low timeout
	$LF
	"of 19.  (Lower values become ever harder to manipulate; the
	$LF
	"distribution of timeouts is utterly bizarre and as such hard to
	$LF
	"describe, but it's particularly biased against unusually low values.)
	$LF
]div
[h4 id=Turns823824 
	" Turns 823-824
	$LF
]h4
[div class=p 
	"At this point, we have to take some care with the random numbers we
	$LF
	"line up, because a timeout expires at the turn boundary between 824
	$LF
	"and 825.  The Wizard of Yendor's harrassment is going to continue for
	$LF
	"the rest of the game, given that we've disturbed him.
	$LF
]div
[div class=p 
	"We manipulate the Wizard into cursing the Book of the Dead (the result
	$LF
	"we were hoping for; its blessed/cursed status affects what it does
	$LF
	"when read); at the same time, he also curses the Candelabrum of
	$LF
	"Invocation (something we could not reasonably manipulate away, but
	$LF
	"which will have no effect until much later, by which time we'll easily
	$LF
	"be able to fix curse-related issues), and sets the timeout to a
	$LF
	"reasonable value of 226 turns.
	$LF
]div
[div class=p 
	"We're not entirely taking a break from our manipulation of Sablja,
	$LF
	"either.  Our turns are spent practicing polymorph (randomizing our own
	$LF
	"stats in a mostly inconsequential way; we gain two points of Charisma,
	$LF
	"one of Dexterity, and lose one of Strength), and wearing the robe,
	$LF
	"both actions which improve our polymorphing ability.
	$LF
]div
[h4 id=Turn825 
	" Turn 825
	$LF
]h4
[div class=p 
	"Our time spent on dungeon level 1 is going to be heavily about
	$LF
	"manipulating movement energy values (basically much the same thing as
	$LF
	"manipulating subpixels in a platformer).  Sablja has speed 18; as each
	$LF
	"action costs 12 movement energy, this is why he alternates between 1
	$LF
	"and 2 actions per turn (and likewise, his movement energy reservoir at
	$LF
	"the start of the turn is alternating between 18 and 24).
	$LF
]div
[div class=p 
	"Sablja's movement energy reservoir started at 18 at the start of this
	$LF
	"turn.  We spend a heavily manipulated turn polymorphing him into a
	$LF
	"raven, one of the faster monsters in the game (ravens have a natural
	$LF
	"speed of 20); we need Sablja's speed to exceed 24 (for reasons that
	$LF
	"will be explained soon), and a high natural speed is needed because
	$LF
	"there are limits to how much we can artificially boost speed.  The
	$LF
	"raven took the least manipulation out of the suitable polyforms.
	$LF
]div
[div class=p 
	"Sablja spends 12 points with his action (bringing him down to 6), then
	$LF
	"gains 20 at the turn boundary, and is now at 26 movement points.
	$LF
]div
[h4 id=Turn826 
	" Turn 826
	$LF
]h4
[div class=p 
	"We start to read our cursed Book of the Dead.  Reading the Book takes
	$LF
	"two actions, but we get knocked out of it after just one by Sablja's
	$LF
	"attack.  In the process, we manipulate teleportitis to trigger, and
	$LF
	"move to a convenient distance from Sablja (who will catch up to us
	$LF
	"over the next few turns).
	$LF
]div
[div class=p 
	"When making this turn, I seem to have been under the impression that
	$LF
	"spending one action reading the Book now would save one action later.
	$LF
	"It doesn't work out like that, though, so this was probably just a
	$LF
	"mistake, if a minor one (the time lost now will make no difference, as
	$LF
	"we have to wait for the Quest to open anyway).
	$LF
]div
[div class=p 
	"Sablja is now at 22 movement points.
	$LF
]div
[h4 id=Turn827 
	" Turn 827
	$LF
]h4
[div class=p 
	"We use our wand of wishing to wish for a blessed figurine of an
	$LF
	"archon.  Amusingly, we're on dungeon level 1, and this is a relatively
	$LF
	"common wish to make on dungeon level 1; an archon is typically
	$LF
	"considered the best monster in the game to use as an ally, and a
	$LF
	"blessed figurine has an 80% chance of turning into an allied monster
	$LF
	"when activated.  Thus, this is considered standard strategy in
	$LF
	"pacifist play, which relies almost entirely on allied monsters to kill
	$LF
	"enemy monsters.  We're not going to use it for its normal intended
	$LF
	"purpose, though.
	$LF
]div
[div class=p 
	"Sablja is now at 30 movement points.
	$LF
]div
[h4 id=Turns828829 
	" Turns 828-829
	$LF
]h4
[div class=p 
	"We read the Book of the Dead, completing the read this time.  Because
	$LF
	"the Book is cursed, it summons undead; in this case, three zombies.
	$LF
	"We need it to summon monsters who will follow us between levels; the
	$LF
	"zombies' purpose will be to take up space on the Plane of Earth much
	$LF
	"later in the game.
	$LF
]div
[div class=p 
	"Sablja is now at 22 movement points.
	$LF
]div
[h4 id=Turn830 
	" Turn 830
	$LF
]h4
[div class=p 
	"We use our blessed archon figurine.  However, instead of hitting the
	$LF
	"80% chance of an allied archon, we manipulate the 10% chance of a
	$LF
	"hostile archon.  We're now surrounded by five monsters: three zombies,
	$LF
	"the hostile archon, and Sablja the raven (who has only just caught up
	$LF
	"to our new location, completing the set).  The idea will be that, much
	$LF
	"later in the game, we'll drag all five of these monsters to the Plane
	$LF
	"of Earth with us (each of which will follow us between level changes;
	$LF
	"most are of species who naturally follow, ravens don't follow but
	$LF
	"shopkeepers do regardless of species, which is why we needed to
	$LF
	"polymorh Sablja rather than using a natural raven).  Monsters only
	$LF
	"follow if they're adjacent, so we need them to surround a particular
	$LF
	"point on the map so that they can all be adjacent to us at once.
	$LF
]div
[div class=p 
	"Sablja is now at 30 movement points, and the archon at 16 movement
	$LF
	"points.
	$LF
]div
[h4 id=Turns831832 
	" Turns 831-832
	$LF
]h4
[div class=p 
	"Although our plan is to get monsters to follow us to the Plane of
	$LF
	"Earth much later in the game, five is actually too many.  Thus, we
	$LF
	"need to kill or transform one of the monsters surrounding us.  Sablja
	$LF
	"the raven, and the Archon, both have important roles of their own to
	$LF
	"play, so we need to leave them alone; the obvious monster to eliminate
	$LF
	"is one of the zombies.
	$LF
]div
[div class=p 
	"Although we could kill a zombie, we need to waste 2 turns to get all
	$LF
	"the movement energies to line up.  So we spend the time practicing
	$LF
	"polymorph on a zombie.  Two turns' worth of polymorphing changes it
	$LF
	"into a red mold, a monster that will not follow and will have no
	$LF
	"influence on the rest of the run.
	$LF
]div
[div class=p 
	"Sablja is now at 22 movement points, and the archon at 24 movement
	$LF
	"points.
	$LF
]div
[h4 id=Turns833834 
	" Turns 833-834
	$LF
]h4
[div class=p 
	"We now get to put our zinc wand of speed monster to use.  We spend two
	$LF
	"actions, zapping first the archon, and then Sablja.  This increases
	$LF
	"the archon's speed from 16 to 22, and Sablja's from 20 to 27.
	$LF
]div
[div class=p 
	"(In case you're wondering why we don't just zap ourself and get a ton
	$LF
	"of free actions, this is a tradeoff we made in order to keep the run
	$LF
	"entertaining; because we have to wait for the Quest to unlock anyway,
	$LF
	"we decided to not worry about action economy until near the end of the
	$LF
	"run when it was necessary.  It makes more sense to use up most of our
	$LF
	"time preparing for the Quest unlock, then go straight to the Quest,
	$LF
	"than it does to finish all our preparation early and then have to
	$LF
	"waste a bunch of time all at once.)
	$LF
]div
[div class=p 
	"Sablja is now at 33 movement points, and the archon at 32 movement
	$LF
	"points.
	$LF
]div
[h4 id=Turn835 
	" Turn 835
	$LF
]h4
[div class=p 
	"This is a pretty critical turn, at which our dungeon level 1 setup
	$LF
	"comes together.  We spend it casting detect monsters; this is for the
	$LF
	"benefit of viewers, to allow them to see what is happening.  At the
	$LF
	"turn boundary, we manipulate a teleport, and teleport to the far end
	$LF
	"of the level (any square not adjacent to a monster would do; I chose
	$LF
	"this one).
	$LF
]div
[div class=p 
	"At this point, all our movement point manipulation has finally paid
	$LF
	"dividends.  Sablja acted twice last turn (33-12*2 = 9 points left),
	$LF
	"and gained 27 at turn boundary; Sablja thus has 9+27 = 36 movement
	$LF
	"points.  In other words, Sablja is about to get a three-action turn
	$LF
	"(something that's very rare in NetHack in general, and almost unheard
	$LF
	"of among monsters that follow from level to level).  This is important
	$LF
	"because it means that Sablja will still have two actions left after
	$LF
	"following us to the Plane of Earth.
	$LF
]div
[div class=p 
	"Meanwhile, the archon acted twice last turn (32-12*2 = 8 points left),
	$LF
	"and so at speed 22, now has 30 movement points left, meaning it's
	$LF
	"about to get a two-action turn.  This means the archon will get to act
	$LF
	"once after following us to the Plane of Earth.  One possible action
	$LF
	"for a hostile archon is to summon monsters; the four following
	$LF
	"monsters, plus the archon summons, will eventually give us exactly the
	$LF
	"number of monsters on Earth we need, with no cost of our own time (all
	$LF
	"the monster creation happens on monster turns).
	$LF
]div
[h4 id=Turn836 
	" Turn 836
	$LF
]h4
[div class=p 
	"Of course, we're not spending turn 836 on the Plane of Earth, so all
	$LF
	"this movement point manipulation might seem pointless.  However, it's
	$LF
	"time to introduce a speed technique known as "monster charging".
	$LF
	"Newly created monsters (including monsters on newly created levels)
	$LF
	"normally have 0 movement points, so they won't act until the turn
	$LF
	"after you arrive on a level.  However, if you leave a level, the
	$LF
	"current number of movement points for each monster will be saved, and
	$LF
	"those movement points will start to be spent the instant you arrive on
	$LF
	"it.  Thus, if we leave the level right now, and never come back to it
	$LF
	"until the action before entering the Plane of Earth, the monsters will
	$LF
	"get to spend most of their actions there (one will be spent here on
	$LF
	"level 1 immediately after we arrive, but that's unavoidable).
	$LF
]div
[div class=p 
	"We can think of these monsters as being "overcharged", because they're
	$LF
	"going to get many more actions than normal; a shopkeeper normally
	$LF
	"alternates betwen one and two actions per turn, three is far too many.
	$LF
	"Charging up the monsters, as seen over the preceding turns, requires
	$LF
	"both increasing their speed, and manipulating how many movement points
	$LF
	"they have on which turn (a concept that I think of as "movement
	$LF
	"phase", after the meaning of the word "phase" in signal processing).
	$LF
	"I'd love it if charged-up monsters were surrounded by little lightning
	$LF
	"bolt animations, but alas, NetHack's graphics is not up to the job.
	$LF
]div
[div class=p 
	"Needing to leave the level right now, we have few choices for what we
	$LF
	"can do with the turn.  Digging through the floor is a traditional
	$LF
	"method, but both dungeon levels 2 and 3 are in something of a mess due
	$LF
	"to our utter disregard for the normal use of shops.  We can't teleport
	$LF
	"out with the Orb of Fate because it's still on cooldown (and will be
	$LF
	"for another 6 turns).  Therefore, we leave using our last remaining
	$LF
	"cursed scroll of teleportation, and aim for the previously ungenerated
	$LF
	"level 7, spending a huge amount of manipulation to generate a
	$LF
	"particularly helpful level.  (Why 7? Because the dungeon graph – which
	$LF
	"levels connect to which levels – is determined right at the start of
	$LF
	"the game, meaning that level 7 is predetermined to contain the branch
	$LF
	"to Sokoban.)
	$LF
]div
[h4 id=Turns837838 
	" Turns 837-838
	$LF
]h4
[div class=p 
	"Over the next few turns, we're going to perform a tricky series of
	$LF
	"teleports.  One of the squares we need to be standing on currently
	$LF
	"contains a door, which isn't normally a valid teleport destination.
	$LF
	"One possibility would be to teleport next to the door, open it, then
	$LF
	"move to that square (perhaps via turn boundary teleportitis), but that
	$LF
	"would be reasonably mundane and is much the same thing as we've been
	$LF
	"doing all through the run so far.
	$LF
]div
[div class=p 
	"There's another option open to us, however: we can polymorph into
	$LF
	"something small enough to fit underneath a door, while dropping all
	$LF
	"our items (because otherwise the equipment wouldn't fit underneath the
	$LF
	"door).  For the sake of variety, this is what we do.  We need to
	$LF
	"unequip and drop all our equipment; we remove the Eyes of the
	$LF
	"Overworld manually, and the robe via turn boundary polymorph into a
	$LF
	"yellow light (which is amorphous and thus can squeeze under a door),
	$LF
	"then drop everything but the antigold and use the turn boundary to
	$LF
	"teleport onto a shop door (although it's impossible to see this on the
	$LF
	"map right now because yellow lights have no eyes; it'll be visible in
	$LF
	"future turns).  The shopkeeper, Llanwrst, greets us.
	$LF
]div
[h4 id=Turn839 
	" Turn 839
	$LF
]h4
[div class=p 
	"We spend two keystrokes throwing away random numbers by walking into
	$LF
	"walls; note that as the walls were previously unseen, they become
	$LF
	"visible as a result of walking into them (and so I manipulated on two
	$LF
	"different walls to make this more obvious).  For people who are
	$LF
	"surprised that walking into walls has side effects, this might help
	$LF
	"explain why such a major TAS trick as wallwalking ended up being
	$LF
	"possible (the action can't be cancelled altogether, it has to be
	$LF
	"aborted instead).
	$LF
]div
[div class=p 
	"We attempt to open inventory, to show off a message that many players
	$LF
	"may not have seen ("Not carrying anything except gold"), and also to
	$LF
	"clarify what the situation is right now.  (Yellow lights have zero
	$LF
	"carrying capacity; the only reason we can carry the gold is because it
	$LF
	"has negative weight.)
	$LF
]div
[div class=p 
	"We drop the stack of negative gold underneath the door, and use turn
	$LF
	"boundary polymorphitis to show off an amusing programming oversight;
	$LF
	"we can change into arbitrary monster forms while still underneath the
	$LF
	"door, and nothing bad happens to either us or the door.  We need to
	$LF
	"pick a form with hands and a nonzero carry capacity (the reason we
	$LF
	"changed form in the same place; note that right now, we have no hands
	$LF
	"and no carry capacity because we dropped our negative-weight item), so
	$LF
	"I chose the largest one available, "storm giant", to make fitting
	$LF
	"under the door more amusing.
	$LF
]div
[h4 id=Turn840 
	" Turn 840
	$LF
]h4
[div class=p 
	"Now it's time to go shopping.  We're only moving two squares to the
	$LF
	"first item we want to buy, so it's possible to jump rather than
	$LF
	"teleporting.  The first item we're buying is a wand of wishing we
	$LF
	"manipulated to generate on this level.
	$LF
]div
[h4 id=Turn841 
	" Turn 841
	$LF
]h4
[div class=p 
	"The next item we'll buy is a wand of teleportation.  (Actually, we're
	$LF
	"going to use it even before it's been purchased – something
	$LF
	"shopkeepers are OK with so long as you eventually pay – but we're
	$LF
	"planning to use it outside the shop too.)  It's adjacent, so we can
	$LF
	"just walk to it.  (With as many movement options as we have available,
	$LF
	"it's quite rare for walking to be the best one; we last did it back on
	$LF
	"turn 807.  Walking and running make up the bulk of most "normal"
	$LF
	"NetHack play, though.  Note that running isn't normally any faster
	$LF
	"than walking (it simply saves on keystrokes by repeatedly walking
	$LF
	"until something happens), so it's even less useful in a TAS than
	$LF
	"walking is.)
	$LF
]div
[div class=p 
	"Our character is unfamiliar with wands of teleportation (they haven't
	$LF
	"been relevant at any point of the run so far), so it shows up with its
	$LF
	"unidentified appearance, which this game is "jeweled wand".  As usual,
	$LF
	"while making this TAS, we could use TAS tools to determine what items
	$LF
	"had what appearances.  Memory watch would have worked, but there's an
	$LF
	"easier way; by this point, we'd implemented a tool, "Santa mode", that
	$LF
	"lets us force NetHack games into debug mode without needing to quit
	$LF
	"and resart them, so we could savestate, use Santa mode and the in-game
	$LF
	"debug commands to determine the appearance of a wand of teleportation,
	$LF
	"then loadstate again to revert the game back to exactly the state it
	$LF
	"was in before we entered debug mode.  Thus, we get the ability to see
	$LF
	"what effect a debug command would have on the game if it were legal,
	$LF
	"without actually being able to use debug commands to affect the game,
	$LF
	"and the run itself never enters debug mode at any point (which would
	$LF
	"invalidate the whole point of the TAS).
	$LF
]div
[h4 id=Turn842 
	" Turn 842
	$LF
]h4
[div class=p 
	"And this turn shows off the power of luck manipulation in a TAS in a
	$LF
	"clearly visible way.  On turn 836 (when this level was generated), we
	$LF
	"manipulated not just one wand of wishing in the shop, but two.  The
	$LF
	"odds of this are pretty low: a wand shop can't be any larger than 20
	$LF
	"squares, and each item in such a shop has about a 1 in 222 chance of
	$LF
	"being a wand of wishing, so the odds of this happening even given that
	$LF
	"such a shop generates are approximately (19*20/2) in (222*222), or
	$LF
	"around 0.4% (this formula is approximate, but should be accurate
	$LF
	"enough given how much larger 222 is than 1).  The shop itself has a
	$LF
	"3/7 chance of generating (given a suitable room), and has a 3% chance
	$LF
	"of being a wand shop, giving total odds of two wands of wishing on a
	$LF
	"level of 0.005% (actually rather worse, because there might not be a
	$LF
	"suitable room, and it might be smaller than 20 squares).  Technically,
	$LF
	"the wands could generate outside a shop, but that's even more
	$LF
	"unlikely.  In other words, don't expect this to happen in your own
	$LF
	"games.
	$LF
]div
[div class=p 
	"We walk to the wand of wishing, and manipulate a teleport at turn
	$LF
	"boundary, moving just a few squares (to the other end of the shop).
	$LF
	"It should be clear by now that our character has absolutely no trouble
	$LF
	"defeating or otherwise dealing with a shopkeeper if they want to.
	$LF
	"Instead, though, we're going to show off a more peaceful way to go
	$LF
	"shopping.
	$LF
]div
[h4 id=Turn843 
	" Turn 843
	$LF
]h4
[div class=p 
	"Time to show off some simple, if absurd, economics.  Any items that
	$LF
	"are moved inside a shop, apart from the player dropping them there
	$LF
	"intentionally, are considered to belong to the shopkeeper (the
	$LF
	"shopkeeper will pay you for them if he can tell that you are
	$LF
	"responsible for them being added to the shop's stock, and they're
	$LF
	"something that that shopkeeper wants).  We use the unpaid wand of
	$LF
	"teleport to teleport our stack of negative gold from underneath the
	$LF
	"door into the shop as a whole, meaning that the shopkeeper now owns
	$LF
	"it.  (You can't influence where teleported items end up in NetHack
	$LF
	"normally; we used luck manipulation for the purpose.)
	$LF
]div
[h4 id=Turn844 
	" Turn 844
	$LF
]h4
[div class=p 
	"First, we change our options; specifically, we need to place more
	$LF
	"items on autopickup.  We place gold on autopickup so that we can pick
	$LF
	"up the negative gold without losing time; also armor and gems, because
	$LF
	"we'll be needing those later on in the run and it's convenient to do
	$LF
	"it now while the option menu's open.
	$LF
]div
[div class=p 
	"Then, we manually teleport onto the negative stack of gold.
	$LF
	"Shopkeepers normally charge you for gold you pick up in their shops,
	$LF
	"but if you have enough store credit, they'll just reduce your store
	$LF
	"credit instead (this is an exploit fix to prevent people repeatedly
	$LF
	"dropping and picking up the same stack of gold to overflow their debt,
	$LF
	"leaving themself with a large amount of credit, because dropping gold
	$LF
	"adds to your credit).  Our credit of 0 zorkmids is sufficiently large
	$LF
	"to cover our purchase of -1073741824 zorkmids.  We pick up a pair of
	$LF
	"old gloves while we're here (they happened to be on the same square,
	$LF
	"and we need autopickup for armour turned on because we're picking up
	$LF
	"our robe on the same turn), and trigger teleportitis at the turn
	$LF
	"boundary, teleporting to the items we dropped when we entered.
	$LF
]div
[div class=p 
	"Teleporting out of a shop with unpaid items normally gets you in
	$LF
	"trouble, but your store credit can cover for them (in fact, the normal
	$LF
	"way to shop with teleportitis is to drop gold first and pick up the
	$LF
	"item second).  So, as we leave, the shopkeeper cancels our credit to
	$LF
	"cover the debt (a little extreme considering the difference in
	$LF
	"magnitude), and we pick up all our old items, with the shopkeeper
	$LF
	"being entirely happy with the situation.
	$LF
]div
[div class=p 
	"This sort of thing is why economists normally refuse to consider
	$LF
	"negative numbers.
	$LF
]div
[h4 id=Turn845 
	" Turn 845
	$LF
]h4
[div class=p 
	"We had to remove the Eyes of the Overworld for the raid on the shop,
	$LF
	"but there's no reason not to wear them right now (and their ability to
	$LF
	"see through walls is one that we like to keep up when possible because
	$LF
	"it makes the run easier to follow), so we put them back on
	$LF
	"immediately, and then teleportitis to our next destination, the stairs
	$LF
	"to Sokoban.  Our character doesn't know where they are, but thanks to
	$LF
	"memory watch, we do.
	$LF
]div
[h4 id=Turn846 
	" Turn 846
	$LF
]h4
[div class=p 
	"We walk up the stairs into Sokoban.  A small amount of manipulation is
	$LF
	"used to ensure a good layout.
	$LF
]div
[div class=p 
	"The "Sokoban" branch is a NetHack-physics recreation of the famous
	$LF
	"crate-pushing puzzle game.  The rules here are slightly different from
	$LF
	"elsewhere in NetHack: many diagonal moves involving boulders are
	$LF
	"prohibited, traps can't be escaped, and a wide range of actions
	$LF
	"(actions considered to be "cheating at Sokoban") will reduce your
	$LF
	"in-game Luck score (much the same way as the difficulty adjustment for
	$LF
	"playing on Friday 13 does).  As in Sokoban, the goal is to push the
	$LF
	"boulders onto particular squares so that you can go to the next level.
	$LF
]div
[div class=p 
	"Most importantly, though, teleportation doesn't work in Sokoban (you
	$LF
	"just remain in place), and the walls are particularly solid and can't
	$LF
	"be bypassed by any of the usual means.  Additionally, jumping is one
	$LF
	"of the actions that causes a Luck score penalty.  Therefore, most of
	$LF
	"our movement options are disabled, making walking less of a bad idea
	$LF
	"than normal.
	$LF
]div
[h4 id=Turns847848 
	" Turns 847-848
	$LF
]h4
[div class=p 
	"The first two moves of the puzzle solution: we walk towards the
	$LF
	"nearest boulder.
	$LF
]div
[h4 id=Turn849 
	" Turn 849
	$LF
]h4
[div class=p 
	"And this is the first hint that we aren't planning to solve the puzzle
	$LF
	"the normal way.  We bring out everyone's favourite inanimate object
	$LF
	"destroyer, the force bolt spell, and outright destroy one of the
	$LF
	"boulders.
	$LF
]div
[div class=p 
	"You aren't supposed to do that, and so we incur a Luck penalty
	$LF
	"(without even a message; many players consider this to be unfair for
	$LF
	"unspoiled players).
	$LF
]div
[h4 id=Turn850 
	" Turn 850
	$LF
]h4
[div class=p 
	"(TODO: Explain what boulders look like on the map. I don't know
	$LF
	"whether they're 0 or ` with the settings we have.)
	$LF
]div
[div class=p 
	"So if we aren't solving the puzzle, why are we here? This is the first
	$LF
	"hint for what we're planning to do instead.  Sokoban is full of
	$LF
	"boulders, and we need plenty of rocks later in the run.  So the idea
	$LF
	"is to raid Sokoban as a ready source of rock.  Last turn, we
	$LF
	"manipulated the boulder to shatter into an unusually large number of
	$LF
	"usable rocks.  This turn we walk over to them and pick them up.
	$LF
]div
[h4 id=Turns851852 
	" Turns 851-852
	$LF
]h4
[div class=p 
	"Same idea as before.  Smash a boulder, manipulate a bunch of rocks
	$LF
	"from it, then pick up the rocks.
	$LF
]div
[h4 id=Turn853 
	" Turn 853
	$LF
]h4
[div class=p 
	"We move further along the puzzle by jumping.  There's a penalty for
	$LF
	"doing so, but as this is a TAS, we don't care.  (It wouldn't have been
	$LF
	"particularly useful earlier in the level; we'd have got stuck on
	$LF
	"corners.)  We've now incurred 3 points of luck penalties.
	$LF
]div
[h4 id=Turn854 
	" Turn 854
	$LF
]h4
[div class=p 
	"(TODO: Perhaps we could merge this use of the options menu with the
	$LF
	"previous one.)
	$LF
]div
[div class=p 
	"And now for a technique that blew the mind of at least one NetHack
	$LF
	"player when I explained it to them.  We open the options menu, and
	$LF
	"change the "packorder" option.  This rarely used option is typically
	$LF
	"considered entirely cosmetic; it changes the order in which items are
	$LF
	"sorted in inventory.  (We also turn the "confirm" option on at the
	$LF
	"same time, because we'll be needing it on soon and it'll save going
	$LF
	"into the options menu repeatedly; it won't have any effect right now.)
	$LF
]div
[div class=p 
	"So why is it useful to change it in a TAS?  There are two reasons.
	$LF
	"The immediately important one, though, is to help with luck
	$LF
	"manipulation.  We'll be polymorphing items very soon, and the game
	$LF
	"generates random numbers for each item to determine what it changes
	$LF
	"into.  With a normal understanding of statistics, it doesn't matter
	$LF
	"what order the game checks the items in during polymorph, because the
	$LF
	"situation is symmetrical; it's just as likely for your dice to roll an
	$LF
	"X then a Y as they are to roll a Y then an X.  With a TAS, though, we
	$LF
	"can check to see which result happens with less manipulation, and then
	$LF
	"change the sequence in which items are stored in memory (using the
	$LF
	"packorder option) so that the right random numbers hit the right
	$LF
	"items.  (The other reason won't become clear until later.)
	$LF
]div
[div class=p 
	"With the items rearranged in memory, we can drop the items we're
	$LF
	"planning to polymorph: two rocks and an unlabelled (i.e. blank)
	$LF
	"scroll.
	$LF
]div
[h4 id=Turns855856 
	" Turns 855-856
	$LF
]h4
[div class=p 
	"And now, we polymorph the items, and pick up the resulting items.  The
	$LF
	"odds of this turn working out were very low: we're trying to polymorph
	$LF
	"two item stacks at once, each into a particular new item stack (rocks
	$LF
	"to valuable gems, and blank scroll to scroll of identify).
	$LF
	"Polymorphing a useless item into a useful one has reduced odds of
	$LF
	"working, and because we aren't wearing our robe right now, the
	$LF
	"polymorph spell only has 10% odds of working at all.
	$LF
]div
[div class=p 
	"On top of all that, we only have limited room for manipulation.  We've
	$LF
	"been watching the sequence of random numbers coming up for a while,
	$LF
	"and reasonably soon in the RNG sequence is a very rare sequence of
	$LF
	"numbers that we have a particular purpose in mind for.  We need to be
	$LF
	"mostly done with the raid on Sokoban by then (for reasons that will
	$LF
	"become clear later), so we only have a limited supply of random
	$LF
	"numbers left.  (In fact, we only just had enough RNG headroom to get
	$LF
	"this to work; if we'd needed even two more seeds for this
	$LF
	"manipulation, we'd have had to rearrange the next several turns to get
	$LF
	"all the random numbers affecting the right turns.  I'd pretty much
	$LF
	"given up getting this strategy to work, but the second-last attempt
	$LF
	"was a nice surprise.)
	$LF
]div
[h4 id=Turn857 
	" Turn 857
	$LF
]h4
[div class=p 
	"We use our newly-polymorphed scroll of identify (it's unidentified
	$LF
	"itself, being given only a randomly generated level, but as usual that
	$LF
	"doesn't stop us), using it to identify our newly-polymorphed gems (and
	$LF
	"discovering them to be jacinths).  Although while making the run, we
	$LF
	"knew what the gems were through memory watch, our character didn't
	$LF
	"know what they were.  Giving up a known-valuable gem is considered to
	$LF
	"be more of a sacrifice by the game than giving up an unidentified gem
	$LF
	"is (by a factor of 2.5, for the purpose with which we use the gems,
	$LF
	"meaning we only need two gems and not 5).
	$LF
]div
[h4 id=Turn858 
	" Turn 858
	$LF
]h4
[div class=p 
	"This turn shows another way in which our Sokoban strategy deviates
	$LF
	"from normal play.  We still have the wand of teleport that we used to
	$LF
	"teleport the antigold into the shop, so we can teleport around other
	$LF
	"items.  In this case, we teleport the boulder to our south (although
	$LF
	"there's no immediate visual effect; this seems to be a graphical
	$LF
	"glitch in the game, because it goes away if I insert a "redraw"
	$LF
	"command).  We can't see the square it ended up from where we're
	$LF
	"standing, but it's in the row of four pits (blue ^) near the bottom of
	$LF
	"the screen.
	$LF
]div
[h4 id=Turn859 
	" Turn 859
	$LF
]h4
[div class=p 
	"Just because the main reason we're here is to pick up rocks, that
	$LF
	"doesn't mean that we can't do other things too.  This is a convenient
	$LF
	"time to pick up a pearl ring that generated on the ground (which was
	$LF
	"manipulated to generate along with the level), via jumping to its
	$LF
	"square.  The ring is a ring of conflict, a magical effect that we'll
	$LF
	"need much later.
	$LF
]div
[h4 id=Turns860861 
	" Turns 860-861
	$LF
]h4
[div class=p 
	"A couple more jumps later (bringing our total luck penalty to 6), we
	$LF
	"arrive next to the row of pits.  The Eyes of the Overworld can see
	$LF
	"through boulders the same way they see through walls, so we can now
	$LF
	"see that that boulder we teleported has filled one of the four pits at
	$LF
	"the bottom of the map.
	$LF
]div
[h4 id=Turn862 
	" Turn 862
	$LF
]h4
[div class=p 
	"We push another boulder into a pit.  (This particular boulder and pit
	$LF
	"generate right next to each other, presumably as a tutorial to let
	$LF
	"players know how Sokoban works mechanically.)
	$LF
]div
[h4 id=Turns863864 
	" Turns 863-864
	$LF
]h4
[div class=p 
	"We teleport another boulder, this time the one to our north, and land
	$LF
	"it in the corridor to our west.  Unlike the first one, it doesn't land
	$LF
	"in a pit; however, because it's right next to a pit, we can just push
	$LF
	"it in as we walk along the corridor.  Then we move along to the next
	$LF
	"square.
	$LF
]div
[h4 id=Turn865 
	" Turn 865
	$LF
]h4
[div class=p 
	"This is another point at which we temporarily pause what we're doing
	$LF
	"to do something else.  This time, we're using the scroll of create
	$LF
	"monster (that we stole from Sablja so that his wand of striking would
	$LF
	"become a valid steal).  We manipulate it to produce a gray unicorn,
	$LF
	"which will be important later in the run for multiple reasons.
	$LF
]div
[h4 id=Turn866 
	" Turn 866
	$LF
]h4
[div class=p 
	"And here's the first reason.  Throwing gems to unicorns adjusts your
	$LF
	"luck; if the unicorn shares your alignment (here, we have a neutral
	$LF
	"unicorn and a neutral character), the adjustment is always a boost.
	$LF
	"If your character knows the gem's identity for certain, this gives the
	$LF
	"largest possible boost (+5, cancelling out most of the luck penalties
	$LF
	"we've incurred so far).
	$LF
]div
[div class=p 
	"Unicorns are programmed to try to avoid lining up with you and to
	$LF
	"teleport away if you throw a gem at them.  The "no teleporting"
	$LF
	"restriction in Sokoban affects monsters as well as the player, though,
	$LF
	"so the unicorn can't do much to escape other than running (it moves
	$LF
	"twice as fast as we do).  Interestingly, restrictions against
	$LF
	"teleporting don't affect items, and don't affect cases where a player
	$LF
	"teleports a monster (if we zapped the wand of teleport at the unicorn,
	$LF
	"it'd teleport despite the restrictions).
	$LF
]div
[h4 id=Turn867 
	" Turn 867
	$LF
]h4
[div class=p 
	"We teleport another boulder into a pit.  This time, it's the boulder
	$LF
	"to our north-east, and the more distant remaining pit of what was
	$LF
	"originally the group of four.
	$LF
]div
[h4 id=Turn868 
	" Turn 868
	$LF
]h4
[div class=p 
	"We push the boulder that we teleported here earlier into the last
	$LF
	"remaining pit.  Now we can reach the bottom-left corner of the Sokoban
	$LF
	"level.
	$LF
]div
[h4 id=Turn869 
	" Turn 869
	$LF
]h4
[div class=p 
	"We jump over to that corner.  It's now possible to see that there are
	$LF
	"two scrolls here.  These are scrolls of earth, which generate boulders
	$LF
	"when used.  The intended use is to fix mistakes made solving Sokoban,
	$LF
	"but the main reason we want them is to generate boulders which can be
	$LF
	"broken into rocks.  (We won't be using them for this purpose
	$LF
	"immediately; we won't need the rocks we're collecting until much
	$LF
	"later, and breaking boulders is better done outside Sokoban due to
	$LF
	"luck penalties.)
	$LF
]div
[h4 id=Turns870876 
	" Turns 870-876
	$LF
]h4
[div class=p 
	"We spend three moves and four jumps backtracking out of Sokoban; we
	$LF
	"now have most of what we came for.  We're back up to 6 points of Luck
	$LF
	"penalties for "cheating" here.  (Strangely, although we've been
	$LF
	"cheating like mad with our wand of teleport, the penalties given have
	$LF
	"mostly been for fast movement, which doesn't even help solve the
	$LF
	"puzzle.)
	$LF
]div
[h4 id=Turn877 
	" Turn 877
	$LF
]h4
[div class=p 
	"We push a boulder northwards, thus blocking the unicorn against a
	$LF
	"wall.  We didn't even have to manipulate the unicorn to move it back
	$LF
	"towards the entrance of the level (things just work out really well
	$LF
	"sometimes).  In its current location, the unicorn can't escape our
	$LF
	"line of fire; there are no squares within two spaces of its position
	$LF
	"that aren't adjacent to us.  It thus decides to stay put instead (and
	$LF
	"will do as long as we don't move and it's still trying to escape from
	$LF
	"us); this is actually the result of an AI bug that I discovered in
	$LF
	"February 2015, which causes the square to our northeast to act as if
	$LF
	"it's more favoured for the unicorn than the square to our southeast
	$LF
	"due to incorrect handling of ties between squares in the monster AI
	$LF
	"code.
	$LF
]div
[h4 id=Turn878 
	" Turn 878
	$LF
]h4
[div class=p 
	"We throw the other jacinth stone to the unicorn, thus cancelling out
	$LF
	"another 5 points of Luck penalty (putting us back to -1; because we
	$LF
	"were at +0 before entering Sokoban, and -1 is where your Luck starts
	$LF
	"on Friday 13, we're now back to the same Luck status as at the start
	$LF
	"of the game).
	$LF
]div
[h4 id=Turn879 
	" Turn 879
	$LF
]h4
[div class=p 
	"It's now time to show off another luck manipulation technique.  So
	$LF
	"far, when we wanted to discard random numbers, we've nearly always
	$LF
	"been walking into walls; in situations where there were no available
	$LF
	"wall, we've been doing things in a different order so that different
	$LF
	"random numbers hit different actions (e.g. when we were practicing the
	$LF
	"detect monster spell while in xorn form).  Right now, though, we're
	$LF
	"just a few seeds before a sequence of random numbers that give us a
	$LF
	"very low-probability event, and we don't have an adjacent wall (and we
	$LF
	"can't use the boulder like a wall because giants are large enough to
	$LF
	"step over boulders).
	$LF
]div
[div class=p 
	"The solution is to repeatedly declare attacks on the gray unicorn,
	$LF
	"then cancel them.  We turned on the "confirm" option, meaning that
	$LF
	"we'll be given a chance to cancel an attack on a peaceful monster; and
	$LF
	"declaring the attack uses up an RNG seed the same way that walking
	$LF
	"into a wall does.  Thus, we need only declare and cancel attacks on
	$LF
	"the unicorn 11 times (the number of seeds we needed to waste), and the
	$LF
	"RNG is in exactly the right place for us, taking no further in-game
	$LF
	"time.  (Wallwalking manipulation is better than attack-cancel
	$LF
	"manipulation because it's much faster in realtime and usually has no
	$LF
	"visible effect; but when you don't have a wall, you don't have a
	$LF
	"wall.)
	$LF
]div
[div class=p 
	"We'd been keeping an eye on this RNG location for literally months, at
	$LF
	"this point, planning things so that we'd have a spare turn (we do) and
	$LF
	"a sufficiently high Luck score (-1 is enough) when the RNG sequence in
	$LF
	"question came up.  When planning for very highly unlikely events, you
	$LF
	"can't manipulate them just by walking into walls; it'd take several
	$LF
	"minutes of nothing apparently happening, which tends to bore viewers
	$LF
	"and makes for a bad run.  Instead, the only real option is to work out
	$LF
	"when in the RNG sequence the event will happen, and plan your route
	$LF
	"around it.
	$LF
]div
[div class=p 
	"As for what the unlikely event is?  Well, we have plenty of wands of
	$LF
	"wishing at this point, so we zap one of them.  Our wish is for an
	$LF
	"empty chest (I decided to name it Bob, in honour of an infamous
	$LF
	"missile tank from Metroid Fusion).  The wish parser recognises "empty"
	$LF
	"only for tins, not for chests, and so despite the apparent wording of
	$LF
	"the wish, the chest comes with contents.  In particular, among its
	$LF
	"contents is another wand of wishing.  In other words, we've managed to
	$LF
	"violate the fundamental law of wish conservation in fiction, by
	$LF
	"successfully wishing for more wishes.  (And this would completely
	$LF
	"break the game, were it not for the fact that we've already completely
	$LF
	"broken the game).  The odds of this happening are not at all good (the
	$LF
	"wand of wishing has to be generated completely at random, which is a
	$LF
	"0.03% chance for each item in the chest), and they're not helped by
	$LF
	"the fact that generating contents for a chest has notable amounts of
	$LF
	"RNG jitter (meaning that generating a wand of wishing in a chest takes
	$LF
	"longer to manipulate than its probability would suggest).
	$LF
]div
[div class=p 
	"There's no need to actually open up the chest to look at the wand
	$LF
	"right now (we have plenty of wands of wishing in main inventory).
	$LF
	"Part of the reason I named the chest is to make it easier to recognise
	$LF
	"it as the same chest when we finally use it.
	$LF
]div
[h4 id=Turn880 
	" Turn 880
	$LF
]h4
[div class=p 
	"Although the unicorn has served an important purpose for us by
	$LF
	"boosting our Luck score (the previous turn wouldn't have worked with a
	$LF
	"much lower Luck score, because low Luck causes wands of wishing to
	$LF
	"fail), that doesn't mean its job is done yet.  We'll be using the
	$LF
	"unicorn later on in the run, too.  In order to navigate it out of
	$LF
	"Sokoban, we'll need it to follow us down the stairs, and because
	$LF
	"unicorns don't naturally use stairs, we charm it so that it follows
	$LF
	"us.  It refunds our jacinths in the process; we'll be able to use them
	$LF
	"later on to boost Luck again (although the unicorn would need to be
	$LF
	"untamed first).
	$LF
]div
[div class=p 
	"Also of note is the wood golem (brown apostrophe) in the middle top
	$LF
	"area of the level (near the greater-than sign that represents the
	$LF
	"stairs down).  It moves to the west, apparently inexplicably (given
	$LF
	"the monster AI, it should be seeking us out by following our tracks,
	$LF
	"and it was adjacent to a square we've been on recently enough that the
	$LF
	"tracks are still fresh).  The reason for its behaviour is due to an
	$LF
	"incorrect optimization in the monster tracking code, whose main effect
	$LF
	"is to make monsters move in an apparently unpredictable way (it's
	$LF
	"technically predictable and deterministic, but sufficiently complex
	$LF
	"that predicting it is a pain) that's manipulated based on the precise
	$LF
	"details of your own movements.  It's a good thing that the golem's
	$LF
	"moving westbound; otherwise, it would get in our way.
	$LF
]div
[h4 id=Turns881882 
	" Turns 881-882
	$LF
]h4
[div class=p 
	"We move around a little to manipulate the unicorn's movement.  The pet
	$LF
	"AI is different from the hostile monster AI; in particular, it has a
	$LF
	"rather larger random factor, so luck-manipulating it is rather easier.
	$LF
	"We take the opportunity to pick up the jacinths while we're here.  The
	$LF
	"unicorn picks up a cream pie (this is irrelevant to the run, but
	$LF
	"mildly amusing, so once it had happened I saw no reason to manipulate
	$LF
	"it out).
	$LF
]div
[h4 id=Turns883884 
	" Turns 883-884
	$LF
]h4
[div class=p 
	"Despite all the excitement with chests and wishes and unicorns, it's
	$LF
	"important not to lose sight of the reason we came here.  We smash
	$LF
	"another boulder and loot the resulting rocks (as usual, the boulder's
	$LF
	"luck-manipulated to produce an unusually large number of usable
	$LF
	"rocks).
	$LF
]div
[h4 id=Turns885888 
	" Turns 885-888
	$LF
]h4
[div class=p 
	"This is just leaving Sokoban via the most direct available path
	$LF
	"(including one jump).  The unicorn has no trouble keeping up, although
	$LF
	"it needs a minor amount of manipulation to persuade it to actually do
	$LF
	"so.
	$LF
]div
[div class=p 
	"-_-_-_
	$LF
]div
[div class=p 
	"Things from this point forward require far more documentation which will happen over time.  Beyond turn 888 (the last turn documented in the link above), a new face appears; whereas all turns prior to 888 were done by ais523 and dwangoAC, a NetHack master by the name of ChrisS67 manned the controls for the remainder of the run, technically completing more of the run by turncount in less than 6 hours than ais523 and dwangoAC had in about 6 years of work.
	$LF
]div
[div class=p 
	"As a brief summary of turns past 888, we prepare an ascension kit, fix alignment, luck, and a few other things, blast through the quest in 3 turns, and manage to completely destroy the planes.  More some other time when it isn't 4:00 AM.
	$LF
]div
[h3 id=SyncNotes 
	" Sync notes
	$LF
]h3
[div class=p 
	"The submission file associated with this submission is (still) wrong!  The source file is at 
	[a href=http://acbit.net/static/tas/NetHackTAS20160401.nttrec rel=noopener external nofollow 
		"http://acbit.net/static/tas/NetHackTAS20160401.nttrec
	]a
	" (minimally updated post-submission to correct a few typos) and can be considered a movie file for the nethack-tas-tools framework (git clone 
	[a href=http://nethack4.org/media/nethack-tas-tools.git rel=noopener external nofollow 
		"http://nethack4.org/media/nethack-tas-tools.git
	]a
	" is the best option).  The submission file will need to be corrected to play back to completion in jpc-rr.  This notice will be removed once this issue is resolved.
	$LF
]div
[h3 id=PotentialImprovements 
	" Potential improvements
	$LF
]h3
[div class=p 
	"Look no further than the aforementioned 
	[a href=http://nethack4.org/pastebin/new-2003-turn-plan.txt rel=noopener external nofollow 
		"http://nethack4.org/pastebin/new-2003-turn-plan.txt
	]a
	" plan for a very detailed path forward to complete the game in far fewer turns than this one does (although it is very likely that a low turncount run will be longer from a realtime perspective due to the extra input required for the extreme luck manipulation that will be used).  I have no illusions that this run is perfect; in fact, it is glaringly obvious that the first ~900 turns are very different than the remaining turns in style and goal, but I believe I am justified in saying that any run that literally takes almost 6 years to complete "perfectly" should get at least some leeway in judging.  To phrase this another way, my hope is that this run *can* be accepted, but is eventually obsoleted by the 2,003 turn run that we hope to complete within the next couple of years.  There is substantial precedent for this on the site that I feel warrants this viewpoint but I will stoicly understand if a judge decides otherwise.
	$LF
]div
[h3 id=Thanks 
	" Thanks
	$LF
]h3
[div class=p 
	"First, Ilari deserves extensive credit for his work in making jpc-rr capable of handling spamming keyboard inputs as fast as this run is capable of.  The speed TAS work was a concerted effort by a number of #nethack IRC folks in addition to ChrisS67, including stenno and Adeon.  In the final movie, only input from ais523, dwangoAC, and ChrisS67 made it into the run, but over the life of this run being developed there were countless others that deserve to be thanked.  Finally, thank you to everyone's patience as this task has trudged along, and for everyone who supported me along the way.  I never would have learned Python to the level of skill I have now had it not been for so many sessions of help I received, and for that I'm thankful.  I'll save the rest of the glurge for the "lowest in-game turncount" run, but seriously all, thanks!
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/Noxxa 
		"Noxxa
	]a
	": Judging.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/Samsara 
		"Samsara
	]a
	": File updated.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/Noxxa 
		"Noxxa
	]a
	": All things considered, I do have to say this is a pretty optimized run. It achieves the goal of spending ~900 turns preparing for fastest gametime, then speed-TASing the game in 6 hours focusing mostly but not entirely on realtime rather well. The first part of the run is particularly well optimized for its goal. The second part is not bad either, considering it still fulfills its goal of having been done in six hours, and its occasional choices of actions (including wishing for a pony just to never use it, among many other things) still fit the goal of focusing mostly but not 
	[em 
		"entirely
	]em
	" on realtime.
	$LF
]div
[div class=p 
	"So, all in all, this is a pretty optimized run, it has a fair amount of playaround to keep things interesting, and it would be perfect if it were not for a slight little problem. That problem being that "spend ~900 turns preparing for fastest gametime, then speed-TAS the game in 6 hours focusing mostly but not entirely on realtime" is not exactly doing hot as a category.
	$LF
]div
[div class=p 
	"Reasons for why this is the case are not definitive yet, but some factors that are speculated to be involved include the facts that this is an incredibly arbitrary category, and is only really a mask for the fact that the run's goal switched completely midway through the run, ending up with a run that's far from optimal in both real time and game time; and the speed-TASing segment, while a good attempt, was a visibly rushed effort with a lot of routing errors and mistakes and many instances where it could be better optimized for real time efforts, let alone game time.
	$LF
]div
[div class=p 
	"So yeah, rejecting because "spend ~900 turns preparing for fastest gametime, then speed-TAS the game in 6 hours focusing mostly but not entirely on realtime" turned out not to be a particularly good category. Better luck with your next, hopefully less arbitrary run!
]div
