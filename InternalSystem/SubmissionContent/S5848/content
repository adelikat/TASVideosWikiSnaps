9
[p 
	(youtube|v=zwh6H3pEdIA)
	$LF
]p
[p 
	"Cacoma Knight is an action/puzzle game where you need to cut the board into pieces. Each cut will paint the smaller section, until enough of the board is painted. In this run, I save lots of time mostly from cutscenes, load time, and lag. However, nearly every level is improved as well thanks to a number of tactical changes.
	$LF
]p
[h2 
	" Major Strategy Differences from existing run:
	$LF
]h2
[h3 
	" Version: 
	$LF
]h3
[p 
	"I use the Japanese version of the game. For the most part, the games are identical. However there are some differences that are useful for a speedrun. First off: There are three less levels in the J version. Levels 6-1, 6-2, and 6-3 from the USA version are removed, resulting in only 18 levels instead of 21. World 7 is then renamed as world 6.
	$LF
]p
[p 
	"It makes the most sense to compare (J) level 6 to (USA) level 7. USA level 6 appear to be the added levels.
	$LF
]p
[ul 
	[li 
		"6-1 (J) requires 75%, compared to 7-1(USA) requires 86%
		$LF
	]li
	[li 
		"6-2 (J) requires 80%, compared to 7-2(USA) requires 86%
		$LF
	]li
	[li 
		"6-3 (J) requires 90%, compared to 7-3(USA) requires 88%.
		$LF
	]li
]ul
[p 
	"Thus the (J) version is shorter, and a bit easier on 6-1/6-2 but a bit harder on 6-3. This is worth roughly 1 minute of savings due to having 3 less levels.
	$LF
]p
[p 
	"The (J) version also loads levels MUCH MUCH faster. It's about 1 second of saved loading time on every level, for a total of 18 seconds over the run. Both versions are poorly coded and contain a lot of lag/loading frames, but the (J) version seems at least better.
	$LF
]p
[p 
	"Additionally, as with many games, the (J) version has less frames spent on text. This only effects the villain's speech and is neglible, but it helps.
	$LF
]p
[h3 
	"Characters:
	$LF
]h3
[p 
	"I choose the 2 fast characters, instead of the previous run which used 1 medium and 1 fast. The game is poorly coded, so this actually increases the lag of the game on some levels. Many levels, however, are not effected. Some levels have few enemies, in which case the choice of faster character does not add more lag. Some levels have tons of enemies/bullets, in which case the level would have lagged regardless of the character choice. Therefore we only actually turn out worse on the few levels which fall inbetween those two extremes: The levels that contain a medium number of enemies such that having a fast character is enough to lower the FPS from 60->(30-40). Since picking this character requires entering a new menu, we hope to be able to save at least ~200 frames during the run from level time alone. I succeeded, so the choice is correct.
	$LF
]p
[h3 
	"Mirror Fragments: 
	$LF
]h3
[p 
	"The initial reason for this run, is I noticed that the previous run collected mirror fragments, however these are actually a HUGE time waste. Avoiding collecting mirror fragments will skip the cinematic between levels, resulting in a savings of ~10 seconds per world. This nets about ~50 seconds in our run. Additionally, since we care about the treasures we get, it forces us to change our strategy on the levels. Having 2 fast characters makes this run more flexible in terms of strategies as well.
	$LF
]p
[h3 
	"Tactical Improvements:
	$LF
]h3
[h4 
	" Avoid Vertical Box Shape: 
	$LF
]h4
[p 
	"The game is poorly coded, as I mentioned. After enclosing a box, the game must lag while it calculates which side of the line encloses a smaller area. While intuitively, we might think the time should be based on the area alone, it actually is affected by the shape too. A verticle rectangle takes longer than a horizontal one. Therefore, you save frames by getting more horizontal lines whenever possible. This is likely due to an optimization in the flood fill algorithm (go read wikipedia if you're curious).
	$LF
]p
[h4 
	" Avoid Vertical Movement: 
	$LF
]h4
[p 
	"Similarly, the game does NOT like when players move vertically, and this causes more lag than moving horizontally. This matters on the "inbetween" levels where we want to carefully control the lag from moving too fast.
	$LF
]p
[h4 
	" Movement on Sidelines: 
	$LF
]h4
[p 
	"You can choose to move on the sidelines at a slow speed (without drawing). You can't do this while drawing a line in the field. However, this means that at the beginning of each level, you have a bit more leeway when manipulating lag rather than having a character stand still entirely.
	$LF
]p
[h4 
	" Lag Manipulation: 
	$LF
]h4
[p 
	"The game prefers to run at 60, 40, or 30FPS. Sometimes you can manipulate the game that is running at 30 FPS to go up to 40 FPS when the game is actually somewhere between those two values. (Likely the designers didn't want it switching frame-rate too often, so it tries to sit at one of those three levels).
	$LF
]p
[h4 
	" Enemy Removal:
	$LF
]h4
[p 
	"The spiral pig can be stunned when it runs into your line. This reduces lagby a lot. Other large enemies can also be destroyed if they are inside the box when it complete. However, the trade off of making a small box to get rid of the enemy is hard to balance, so I don't do it in this run (though killing an owl was almost worth it).
	$LF
]p
[h4 
	" AI Manipulation: 
	$LF
]h4
[p 
	"The AI can be manipulated. The primary thing I manipulate is the pink rings on the last level. They fly towards the player, so by manipulating your position you can cause them to change path, and fail to collide with the line (collision in this game is also badly programmed, if you haven't noticed the pattern).
	$LF
]p
[h4 
	" Items: 
	$LF
]h4
[p 
	"The speed boots is a very good item for a speed run. It doubles the speed of even the fastest character. However it's only used on one level, because it needs to be near the edge for it to have usefulness. A future runner should highly consider whether they can manipulate item drops to be near the corners, which would vastly improve the run (if possible).
	$LF
]p
[h3 
	" Previous Techniques:
	$LF
]h3
[h4 
	" Aim for Minimum Percent: 
	$LF
]h4
[p 
	"This is fairly self explanatory. The flood-fill algorithm is really slow, but it's optimized to end once it determines which side is smaller. So, by aiming for the least percent, you are actually aiming to reduce the lag frames. In my case, I don't worry too much about getting the exact number, as long as it's the fastest variation. This is due to horizontal rectangles being faster, so exact percentages which require irregulare shapes are not any faster.
	$LF
]p
[h2 
	" Level Breakdown:
	$LF
]h2
[table 
	[tbody 
		[tr 
			[th 
				" 
			]th
			[th 
				"WarHippy (total) 
			]th
			[th 
				"(WH section) 
			]th
			[th 
				" Meerkov (total) 
			]th
			[th 
				"(section difference)
			]th
			[th 
				"(Net Difference)
				$LF
			]th
		]tr
		[tr 
			[td 
				"begin 
			]td
			[td 
				" 0 
			]td
			[td 
				" 1286 
			]td
			[td 
				" 0 
			]td
			[td 
				" 286 
			]td
			[td 
				" 286
				$LF
			]td
		]tr
		[tr 
			[th 
				"1.1 
			]th
			[th 
				" 1286 
			]th
			[th 
				" 449 
			]th
			[th 
				" 1572 
			]th
			[th 
				" -28 
			]th
			[th 
				" 258
				$LF
			]th
		]tr
		[tr 
			[td 
				"(load)
			]td
			[td 
				"1735 
			]td
			[td 
				" 538 
			]td
			[td 
				" 1993 
			]td
			[td 
				" -66 
			]td
			[td 
				" 192
				$LF
			]td
		]tr
		[tr 
			[th 
				"1.2 
			]th
			[th 
				" 2273 
			]th
			[th 
				" 449 
			]th
			[th 
				" 2465 
			]th
			[th 
				" -25 
			]th
			[th 
				" 167
				$LF
			]th
		]tr
		[tr 
			[td 
				" (load) 
			]td
			[td 
				"2722 
			]td
			[td 
				" 540 
			]td
			[td 
				" 2889 
			]td
			[td 
				" -67 
			]td
			[td 
				" 100
				$LF
			]td
		]tr
		[tr 
			[th 
				"1.3 
			]th
			[th 
				" 3262 
			]th
			[th 
				" 463 
			]th
			[th 
				" 3362 
			]th
			[th 
				" 3 
			]th
			[th 
				" 103
				$LF
			]th
		]tr
		[tr 
			[td 
				" (load) 
			]td
			[td 
				"3725 
			]td
			[td 
				" 1123 
			]td
			[td 
				" 3828 
			]td
			[td 
				" -651 
			]td
			[td 
				" -548
				$LF
			]td
		]tr
		[tr 
			[th 
				"2.1 
			]th
			[th 
				" 4848 
			]th
			[th 
				" 465 
			]th
			[th 
				" 4300 
			]th
			[th 
				" 29 
			]th
			[th 
				" -519
				$LF
			]th
		]tr
		[tr 
			[td 
				" (load) 
			]td
			[td 
				"5313 
			]td
			[td 
				" 545 
			]td
			[td 
				" 4794 
			]td
			[td 
				" -73 
			]td
			[td 
				" -592
				$LF
			]td
		]tr
		[tr 
			[th 
				"2.2 
			]th
			[th 
				" 5858 
			]th
			[th 
				" 461 
			]th
			[th 
				" 5266 
			]th
			[th 
				" -25 
			]th
			[th 
				" -617
				$LF
			]th
		]tr
		[tr 
			[td 
				" (load) 
			]td
			[td 
				"6319 
			]td
			[td 
				" 537 
			]td
			[td 
				" 5702 
			]td
			[td 
				" -65 
			]td
			[td 
				" -682
				$LF
			]td
		]tr
		[tr 
			[th 
				"2.3 
			]th
			[th 
				" 6856 
			]th
			[th 
				" 591 
			]th
			[th 
				" 6174 
			]th
			[th 
				" -28 
			]th
			[th 
				" -710
				$LF
			]th
		]tr
		[tr 
			[td 
				" (load) 
			]td
			[td 
				"7447 
			]td
			[td 
				" 1122 
			]td
			[td 
				" 6737 
			]td
			[td 
				" -649 
			]td
			[td 
				" -1359
				$LF
			]td
		]tr
		[tr 
			[th 
				"3.1 
			]th
			[th 
				" 8569 
			]th
			[th 
				" 498 
			]th
			[th 
				" 7210 
			]th
			[th 
				" -22 
			]th
			[th 
				" -1381
				$LF
			]th
		]tr
		[tr 
			[td 
				" (load) 
			]td
			[td 
				"9067 
			]td
			[td 
				" 557 
			]td
			[td 
				" 7686 
			]td
			[td 
				" -84 
			]td
			[td 
				" -1465
				$LF
			]td
		]tr
		[tr 
			[th 
				"3.2 
			]th
			[th 
				" 9624 
			]th
			[th 
				" 492 
			]th
			[th 
				" 8159 
			]th
			[th 
				" -20 
			]th
			[th 
				" -1485
				$LF
			]th
		]tr
		[tr 
			[td 
				" (load) 
			]td
			[td 
				"10116 
			]td
			[td 
				" 539 
			]td
			[td 
				" 8631 
			]td
			[td 
				" -66 
			]td
			[td 
				" -1551
				$LF
			]td
		]tr
		[tr 
			[th 
				"3.3 
			]th
			[th 
				" 10655 
			]th
			[th 
				" 632 
			]th
			[th 
				" 9104 
			]th
			[th 
				" -40 
			]th
			[th 
				" -1591
				$LF
			]th
		]tr
		[tr 
			[td 
				" (load) 
			]td
			[td 
				"11287 
			]td
			[td 
				" 1134 
			]td
			[td 
				" 9696 
			]td
			[td 
				" -660 
			]td
			[td 
				" -2251
				$LF
			]td
		]tr
		[tr 
			[th 
				"4.1 
			]th
			[th 
				" 12421 
			]th
			[th 
				" 500 
			]th
			[th 
				" 10170 
			]th
			[th 
				" -25 
			]th
			[th 
				" -2276
				$LF
			]th
		]tr
		[tr 
			[td 
				" (load) 
			]td
			[td 
				"12921 
			]td
			[td 
				" 556 
			]td
			[td 
				" 10645 
			]td
			[td 
				" -82 
			]td
			[td 
				" -2358
				$LF
			]td
		]tr
		[tr 
			[th 
				"4.2 
			]th
			[th 
				" 13477 
			]th
			[th 
				" 506 
			]th
			[th 
				" 11119 
			]th
			[th 
				" 15 
			]th
			[th 
				" -2343
				$LF
			]th
		]tr
		[tr 
			[td 
				" (load) 
			]td
			[td 
				"13983 
			]td
			[td 
				" 559 
			]td
			[td 
				" 11640 
			]td
			[td 
				" -85 
			]td
			[td 
				" -2428
				$LF
			]td
		]tr
		[tr 
			[th 
				"4.3 
			]th
			[th 
				" 14542 
			]th
			[th 
				" 600 
			]th
			[th 
				" 12114 
			]th
			[th 
				" 0 
			]th
			[th 
				" -2428
				$LF
			]th
		]tr
		[tr 
			[td 
				" (load) 
			]td
			[td 
				"15142 
			]td
			[td 
				" 1128 
			]td
			[td 
				" 12714 
			]td
			[td 
				" -655 
			]td
			[td 
				" -3083
				$LF
			]td
		]tr
		[tr 
			[th 
				"5.1 
			]th
			[th 
				" 16270 
			]th
			[th 
				" 639 
			]th
			[th 
				" 13187 
			]th
			[th 
				" -44 
			]th
			[th 
				" -3127
				$LF
			]th
		]tr
		[tr 
			[td 
				" (load) 
			]td
			[td 
				"16909 
			]td
			[td 
				" 555 
			]td
			[td 
				" 13782 
			]td
			[td 
				" -76 
			]td
			[td 
				" -3203
				$LF
			]td
		]tr
		[tr 
			[th 
				"5.2 
			]th
			[th 
				" 17464 
			]th
			[th 
				" 558 
			]th
			[th 
				" 14261 
			]th
			[th 
				" -50 
			]th
			[th 
				" -3253
				$LF
			]th
		]tr
		[tr 
			[td 
				" (load) 
			]td
			[td 
				"18022 
			]td
			[td 
				" 565 
			]td
			[td 
				" 14769 
			]td
			[td 
				" -86 
			]td
			[td 
				" -3339
				$LF
			]td
		]tr
		[tr 
			[th 
				"5.3 
			]th
			[th 
				" 18587 
			]th
			[th 
				" 628 
			]th
			[th 
				" 15248 
			]th
			[th 
				" -65 
			]th
			[th 
				" -3404
				$LF
			]th
		]tr
		[tr 
			[td 
				" (load) 
			]td
			[td 
				"19215 
			]td
			[td 
				" 1130 
			]td
			[td 
				" 15811 
			]td
			[td 
				" -35 
			]td
			[td 
				" -3439
				$LF
			]td
		]tr
		[tr 
			[th 
				"6.1 
			]th
			[th 
				" 20345 
			]th
			[th 
				" 797 
			]th
			[th 
				" 16906 
			]th
			[th 
				" -175 
			]th
			[th 
				" -3614
				$LF
			]th
		]tr
		[tr 
			[td 
				" (load) 
			]td
			[td 
				"21079 
			]td
			[td 
				" 526 
			]td
			[td 
				" 17528 
			]td
			[td 
				" -47 
			]td
			[td 
				" -3661
				$LF
			]td
		]tr
		[tr 
			[th 
				"6.2 
			]th
			[th 
				" 21618 
			]th
			[th 
				" 915 
			]th
			[th 
				" 18007 
			]th
			[th 
				" -174 
			]th
			[th 
				" -3835
				$LF
			]th
		]tr
		[tr 
			[td 
				" (load) 
			]td
			[td 
				"22400 
			]td
			[td 
				" 544 
			]td
			[td 
				" 18748 
			]td
			[td 
				" -65 
			]td
			[td 
				" -3900
				$LF
			]td
		]tr
		[tr 
			[th 
				"6.3 
			]th
			[th 
				" 22953 
			]th
			[th 
				" 834 
			]th
			[th 
				" 19227 
			]th
			[th 
				" -73 
			]th
			[th 
				" -3973
				$LF
			]th
		]tr
		[tr 
			[td 
				" (load) 
			]td
			[td 
				"23673 
			]td
			[td 
				" 1127 
			]td
			[td 
				" 19988 
			]td
			[td 
				" -977 
			]td
			[td 
				" -4950
				$LF
			]td
		]tr
	]tbody
]table
[ul 
	[li 
		"Note: I compared level 6 (USA) against level 6(J) even though they are different. Notice that 6(J) is harder than 6(USA) but I still saved time on each stage in world 6 anyway. I removed the times for world 7 since now there is nothing to compare to.
		$LF
	]li
]ul
[p 
	"Final Time: 19988
	$LF
]p
[p 
	"WarHippy Time: 28416
	$LF
]p
[h4 
	" Total Savings: 8428 frames (2 minutes and 20.5 seconds), 29.6% of total time!
	$LF
]h4
[hr 
]hr
[p 
	(__wikiLink|user:GoddessMaria)
	": Judging...
	$LF
]p
[p 
	(__wikiLink|user:GoddessMaria)
	": As far as the matter of running on the Japanese version over the US version due to having 3 less levels in comparison, it is still considered valid for submission. That being said, the author has done well in optimizing the previous run where applicable. Audience reception, however, was lukewarm thus disqualifying it from Moons. Despite that, it is still acceptable under Vault rules and it does beat the game in faster time as an Any% run should. Therefore...
	$LF
]p
[p 
	"Accepting to Vault as improvement to the currently published movie.
	$LF
]p
[p 
	(__wikiLink|user:feos)
	": Pub.
]p
