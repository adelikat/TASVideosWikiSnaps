14
[div class=p 
	"Hello, this is my first 
	[em 
		"good
	]em
	" TAS and my first submitted TAS to TASVideos. I’ve always wanted to improve the warpless TAS since I’m an RTA runner and we’ve known about numerous time saves for many years, it’s just none of us knew how to TAS. I decided to finally try learning it and came out of it with this.
	$LF
]div
[h3 id=EmulatorAndRomInfo 
	"Emulator and ROM info
	$LF
]h3
[div class=p 
	"The previous work by Soig used DeSmuME 0.9.9, which has faster loads than BizHawk’s melonDS core. The TAS that I have created is undoubtedly faster than Soig’s TAS when factoring in loading times despite the RTA time being slower. I converted Soig’s TAS to be viewable in BizHawk using a 
	[a href=https://cdn.discordapp.com/attachments/733574978485747723/1101052969287417886/DSM_TAStudio_fast_reader.lua rel=noopener external nofollow 
		"script(direct download)
	]a
	" from Suuper to compare them, which is also how I managed to build upon what Soig created in BizHawk as opposed to DeSmuME.
	$LF
]div
[div class=p 
	"Don’t think most/any of this is needed info, but I wanted to provide it just in case.
	$LF
]div
[div class=p 
	"Any properly dumped North American/Australian ROM (UROM as denoted by the 
	[a href=https://tcrf.net/New_Super_Mario_Bros.#Crash_Debugger rel=noopener external nofollow 
		"crash debug screen
	]a
	") should work with syncing.
	$LF
]div
[div class=p 
	"Emulator used: BizHawk 2.8
	$LF
]div
[h4 id=SyncSettings 
	"Sync Settings
	$LF
]h4
[ul 
	[li 
		"Initial Time: 7/27/2000 11:25:12 AM
		$LF
	]li
	[li 
		"Use Real Time: False
		$LF
	]li
	[li 
		"DSi Mode: False
		$LF
	]li
	[li 
		"Use Real BIOS: False
		$LF
	]li
	[li 
		"Skip Firmware: False
		$LF
	]li
	[li 
		"Firmware Override: False
		$LF
	]li
	[li 
		"Firmware Start-Up: Auto Boot
		$LF
	]li
	[li 
		"Firmware Username: melonDS
		$LF
	]li
	[li 
		"Firmware Language: English
		$LF
	]li
	[li 
		"Firmware Birthday Month: November
		$LF
	]li
	[li 
		"Firmware Birthday Day: 3
		$LF
	]li
	[li 
		"Firmware Favorite Color: Red
		$LF
	]li
	[li 
		"Firmware Message: Melons Taste Great!
		$LF
	]li
]ul
[h3 id=RamUsed 
	"RAM Used
	$LF
]h3
[table 
	[tbody 
		[tr 
			[th 
				"Address
			]th
			[th 
				"Size
			]th
			[th 
				"Display Type
			]th
			[th 
				"Note
			]th
		]tr
		[tr 
			[td 
				"1B6A5C
			]td
			[td 
				"4 Byte
			]td
			[td 
				"Fixed point 20.12
			]td
			[td 
				"X speed
			]td
		]tr
		[tr 
			[td 
				"1B6A60
			]td
			[td 
				"4 Byte
			]td
			[td 
				"Fixed point 20.12
			]td
			[td 
				"Y speed
			]td
		]tr
		[tr 
			[td 
				"088A68
			]td
			[td 
				"4 Byte
			]td
			[td 
				"Hex
			]td
			[td 
				"RNG
			]td
		]tr
		[tr 
			[td 
				"0CAB14
			]td
			[td 
				"4 Byte
			]td
			[td 
				"Unsigned
			]td
			[td 
				"In-game Timer
			]td
		]tr
		[tr 
			[td 
				"1B75A1
			]td
			[td 
				"1 Byte
			]td
			[td 
				"Signed
			]td
			[td 
				"Left pipe
			]td
		]tr
		[tr 
			[td 
				"1B75A2
			]td
			[td 
				"1 Byte
			]td
			[td 
				"Signed
			]td
			[td 
				"Right pipe
			]td
		]tr
	]tbody
]table
[h3 id=ShellMechanics 
	"Shell Mechanics
	$LF
]h3
[div class=p 
	"The Blue Shell is used throughout the TAS because it has many unique properties and glitches that save time overall, even if it’s technically slower in a select few levels.
	$LF
]div
[h4 id=Unmorphing 
	"Unmorphing
	$LF
]h4
[div class=p 
	"While in the Blue Shell, Mario’s max speed is usually capped to 2.75 pixels per frame, whereas normal running speed without the Blue Shell is 3 pixels per frame. This can be exploited by simply letting go of the run button while in the air so Mario isn't in his Shell, and thus can get back to 3 p/f until he goes back into his Shell again(exceptions explained later).
	$LF
]div
[h4 id=DoubleTripleJumping 
	"Double/Triple Jumping
	$LF
]h4
[div class=p 
	"When Shell Mario lands while out of the Blue Shell, there is a 2 frame window where he can do a double or triple jump. This is used to keep his speed at 3 p/f.
	$LF
]div
[h4 id=ShellSpeed 
	"Shell Speed
	$LF
]h4
[div class=p 
	"If Mario goes into the Blue Shell and jumps the frame afterwards without Left or Right being held after the initial 1 frame down press used to get into the Blue Shell, then his speed is (usually) capped at ~2.95 pixels per frame which is close enough to 3 p/f to not lose any time when done in moderation. This is useful because it’s possible to save frames with corner boosts on blocks.
	$LF
]div
[h4 id=BunnyHoppingItDoesnTHaveANameAndIDonTKnowWhatToCallIt 
	"Bunny Hopping (It doesn't have a name and I don’t know what to call it)
	$LF
]h4
[div class=p 
	"This works similarly to keeping Mario’s shell speed at ~2.95 p/f. If Mario is falling while out of his Shell onto the edge of a solid and Right is held at a specific point for one frame before he starts falling again, then his speed will be capped at 3 p/f as long as Left or Right aren't pressed and he continues to jump every frame that he lands. Jumping one frame late or holding Left or Right will cause him to decrease in speed slightly.
	$LF
]div
[h4 id=Hyperspeed 
	"Hyperspeed
	$LF
]h4
[div class=p 
	"If a throwable object(Koopa shell, Spring, etc.) is thrown while Shell Mario is going down a slope, then the faster speed Mario has while going down the slope will be carried into his X speed if he jumps on the right frame without Left or Right being held. This is best seen in 5-B and 8-5, although it’s also used in more subtle places like 1-2 and 1-5.
	$LF
]div
[h4 id=ConveyorHyperspeed 
	"Conveyor Hyperspeed
	$LF
]h4
[div class=p 
	"While in the Blue Shell and doing frame perfect jumps without Left or Right being held or pressed, Mario will continue to build up speed on the conveyors seen here in 5-Castle.
	$LF
]div
[h4 id=QuickSlideGlitchQsg 
	"Quick Slide Glitch (QSG)
	$LF
]h4
[div class=p 
	"If down is pressed on the very edge of a solid, Mario’s speed is <2.75 p/f, and the opposite direction to where Mario is facing is held while falling, then Mario will accelerate faster than running while in the Blue Shell. This also has the added benefit of Mario’s speed being 3 p/f while in the Blue Shell. This is done on many occasions. If Mario isn’t up to 3 p/f before he lands, then a jump the frame that he lands is required to continue the buildup, otherwise all that speed will go back down until 0 or until Mario unmorphs.
	$LF
]div
[h4 id=StarQsgStarHyperspeed 
	"Star QSG/Star Hyperspeed
	$LF
]h4
[div class=p 
	"Under normal circumstances, Shell Mario cannot get Star speed because he’ll simply go back into the Shell once 2.75 p/f is reached. By doing QSG on the first possible frame that you can with Star, you can build up enough speed to reach 4.5 p/f(Star speed). This has two added benefits that you normally don’t have when you have a Star with any other powerup: you keep your Star speed while in the air and you keep your Star speed even when the Star runs out.
	$LF
]div
[h4 id=SpaceJump 
	"Space Jump
	$LF
]h4
[div class=p 
	"If Mario is in the Blue Shell and his y-velocity is at 0 while in the air, then when he unmorphs out of the Blue Shell he can do a jump in midair. This is very useful for vertical parts, mostly notably done in 5-Tower(although you can’t see it here, but Hartmann has a nice 
	[a href=https://www.youtube.com/watch?v=vkX8JdBC-D0 rel=noopener external nofollow 
		"unlocked camera version
	]a
	").
	$LF
]div
[h3 id=RngNotes 
	"RNG Notes
	$LF
]h3
[div class=p 
	"There’s many ways to directly manipulate the RNG which I sneakily used throughout the TAS. Actions such as: double jumping, wallkicking, and throwing an object will increment RNG by 1. A brick block breaking will increment RNG by 14. Some actions will continue to increment RNG every frame for a while, such as a screen shake from a Thwomp or the volcano in 8-8 erupting, both examples being things I took advantage of. One thing that uses RNG is the bounce an item in the bottom screen inventory does. I didn’t even know about this until Suuper brought it up one day, and it helped with 8-Tower, 8-3, and 8-4 by using the inventory item and regrabbing the Blue Shell so it couldn’t bounce.
	$LF
]div
[h3 id=SpecialThanks 
	"Special Thanks
	$LF
]h3
[ul 
	[li 
		"Suuper, for providing some Lua scripts, answering my questions, creating the 
		[a href=https://github.com/SuuperW/NSMB_RNG rel=noopener external nofollow 
			"NSMB_RNG
		]a
		" program which I slightly modified to help with getting Soig’s RNG seed on BizHawk, and his 2-3 Hyperspeed and ending Space Jump.
		$LF
	]li
	[li 
		"Soig, for his previous work which I built this TAS off of.
		$LF
	]li
	[li 
		"Hartmann, for being who Soig built his TAS off of.
		$LF
	]li
	[li 
		"clockwatcher, for 8-5 Hyperspeed and the faster 8-Tower2 acceleration at the end.
		$LF
	]li
	[li 
		"GregLVK, for being the first person to figure out that 5-A is faster than 5-2 back in 2018.
		$LF
	]li
	[li 
		"MoistenedWah, for being the person to find the faster 7-4 route.
		$LF
	]li
]ul
[h3 id=ImprovementsAndNonImprovements 
	"Improvements and Non-Improvements
	$LF
]h3
[ul 
	[li 
		"1-1: 1 frame lost to collect the first Star Coin.
		$LF
	]li
	[li 
		"2-1: 4 frames saved due to not doing QSG on exit pipe. Doing QSG off of pipes like this has been done for many years, but it’s actually slower.
		$LF
	]li
	[li 
		"2-3: 120 frames saved due to Hyperspeed at the start and a Space Jump at the end.
		$LF
	]li
	[li 
		"2-Castle: 60 frames saved due to spawning in the third spike ball sooner.
		$LF
	]li
	[li 
		"3-B: 11 frames lost to collect the last Star Coin.
		$LF
	]li
	[li 
		"3-Castle: 1 frame lost to collect the second Star Coin
		$LF
	]li
	[li 
		"Map (5-1 to 5-2/5-A): 376 frames lost to unlock the Star Coin Gate.
		$LF
	]li
	[li 
		"5-A: 1047 frames saved due to going to 5-A instead of 5-2. Going to 5-A yielded a net gain of 658 frames.
		$LF
	]li
	[li 
		"5-Tower: 13 frames saved due to not needing to manipulate RNG. Soig said he only lost 11 frames here, so I don’t really have an explanation as to how I saved 2 more. Weird emulator difference perhaps, or his original comparison was inaccurate. Who knows? Not me!
		$LF
	]li
	[li 
		"5-B: 1 frame lost to manipulate RNG.
		$LF
	]li
	[li 
		"5-Castle: 16 frames saved due to a faster Hyperspeed from the conveyors to reach the roulette block at a sooner cycle. This lets Mario get the Mini Mushroom sooner.
		$LF
	]li
	[li 
		"7-4: 168 frames saved due to a better route through the level.
		$LF
	]li
	[li 
		"8-2: 2 frames lost due to Skeeter RNG.
		$LF
	]li
	[li 
		"8-5: 271 frames saved due to Hyperspeed.
		$LF
	]li
	[li 
		"8-7: 5 frames saved due to Space Jump over the wall after grabbing the Star.
		$LF
	]li
	[li 
		"8-Tower2: 21 frames saved due to a higher jump to the door. Jumping into the Blue Shell while crouched makes you jump higher than normal for whatever reason.
		$LF
	]li
]ul
[div class=p 
	"Total: 1333 frames (~22.217 seconds)
	$LF
]div
[div class=p 
	"- Glitchman24
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/Darkman425 
		"Darkman425
	]a
	": Claiming for judging.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/Darkman425 
		"Darkman425
	]a
	": Input file replaced with a 60 frame improvement.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/Darkman425 
		"Darkman425
	]a
	": Hello, Glitchman24, and welcome to TASVideos!
	$LF
]div
[div class=p 
	"This is a fantastic improvement to the old warpless run! While it may seem longer due to different loading times between emulators, the gameplay is definitely more optimized with smaller movement changes and larger routing improvements.
	$LF
]div
[div class=p 
	"Accepting to Standard as an improvement to 
	(__wikiLink|href=/3775M|implicitdisplaytext=3775M)
	".
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/EZGames69 
		"EZGames69
	]a
	": Processing...
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/EZGames69 
		"EZGames69
	]a
	": Adding Soig as a coauthor, since glitchman borrowed a good amount on inputs the previous warpless movie.  (This was confirmed to me in a discord chat with him)
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/EZGames69 
		"EZGames69
	]a
	": Also adding clockwatcher as well
]div
