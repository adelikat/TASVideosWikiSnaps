7
[div class=p 
	"Doom 2 is a first-person shooter released by id Software in 1994. This demo uses the "Ultra-Violence" difficulty, the second-highest and by a very significant margin most common difficulty in Doom speedrunning, including TASing. It was not chosen to be an "easier" difficulty level - I aimed to improve the last TAS with this difficulty, and because it is by far the most standard. The tools used do not track re-records, but building this was a project that took hundreds of hours over 14 months.
	$LF
	"The majority of the demo was built by myself, almostmatt1, while Zero Master brute forced 2 frames in map 08.
	$LF
]div
[ul 
	[li 
		" Tools used were XDRE 2.22a, my custom build of XDRE 2.22, based on PrBoom+ 2.5.1.5
		$LF
	]li
	[li 
		" Category is UV-Speed: Finish the game ASAP. Kills, items and secrets do not matter. Secret levels do not matter. Essentially, this is Dooms Any%.
		$LF
	]li
	[li 
		" Tricks and glitches are allowed, but cheat codes are not. Cheat codes do not work within demos, so the ability to play this demo in a vanilla compatible source port or original executable verifies their absence.
		$LF
	]li
	[li 
		" Heavy glitch abuse.
		$LF
	]li
	[li 
		" Heavy luck manipulation.
		$LF
	]li
	[li 
		" Primary aim is maximum speed instead of aesthetics, but extensive effort was put into aesthetic considerations where it did not compromise speed.
		$LF
	]li
]ul
[table 
	[tbody 
		[tr 
			[th 
				"Map
			]th
			[th 
				"Time of this run
			]th
			[th 
				"Time of improved run
			]th
			[th 
				"Improvement
			]th
			[th 
				"Total Improvement
			]th
		]tr
		[tr 
			[td 
				" 1 
			]td
			[td 
				" 0:04 
			]td
			[td 
				" 0:05 
			]td
			[td 
				" 0:01 
			]td
			[td 
				" 0:01 
			]td
		]tr
		[tr 
			[td 
				" 2 
			]td
			[td 
				" 0:12 
			]td
			[td 
				" 0:24 
			]td
			[td 
				" 0:12 
			]td
			[td 
				" 0:13 
			]td
		]tr
		[tr 
			[td 
				" 3 
			]td
			[td 
				" 0:15 
			]td
			[td 
				" 0:17 
			]td
			[td 
				" 0:02 
			]td
			[td 
				" 0:15 
			]td
		]tr
		[tr 
			[td 
				" 4 
			]td
			[td 
				" 0:16 
			]td
			[td 
				" 0:18 
			]td
			[td 
				" 0:02 
			]td
			[td 
				" 0:17 
			]td
		]tr
		[tr 
			[td 
				" 5 
			]td
			[td 
				" 0:18 
			]td
			[td 
				" 0:19 
			]td
			[td 
				" 0:01 
			]td
			[td 
				" 0:18 
			]td
		]tr
		[tr 
			[td 
				" 6 
			]td
			[td 
				" 0:35 
			]td
			[td 
				" 0:43 
			]td
			[td 
				" 0:08 
			]td
			[td 
				" 0:26 
			]td
		]tr
		[tr 
			[td 
				" 7 
			]td
			[td 
				" 0:02 
			]td
			[td 
				" 0:05 
			]td
			[td 
				" 0:03 
			]td
			[td 
				" 0:29 
			]td
		]tr
		[tr 
			[td 
				" 8 
			]td
			[td 
				" 0:08 
			]td
			[td 
				" 0:17 
			]td
			[td 
				" 0:09 
			]td
			[td 
				" 0:38 
			]td
		]tr
		[tr 
			[td 
				" 9 
			]td
			[td 
				" 0:30 
			]td
			[td 
				" 0:32 
			]td
			[td 
				" 0:02 
			]td
			[td 
				" 0:40 
			]td
		]tr
		[tr 
			[td 
				" 10 
			]td
			[td 
				" 0:07 
			]td
			[td 
				" 0:22 
			]td
			[td 
				" 0:15 
			]td
			[td 
				" 0:55 
			]td
		]tr
		[tr 
			[td 
				" 11 
			]td
			[td 
				" 0:23 
			]td
			[td 
				" 0:25 
			]td
			[td 
				" 0:02 
			]td
			[td 
				" 0:57 
			]td
		]tr
		[tr 
			[td 
				" 12 
			]td
			[td 
				" 0:31 
			]td
			[td 
				" 0:35 
			]td
			[td 
				" 0:04 
			]td
			[td 
				" 1:01 
			]td
		]tr
		[tr 
			[td 
				" 13 
			]td
			[td 
				" 0:47 
			]td
			[td 
				" 0:52 
			]td
			[td 
				" 0:05 
			]td
			[td 
				" 1:06 
			]td
		]tr
		[tr 
			[td 
				" 14 
			]td
			[td 
				" 0:06 
			]td
			[td 
				" 0:07 
			]td
			[td 
				" 0:01 
			]td
			[td 
				" 1:07 
			]td
		]tr
		[tr 
			[td 
				" 15 
			]td
			[td 
				" 0:35 
			]td
			[td 
				" 0:25 
			]td
			[td 
				" +0:10 
			]td
			[td 
				" 0:57 
			]td
		]tr
		[tr 
			[td 
				" 31 
			]td
			[td 
				" Skipped, 0:00 
			]td
			[td 
				" 0:30 
			]td
			[td 
				" 0:30 
			]td
			[td 
				" 1:27 
			]td
		]tr
		[tr 
			[td 
				" 32 
			]td
			[td 
				" Skipped, 0:00 
			]td
			[td 
				" 0:11 
			]td
			[td 
				" 0:11 
			]td
			[td 
				" 1:38 
			]td
		]tr
		[tr 
			[td 
				" 16 
			]td
			[td 
				" 0:09 
			]td
			[td 
				" 0:10 
			]td
			[td 
				" 0:01 
			]td
			[td 
				" 1:39 
			]td
		]tr
		[tr 
			[td 
				" 17 
			]td
			[td 
				" 0:41 
			]td
			[td 
				" 1:19 
			]td
			[td 
				" 0:38 
			]td
			[td 
				" 2:17 
			]td
		]tr
		[tr 
			[td 
				" 18 
			]td
			[td 
				" 0:06 
			]td
			[td 
				" 0:20 
			]td
			[td 
				" 0:14 
			]td
			[td 
				" 2:31 
			]td
		]tr
		[tr 
			[td 
				" 19 
			]td
			[td 
				" 0:25 
			]td
			[td 
				" 0:30 
			]td
			[td 
				" 0:05 
			]td
			[td 
				" 2:36 
			]td
		]tr
		[tr 
			[td 
				" 20 
			]td
			[td 
				" 0:29 
			]td
			[td 
				" 0:32 
			]td
			[td 
				" 0:03 
			]td
			[td 
				" 2:39 
			]td
		]tr
		[tr 
			[td 
				" 21 
			]td
			[td 
				" 0:03 
			]td
			[td 
				" 0:13 
			]td
			[td 
				" 0:10 
			]td
			[td 
				" 2:49 
			]td
		]tr
		[tr 
			[td 
				" 22 
			]td
			[td 
				" 0:11 
			]td
			[td 
				" 0:12 
			]td
			[td 
				" 0:01 
			]td
			[td 
				" 2:50 
			]td
		]tr
		[tr 
			[td 
				" 23 
			]td
			[td 
				" 0:17 
			]td
			[td 
				" 0:30 
			]td
			[td 
				" 0:13 
			]td
			[td 
				" 3:03 
			]td
		]tr
		[tr 
			[td 
				" 24 
			]td
			[td 
				" 0:23 
			]td
			[td 
				" 0:25 
			]td
			[td 
				" 0:02 
			]td
			[td 
				" 3:05 
			]td
		]tr
		[tr 
			[td 
				" 25 
			]td
			[td 
				" 0:34 
			]td
			[td 
				" 0:37 
			]td
			[td 
				" 0:03 
			]td
			[td 
				" 3:08 
			]td
		]tr
		[tr 
			[td 
				" 26 
			]td
			[td 
				" 0:25 
			]td
			[td 
				" 0:28 
			]td
			[td 
				" 0:03 
			]td
			[td 
				" 3:11 
			]td
		]tr
		[tr 
			[td 
				" 27 
			]td
			[td 
				" 0:11 
			]td
			[td 
				" 0:11 
			]td
			[td 
				" 0:00 
			]td
			[td 
				" 3:11 
			]td
		]tr
		[tr 
			[td 
				" 28 
			]td
			[td 
				" 0:06 
			]td
			[td 
				" 0:31 
			]td
			[td 
				" 0:25 
			]td
			[td 
				" 3:36 
			]td
		]tr
		[tr 
			[td 
				" 29 
			]td
			[td 
				" 0:32 
			]td
			[td 
				" 1:08 
			]td
			[td 
				" 0:36 
			]td
			[td 
				" 4:12 
			]td
		]tr
		[tr 
			[td 
				" 30 
			]td
			[td 
				" 0:21 
			]td
			[td 
				" 0:29 
			]td
			[td 
				" 0:08 
			]td
			[td 
				" 4:20 
			]td
		]tr
	]tbody
]table
[h3 id=Comments 
	" Comments
	$LF
]h3
[div class=p 
	"The Doom speedrunning scene values in-game time (IGT) instead of RTA, as did I while making this. IGT in Doom is rounded down: 9.97 seconds is 9 seconds, and 10 consecutive 9.97 second levels is 90 seconds, not 99.7. Counting IGT, this run is 9:42, an improvement of 4:20 over the previous best TAS, 14:02 by RamboBones from 2006 (a demo that is not on the TasVideos site). Doom runs at 35 FPS, so a 1 second IGT improvement can be as little as 1 frame (eg. 10.00 -> 9.97 seconds) or as many as 69 frames (eg. 10.97 -> 9.00). Because of this, an IGT difference of 1 second very rarely actually equals exactly 1 second. Counting frames instead, this run is a 10515 frame improvement, equalling just over 5 minutes of time saved.
	$LF
	"	A big reason for the difference between the RTA & IGT improvements is that time spent in intermission screens doesn't count towards IGT but of course does towards RTA, and because of this, RamboBones spent more time within intermission screens as this gives more time to view map & total times, and this extra unnecessary time amounted to 1032 frames. My submitted demo contains as few intermission frames as possible, which saves lots of time even aside from gameplay improvements.
	$LF
]div
[div class=p 
	"	While my submitted demo contains as few intermission frames as possible, my encoded video DOES contain an additional second of waiting frames in each intermission screen for an improved visual experience. It is the only way that the inputs of the encoded video differ from those of the demo. Also notably, the encoded video does not contain the screen wipe effect between maps, which is a limitation of the viddump feature of the DSDA-Doom source port which otherwise produces extremely high quality movies. The screen melt effect, whether in the original game or any source port, is not affected by and does not affect any frames within a demo file. The progression of frame inputs 'pauses' during the screen melt effect.
	$LF
]div
[div class=p 
	"	Doom TASing has some complex movement considerations that apply throughout the entire demo. A lot of this stuff is conceptually simple, but much additional complexity arises from optimisation.
	$LF
]div
[h4 id=MovementValues 
	" Movement values
	$LF
]h4
[div class=p 
	"The player can move back, move forward, strafe left, and strafe right. They cannot jump or aim/look vertically (if you've seen otherwise, you've seen modern sourceport features, not the original game behaviour). Directional movement is not just either occurring or not occurring with the push of a button, such as is the case with a D pad for example, it is instead applied in values of 0 to 50 left/right and forward/backward. There are also 256 turning angles per frame, resulting in a possible 2,611,456 movement combinations per frame, before considering using switches, opening doors and firing at enemies. Of course, you generally just go as fast as possible in a given direction, but VERY often these values are very finely and deliberately adjusted to allow for movement precision and tricks where fractions of a map unit become a crucial degree of accuracy.
	$LF
]div
[h4 id=MovementCalculation 
	" Movement Calculation
	$LF
]h4
[div class=p 
	"Momentum and distance travelled are calculated separately along an X & Y axis. If you travel north east, the game doesn't think you have 'north-east momentum', it thinks you have 'north momentum' AND 'east momentum.' I'm not just being pedantic, it does matter! Most obviously when considering...
	$LF
]div
[h4 id=DiagonallyRunning 
	" Diagonally Running
	$LF
]h4
[div class=p 
	"Running diagonally is faster than just running forward or strafing sideways. Since Doom calculates your X & Y momentum separately, both movement vectors are applied to the resulting speed. This means that running diagonally has a 41% higher top speed than running in one direction, and also crucially means that acceleration is faster. This is why I run diagonally through the demo, except for some instances where I do a .000000 trick, explained later.
	$LF
]div
[h4 id=Wallrunning 
	" Wallrunning
	$LF
]h4
[div class=p 
	"If the player runs parallel to a wall in a precise enough direction and location relative to the wall, distance moved per frame is doubled. Note that this is different than the *momentum value* doubling, which means that if a wallrun ends the player will appear to take a massive hit to their speed; *momentum* did not lower, the wallrun effect simply stopped. There are several important considerations to wallrunning. It (almost always) only works when travelling north or east, which is why it doesn't occur on many walls where it may seem very obvious to do so. A particularly obvious example is in map 12, "The Factory", where I do not wallrun while approaching the blue key (moving west, wallrunning impossible) but do while running back (moving east, wallrunning possible). Sometimes it's faster to not wallrun in order to get around a corner faster, since wallrunning doubles your distance travelled in one direction but kills momentum in the other; if you're wallrunning north, you're going north REALLY fast but (generally) cannot have east or west momentum at the same time, so sometimes it's better to not wallrun and instead smoothly turn around a corner so that you have more momentum when the wall ends, ultimately reaching your goal around that corner faster. These different approaches were considered, individually tested, and optimised in each instance.
	$LF
]div
[div class=p 
	"Because the distance travelled only doubles when player momentum is high enough, the exact frame in which I intercept a wall must be optimised, so that the wallrun can begin on the very next frame. Reaching a wall too early means having travelled less overall distance before the wallrunning effect is possible, and doing it too late means missing an opportunity to wallrun on that frame, so the approach must be tested and optimised to be frame-perfect in each instance. In addition optimally "colliding with" the wall is an optimisation effort in itself, since you want to be as close to the wall as possible on the frame before wallrunning, without actually touching the wall. This hopefully means getting around .01 to .001 (ideally as close to the latter as possible) units' distance from the wall on the frame before wallrunning, but while having maximum speed on that frame, which involves the monitoring and adjustment of many frames of running leading up to the wall, not just the frame where you get to it. For reference the player is 32 units wide, so the distance between the player and the wall ideally requires something like a precision of 1/3,200 (if it's a bit sloppy) to 1/32,000 (if it's pretty damn good) of the width of the player. Without diving into unnecessary specifics the closer you are the more "stable" the wallrun will tend to be so the closer the better. Actually colliding with the wall instead will result in a massive speed decrease. Optimising your exact position to be as close as possible to the wall involves altering your movement values and not just angle travelled. For a simple example, "Move forward 50, strafe left 50, turn left 10 angles" will give you a very slightly different movement to "Move forward 49, strafe left 50, turn left 11 angles" or "Move forward 50, strafe left 49, turn left 9 angles".
	$LF
]div
[h4 id=MomentumPreservation 
	" Momentum Preservation
	$LF
]h4
[div class=p 
	"Momentum preservation techniques exist and can avoid the typical result of colliding with a wall, which is the instant loss of nearly all speed. The "Door Boost" occurs when a player runs alongside a wall exactly perpendicular to an opening door, allowing the player to maintain & accumulate momentum against the door while it opens, resulting in the ability to run through the door at a very high speed as soon as a door opens. Similar to wallrunning, getting into this position requires a very high degree of precision which can be attained by very fine manipulation of movement values while approaching the position. A quite obvious example is where I run into the corner of an elevator as it raises on map 03. By facing south east and running forward and left, I'm accumulating eastern momentum, but also must occasionally adjust my movement values so as to very slightly accumulate north momentum at the same time, necessary for the trick to work.
	$LF
]div
[h4 id=000000Trick 
	" .000000 Trick
	$LF
]h4
[div class=p 
	"The .000000 trick is where Doomguy gets *perfectly* close to a wall, being .000000 units away, hence the name. Due to the way that momentum and wall collisions work this position cannot be reached by simply running into a wall without inhuman precision and luck and therefore requires automated brute forcing of inputs. It typically requires testing somewhere between about 200,000 to 2,500,000 input combinations at a time depending on the range of inputs brute forced, every single time to work out the movement values needed. The ability to brute force in this way is built into the TASing tools. At some point through building the demo I implemented an XDRE feature that reasonably accurately generates a good brute force range for you, but with or without this feature a good manual setup prior to brute forcing is required.
	$LF
]div
[div class=p 
	"When you're perfectly close to a wall, momentum behaviour changes and you can accumulate speed in multiple directions. Two catches: this only works on south and west axis-aligned walls, and when doing this trick your X and Y momentum is limited to 14.5 units/frame (there's a catch to this second catch: there's no such momentum limit if the wall happens to be directly on a line of the 128x128 blockmap grid overlaying each map) - if this is exceeded, momentum is not capped, it completely reduces to 0, meaning more effort must be put in to be as close to this limit as possible while not exceeding it. An example of this trick is the start of map 03, "The Gantlet", where the trick is done on the wall to the right at the very beginning. Doomguy travels east towards the door, but accumulates east and south momentum while doing so, meaning that as soon as the player gets to the end of the wall they travels south-east very quickly towards the shotgunner. This trick is useful in getting around corners well, particularly in cases where you can use it in combination with a door boost. If you perform the trick on a west wall and travel north, or a south wall and travel east, you can take simultaneously take advantage of both wallrunning & accumulating momentum in multiple directions.
	$LF
	"	Because I can accumulate momentum in multiple directions I'll sometimes appear to be running forward, instead of diagonally which is normally optimal. I'm MOVING forward, but accumulating momentum both forward and sideways. An example of this is where I do the trick against the brown wall after I get the yellow key in map 13 "Downtown", at roughly 4:33 in the video or 4:04 IGT.
	$LF
]div
[h4 id=RocketBoosting 
	" Rocket Boosting
	$LF
]h4
[div class=p 
	"Explosions from rockets fired by the player or Cyberdemon enemy give a very significant speed boost. The closer to the explosion you are, the more damage you take but also the more momentum is given to the player. Sometimes this can be used to sequence break a map, such as the jump map 03, and sometimes this is just used to save time, such as the end of map 11. Because rockets and health are resources that must be managed, these jumps and boosts are used sparingly, but using them to maximum effect has been extensively considered and planned. There are instances where the use of them may have saved a second on one map but more significantly compromised routing later, leading to a net time loss. Apart from sequence-breaking tricks, they do save time but typically the time saved is overrated and the health implications are underappreciated.
	$LF
	"Damage boosts by other enemies is possible, but its effect is so dramatically inferior that gaining boosts specifically from rockets should not be thought of in the same way as regular damage boosts.
	$LF
]div
[h4 id=Thingrunning 
	" Thingrunning
	$LF
]h4
[div class=p 
	"Similar to wallrunning except against "things", considered by the game to be enemies, barrels and many solid decorations. This is useful, but limited in that monsters cannot always be manipulated to be in a good spot for a thingrun while not compromising other movement, so sometimes it is faster to skip the thingrun even if it seems optimal. Momentum is also maintained in multiple directions while running into things, without any of the position specificity required by the .000000 trick. Optimisation can still be done, however, by getting as close to "things" as possible while thingrunning.
	$LF
]div
[h4 id=SqueezeGlides 
	" Squeeze Glides
	$LF
]h4
[div class=p 
	"The player can fit through gaps that are their exact size, which is 32 units wide. A TAS can accomplish this instantly but the level of movement precision is deceptively high and does require brute forcing. I think it's worth watching a human run to compare the difference. It generally takes a very good human player at least a few seconds, but a TAS can accomplish it instantly and without slowing down.
	$LF
]div
[h4 id=VoidGlides 
	" Void Glides
	$LF
]h4
[div class=p 
	""Void glides" are where the player can clip out of bounds of the map. There are rare instances where this is possible and even rarer instances where it is useful, as you often cannot accomplish anything while out of bounds. The OOB area of nearly every map is filled with invisible walls that obstruct your path, you cannot always re-enter the map, and not every map has a switch to exit the level. I'll explain them later as they come up.
	$LF
]div
[h4 id=ZeroPressesOrImpseGlides 
	" Zero-Presses (or "impse glides")
	$LF
]h4
[div class=p 
	"It's possible to press switches from the side and not from the front, meaning you can press them from unintended places for large sequence breaks. This requires a player position precision of a small fraction of a unit. It's possible non-TAS, but definitely not instantly. In this TAS, some were brute forced and some were manual. This trick only possible from the left side of a switch ('left' if you are standing in front of the switch and facing it).
	$LF
]div
[h4 id=Rng 
	" RNG
	$LF
]h4
[div class=p 
	"Enemy movement, player and enemy weapon damage, whether enemies attack you, whether enemies stop attacking you when you're no longer in the line of sight, projectile spread, and which enemies are spawned by the final boss are affected by RNG, which I'll often manipulate by firing at different times or at different enemies and moving in different ways. While there are many occasions I'll shoot a wall or just punch the air in front of me, there are 0 wasted shots in this demo, I'm often firing to manipulate RNG for more favourable results later on. For the same reason I'll occasionally fire a shotgun and hit an enemy with only some projectiles where I could have killed them had more projectiles hit them. This is because a different amount of projectiles hitting an enemy affects the RNG in different ways. Every single shot is tested and deliberate. Similarly, I'll at times make extremely small variations to my movements in order to more favourably affect enemy movement, or have them not shoot me, or have them deliberately shoot me.
	$LF
]div
[h4 id=ItemBumping 
	" Item Bumping
	$LF
]h4
[div class=p 
	"You can sometimes grab items through walls, and items on high ledges that you normally should not be able to reach. To do this you need to be very close to the wall and have a high momentum value on the frame before colliding with it. The game checks to see if you would have grabbed the item had the wall not been there and gives you the item if so, and AFTER that checks to see if you hit the wall. This can be used for various sequence breaks such as by grabbing the yellow key in map 12 and blue key in map 13 through walls but can also just be used to speed things up, such as by grabbing the yellow keys sooner in maps 6 and 13.
	$LF
]div
[h4 id=AirControl 
	" Air Control
	$LF
]h4
[div class=p 
	"Movement can't be affected by running or turning while mid-air, which can be a good thing and a bad thing. If you manage to get a high speed just before becoming mid-air, you maintain that high speed (often higher than the game will allow you to get while on the ground) the whole time you're in the air. This also means that your ability to affect your movement is obviously compromised while you're in the air, leading to lower opportunities for movement precision.
	$LF
]div
[div class=p 
	"This does allow for a unique ability to improve visuals though, in that you can often smooth out some turns while in the air. If I'm in the air for 9 frames, hit the ground on the 10th frame, and on that 10th frame need a turn value of 50, instead of making a visually jarring sharp turn that large in one frame, I can have a turning angle of 5 for all 10 of those frames. The movement values will be identical, but it will look visually smoother and superior. The unfortunate exception to this is that sometimes I need to 'use' a switch or door while in the air, or shoot an enemy, and these are things that actually do require me to be facing a certain direction. Still, in every single instance I am not contacting the ground, the possibility of making the demo more visually nice while not compromising speed is considered.
	$LF
]div
[h4 id=AngleTransposition 
	" Angle Transposition
	$LF
]h4
[div class=p 
	"This is purely a visual improvement. 256 turning angles are possible and a turning value of 64 equates to 90 degrees, meaning that 64 sets of 4 angles are somewhat related. By this I mean: your movement is exactly the same whether you face north and moving forward, or face east and strafe left, face south and move backwards, or face west and strafe right. This remains true when considering combinations of running values, strafing values and turning values.
	$LF
]div
[div class=p 
	"This means that for the entire demo I considered not only what movement would be optimal, but also what would be the most visually appealing angle to run at, and I had 4 options all the time. This sometimes meant I could look at slightly more interesting things, and sometimes meant I could avoid turning as sharply.
	$LF
]div
[div class=p 
	"Interestingly however, 4 of the 256 possible turning angles do not transpose accurately. The other 252 will result in perfectly accurate movement, but 4 of the angles will make a very small change to momentum and position, ultimately desyncing the demo. Honestly I don't know why this happens, nor does anyone I've asked about it. As if going over the demo to transpose for the best visuals wasn't time consuming enough, this means that I also need to be monitoring my position constantly to make sure I don't accidentally stumble upon this 1/64 chance bug.
	$LF
]div
[h4 id=WeaponChoices 
	" Weapon Choices
	$LF
]h4
[div class=p 
	"Obviously different weapons are more or less powerful and have different viability with different enemies, but there are several other considerations. First, shooting different weapons has different effects on RNG since different weapons have different numbers of projectiles. Second, the time taken between shots and the time needed until you can switch to a different weapon are sometimes critically important to maximize frames saved - I'll mention where later.
	$LF
]div
[h4 id=LinedefSkips 
	" Linedef Skips
	$LF
]h4
[div class=p 
	"Linedefs are invisible lines on the ground that trigger certain events when crossed, and sometimes it is preferable to not activate them, which we can avoid with a linedef skip. This involves being very close to a line on one frame and having high momentum so that on the next frame the game thinks we're on the other side of it but doesn't realise we've passed it. Tons of examples of this kind of thing in plenty of games. It's not particularly hard and is often accidentally done in casual play, but there are notably cases where it is deliberately done.
	$LF
]div
[h4 id=WallCollisions 
	" Wall Collisions
	$LF
]h4
[div class=p 
	"It's impossible to avoid walls altogether, but aside from the above tricks we want to deliberately control what happens when we contact a wall. This depends on our distance from the wall on the frame preceding contact and the movement values on the contact frame. Sometimes we want to crash into a wall and lose the most possible speed immediately because that allows us to run backwards faster, and sometimes we want to avoid as little forward momentum as possible. Without going into unnecessary technical specifics, this was considered and optimised in each instance.
	$LF
]div
[div class=p 
	"If you're curious about more specifics, I would direct you to the Doom Movement Bible: 
	[a href=https://www.doomworld.com/forum/topic/87199-the-doom-movement-bible/ rel=noopener external nofollow 
		"https://www.doomworld.com/forum/topic/87199-the-doom-movement-bible/
	]a
	$LF
]div
[div class=p 
	"If I mentioned every wallrun, .000000 trick and momentum preservation trick in every map, these comments would be even more ridiculously long and mentioning them would get extremely repetitive. Instead of mentioning them each time I will just say here that there are hundreds of them, and considering, testing and optimising them was probably half the effort of this demo. Their omission from the map-by-map comments should not be taken as them being less important. While everything else was going on, my unending goal was to maximally exploit absolutely every possible surface.
	$LF
]div
[div class=p 
	"For every .000000 trick and squeeze glide (and many other tricks) brute forcing was used, and not only did these occur instantly in every circumstance, but my setup and brute force execution is carefully done so that the brute forced inputs found can be very close to the "fast end" of all input possibilities, meaning in the 40-50 range of input values, normally 44-50. So they're not only instantaneous and don't lose frames, but they're optimised to the point where they save a handful of units here and there, occasionally adding up to an additional frame saved.
	$LF
]div
[h3 id=IndividualMapComments 
	" Individual Map Comments
	$LF
]h3
[h4 id=Map1Entryway 
	" Map 1 - Entryway
	$LF
]h4
[div class=p 
	"Frame 1 movement values are MF50 SL49, and this fractionally lower-than-maximal speed allows me to stay on the starting platform one frame longer, therefore accumulating a few more units/frame momentum for the 8 mid-air frames during which I cannot affect my momentum, overall saving a frame or two. After the zombieman thingrun and subsequent wallrun I collide with an imp and then a wall on the very next frame, and due to a combination of how the game engine deals with enemy collision and wall collision differently it nullifies eastern momentum but maintains all southern momentum towards the zombieman that I then kill. I would have otherwise needed to sacrifice some accumulation of southern momentum to compensate for the unwanted eastern momentum I had at that point.
	$LF
]div
[div class=p 
	"I wallrun against the wall before the door, ensuring I get the wallrun effect BEFORE becoming midair for 5 frames so that I also get double speed while falling. I shoot to wake up the imp in the final room, move back and to the side to manipulate it out of my way, thingrun against it and exit the map.
	$LF
]div
[h4 id=Map2Underhalls 
	" Map 2 - Underhalls
	$LF
]h4
[div class=p 
	"I kill the shotgunner in two shots, a 1/9 chance, and take their weapon. Doing so while having other enemies move out of my way as I leave the switch room involved manipulating RNG by slightly rebuilding the end of the previous map and testing different firing frames. There is a squeeze glide through a gap at 5.57 that not only doesn't slow me down, but is efficient enough that I speed up.
	$LF
]div
[div class=p 
	"The 6 seconds of the map after falling down the gap took me five days of building. At first I exited quite easily but with uncomfortably low health, so I decided to re-do it, which ended up taking another 4 days. Because monster behaviour was very difficult to manipulate well enough, a problem is that I could build the first room with the blue key fairly well, but I couldn't see what was going on in the next room so enemies would often move directly in front of the next door in the next room, therefore blocking my way.. and if they didn't do that, the shotgunners near the door before the stairs blocked me instead. I exited with 100% health, so the re-build was justified.
	$LF
]div
[h4 id=Map3TheGantlet 
	" Map 3 - The Gantlet
	$LF
]h4
[div class=p 
	"The map starts you in a perfect .000000 position, therefore no brute forcing is required to do the multiple-direction momentum preservation trick, so I am able to immediately accumulate southern & eastern (right and forward) momentum while approaching the first door so that as soon as it opens I am able to move very quickly through the air towards the shotgunner.
	$LF
	"After a long momentum preservation trick on the elevator I run to the right and into a secret area of the map, within which I can teleport to a pillar with a rocket launcher on it. Here I do a "tele unstuck" trick. Normally after teleporting the player is unable to move for 18 frames, but if I take damage in that time I am able to move again immediately. By firing at a certain enemy on a certain frame while falling into that gap, I manipulated RNG in such a way that a chaingunner did not stop targeting me when I was outside of its sight, which is an uncommon luck-based occurrence. This required testing of attacking all possible enemies on a few frames until I found what player behaviour resulted in the chaingunner acting this way. The chaingunner is therefore still targeting me as soon as I teleport and hits me on the frame after I teleport, freeing me and allowing me to move immediately.
	$LF
]div
[div class=p 
	"I began switching to another weapon before getting the rocket launcher to begin the weapon swap animation sooner, but since I picked up a new weapon, the weapon I was swapping to is forgotten and the game equips the rocket launcher instead. This saves 16 frames, compared to if the weapon swap animation began when I picked up the rocket launcher.
	$LF
]div
[div class=p 
	"A sequence break here skips the intended path of gathering a key and pressing a switch to raise a bridge to a teleporter. Instead, another chaingunner teleports onto the platform with me and I rocket jump against them, the explosion throwing me across the gap and into the teleporter. Because I got unstuck earlier, I'm able to run forward and then backwards sooner, therefore having more momentum while mid-air, allowing me to reach the teleport quicker.
	$LF
]div
[div class=p 
	"There are three pinkies on the ledge I am about to access. I shoot the left one so that it enters a teleport and leaves, and then time how I kill the right one so that the middle one runs into its corpse (enemies are unpassable while dying for a few frames before you can freely move through the sprites of their dead bodies) and turns around, therefore staying out of my way. Timing was also affected by the fact that good RNG is needed to kill a pinky in two shotgun shots, thus further limiting which frames I could fire on. 3 brute forced .000000 tricks in 0.43 seconds later, I manipulate the last pinkie out of my way and exit the level.
	$LF
]div
[h4 id=Map4TheFocus 
	" Map 4 - The Focus
	$LF
]h4
[div class=p 
	"I contact the wall in a way that kills all forward speed on the same frame that I press the switch that lowers the blue key so that I can run backwards as quickly as possible. I also optimise this so I'm as far back from the switch as possible, far enough away that only exactly one turning angle is possible for a successful switch press. Immediately after that I kill an imp located in the blue key area so that I can navigate this area more efficiently when I get there in a few seconds. By the blue key, I once again do a controlled wall crash so that I can grab the key while having the minimum possible momentum in the direction towards it - having a controlled crash is slightly more efficient than timing running backwards, saving a frame.
	$LF
]div
[div class=p 
	"The blue key door is uncommon in that no momentum preservation technique is possible. It does not have a perpendicular wall against which to perform a regular momentum preservation trick, and is a north surface which prohibits momentum preservation with a .000000 trick. Optimisation is therefore done by slowing down as much as possible as soon as possible so that I can activate the door from as far away as possible but still on the first possible frame, and then accelerating as fast as possible as soon as possible. This doesn't just affect which frames I run backwards and forwards on, but the exact 0-50 movement values on each of those relevant frames for sub-unit optimisation. After standing on a trigger in the corner of a room, nothing can be done to speed up the lowering as raising of the elevator, so waiting is necessary.
	$LF
]div
[div class=p 
	"After getting through the two red doors we can perform a sequence break. Normally I need to travel elsewhere to raise the bridge to the exit door, but two precise jumps can be made to the end instead. A combination of a .000000 trick and firing is done to manipulate the pinky out of my way. Firing on the last frame is done to manipulate RNG in the following map.
	$LF
]div
[h4 id=Map5TheWasteTunnels 
	" Map 5 - The Waste Tunnels
	$LF
]h4
[div class=p 
	"There is a sequence break where I access a gap in the wall not normally accessible and am able to grab the blue key much faster than the intended route. This is possible by manipulating an enemy onto a raising platform, running against them to accumulate momentum, having them die at the right time so I am not blocked by their body (here it was killed by another enemy), and flying forward into that gap. General optimisations like momentum tricks for the rest of the map, and avoiding enemy projectiles while on the raising bridge at the end.
	$LF
]div
[h4 id=Map6TheCrusher 
	" Map 6 - The Crusher
	$LF
]h4
[div class=p 
	"First, I deliberately exited the previous map 1 frame later than is possible on the previous map to manipulate RNG. A Revenant enemy is in the first area of map 6, and occasionally checks its line of sight to determine if it can see the player and become aggressive, but the game RNG number slightly changes which frames it performs this check. I am only within its line of sight for a very brief time, and so if RNG is in my favour and I time it well I can avoid it seeing me and becoming alerted, thereby avoiding it getting in my way later. This saves much more than the 1 frame that was spent exiting the prior level later.
	$LF
]div
[div class=p 
	"A trick is done on the elevator to save roughly 4 seconds. Normally, you approach it from the east and when you run onto it you activate a linedef that causes the elevator to lower and then raise at a speed of a slow 4 units/frame, taking 381 frames (just under 11 seconds) in total. However, this linedef can be skipped so that you can run onto the elevator without lowering it. This elevator can instead be activated by "using" it from the outside, which lowers and raises it at 8 units/frame, causing it to instead take 243 frames (just under 7 seconds). This involves performing a squeeze glide to the north between the bars surrounding the elevator immediately after the linedef skip, activating the outside of the elevator while still remaining on the elevator, and performing another squeeze glide between the south bars to proceed on my way.
	$LF
]div
[div class=p 
	"In the red key room, a linedef skip is performed on the stairs at the start. This linedef would have opened a closet with several enemies in the hallway I just came from and will return to, making it harder to run back out. This is overall certainly better but does make a subsequent trick more difficult: I need a door to lower onto the head of an enemy so that it immediately opens again and stays open, which is harder to manipulate when there are less enemies around to get in the right spot. I can do a variation of an item bump involving a .000000 trick to get the yellow key sooner at the end.
	$LF
]div
[h4 id=Map7DeadSimple 
	" Map 7 - Dead Simple
	$LF
]h4
[div class=p 
	"A zero press/impse glide is done to skip the whole map. Normally you need to kill two waves of enemies for a platform to the final switch to raise. There is a faster method involving lowering one of the platforms with a Mancubus enemy on it and rocket jumping off of it from that lowered platform to the final switch, which takes around 4 seconds. The zero press method takes half the time and does not require us to lose health or spend a rocket.
	$LF
]div
[div class=p 
	"We can't press any of the switches while facing them head-on, but can press one of the switches from its side. The switch I'm facing and looks like I'm pressing is not actually the one I'm activating, I'm pressing the switch that's facing to the right. By getting into a very precise position a small fraction of a unit wide directly to the left of a switch it is possible to press it from further away than the player is normally able to. Therefore, we can press a switch we are not intended to have access to and immediately end the map. Dead Simple indeed!
	$LF
]div
[div class=p 
	"Since I have a few frames to spare while still getting 2 seconds, I also item bump a plasma rifle to extra ammo and collect an additional rocket. After gathering the plasma rifle, I switch weapons to the chaingun, which I need equipped as soon as possible in the next map for maximum potential RNG manipulation.
	$LF
]div
[h4 id=Map8TricksAndTraps 
	" Map 8 - Tricks And Traps
	$LF
]h4
[div class=p 
	"The first section, while very difficult and time consuming, is reasonably straightforward: manipulate enemy movement so that you can run into the room, grab the yellow key, and get out again as soon as possible. It involved lots of testing different firing timing at the start, some thingrunning, self rocket boosting and a damage boost from the cyberdemon - luckily we are able to grab an invulnerability powerup as we enter the room. I then proceed to the red key, and do the first void glide of the demo.
	$LF
]div
[div class=p 
	"I knew this trick was theoretically possible and spent some time stuck here, on-and-off attempting it. I eventually set up 6 simultaneous brute forces each looking at slightly different ranges (XDRE and brute force are single threaded processes, so this is as close as we can get to multithreading brute forcing) and left them each running for 15 consecutive uninterrupted days. After this time they still had found nothing, so I decided to cancel them and complete the map a different way (which also contained a few neat tricks, but isn't worth discussing as it wasn't kept), getting 11 seconds. I was frustrated by this failure to do the trick but considering no-one had at that point managed it at all, I was able to convince myself it was impossible and then completed the next one and a half maps. Some time later, Zero Master shared that they had successfully managed the trick. I scrapped my progress after this point, went back to this point and was determined to get it... but quickly caved again and asked Zero Master to do it for me, who brute forced the two necessary frames for me. Huge thanks to him for saving me 3 seconds!
	$LF
]div
[div class=p 
	"Doom has strange behaviours when it comes to interacting with walls. Very rarely when contact is made with a diagonal wall, the engine math used to calculate your resulting momentum and position makes an error and leaves you with a bunch of additional momentum, allowing you to exceed the regular cap of 30 units/frame. The spot where we wish to clip through is comprised of a north-west diagonal wall attached to a west wall. We want to clip through the west wall, using the above mentioned diagonal wall momentum bug to help us do so. By combining a rocket boost and this diagonal wall bug, we can gather a high enough momentum value that the game calculates our resulting position, finds that it is on the other side of the wall, and places us there - now outside of the map.
	$LF
	"The precision of a trick like this can't be overstated. It occurring at all is determined by the angle of the wall, the position of the wall and player momentum values along both axes. Not only that, but the position of the player needs to be as close as possible to the wall we wish to clip through on the frame before the clip occurs so that as little momentum as possible is required. The player is 32 units wide, so a momentum value of at least 32 is needed in absolutely perfect circumstances, but practically we can only get so close to the wall before the trick so more than that is needed.
	$LF
]div
[div class=p 
	"Luckily this map is one of the few that allows us to do something useful from the void, which is surprisingly rare. We can perform a zero press on the exit switch from outside the map, thus saving three seconds.
	$LF
]div
[h4 id=Map9ThePit 
	" Map 9 - The Pit
	$LF
]h4
[div class=p 
	"Lots of testing occurred to determine which chaingun shots at the beginning were optimal for RNG, since I wanted a few things to happen: I didn't want enemies in my way once I got to the top of the elevator, I didn't want enemies to damage me when I was riding the elevator up, I wanted the group of imps that I shoot with a rocket soon to group in such a way that enough of them died to not get in my way later, and I wanted the Hell Knight enemy (the one on the platform I rocket jump myself to) to not get in my way.
	$LF
]div
[div class=p 
	"The first rocket boost helps with speed but the main reason for doing it is that I wanted to avoid some pillars on the ground below me as I ran off of the ledge. The decorational pillars are "things" and therefore have infinite height, so I cannot move over the top of them and must move around them. It is possible to wallrun against them, so the rocket boost and movement here was optimised so that I avoided crashing into one and getting stuck while also effectively getting into a position alongside another to get a thingrun (remember: 'thingrunning' is just wallrunning against things). This saved two frames.
	$LF
]div
[div class=p 
	"Within the room with the green bricks and yellow key, a sequence break can be performed. There is a left, middle and right platform in this room, as well as an entry/exit platform that lowers and then raises to allow you to leave the room. Normally you need to go to the left one to lower and access the middle one, go on the middle one to lower and access the right one, and go on the right one to lower and access the entry/exit one. Instead, you can jump straight to the right platform to lower the entry/exit one and grab the yellow key before it raises, allowing you to finish the room much quicker.
	$LF
]div
[div class=p 
	"The exit door is another rare instance of a surface where no momentum preservation tricks are possible on its surface, so backing up and running forward becomes optimal.
	$LF
]div
[h4 id=Map10RefuellingBase 
	" Map 10 - Refuelling Base
	$LF
]h4
[div class=p 
	"This map contains my favourite part of the TAS due to its precision and complexity. We can perform a void glide and access the exit switch from out of bounds. This particular void glide is an unusually complicated trick with a lot of moving parts that happen very quickly. As previously stated contact with diagonal walls has strange properties and can occasionally result in unpredictable behaviour, sometimes giving you significantly more momentum than is otherwise at all possible. Also, interactions with "things", including enemies, has the unique effect of allowing you to very easily gather momentum - if you're running against an enemy, your actual position wont change but your momentum value will continue to accumulate. This trick combines these facts.
	$LF
]div
[div class=p 
	"The simple version is that I run into a corner and get blocked by an enemy in such a way that I am contacting both the enemy and a diagonal wall. Since I am blocked by the enemy, my position doesn't change but my momentum can still accumulate. Because I am remaining in the same position relative to the diagonal wall, the wall collision error can occur on multiple consecutive frames, which causes momentum to continue accumulating until the point where I have so much momentum that the game calculates where to place me and puts me on the other side of the wall. Bam, out of bounds. From here we can quickly press the exit switch.
	$LF
]div
[div class=p 
	"The complicated version: instead of having an enemy travel over to this corner in order to block me, the quickest way to get blocked is to have a Pain Elemental enemy spawn and fire a Lost Soul enemy at me, and get blocked by that enemy instead. In order to manipulate RNG so that it decides to fire at the right time, lots of testing occurred and resulted in me shoot a shotgunner at 4.66 seconds, but only with some projectiles of the shotgun, because RNG is changed slightly differently depending on how many projectiles hit an enemy. If the Pain Elemental spawns a Lost Soul towards me to soon it will not be in a location where I can get blocked properly, and it wastes too much time if it's too late. I then shoot the Pain Elemental after it begins spawning a Lost Soul to push it back slightly so that the origin point of the Lost Soul upon spawning is slightly further from me, which was needed to effectively find the correct position to be blocked. While shooting the Pain Elemental here I also needed to ensure I didn't interrupt and cancel its Lost Soul spawn. I ran slightly forward of where I needed to end up so that the Lost Soul travelled enough in front of me, and then brute forced a very precise position. I didn't test to verify this, but when Zero Master discovered this trick he claimed he had success only in a double .000000 position - precision that deserves some mathematical context. Positions are measured in game units (Doomguy is 32x32) and your position can have a precision of x/65536 of a unit, meaning that within a single game unit, the player can have 4,294,967,296 potential central points... one of which I needed. It meant that I needed to immediately have the Pain Elemental spawn the Lost Soul in the right position, brute force an exact .000000 position on one axis the frame I collided with it, brute force another exact .000000 position on the other axis two frames later, and then accumulate enough momentum to void glide before the monster moved away and I no longer had contact with its hitbox in order to block myself. It gets even worse, because when I was setting up my double .000000 position and beginning my momentum accumulation I needed to do so while not moving from the good position once I had it. If you run towards a thing with lower momentum than the distance between yourself and that thing, you will move towards it (if it's 1 unit away and you have 0.9 momentum/frame, you'll move 0.9 units towards it), but if you have a higher momentum value than that distance, you will not move (if it's 1 unit away and you have 1.1 momentum/frame, you will remain 1 unit away). It gets even worse, because the way I moved before contacting the Lost Soul determined its random chance of moving away to a point where I would lose contact with it too quickly for myself to accumulate enough momentum. It gets even worse, because I did all of this twice! I got a low 8 seconds with a slow Lost Soul spawn and went through this process a second time to get a high 7.
	$LF
]div
[h4 id=Map11CircleOfDeath 
	" Map 11 - Circle Of Death
	$LF
]h4
[div class=p 
	"The rocket jump in the beginning allows us to move around an obstruction that otherwise requires us to go elsewhere and activate a switch to lower. Following this, the elevators are a little bit complicated to optimise. The first elevator can be lowered by activating it from the ground, but the second elevator can be lowered by pressing a switch only accessible by riding up the first elevator. Further, both can be lowered by running off of them/onto them when they are *fully* raised, introducing some timing considerations. We want to run off of the first elevator as soon as possible to activate the switch to lower the second elevator, but when we're on the second elevator, we want to run off of it only once it's fully raised so that it immediately begins to lower. Timing this well saves around half a second.
	$LF
]div
[div class=p 
	"Between all of this we have time to kill an enemy that would otherwise be in our way when we run towards the exit switch. The final enemy killed is shot with the regular shotgun because it allows us to kill the enemy immediately while also being able to switch to the rocket launcher in time, in order to give ourselves a rocket boost to get under 24 seconds, which I wasn't able to manage without this boost. Other weapons either take too long to kill the enemy or have a reloading animation that is too long to switch to the rocket launcher in time.
	$LF
]div
[h4 id=Map12TheFactory 
	" Map 12 - The Factory
	$LF
]h4
[div class=p 
	"The rocket jump at the start saves a few seconds getting to the first door. There is a simultaneous .000000 trick and item bump that allows us to get the yellow key a few seconds faster. As mentioned earlier, wallrunning is only possible in one direction. Therefore, wallrunning only occurs while running away from the blue key after grabbing it, and not while approaching it. Theres a linedef you cross that begins lowering/raising the elevators in the final room, but it seems that this linedef has a random chance of acting on these elevators, so the elevators can possibly have a delay before moving. Punching the air and activating the linedef a frame later than I could have seemed to give me the elevator luck I needed in order to activate them all favourably. I timed weapon switching at the right time to get the SSG out, since a forced weapon switch occurs when you grab the berserk powerup. There's about half a dozen thingruns/wallruns and a bit of shooting for enemy manipulation in this area.
	$LF
]div
[h4 id=Map13Downtown 
	" Map 13 - Downtown
	$LF
]h4
[div class=p 
	"The part between the first teleporter and blue key was difficult to optimise because I need to run through the door and turn to the right, without hitting the frame of either door, and you become midair for a few frames after getting through the first one and therefore don't have player control. After managing that, item bump to grab the blue key through the door, a significant sequence break.
	$LF
]div
[div class=p 
	"I tested exiting this building and running outside to the next teleporter, and also doing what I ended up with, going through the teleporter in the same building before running to the next one. From my testing this was roughly 0.4 seconds faster.
	$LF
]div
[div class=p 
	"The yellow key building is fairly interesting. After doing a door boost on the door, a few things need to happen. There are two linedefs on the ground, one lowers the elevator and one makes it stop. The one that makes it lower also has a random chance of having a delay before the elevator lowers, but luckily it worked for me immediately with no manipulation. I then need to leave the building while doing a linedef skip on the linedef that makes the elevator stop. While the elevator is lowering there is enough time to run out of the building and do some other things, so I grab the blue armour and invulnerability. This doesn't slow anything down at all, since I have the wait for the elevator to lower anyway and cannot speed this up. After getting back to the elevator, I clear away a few imps on each side but keep one alive on the elevator to use as a kind of slingshot. I can run against this enemy to gather speed, and I use this to my advantage to grab some extra rockets and get back to the elevator (Thanks Looper! I saw this ammo collection in his No Monsters TAS and would not have thought of it myself). I then run against this imp again to gather speed and rocket jump off of it after running past it to do a mid-air yellow key item bump. Normally you can grab this by waiting until the elevator is high enough so that you can run onto the platform it is on, but this is much quicker.
	$LF
]div
[h4 id=Map14TheInmostDens 
	" Map 14 - The Inmost Dens
	$LF
]h4
[div class=p 
	"A rocket jump allows you to access the exit area much faster than is intended.
	$LF
]div
[h4 id=Map15IndustrialZone 
	" Map 15 - Industrial Zone
	$LF
]h4
[div class=p 
	"A huge improvement compared to RamboBones' old 14:02 demo is here: before the discovery of a new trick it was faster to take a secret exit in this map and complete a secret map (map 31) than it was to complete map 15 normally, so they did that. Not only that, but RamboBones was of the of the uncommon opinion that a run of the game is invalid unless the player also completes the 'super secret' map (map 32), accessible from map 31, taking even more time. It is an opinion that I personally strongly disagree with, and more importantly, the secret levels officially are *not* required for a UV-Speed run. Therefore RamboBones' demo completed an additional two maps than this demo. Their map 15 time uses a totally different route and is faster than mine, but their maps 15+31+32 time is over half a minute slower.
	$LF
]div
[div class=p 
	"The trick that changed this situation was a zero press to activate a switch at 12.11 seconds of the map, normally a switch we are not able to access. We can then access the blue key, needed to reach the map exit, much sooner. This saves a huge amount of time, and it is no longer faster to take the secret exit and complete the secret level. There is quite a bit done to manage monsters on this map, but as stated mentioning everything like this would make these comments even longer!
	$LF
]div
[div class=p 
	"I "found" a cool trick at the end but it turns out it was known about already, just not to me. The last door before the exit is comprised of three surfaces, a middle, left and right one. Each of these surfaces independently has the effect of raising the door, and activating all three raises the door faster. If just one is activated, it raises at 2 units/frame, but activating all three raises it at 6 units/frame.
	$LF
]div
[div class=p 
	"The megasphere I grabbed here largely needs to last me until I grab another one in the middle of map 20. Because every single health pickup for the run was routed, this meant I needed to be mindful of health for the next few maps, which included multiple planned rocket boosts/jumps.
	$LF
]div
[h4 id=Map16Suburbs 
	" Map 16 - Suburbs
	$LF
]h4
[div class=p 
	"Virtually the whole map can be skipped by performing a squeeze glide through a gap instead of needing to find the red key elsewhere. 8 seconds is possible here instead of 9 with extra rocket boosts and if you ignore health considerations later, and is a good example of the fact that some potential timesave is sacrificed occasionally to save much more of it later.
	$LF
]div
[h4 id=Map17Tenements 
	" Map 17 - Tenements
	$LF
]h4
[div class=p 
	"I fire a rocket at a group of imps at the beginning to clear out a room I will need to visit later. I then need to time two BFG shots effectively to clear out rooms of enemies. Firing the BFG stores the player angle on the frame that the initial projectile exits the weapon, waits a few frames after this projectile contacts a surface or enemy, and then fires many invisible and extremely high-damage tracers in an arc from the player directed towards the previously stored angle. Therefore timing and angle testing is required to effectively use this weapon, and it must be fired considerably sooner than when you are actually near enemies you wish to kill.
	$LF
]div
[div class=p 
	"Another zero press is performed to activate a switch within a room normally only accessible by gathering keys elsewhere in the map, which saves a great deal of time and is single-handedly one of the largest improvements to RamboBones' demo. By using a combination of a .000000 trick against the subsequently lowering yellow bars and a well timed and placed rocket boost we can cross a gap instead of running around a path, saving a few seconds.
	$LF
]div
[div class=p 
	"The final area involves us running back and forth through a series of tunnels, which open up more and more until the exit is accessible. Because these tunnels are quite narrow this section was a massive chain of momentum preservation tricks, .000000 tricks, controlled momentum kills against walls, controlled contact with walls so as to kill no momentum, and wallruns to optimise, and was unusually time consuming and difficult. I finished the map with the chaingun equipped so that I already had it equipped ASAP when the next map started.
	$LF
]div
[h4 id=Map18TheCourtyard 
	" Map 18 - The Courtyard
	$LF
]h4
[div class=p 
	"I wanted to start with the chaingun here because it allows us to fire at the door quicker than any other weapon, which is needed to open it. While we don't enter the void this trick is mechanically equal to a void glide: I manipulate an enemy to get into a specific position, simultaneously run against it and a diagonal wall, get the bug to happen where I end up with significantly more momentum, and get thrown through a wall behind which is the map exit. Getting the enemy to walk over to me and get in position without wandering off and without getting distracted and taking aim at me took a fair bit of testing RNG with when to fire my pistol and when to move, and took most of a days work. It was also annoying making them stay in the right spot, which involved shooting and killing them. This trick requires a lot more momentum than a void glide because the door is also 8 units wide, meaning that I need a minimum momentum value of 40 in perfect conditions instead of the regular 32 - but again in practice more is needed. I can't get perfectly close to the wall I wish to clip through, because I need to be far away enough from it to remain in contact with the hitbox of the zombieman I remain in contact with, or else the trick fails. I ended up getting "stuck" 3.8 units from the surface I clipped through and accumulates 46.2 units of momentum/frame, meaning this only worked by about 2.4 units. Saves about 13 seconds.
	$LF
]div
[h4 id=Map19TheCitadel 
	" Map 19 - The Citadel
	$LF
]h4
[div class=p 
	"A zero press is performed at the start to activate a switch normally only accessible by entering the building that I instead run around. I needed to manipulate a lost soul to open a door and then keep it open for me after I grabbed the red key so that I didn't need to waste valuable time opening it. Other than that, and the instant squeeze glide at the end, this map mostly consisted of just movement optimisation instead of tricks. I didn't find a way to skip the slow elevator wait.
	$LF
]div
[h4 id=Map20Gotcha 
	" Map 20 - Gotcha!
	$LF
]h4
[div class=p 
	"I built this whole map twice. The second time, I was able to recycle large sections of inputs from the first time I built it, but it still took nine hours. Building it a second time saved 7 frames.
	$LF
]div
[div class=p 
	"I rocket boosted myself at the beginning while falling, but needed to very mindful of how much damage I took because I needed more health very soon, so the rocket boost couldn't be as impactful as it otherwise might. After a particularly long wallrun, something cool and very easy to miss is a very quick diagonal wallrun, the fastest one I've ever personally seen. Usually the player can only travel a max of roughly 23 units per frame without wallrunning, but here I managed over 80 in one frame! And 249 units in 4 frames! This is once again a direct result of the game occasionally freaking out when dealing with diagonal wall contact.
	$LF
]div
[div class=p 
	"After the first teleporter I fire a rocket at a Cacodemon enemy so that the explosion gets me "unstuck", similar to the trick in map 03. A huge reason this map took so long to build was that I manipulated the behaviour of the cacodemon by testing many punching frames in the previous map (that's the reason I punch the air after getting the red key in map 19). If it was too close after I teleported, I would telefrag it (teleport into an enemy, instantly killing it) or the explosion would be too violent and kill me, and if it was too far away, I wouldn't get unstuck fast enough and waste valuable frames. Right after this I give myself another very small rocket boost for speed - that 1% health means I really got a lot of use out of that map 15 megasphere! Luckily there is some health very shortly.
	$LF
]div
[div class=p 
	"After teleporting, I needed to experiment with different firing frames to manipulate luck so that the hitscan enemies at the bottom of the descending elevator would move so that they would not block me, and so that they would not attack me, and so that they would group together so that I could kill them all with one shot. A difficult consideration of this map is that at roughly 14 seconds I cross a linedef that begins opening a gap that I pass through at roughly 25 seconds, and assuming I get to the gap in the wall before it is fully open there is nothing I can do to speed up how quickly this gap opens, removing my potential to save any time for about 11 seconds. Prior to this, my ability to speed myself up with rocket boosting is very limited due to low health, and after grabbing the megasphere I cannot boost myself with a rocket because I require plenty of health for upcoming tricks in later levels.
	$LF
]div
[div class=p 
	"I grab another megasphere for 200% health and armour and like the map 15 one this needs to last me a while, and so health and rocket considerations were carefully measured for the next few maps - more on that soon.
	$LF
]div
[h4 id=Map21Nirvana 
	" Map 21 - Nirvana
	$LF
]h4
[div class=p 
	"3 instant squeeze glides in under 3 seconds. Because I am in a .000000 position after the last one I can accumulate lots of momentum, and when I combine this with a rocket boost the game considers my momentum, decides that if I wasn't obstructed by a wall I would have entered a teleporter on the otherside of the wall I am stuck against, and teleports me to its destination right next to the map exit.
	$LF
]div
[h4 id=Map22TheCatacombs 
	" Map 22 - The Catacombs
	$LF
]h4
[div class=p 
	"After teleporting I needed to optimise how I contacted the lowering bit of floor. If I didn't contact it correctly the game would not consider me to be touching ground and would not allow me to move for a while, and so lowering it as soon as possible while contacting it correctly had to be done. Due to the odd shape of some walls, I was able to get a simultaneous diagonal wallrun and squeeze glide on the same frame through the gap.
	$LF
]div
[div class=p 
	"Something happens here that seems bad but actually ends up saving time. At roughly 4.5 seconds I fire a rocket through a gap, and when it explodes it kills three enemies that would otherwise have been in my way - so far so good, except that the explosion throws the corpse of an enemy in my way, obstructing the rocket jump I am about to want to perform. That means I get stuck against its corpse for 10 frames before I can jump. However, this means that I can combine a .000000 trick with the fact that you can run against things (this includes dying enemies as well as living ones) to accumulate more momentum for longer, meaning I needed a less violent rocket explosion to throw me across the gap because I already have considerable momentum, meaning I could accomplish the trick while keeping more health and armour, meaning I could save it for later tricks without needing to re-route to grab extra health later. While this cost me being able to get 10 seconds on this map, the time it saves later is certainly worth it.
	$LF
]div
[h4 id=Map23BarrelsOFun 
	" Map 23 - Barrels O' Fun
	$LF
]h4
[div class=p 
	"Another void glide, but this time instead of using an enemy to block me I use a barrel, which I need to shoot with my pistol to move it into a good position. After this, something totally new happens: getting back INTO the map from the void! This is once again a trick facilitated by diagonal wall interaction quirkiness of the game, but also by the fact that when you run against walls while in the void your momentum does not die and continues to accumulate and be maintained, similar to when running against enemies. What happens here is that I run into a wall while out-of-bounds and fire a rocket at a surface (all surfaces, walls, and platforms in the void are unintentional effects of the sectors that exist WITHIN the maps, they are not in any way deliberately placed there) to get a boost from the explosion. If I do this in the correct position, the game attempts to calculate my resulting position based on my momentum value and finds that it would interact with a diagonal wall WITHIN the map, even while the player is OUTSIDE of it. A diagonal wall interaction then happens that gives me a high enough momentum value to clip me through the wall and place me back within the map. This involved some very precise fiddling with positions to time this and get the accuracy right, made much harder by the fact that everything is a visual nightmare while in the void!
	$LF
]div
[div class=p 
	"The rest of the map involved general optimisations like a well-performed BFG shot and several door boosts. At the end, a barrel is in the way and you can shoot it to cause just enough damage to move it out of the way without it exploding.
	$LF
]div
[h4 id=Map24TheChasm 
	" Map 24 - The Chasm
	$LF
]h4
[div class=p 
	"A large part of the infamous ledge sections can be avoided by a rocket jump at the beginning (the main reason I was happy to save health due to the map 22 rocket jump situation) and a wallrun at the end. Once again this map mostly involved extensively optimising movement and luck instead of being filled with notably interesting tricks. Part of the difficulty of optimising movement was that cutting corners on the ledge sections meant I was often not in contact with any ground for several frames at a time, during which I can't control my movement, so it took a bit of testing to work out where it was quicker to leave the ground sooner and where it was better to stay contacting it for an extra frame.
	$LF
]div
[h4 id=Map25Bloodfalls 
	" Map 25 - Bloodfalls
	$LF
]h4
[div class=p 
	"At the beginning I continuously run onto and off of a small ledge, because every time you leave a ledge and regain contact with the ground you gain a significant bit of extra momentum. This is normally more effective when you are at already quite high speeds as this method allows you to far exceed the usual limit of roughly 23 units/frame, but can be done in situations like this too.
	$LF
]div
[div class=p 
	"This is another map where I spent days building it, and then scrapped the whole thing and spent a few days re-building for a small optimisation at the beginning, in this case getting a better wallrun at the beginning to save 7 frames.
	$LF
]div
[div class=p 
	"The notable trick is the Arch Vile jump at the end. Its attack throws you into the air and you can time it so that it allows you to access the exit teleporter a little over a second faster than you are usually able. What was hard about this was working out how to time a BFG shot so that the tracers killed all the other enemies surrounding the Arch Vile but not the Arch Vile itself, while also triggering it to attack me immediately.
	$LF
]div
[h4 id=Map26TheAbandonedMines 
	" Map 26 - The Abandoned Mines
	$LF
]h4
[div class=p 
	"I use two BFG shots in the beginning so that the tracers clear out the enemies in sections that I am about to visit. I also do a few controlled momentum kills while activating switches and gathering the red key so that I can turn around as quickly as possible. I do version of a key grab involving a .000000 trick to gather the blue key sooner before running out of this raising section. Doing all that in conjunction with maximising wallruns took a fair bit of time to work out.
	$LF
]div
[h4 id=Map27MonsterCondo 
	" Map 27 - Monster Condo
	$LF
]h4
[div class=p 
	"A great trick can be done here where the Arch Vile can be manipulated to open the final door for you, skipping the need for us to gather the red key to exit the map. I also make sure to get some armour and health here because the following map has multiple rocket tricks. Manipulating the Arch Vile to run towards the door without stopping to attack me involved testing some different firing frames and movement combinations but thankfully it ended up being fairly painless to perform.
	$LF
]div
[h4 id=Map28TheSpiritWorld 
	" Map 28 - The Spirit World
	$LF
]h4
[div class=p 
	"A void glide trick is performed here to access the final area of the map sooner. Since I don't have anything to get stuck against I have to do the much more difficult version involving an instant glide with a rocket boost, like what was done by Zero Master in map 8 - a sufficient explanation for this trick is already there so I wont repeat it. I ended up doing this trick myself, but want to once again thank Zero Master. He sent me a couple of test demos for me to study, and before I succeeded I asked him if he wouldn't mind doing the trick for me again, to which he agreed. I didn't end up needing him to, but many thanks to him for his willingness to help me.
	$LF
]div
[div class=p 
	"There is no exit switch to press from outside the map so I need to re-enter the map from the void. Like map 23, I need to get lots of momentum against the wall from outside the map, get good momentum values, get into a very precise position, fire a very precisely angled rocket, convince the game that I'm diagonally wallrunning on the inside of a diagonal wall while the player is in fact not even inside the map, get the game to accidentally give me additional momentum as a result of it failing to properly interact with diagonal walls, clip through a wall and throw me back into the map.
	$LF
]div
[h4 id=Map29TheLivingEnd 
	" Map 29 - The Living End
	$LF
]h4
[div class=p 
	"At this point, to be honest I didn't even know if this jump trick was possible. It'd been theorised for some time and one other taser got close but as far as I know this is the first and only time it's ever successfully happened.
	$LF
]div
[div class=p 
	"There is a huge gap that can be crossed that places the player near the end of the map. What happens here is that I need to get several flying enemies to move over towards this gap so that I can perform a rocket jump against one so that I have lots of momentum while flying through the air, and get a mid-air wallrun against another enemy so that I cross enough distance to make the jump. It's conceptually reasonably simple but in practice it is nothing short of an absolute goddamn nightmare to do. The distance to be crossed is massive and involves a lot of optimisation of speed, which frame you leave the platform and how far towards the edge of the platform you are on the last frame that you are contacting it. The place I need to land on is brutally small and so a very, very high degree of accuracy is needed. On top of that, you need to manipulate multiple enemies to move into the correct place so that you can rocket jump off of one of them in the right spot and wallrun against another in a different right spot. The payoff is enourmous, though - this saves around half a minute, and without it I don't think a sub-10 minute IGT result is possible.
	$LF
]div
[h4 id=Map30IconOfSin 
	" Map 30 - Icon Of Sin
	$LF
]h4
[div class=p 
	"Normally you need to press a switch and raise a platform, ride that platform and shoot multiple rockets into the exposed brain of the final boss. This typically takes three rockets, but if they're placed perfectly, it's possible in two: max splash damage from rockets is 128 and the final boss has 250 health.
	$LF
]div
[div class=p 
	"Not only can we skip the third rocket, we can also skip the raising platform! A REALLY cool trick was found where you can have the Icon of Sin spawn a Pain Elemental (which enemy it spawns is random), have the Pain Elemental spawn a Lost Soul, and fire a rocket at that Lost Soul as it flies towards you. If you do it right, the autoaim of the weapon will make the rocket fly a little upwards, towards the exposed brain of the final boss, and miss the Lost Soul as it flies past, thereby shooting a rocket into the exposed brain of the enemy much sooner than is normally intended. Do this twice, and angle the rockets perfectly so that they cause 128 damage each time, and you save around 8-9 seconds.
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/slamo 
		"slamo
	]a
	": Claiming for judging.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/slamo 
		"slamo
	]a
	": First off, congratulations on finishing such a huge project. It had been known that the previous Doom 2 TAS was improvable for several years, but nobody has been able to pull it off until now. The new skips are mind-blowing: the new void glides are great and the skip on The Living End is an absurdly difficult achievement. People have been TASing Doom since before this site existed, and the fact that some of these skips have never been seen before is a testament to the technical quality of the run.
	$LF
]div
[div class=p 
	"There was some question about the build of XDRE used to make this run. Ultimately, we don't really care how a movie file is made, as long as it syncs on a stable emulator version. I synced this demo on vanilla Doom 2 v1.9 in PCem, so I can confirm it works with the original game. I also looked through the inputs and could not find any illegal movement.
	$LF
]div
[div class=p 
	"I'm removing "UV-Speed" from the branch and leaving it branchless. UV-Speed is already the standard fastest completion category here and doesn't need to be mentioned, and none of the other Doom submissions have it in the branch name.
	$LF
]div
[div class=p 
	"Accepting!
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/slamo 
		"slamo
	]a
	": Uploading an extended demo file for the publishers: 
	[a href=https://tasvideos.org/UserFiles/Info/637878873563465993 rel=noopener external nofollow 
		"https://tasvideos.org/UserFiles/Info/637878873563465993
	]a
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/despoa 
		"despoa
	]a
	": Processing...
]div
