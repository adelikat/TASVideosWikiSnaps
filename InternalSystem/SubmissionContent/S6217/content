8
[div class=p 
	"Celeste TASing has been made possible thanks to 
	[a href=https://github.com/ShootMe/CelesteTAS rel=noopener external nofollow 
		"DevilSquirrel
	]a
	", by modifying the game to read inputs from a file, as well as showing useful values and providing a friendly input editor. This game has been featured during the TAS block at 
	(__wikiLink|displaytext=SGDQ 2018|href=/GamesDoneQuick/SGDQ2018)
	". Since then, the any% TAS has been improved by almost two minutes, and inputs were converted to libTAS to make this submission possible.
	$LF
]div
[h3 id=GameObjectives 
	" Game objectives
	$LF
]h3
[ul 
	[li 
		" Emulator used: libTAS 1.3.2
		$LF
	]li
	[li 
		" Aims for fastest in-game time
		$LF
	]li
]ul
[div class=p 
	"All movement techniques are described in the 
	(__wikiLink|displaytext=game resource page|href=/GameResources/Windows/Celeste)
	". This submission text only focuses on specific tricks.
	$LF
]div
[h3 id=LibtasConversion 
	" libTAS conversion
	$LF
]h3
[div class=p 
	"The input conversion between Celeste TAS tool and libTAS did not cause any issue. Inputs from each level were converted separately, and inputs outside level (intro, hub, etc.) were done inside libTAS. Indeed, Celeste TAS tool ignore loadings, it feeds inputs only when pulled by the game engine.
	$LF
]div
[div class=p 
	"There was only one desync at the end of stage 7A, where one frame needed to be deleted. Because it happened after a feather section, we suspect that this has to do with analog input conversion. Indeed, Celeste TAS tool input format contains analog inputs described as a stick angle in integer degrees (0 - 359), and feeds the converted X/Y coordinates to the high-level game code (into XNA/FNA game controller struct). On the contrary, libTAS feeds raw analog inputs as 16-bit X and Y coordinates, before any processing (such as deadzone) is performed by the XNA/FNA framework. So the script that converts Celeste TAS tool inputs to libTAS inputs requires some floating point operations, which could lead to small differences in the obtained analog inputs.
	$LF
]div
[div class=p 
	"Also, Celeste TAS tool does not keep track of rerecords, so this value was set to 0.
	$LF
]div
[h3 id=InGameVsRealTime 
	" In-game vs real-time
	$LF
]h3
[div class=p 
	"This TAS aims for fastest in-game time. This follows the convention for unassisted speedruns, as the game was designed with speedrunning in mind, providing a robust in-game timer, as well as displaying individual level times. Moreover, optimizing this game for real time would lead to differences, because several animations such as dashing, crystals or bounces freeze the stage and the in-game timer for several frames. A TAS aiming at real time would limit the use of dashes, resulting in slower movement but less freeze frames.
	$LF
]div
[h3 id=BSides 
	" B-sides
	$LF
]h3
[div class=p 
	"The normal way of unlocking a chapter in this game is by completing the previous chapter. However, each chapter holds a secret cassette, which unlocks a special stage called B-side. By unlocking and completing the B-side of a chapter, the next chapter is unlocked. In this category, it is in fact faster (in-game time) to unlock and complete the B-side of chapters 5 and 6 instead of doing the levels normally.
	$LF
]div
[h3 id=StageByStageComments 
	" Stage by stage comments
	$LF
]h3
[h4 id=Prologue 
	" Prologue
	$LF
]h4
[div class=p 
	"The main optimization of this stage is using double corner boosts.
	$LF
]div
[h4 id=1a 
	" 1A
	$LF
]h4
[div class=p 
	"We avoid most of the springs because it reset our speed.
	$LF
]div
[h4 id=2a 
	" 2A
	$LF
]h4
[div class=p 
	"We use the cutscene warp to place us directly into the dream block to save a bit of time. When getting out of dream blocks, we can jump twice for some horizontal boosting. We can also dash diagonally downward and jump at the same time to execute an instant hyper dash. Collisions inside dream blocks have a bit of leniency, so we can cut through corners. The end of the stage features several ultra dashes.
	$LF
]div
[h4 id=3a 
	" 3A
	$LF
]h4
[div class=p 
	"This level features a lot of crouched dashes to go through dust bunnies. When getting near Oshiro during the escape, time is slowing down but the in-game timer still runs at full speed, so we must avoid getting close to him, or knock him off.
	$LF
]div
[h4 id=4a 
	" 4A
	$LF
]h4
[div class=p 
	"The wind adds (or remove) a constant value to our movement, except when dashing. Thus, we try to dash as much as possible when the wind is against us, and to avoid dashing when the wind is pushing us forward. The snowballs cancel our dash, which is very handy. However, we don't have much freedom to manipulate where they are appearing.
	$LF
]div
[h4 id=5a 
	" 5A
	$LF
]h4
[div class=p 
	"We head to the cassette to unlock 5B. Inside the cassette screen, red/blue blocks are synchronized with the music. As a consequence, they are not delayed when the timer is frozen by a dash. So, to save in-game time, we have to dash as much as possible when we are waiting for red/blue blocks.
	$LF
]div
[h4 id=5b 
	" 5B
	$LF
]h4
[div class=p 
	"Grabbing Theo cancels our dash, so we can setup a grounded ultra dash and grab him to conserve this speed. However, grabbing Theo takes a lot of time, which makes this section very difficult to optimize.
	$LF
]div
[h4 id=6a 
	" 6A
	$LF
]h4
[div class=p 
	"Analog stick is used when in feather form for more precise movement.
	$LF
]div
[h4 id=6b 
	" 6B
	$LF
]h4
[div class=p 
	"Bumpers send us further if we press the direction away from them when bounced.
	$LF
]div
[h4 id=7a 
	" 7A
	$LF
]h4
[div class=p 
	"When the wind is pushing downward, we can jump on spikes if at a precise position. This is due to the order of steps in the game engine, we get pushed downward after the check for spikes, and we can jump away from the spikes during the next frame.
	$LF
]div
[h3 id=Thanks 
	" Thanks
	$LF
]h3
[div class=p 
	"Huge thanks to all Celeste speedrunners and the Celeste discord for all the suggestions and feedback.
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/feos 
		"feos
	]a
	": Judging...
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/feos 
		"feos
	]a
	": Replacing the movie with a 1565 frame improvement. Also I cleared the rerecord count (per author agreement), fixed a path, and reordered a sentence in the annotations.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/feos 
		"feos
	]a
	": This games works the same as 
	(__wikiLink|displaytext=SteamWorld Dig 2|href=/6112S)
	" in terms of level loading: it spawns threads in-between levels, and libTAS can't control them. The situation is exactly the same, no gameplay trick is related to this, as no gameplay is there when loading happens. And the movie also aims for in-game time, which only counts gameplay times.
	$LF
]div
[div class=p 
	"So exactly like that other submission, this movie relies on mid-level time pauses, and for exact same reasons I consider it acceptable. See my judgment there for all the details.
	$LF
]div
[div class=p 
	"Great feedback, accepting to Moons (similar in that regard too).
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/fsvgm777 
		"fsvgm777
	]a
	": Processing.
]div
