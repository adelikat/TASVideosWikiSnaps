6
[p 
	(youtube|v=7bFlXGYUCec)
	$LF
]p
[h2 
	"Attributes
	$LF
]h2
[ul 
	[li 
		"Aims for lowest real time / frame count
		$LF
	]li
	[li 
		"Takes damage to save time
		$LF
	]li
	[li 
		"Abuses programming errors
		$LF
	]li
	[li 
		"Executes arbitrary code
		$LF
	]li
	[li 
		"Skips all items
		$LF
	]li
]ul
[pre 
	$LF
]pre
[h2 
	"New notes
	$LF
]h2
[p 
	"This is an improvement of 903 frames over the previous TAS through the following optimizations:
	$LF
]p
[ul 
	[li 
		"Improved Ceres in-game-time-wise by one frame
		$LF
	]li
	[li 
		"Improved Green Pirate shaft by 15 frames through better room entry after OoB
		$LF
	]li
	[li 
		"Improved Lower Mushrooms room by 4 frames with a new d-boost strategy (saves time in 0% conditions)
		$LF
	]li
	[li 
		"Improved Green Brinstar Doorskip by 885 frames. Discovered a new method to move further backwards per pause (first 8 pauses) during Green Brinstar doorskip, which reduced number of pauses by 5. This was performed by moonwalking on frame 1, switching to forwards on frame 2, holding angle to stop on frame 3. Total distance moved backwards = 53248 subpixels (normal moonwalk = 32768 subpixels)
		$LF
	]li
	[li 
		"One frame was lost due to collision frame rule during last unpause of Doorskip 
		$LF
	]li
]ul
[pre 
	$LF
]pre
[h2 
	"Old Notes
	$LF
]h2
[h2 
	"Overview
	$LF
]h2
[p 
	"0% has finally landed onto planet Earth after much waiting, and unexpectedly, it crushed all the framecounts Super Metroid had witnessed up to this point!
	$LF
]p
[p 
	"This is a 231 frame improvement over the currently-published TAS, a TAS which was recently proven not to actually work as intended on original hardware. Not only 
	[em 
		"should
	]em
	" this TAS work as intended, but it is also faster and uses less items. What more could you ask for?
	$LF
]p
[p 
	"This improvement became possible through moonfall's property of uncapping falling speed, thus allowing for Samus to clip straight through the PB floor below Green Brinstar's elevator, along with an ACE method I developed for the OoB area afterward.
	$LF
]p
[p 
	"Without any items, moonwalking is the only way to move, bit by bit during each pause-unpause, through leftward door transitions towards an OoB area. The only door inside the Green Brinstar elevator room which does not have a solid wall behind it is at the very bottom, thus it is used.
	$LF
]p
[p 
	"The OoB area contains a useful block which executes code depending on Samus's previous X-axis position (7E0B10), which is what primarily gets abused through my ACE method.
	$LF
]p
[p 
	"Everything outlined above is explained in greater detail below!
	$LF
]p
[pre 
	$LF
	$LF
]pre
[h2 
	"New glitches and techniques
	$LF
]h2
[h3 
	"Moonfall
	$LF
]h3
[p 
	"By moonwalking then pressing jump (frame 1: < or > + X, frame 2: A), instead of performing a jump, Samus will perform a turnaround animation right before performing the jump.
	$LF
]p
[p 
	"This particular jump will not have a value assigned to its vertical direction (7E0B36), causing its Y-speed value to underflow. Normally, Samus's falling speed is capped at ~5 pixels per frame, but by performing this jump, her speed will be uncapped.
	$LF
]p
[p 
	"Therefore, by performing a moonfall, it is possible to acquire a large amount of falling speed, which can be used to pass through entire tiles. A standard tile is 16 pixels by 16 pixels.
	$LF
]p
[h3 
	"Moonwalk Doorskip
	$LF
]h3
[p 
	"Not only is it possible to pass through doors corresponding to vertical transitions, which happens in the room known as the Parlor (and has been present in the multiple ACE TASes up to this point), it is possible to do the same with doors corresponding to horizontal transitions.
	$LF
]p
[p 
	"Unfortunately, performing such a skip is not possible with only one pause-unpause. Instead, it has to be performed using multiple pause-unpauses, moving a half-pixel backwards on a single specific frame each time via moonwalk.
	$LF
]p
[p 
	"The reason these skips work is because there is a specific frame during the unpause fade-in where Samus will not have normal constraints applied, such as those related to her energy (allowing her to survive indefinitely at zero by chaining pauses together appropriately, which was performed in a previous TAS) and room transitions.
	$LF
]p
[pre 
	$LF
	$LF
]pre
[h2 
	"Route
	$LF
]h2
[pre 
	$LF
]pre
[h3 
	"Crateria
	$LF
]h3
[p 
	"Right off the bat, things take an interesting turn within the second room of Crateria. Usually, the player would head straight down multiple rooms to acquire Morphing Ball and Missiles, but by using an OoB transition block directly below the room itself, this sequence is skipped.
	$LF
]p
[p 
	"By performing this skip, Samus is placed at the top of the next room, which luckily contains another handy transition block. This transition block places Samus within a copy of the green pirates' shaft, to the right of the original room, due to her X/Y coordinates at the time of transitioning.
	$LF
]p
[p 
	"Copies of rooms do not contain enemies (only the original room does), and Samus interacts slightly differently with such rooms. In this case, in order to open the door leading to the next room, the shot has to spawn far enough left for it to register upon the door.
	$LF
]p
[p 
	"Because of the copy room's properties, Samus is placed one tile above the ground after the transition, so jumping through allows her to land earlier, and also helped adjust the screen position.
	$LF
]p
[p 
	"Due to lacking Morphing Ball, the optimal strategy involving morphing through the Kago hives is not possible.
	$LF
]p
[pre 
	$LF
]pre
[h3 
	"Green Brinstar
	$LF
]h3
[p 
	"After arriving here without any items, you might think there cannot possibly be any further progress to be made, but that isn't the case.
	$LF
]p
[p 
	"By performing a moonfall near the edge of the elevator platform, Samus can perform many turnaround animations to maintain and build additional falling speed, until enough has been built to pass through the PB floor at the bottom of the (first half of the) room.
	$LF
]p
[p 
	"An additional moonfall is performed after passing through this flooring, weaving through the floating platforms accordingly.
	$LF
]p
[p 
	"Upon landing at the bottom, I jump towards the door and pause-unpause so that Samus will turn around and land on a specific frame (mentioned earlier, in the moonwalk doorskip explanation) without activating the transition, allowing her to start from a position ~2.5 pixels inside the transition blocks.
	$LF
]p
[p 
	"From this point, I perform many pause-unpauses along with frame-perfect moonwalks until I have maneuvered Samus outside of the transition blocks and into the OoB area, where the real fun can begin.
	$LF
]p
[pre 
	$LF
	$LF
]pre
[h2 
	"ACE method
	$LF
]h2
[p 
	"I found two methods during the development of this TAS, the one used within being the fastest of them all.
	$LF
]p
[p 
	"Part of the setup occurs as early as the final pause-unpause, during the moonwalk doorskip. During this, I am holding inputs which produce the values 6C 93 within 7E05E1-7E05E2, as these store the values of the previous buttons pressed during the pause menu.
	$LF
]p
[p 
	"7E05E3 is already at value 00, which is exactly what I need here, as the 3 bytes I need together are 6C 93 00 which translates to JMP $0093.
	$LF
]p
[p 
	"Now, upon entering the OoB area in Green Brinstar, I head towards a 0F 44 block, which, upon making contact, executes things depending on what Samus's X position was on the previous frame.
	$LF
]p
[p 
	"There are multiple copies of this block within the OoB area, but none of them are located at X position 7E05E1, which is required for my pause menu manipulation.
	$LF
]p
[p 
	"Fortunately, making contact with the block at roughly $15 X position with an appropriate X speed makes it possible to have the block shuffle room data... thus creating a completely new 0F 44 block, right at X position $05E1!
	$LF
]p
[p 
	"After accomplishing the above, the trek towards that X position begins. Upon completing the trek and making contact with the block at $05E1, the block jumps to the contents within $05E1 (6C 93 00).
	$LF
]p
[p 
	"Now, we are at $93, which translates to "buttons pressed on previous frame". Cleverly, I hold the buttons which produce $421A, to start executing from controller registers.
	$LF
]p
[p 
	"With only three controllers available at this point due to one being used as part of the setup up to this point, I had difficulty loading the ending, but my dear programmer friend Total figured out a minimum byte combination for loading the ending straight from the ROM.
	$LF
]p
[p 
	"The entire ACE setup consists of the following code:
	$LF
]p
[ul 
	[li 
		"JMP $0093 - Jumps to contents of 7E0093  
		$LF
	]li
	[li 
		"JSL $A2AD20 - Loads ending sequence  
		$LF
	]li
	[li 
		"RTS - Return To Subroutine (required to prevent the game from crashing)  
		$LF
	]li
]ul
[pre 
	$LF
	$LF
]pre
[h2 
	"Special Thanks
	$LF
]h2
[ul 
	[li 
		"Total, Taco, and Dan for assisting in the development of ACE methods.
		$LF
	]li
	[li 
		"Aran;Jaeger for leading me into discovering moonfall.
		$LF
	]li
]ul
[hr 
]hr
[p 
	[a class=intlink href=/Users/Profile/Mothrayas 
		"Mothrayas
	]a
	": Judging.
	$LF
]p
[p 
	[a class=intlink href=/Users/Profile/Mothrayas 
		"Mothrayas
	]a
	": Another month, another complete destruction of the game Super Metroid by Sniq. Accepting as an improvement to the 
	[a class=intlink href=/3628M 
		"published movie
	]a
	".
	$LF
]p
[p 
	[a class=intlink href=/Users/Profile/Spikestuff 
		"Spikestuff
	]a
	": Publishing.
]p
