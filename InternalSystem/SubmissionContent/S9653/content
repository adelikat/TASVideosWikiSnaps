5
[h2 id=1415Puzzle 
	"The 14-15 Puzzle
	$LF
]h2
[div class=p 
	"This is a version of the popular "Slide Puzzle", for the Commodore 64.  The game features 3 different modes, where two have static starting layouts  and one with andomly generated puzzles.
	$LF
]div
[div class=p 
	"More information can be found in the 
	[a href=https://www.lemon64.com/game/14-15-puzzle rel=noopener external nofollow 
		"manual
	]a
	".
	$LF
]div
[h3 id=ToolsUsed 
	"Tools Used
	$LF
]h3
[ul 
	[li 
		"BizHawk 2.9.1
		$LF
	]li
	[li 
		"Lua Scripting
		$LF
	]li
	[li 
		"C# Coding (Brute Forcing of layouts to get the fastest solution.)
		$LF
	]li
]ul
[h3 id=NotesForTheJudge 
	"Notes for the Judge
	$LF
]h3
[div class=p 
	"To make things a bit easier for judging, please take in consideration the following information.
	$LF
]div
[div class=p 
	"The game is played in a special order to help end input early. The order is:
	$LF
]div
[ul 
	[li 
		" Game Mode 1 (14-15 Puzzle: A starting situation where tiles 14 and 15 have been swapped on a solved solution)
		$LF
	]li
	[li 
		" Game Mode 3 (Random Puzzle: This is a situation where the layout can be one of 2 sextillion combinations.)
		$LF
	]li
	[li 
		" Game Mode 2 (Reverse Puzzle: A situation where all the tiles have been re-ordered in reverse from 15 to 1, having the "blank" tile in the top left corner.)
		$LF
	]li
]ul
[div class=p 
	"To confirm the menu selections, please see the following frames for confirmation of numeric key-presses:
	$LF
]div
[ul 
	[li 
		" Game Mode 1: 2189
		$LF
	]li
	[li 
		" Game Mode 3: 3012
		$LF
	]li
	[li 
		" Game Mode 2: 3868
		$LF
	]li
]ul
[h3 id=EffortInTasingBoted 
	"Effort In TASing (BOTed)
	$LF
]h3
[div class=p 
	"This is a game that I have been working on for about 6 months. It has been BOTed, but in a special way. On the surface, the game rules can be simulated in code and solved to find the fastest solution. This gets around the slowness of the core being used in the C64 emulator; however, this cannot handle the random generation that one mode of the game offers.
	$LF
]div
[div class=p 
	"Unlike game modes #1 and #3, mode #2 can be randomized by changing inputs before the puzzle is loaded. Until recently, I never had a name for this style of BOTing. Now I call it "Matrix RNG". (This will become obvious when you see the inputs, right before the screen is loaded for the random puzzle mode)
	$LF
]div
[div class=p 
	"In order to solve the "Random Puzzle", I had to use Lua Scripting to control the emulator into providing me the results that I needed. This is done by automating the inputs to force the layout to be closer to a solved solution. During my analysis of this game, I found that the "setup" is actually "un-solving" the puzzle one tile at a time. This can be observed by watching the layout changes, as you press random keys near the end of the frame ranges where these RNG altering inputs were placed.
	$LF
]div
[div class=p 
	"Once I got some relevant layouts, I ran them through a C# "Brute Forcing" routine and got my fastest solution..which ended up being 22 moves total.
	$LF
]div
[h3 id=EndingChoice 
	"Ending Choice
	$LF
]h3
[div class=p 
	"The end goal is getting each of the puzzle modes solved into a pattern of sequential order...being 1 through 15 from top left to bottom right. In any cass, the blank tile can  e anywhere.
	$LF
]div
[h3 id=HumanComparison 
	"Human Comparison
	$LF
]h3
[div class=p 
	"In this case, there is little point to see how a human would solve this, but here is a comparison anyway.
	$LF
	(youtube|v=QfL_l7DnUpA)
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/DrD2k9 
		"DrD2k9
	]a
	": Claiming for judging.
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/DrD2k9 
		"DrD2k9
	]a
	":  Accepting.
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/despoa 
		"despoa
	]a
	": Processing...
]div
