5
[div class=p 
	"The World's Hardest Game 2 is the second installment of the The World's Hardest Game series released in 2008. In the game, the player is a red square who must reach the end of 50 levels. The player must also avoid enemy circles that can hit the red square and reset progress in the level. This TAS movie attempts to complete the game as fast as possible, without using a major glitch that allows the square to clip through some enemies.
	$LF
]div
[h4 id=GameEmulation 
	" Game emulation
	$LF
]h4
[ul 
	[li 
		" Operating system: Ubuntu 22.04.1
		$LF
	]li
	[li 
		" Emulator: libTAS v1.4.4 with ruffle-nightly-2022_10_15
		$LF
	]li
	[li 
		" The game functioned normally without any time tracking settings.
		$LF
	]li
]ul
[h4 id=GameObjective 
	" Game objective
	$LF
]h4
[ul 
	[li 
		" Complete all 50 levels as fast as possible without using the enemy clip glitch.
		$LF
	]li
]ul
[h4 id=Comments 
	" Comments
	$LF
]h4
[div class=p 
	"This TAS has a major optimization difference due to the game being emulated on Ruffle. Normally, enemies have to hit one of the player's enemy collision contact points for two consecutive frames in order for a death to register. This can be massively exploited to graze enemies and make tighter movements, or even just straight up phase through faster ones. However, since Ruffle emulation fixes this behavior, I was not allowed to hit enemies whatsoever. If a TAS was made of this game that had working enemy clips, it would be much faster than this run because of how much time could potentially be saved. (
	[a href=https://www.youtube.com/watch?v=tagqyTYc1o0 rel=noopener external nofollow 
		"Example
	]a
	") It would also count as any% because that's how the game functioned when Flash was still alive.
	$LF
]div
[div class=p 
	"From a bit of searching around, I discovered that this game has at least 3 unique versions with notable differences:
	$LF
]div
[ul 
	[li 
		" 
		[b 
			"Version 2.0
		]b
		" (yes, this is the first version) is the version this movie plays on. It has 50 levels.
		$LF
		[ul 
			[li 
				" There's a different version of this which changes the level intermission text for a couple of levels, viewable in various videos of the game. It doesn't seem like it has any gameplay changes.
				$LF
			]li
		]ul
	]li
	[li 
		" 
		[b 
			"Version 2.1
		]b
		" is a lightly updated version of the game. It has 10 extra levels scattered between the original levels, and it also has saving/loading data. From a few sites, I only found it on Newgrounds.
		$LF
	]li
	[li 
		" 
		[b 
			"The HTML version
		]b
		" is a essentially a redesign of v2.0 with a great difference involving player movement. I only found it on Cool Math Games. (I don't know if it's actually an HTML game, I just assume it is because it doesn't need Flash.)
		$LF
	]li
]ul
[div class=p 
	"I chose to TAS TWHG2 instead of TWHG because lots of TASes of the first game have already been made, I did not want to do something that had already been done.
	$LF
]div
[h4 id=OptimizationTechniques 
	" Optimization techniques
	$LF
]h4
[ul 
	[li 
		" 
		[b 
			"Double input:
		]b
		" The continue buttons on the tip screens accept both mouse clicks and space bar presses. Because of this, I saved one frame before the first level by pressing space and then clicking with mouse on two consecutive tip screens.
		$LF
	]li
	[li 
		" 
		[b 
			"Win contact:
		]b
		" Finish areas register that the player has completed the level as soon as the square hits the green, even if only the very corner hit the green. This can save time by hitting the finish even when there's an enemy in the way which may be moving towards you.
		$LF
	]li
	[li 
		" 
		[b 
			"Wall hugging:
		]b
		" Different walls act inconsistently compared to each other. Some walls may let you hug them one movement unit closer, which allows passing by bouncing enemies sooner. You can sometimes also move diagonally into an outwards corner before the wall to hug it by an additional movement unit.
		$LF
	]li
	[li 
		" Corner boost (unused): Rarely, wall hugging while approaching an outwards corner will boost you by a frame's worth of movement when you pass away from it.
		$LF
	]li
	[li 
		" 
		[b 
			"Enemy grazing:
		]b
		" The square's nine enemy collision contact points are spaced apart to cover the full shape. In certain situations, you can narrowly avoid an enemy by letting it very slightly graze between two contact points. I only used this trick in level 39 to miss a column of enemies coming from behind.
		$LF
	]li
	[li 
		" Death ending (unused): Getting hit and finishing at the same time lets you progress to the next level, but you start with the square fading out from the death animation. This would be useful if you took a path that killed you while finishing and had a waiting period at the start of the level after, but there are no such cases.
		$LF
	]li
]ul
[h4 id=PotentialOptimization 
	" Potential optimization
	$LF
]h4
[ul 
	[li 
		" There's almost certainly better routes for some open space levels with coins/keys like level 46.
		$LF
	]li
	[li 
		" It may be possible to improve movement around enemy spinners because the enemies further out get out of the way faster. While making this TAS, I tended to stay near the center, because it was closer to the places I wanted to move to.
		$LF
	]li
	[li 
		" On several levels, a few frames or so might be savable with better and more planned out movement.
		$LF
	]li
	[li 
		" Obviously, being able to TAS this game with bad enemy collisions would save a lot of time, and would save well more than enough to achieve sub 10.
		$LF
	]li
]ul
[div class=p 
	"Cancelled this submission as I am currently making an improved version of this TAS.
]div
