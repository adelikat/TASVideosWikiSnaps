12
[div class=p 
	"Serena's Linux Iconoclasts "Standard Difficulty"
	$LF
]div
[div class=card mb-2 
	[div class=card-header 
		[strong 
			"Table of contents
		]strong
	]div
	[div class=card-body 
		[ul 
			[li 
				[a href=#EmulatorSyncSettings 
					" Emulator/Sync Settings
					$LF
				]a
			]li
			[li 
				[a href=#GameObjectives 
					" Game Objectives
					$LF
				]a
			]li
			[li 
				[a href=#GameOverview 
					" Game Overview
					$LF
				]a
			]li
			[li 
				[a href=#CategoryChoice 
					" Category Choice
					$LF
				]a
			]li
			[li 
				[a href=#MechanicsAndTricks 
					" Mechanics and Tricks
					$LF
				]a
				[ul 
					[li 
						[a href=#FastText 
							" Fast Text
							$LF
						]a
					]li
					[li 
						[a href=#Tweaks 
							" Tweaks
							$LF
						]a
					]li
					[li 
						[a href=#Movement 
							" Movement
							$LF
						]a
					]li
					[li 
						[a href=#GunBoosting 
							" Gun Boosting
							$LF
						]a
					]li
					[li 
						[a href=#SlopeBoosting 
							" Slope Boosting
							$LF
						]a
					]li
					[li 
						[a href=#FastCrawling 
							" Fast Crawling
							$LF
						]a
					]li
					[li 
						[a href=#LedgeJumpCancelling 
							" Ledge Jump Cancelling
							$LF
						]a
					]li
					[li 
						[a href=#DamageBoostingCrouchCancelling 
							" Damage Boosting/Crouch Cancelling
							$LF
						]a
					]li
					[li 
						[a href=#DodgerMovement 
							" Dodger Movement
							$LF
						]a
					]li
					[li 
						[a href=#LadderMovement 
							" Ladder Movement
							$LF
						]a
					]li
					[li 
						[a href=#WrenchMovement 
							" Wrench Movement
							$LF
						]a
					]li
					[li 
						[a href=#KillJumps 
							" Kill Jumps
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#Swimming 
					" Swimming
					$LF
				]a
				[ul 
					[li 
						[a href=#BasicMechanics 
							" Basic Mechanics
							$LF
						]a
					]li
					[li 
						[a href=#ShardSwim 
							" Shard Swim
							$LF
						]a
					]li
					[li 
						[a href=#CornerWarp 
							" Corner Warp
							$LF
						]a
					]li
					[li 
						[a href=#OutOfBoundsWarp 
							" Out of Bounds Warp
							$LF
						]a
					]li
					[li 
						[a href=#BlackSpaceMovement 
							" “Black Space” Movement
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#CombatAndUpgrades 
					" Combat and upgrades
					$LF
				]a
				[ul 
					[li 
						[a href=#FastCharging 
							" Fast Charging
							$LF
						]a
					]li
					[li 
						[a href=#StunGun 
							" Stun Gun 
							$LF
						]a
					]li
					[li 
						[a href=#RollerBombShot 
							" Roller Bomb Shot 
							$LF
						]a
					]li
					[li 
						[a href=#WrenchShotsAndDps 
							" Wrench Shots and DPS
							$LF
						]a
					]li
					[li 
						[a href=#WrenchUpgrades 
							" Wrench Upgrades
							$LF
						]a
					]li
					[li 
						[a href=#Controls 
							" Controls
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#Route 
					" Route
					$LF
				]a
			]li
			[li 
				[a href=#Blockrock 
					" Blockrock
					$LF
				]a
			]li
			[li 
				[a href=#Settlement17 
					" Settlement 17
					$LF
				]a
				[ul 
					[li 
						[a href=#EscapeSequence 
							" Escape Sequence
							$LF
						]a
					]li
					[li 
						[a href=#KerthunkSkip 
							" Kerthunk Skip
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#ShardWastelands 
					" Shard Wastelands
					$LF
				]a
			]li
			[li 
				[a href=#IsilugarIsilugarDepths 
					" Isilugar/Isilugar Depths
					$LF
				]a
				[ul 
					[li 
						[a href=#IntiSkip 
							" Inti Skip
							$LF
						]a
					]li
					[li 
						[a href=#WhiteSkip 
							" White Skip
							$LF
						]a
					]li
					[li 
						[a href=#Soldiers 
							" Soldiers
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#ImpactZone 
					" Impact Zone
					$LF
				]a
				[ul 
					[li 
						[a href=#Nightmares 
							" Nightmares
							$LF
						]a
					]li
					[li 
						[a href=#BossStarworm 
							" Boss: Starworm
							$LF
						]a
					]li
					[li 
						[a href=#BossLucasBirbasaurusRex 
							" Boss: Lucas Birbasaurus Rex
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#PotentialImprovements 
					" Potential Improvements
					$LF
				]a
			]li
			[li 
				[a href=#Acknowledgements 
					" Acknowledgements
					$LF
				]a
			]li
		]ul
	]div
]div
[pre 
	$LF
]pre
[h3 id=EmulatorSyncSettings 
	" Emulator/Sync Settings
	$LF
]h3
[ul 
	[li 
		" Environment: Ubuntu 20.04.2 LTS x64, kernel Linux 5.11.0-25-generic
		$LF
	]li
	[li 
		" Emulator Used: LibTAS 1.4.2
		$LF
	]li
	[li 
		" Version used: Linux 1.15 (August 2nd 2018), 64-bit, DRM Steam
		$LF
		[ul 
			[li 
				" The current Steam release (also labelled as 1.15) is not the correct version
				$LF
			]li
		]ul
	]li
]ul
[h3 id=GameObjectives 
	" Game Objectives
	$LF
]h3
[ul 
	[li 
		" Complete the main story as fast as possible
		$LF
	]li
	[li 
		" Contains speed/entertainment tradeoffs
		$LF
	]li
	[li 
		" Heavy glitch abuse
		$LF
	]li
	[li 
		" Uses death to save time
		$LF
	]li
	[li 
		" Takes damage to save time
		$LF
	]li
	[li 
		" Major skip glitch
		$LF
	]li
	[li 
		" Forgoes major skip glitch
		$LF
	]li
	[li 
		" Genre: Action
		$LF
	]li
	[li 
		" Genre: Adventure
		$LF
	]li
	[li 
		" Genre: Platform
		$LF
	]li
]ul
[h3 id=GameOverview 
	" Game Overview
	$LF
]h3
[div class=p 
	"Iconoclasts is an exploration platformer game developed by Swedish developer Joakim "konjak" Sandberg and released in 2018 for PC, PS Vita and PS4, with ports to Switch and Xbox One coming on later dates. The game follows Robin, a helpful and naive mechanic using her skills to help others as she becomes wanted by government agents for doing so. Following the usual "Metroidvania" formula, the player obtains upgrades and abilities as the game progresses, and they help both defeating enemies and solving puzzles to progress.
	$LF
]div
[h3 id=CategoryChoice 
	" Category Choice
	$LF
]h3
[div class=p 
	"Iconoclasts has a major glitch known as airswimming. Robin only transitions in and out of her swimming state by hitting the surface of a water body, meaning through various exploits to bypass the surface it is possible to either walk underwater or swim above water. The former of these is rather useless, but the latter effectively allows flight, making it possible to skip large sections of the game. The game also does not attempt to zip Robin out of collision boxes while swimming, making it very powerful for out of bounds movement.
	$LF
]div
[div class=p 
	"The main limitation of this glitch is the breath meter that appears while swimming. Despite not being underwater, Robin is still able to drown, heavily limiting the amount of distance that can be traveled. The “Relaxed” difficulty removes the breath meter, allowing the game to be completed in roughly half the time, but as the route for this is much less interesting I chose to use the harder “Standard” difficulty instead.
	$LF
]div
[div class=p 
	"Note on eligibility: completing the second to last area of the game, Midway, sets flags to move Robin’s brother Elro into her house. This is required for the end cutscenes to play out properly, and as this movie skips Midway entirely, the game will fail to reach the credits after completion. As this is still considered a valid run by the RTA community and saves several minutes, I choose not to make the detour to remedy the issue.
	$LF
]div
[h3 id=MechanicsAndTricks 
	" Mechanics and Tricks
	$LF
]h3
[h4 id=FastText 
	" Fast Text
	$LF
]h4
[div class=p 
	"In most games, simply mashing as fast as possible advances text at the max speed. This game, however, has an odd glitch where pressing jump then wrench in quick succession and holding both will auto skip text boxes significantly faster than normally possible. Fast text can even carry between conversations if the buttons remain held inbetween, although this is unnecessary in a TAS scenario.
	$LF
]div
[h4 id=Tweaks 
	" Tweaks
	$LF
]h4
[div class=p 
	"Throughout the game, there are two types of collectibles: materials and schematics. Schematics provide recipes for crafting tweaks using various materials. These tweaks can be equipped to offer minor modifications to gameplay. Tweaks are equipped in one of 3 slots visible under the health bar, and taking any damage will disable one slot, starting from the right side. Conversely, killing enemies or opening chests will recover energy for disabled tweak slots (visually represented by small square particles that fly towards Robin).
	$LF
]div
[div class=p 
	"This run crafts three tweaks:
	$LF
]div
[ul 
	[li 
		" 
		[b 
			"2x Breathless
		]b
		" - heavily decreases the rate of breath loss while swimming.
		$LF
	]li
	[li 
		" 
		[b 
			"Dodger
		]b
		" - allows Robin to perform a dodge roll by pressing down+wrench. This move gives her a significant burst of forward speed, as well as invincibility frames. More importantly for this run though, it has a glitch that allows Robin to keep her crouching hitbox while swimming, allowing her to go out of bounds at vertical transitions due to lack of collision under the screen.
		$LF
	]li
]ul
[div class=p 
	"The extra movement options provided by these two Tweaks are core to many skips throughout the run.
	$LF
]div
[h4 id=Movement 
	" Movement
	$LF
]h4
[div class=p 
	"Robin has a default movement speed cap for regular running of 470 units per frame in either direction. This cap applies both on the ground and midair, but is only enforced when Robin is accelerating. If she is directly given speed higher than the cap, it is maintained until normal deceleration occurs. Several tricks exist to obtain higher than normal speed:
	$LF
]div
[h4 id=GunBoosting 
	" Gun Boosting
	$LF
]h4
[div class=p 
	"Whenever Robin releases a charged shot from her gun, she receives recoil of 600 units/frame in the opposite direction of her shot. By quickly turning, we can carry this momentum and conserve the speed of 600. This charge shot can also be used vertically as an extra jump or as a fastfall, instantly taking Robin to her max fall speed of 1600.
	$LF
]div
[div class=p 
	"It’s worth noting that the recoil direction is determined based on the held directional inputs on the frame the shoot button is released, while the direction the shot is released in depends on the direction input in the last frame the shoot button was held at. This allows us to redirect recoil into any direction independently of the direction the shot is aimed towards.
	$LF
]div
[h4 id=SlopeBoosting 
	" Slope Boosting
	$LF
]h4
[div class=p 
	"Robin can perform a stomp move by inputting down+jump while airborne. After 14 frames, she will plummet down to the ground at max fall speed. In this state, she is able to break certain blocks, as well as hurt enemies. The stomp can be cancelled at any time by pressing wrench, which performs the grounded attack animation despite being midair.
	$LF
]div
[div class=p 
	"If Robin lands on the ground while stomping, she will strike a pose and be unable to move for a short time. However, if she lands on a steep slope, she will instead start sliding down the slope with a speed of 700. This slide can be cancelled at any time by jumping, maintaining the speed boost. If the jump cancel is input for only one frame, she will cancel out of the slide without actually jumping, allowing for slope boosts in places where the jump would normally cause her to run into something above her.
	$LF
]div
[h4 id=FastCrawling 
	" Fast Crawling
	$LF
]h4
[div class=p 
	"Robin has the ability to crawl, which she does automatically when entering any space too short for her to walk through. Her max crawling speed is substantially lower than her regular running speed at only 230. We can circumvent this issue either by gun boosting once crawling, or by jumping on the same frame the crawl state is entered, causing the normal cap of 470 speed to be maintained.
	$LF
]div
[h4 id=LedgeJumpCancelling 
	" Ledge Jump Cancelling
	$LF
]h4
[div class=p 
	"Robin will grab ledges that she passes while falling, given that the down input is not held. Once she’s holding on to a ledge, she can drop off by pressing down, climb onto it by pressing up or the direction into the ledge, or jump away from the ledge by jumping+pressing the direction away from the ledge. Jumping out of a ledge gives Robin a speed of 500 in the direction she jumps towards.
	$LF
]div
[div class=p 
	"During her ledge jump and as long as she is ascending, the player cannot control Robin’s horizontal speed. However, we can cancel the ledge jump animation by pressing the shoot button. This can be done even if the player cannot currently shoot due to the gun being on cooldown or the gun not even being equipped. This allows us to quickly turn around and move back over the ledge, saving a small amount of time over the normal climbing animation.
	$LF
]div
[h4 id=DamageBoostingCrouchCancelling 
	" Damage Boosting/Crouch Cancelling
	$LF
]h4
[div class=p 
	"Robin receives knockback in the direction opposite of where she’s facing whenever hit. As such, we can turn around immediately before getting hit to receive knockback towards the enemy rather than away.
	$LF
	"	
	$LF
	"This can be expanded further by the fact that Robin will take reduced knockback if she’s crouching when she gets hit. Due to this, she will also snap out of knockback stun and regain control faster, since this happens as soon as she lands on ground after getting hit. We use this combination of techniques when we cannot avoid getting hit or getting hit is faster than waiting.
	$LF
]div
[h4 id=DodgerMovement 
	" Dodger Movement
	$LF
]h4
[div class=p 
	"Dodger allows Robin to perform a roll dodge forward. Robin receives a speed of 1000 during the start of the roll, followed by 650 for the remainder of it. Once on the ground, she quickly loses speed during a long landing recovery animation. This animation can be avoided by landing on a corner and sliding off of it, landing in water, getting hit, hitting a cutscene trigger, or grabbing onto a ladder.
	$LF
]div
[div class=p 
	"As a side note, if Robin slides off of a platform during the 4 frames of landing on ground and not in the recovery animation, the dodge is not cancelled and it is extended until she lands on the next platform.
	$LF
]div
[div class=p 
	"If the player inputs a jump the same frame as a dodge, Robin will maintain her crouching hitbox despite being airborne. Oddly enough, this works even if she is already in the air and unable to jump when it is pressed.
	$LF
]div
[h4 id=LadderMovement 
	" Ladder Movement
	$LF
]h4
[div class=p 
	"Robin will perform an animation if she climbs out of a ladder by getting to the top of it. This can be avoided by simply jumping before reaching the top, allowing movement much earlier than otherwise.
	$LF
]div
[div class=p 
	"Ladder movement is normally very slow, but holding down the wrench button greatly increases Robin’s speed. Despite this, jumping up the ladder repeatedly is still marginally faster than climbing normally.
	$LF
]div
[h4 id=WrenchMovement 
	" Wrench Movement
	$LF
]h4
[div class=p 
	"Once Robin has acquired her Wrench, she can swing it by pressing the assigned button. This action can hit enemies and bosses, and it’s also used to interact with assigned nuts in levels to activate mechanisms and solve puzzles.
	$LF
]div
[div class=p 
	"The wrench animation takes 20 frames to perform assuming the wrench button is tapped and not held. If it is held, Robin starts spinning the wrench in front of her, which does minor damage and can deflect projectiles. If it is performed on ground, Robin will slowly decelerate as she performs the animation, hitting her final position in 7 frames. If performed in midair, Robin will preserve whatever speed she had when starting the animation for as long as she’s in midair, and stop in place if she lands during it.
	$LF
]div
[div class=p 
	"If Robin swings her wrench while close to a nut or mechanism in a level, she will latch onto it. If done so at ground level, she will automatically snap to the correct position for her wrenching animation based on her current facing direction: if facing right, she will snap to the left of the nut, and vice versa. Activating any nut that takes only one turn for activation takes 8 frames. Robin can cancel out of said wrench use animation at any time by jumping or pressing left or right.
	$LF
]div
[div class=p 
	"By inputting a single frame of jump+wrench, Robin will latch onto a nut upon landing and release it immediately. Despite the immediate release, you are still able to turn it, skipping the prior mentioned 8 frames of non-movement.
	$LF
]div
[div class=p 
	"Nuts in the air work differently: rather than turning them, Robin is able to hang below them and jump upward to reach higher locations.
	$LF
]div
[h4 id=KillJumps 
	" Kill Jumps
	$LF
]h4
[div class=p 
	"Whenever Robin kills an enemy by any means (throwing a box, stomping, or with a gunshot), the game freezes for about 4 frames. Pressing the jump button during that window allows Robin to jump again as if she were grounded, effectively giving us a double jump. Unlike double jumps from gun boosts, this is a proper jump and we can adjust its height by how long we hold the Jump button. 
	$LF
]div
[div class=p 
	"This action can be performed by killing any enemy in the currently loaded room, no matter the distance. As such, we can get a kill jump at any arbitrary location if we time the kill correctly and use the proper weapon for it.
	$LF
]div
[h3 id=Swimming 
	" Swimming
	$LF
]h3
[h4 id=BasicMechanics 
	" Basic Mechanics
	$LF
]h4
[div class=p 
	"While swimming, Robin has a default speed of 200. Robin can swim faster by pressing the jump button, which gives her a boost in swim speed up to 350, at which point it immediately begins to decelerate back down to 200. Robin runs out of air faster after pressing jump, but it is not proportional to the speed or distance traveled. The most efficient breath use is whatever mash speed causes her breath/hp to run out immediately before a refill. Figuring out what speed works is a very tedious process, but thankfully this run has very few sections where full speed mashing isn’t optimal.
	$LF
]div
[div class=p 
	"Air can be recovered either by touching a water surface, or entering a cutscene. It is worth noting that interacting with npcs/signs/chests counts as a cutscene for this purpose, but save points do not.
	$LF
]div
[h4 id=ShardSwim 
	" Shard Swim
	$LF
]h4
[div class=p 
	"Named as such due to being initially found in the area Shard Wastelands, a shard swim is a method of teleporting your character one screen’s length to the right during a transition. This is performed by transitioning at coordinates lower than intended to be possible, placing Robin at a negative position in the next room. From here, she is warped forward by 1280 units, the width of a full screen. It is not possible to do this on every transition, but 6 of them are used in this run.
	$LF
]div
[h4 id=CornerWarp 
	" Corner Warp
	$LF
]h4
[div class=p 
	"Transitioning horizontally near the top of a screen causes a vertical warp similar to the shard swim technique, moving the character upwards by 720 units. This is less useful than the horizontal teleport, and is used only twice in the run.
	$LF
]div
[h4 id=OutOfBoundsWarp 
	" Out of Bounds Warp
	$LF
]h4
[div class=p 
	"The game contains a failsafe system that teleports Robin back inbounds upon attempting to transition to a new screen where there isn’t one. This is done by moving her back to the last position she was known to be touching the ground at, which updates at a rate of twice every second. An interesting quirk of this system is that holding onto a ladder counts as being on the ground, allowing this stored position to be updated while swimming.
	$LF
]div
[div class=p 
	"The stored coordinates are local to the current room, rather than global, meaning activating a warp from a room separate from the one the position was set in allows Robin to warp to unintended positions. This is used to skip large sections of the game.
	$LF
]div
[h4 id=BlackSpaceMovement 
	" “Black Space” Movement
	$LF
]h4
[div class=p 
	"It is possible to make the game think Robin is still grounded while in a swimming state, either by walking directly into a water surface or by climbing fully to the top/bottom of a ladder while swimming. In this state, the previously mentioned failsafe will teleport Robin in place repeatedly, rather than back to a previous position. This causes the game to flash a black screen repeatedly while running at a much slower speed, however it is still possible to move during this despite the lack of visual evidence.
	$LF
]div
[h3 id=CombatAndUpgrades 
	" Combat and upgrades
	$LF
]h3
[div class=p 
	"Robin’s gun gets three different kinds of ammo as she progresses through the game. In this run, however, only two are obtained.
	$LF
]div
[div class=p 
	"With all weapons, Robin can hold the shoot button for at least 35 frames to obtain a charged shot, which usually deals more damage and behaves differently from the uncharged version. Charged shots can only be released in the 4 cardinal directions, and induce a cooldown time during which Robin cannot shoot any projectile from her gun.
	$LF
]div
[h4 id=FastCharging 
	" Fast Charging
	$LF
]h4
[div class=p 
	"A quirk with how the charging system works allows us to obtain charged shots faster than intended by starting a charge during the final 25 frames of another one. This bypasses the cooldown timer, allowing us to obtain charged shots much more often.
	$LF
]div
[h4 id=StunGun 
	" Stun Gun 
	$LF
]h4
[div class=p 
	"Robin’s default gun. This weapon is the weakest in terms of damage per shot, but it can be shot every 8 frames. The game uses a system where after a shot has been fired, a 7 frame buffer window is activated, and as long as the player presses the shoot button again within that period (and Robin is in a state where she can shoot) the next shot will be automatically released. Since the game runs at nearly 60 frames per second, this gives us 7.5 shots per second. 
	$LF
]div
[div class=p 
	"The uncharged shot can be fired only in the 4 cardinal directions, but it has a soft auto aim system: as long as the player aims the shot in the general direction, the shot will target the closest enemy in that direction.
	$LF
]div
[div class=p 
	"Charged shots can destroy white/silver rock blockades. 
	$LF
]div
[div class=p 
	"Notably, shots from this gun advance RNG. Several shots that hit no target are performed in this movie with the explicit intent of getting more favorable RNG for enemy spawns and behavior.
	$LF
]div
[h4 id=RollerBombShot 
	" Roller Bomb Shot 
	$LF
]h4
[div class=p 
	"This weapon is obtained in the Shard Wastelands. It can be shot in all 8 directions, releasing a small bomb that can bounce off of walls and roll along the floor. The bomb detonates on contact with an enemy or after 150 frames have passed since it was shot.
	$LF
]div
[div class=p 
	"Holding the shoot button for at least 30 frames or longer before releasing the bomb causes the bomb to be shot with greater initial speed. We call this a super bomb. Aside from being released with higher speed, this has no effect on its damage output or explosion time. Because this mechanic exists, bombs are only shot on 
	[em 
		"releasing
	]em
	" the shoot button, not on pressing it.
	$LF
]div
[div class=p 
	"Bomb explosions are required to break black rocks that block some passageways, and to activate specific platforms that move on contact with an explosion. After a bomb is released, the player enters a short cooldown, during which Robin cannot shoot any projectile from her gun. 
	$LF
]div
[div class=p 
	"A fully charged bomb shot becomes a missile. The missile is released and travels a long distance decelerating across the way. If the missile is hit at this point, it bounces off of whatever it hits, dealing no damage. After decelerating to a stop, it activates and accelerates back to a high speed, exploding on contact with enemies or collision. This explosion can activate platforms and break blockades exactly like a bomb’s can. Due to the way this missile behaves, it is useless at close range, making it difficult to use effectively in combat. This additionally gives the same knockback as the stun gun charge shot, but with a noticeably longer cooldown. Due to this, all boosts are done using the stun gun.
	$LF
]div
[h4 id=WrenchShotsAndDps 
	" Wrench Shots and DPS
	$LF
]h4
[div class=p 
	"Robin can swing her wrench every 20 frames. Wrench swings have a higher damage than stun gun shots, and as such, close range melee is more effective than shooting.
	$LF
]div
[div class=p 
	"Additionally, a shot can be fired the same frame a wrench swing is started. This is referred to as a wrench shot, and it can be used with any of the 3 available weapons. Since bomb cooldown is considerably longer than the length of a wrench swing, this technique is used exclusively with the stun gun for this run.
	$LF
]div
[div class=p 
	"This provides the highest dps for the two end bosses, but due to iframes some delay must be inserted for all damage to connect.
	$LF
]div
[h4 id=WrenchUpgrades 
	" Wrench Upgrades
	$LF
]h4
[div class=p 
	"The game contains two wrench upgrades, the first of which allows Robin to electrify her wrench for interacting with puzzle elements, while the second expands this to allow her to place down damaging lightning balls using her attacks. Collecting one of these is required to beat the game, as one of the final boss phases involves charging two pillars with electricity while dodging attacks. As quickly collecting the second upgrade is unrealistic outside of relaxed difficulty, this run collects the first upgrade from the area Isilugar.
	$LF
]div
[h4 id=Controls 
	" Controls
	$LF
]h4
[div class=p 
	"Iconoclasts supports dual input from keyboard + controller at the same time. This is of slight relevance for the TAS because a crouch button is accessible for controller players but not for keyboard players, which also functions for interacting with doors/chests/etc. This can be used to interact while swimming downward, rather than needing to release and repress down.
	$LF
]div
[h3 id=Route 
	" Route
	$LF
]h3
[h3 id=Blockrock 
	" Blockrock
	$LF
]h3
[div class=p 
	"Blockrock is the tutorial area of the game, and Robin does not have access to her wrench yet at the start. It is theoretically possible to obtain the wrench immediately as it is available in her basement without opening it the intended way, but there is currently no known way to gain access early. To open the basement, the first boss to the left of her house must be fought.
	$LF
]div
[div class=p 
	"Most of the movement before the first boss is straightforward, aside from breaking the rocks immediately before the fight. Releasing the charge shot normally would boost Robin to the right, losing her slope boost. To remedy this, the boost can be redirected upward while still shooting the blast leftward with a frame perfect up input, allowing Robin to maintain speed into the boss.
	$LF
]div
[div class=p 
	"Skipping this boss is possible using an out of bounds warp, but the setup was unfortunately timed to be slower than fighting it.
	$LF
]div
[div class=p 
	[b 
		"Boss: Spine Controller 1
	]b
	$LF
]div
[ul 
	[li 
		" This boss has some minor RNG, as it can spawn at either the left or the right side of the room. This is largely irrelevant for the TAS as we can perform the kill as seen in this movie regardless of this choice, but I manipulate it to spawn on the left side here in order to reuse inputs from a previous TAS. We use the final charged shot to boost us into the closest possible position to exit the room after the boss battle is over. 
		$LF
	]li
]ul
[div class=p 
	"After acquiring the Wrench, we advance further into Blockrock. Some RNG manip is done in the first nut room to spawn the first rupto further away from the final nut and to prevent it from launching towards Robin.
	$LF
]div
[div class=p 
	"The next room is the largest room in blockrock, and almost every enemy position is relevant. RNG manip for this room took a very long time, and is still a couple frames shy of optimal. The rupto guarding the nut in the top left of the room would optimally be on the far right so it can be ignored entirely rather than needing a short hop over it, but I was unable to accomplish this without losing time to other spawns throughout the room.
	$LF
]div
[div class=p 
	"In the next room, a kill jump can be used to gain height up the vertical tunnel to skip going into the room below. The obvious choice of enemy to use for this is the pluro inside the tunnel, but it’s actually possible to barely slip by this enemy and save it for a kill jump later. With this in mind, I manipulated a second pluro to walk over towards the tunnel so I could use it instead. Three kill jumps and a gun boost are used to advance through the next section without needing to use the provided moving block. For getting past the buckle in the top right of the room, I was unable to use a crouched damage boost due to the enemy spawning in the air too high to hit a crouched Robin.
	$LF
]div
[div class=p 
	"The next puzzle to solve normally requires raising the purple block in the middle of the room and using it to trap the other block on the left side. However, it is possible to instead grab the second block as it moves back to its original position and perform a wall jump on top of it.
	$LF
]div
[h3 id=Settlement17 
	" Settlement 17
	$LF
]h3
[div class=p 
	"Settlement 17 is a small village that houses Elro, Robin’s brother. This section requires us to complete some small quests for its inhabitants. We collect one unit of ivory oil material here, which is only accessible without gun boosts by using an extremely late game double jump tweak. The key for this chest is actually vital for a skip used in the current no airswim route, but thankfully that skip is irrelevant here so there’s no harm in losing the key.
	$LF
]div
[div class=p 
	"The weird looking movement inside house 09 is required to activate a trigger: the player is supposed to talk to Mr. Andress at the upper floor, but the actual trigger to make Pontus appear in the room is just to both talk to Petra and reach a vertical trigger in the upper floor. We can reach it with careful positioning without ever having to land on the floor, saving us time. Leaving and re-entering the house to move Pontus to the right side instantly may be very slightly faster, but I didn’t think of this until after completion of the TAS. I stomp in front of Pontus before talking to him as this perfectly aligns Robin on the nearest x coordinate, getting her in position to instantly start the cutscene, rather than walking to the correct position first.
	$LF
]div
[div class=p 
	"We take a small detour to enter house 06. This is required to progress the story and it also activates the Tweaks slots for us.
	$LF
]div
[div class=p 
	"After completing Elro’s quest in the church, Robin is captured by the Agents, who keep us locked in the community centre.
	$LF
]div
[h4 id=EscapeSequence 
	" Escape Sequence
	$LF
]h4
[div class=p 
	"An escape sequence plays here where we must sneak past One Concern Soldiers and not make noise. The game slows Robin’s crawling animation and disables all ways of fast crawl movement. The start of her crawling animation causes a creaking noise, which will be heard by the soldiers if done at any point other than during their laughter. Two strategies can be used to gain small amounts of extra distance during this. First, releasing and repressing movement on the last possible frame of laughter to reset the time until the next creak allows a small amount of extra movement. Second, while the soldiers are telling their jokes Robin can actually make one frame of movement safely by doing a same frame move+gun press. This can be done once every 22 frames, saving a small amount of time in this section. Credit to Ikuyo for discovering this!
	$LF
]div
[div class=p 
	"Bit of game trivia: the jokes the soldiers tell here used to be much less appropriate, but were toned down in an early patch.
	$LF
]div
[h4 id=KerthunkSkip 
	" Kerthunk Skip
	$LF
]h4
[div class=p 
	"After escaping from the soldiers, we’re expected to move to the right, which would trigger a boss battle with Kerthunk. Instead, we exploit an oversight with a trigger: trying to move to the left results in Robin noticing the soldiers near the church and retreating. If we press the wrench button as soon as the short cutscene is over, Robin enters a glitched state in which she is considered to be both idling and swinging her wrench. We can carry this state towards the Kerthunk room, and during this state we are allowed to move during cutscenes. We exit the room to the right with the cutscene still active and skip it as soon as we get there, and the game assumes we’ve already defeated Kerthunk, resuming the story from there.
	$LF
]div
[div class=p 
	"A faster version of this skip exists, but I only discovered it after completion of the TAS, so a few seconds are lost here.
	$LF
]div
[h3 id=ShardWastelands 
	" Shard Wastelands
	$LF
]h3
[div class=p 
	"Shard Wastelands is a desertic area which we drift towards after the events in Settlement 17. We collect most of the materials needed for the run here (1x ivory oil, 1x metallium, 2x improvium), as well as the sand schematic which allows crafting of one breathless tweak.
	$LF
]div
[div class=p 
	"Most rooms are uneventful, and all enemies in this section behave deterministically, so no RNG manipulation is required.
	$LF
]div
[div class=p 
	"The first semi-notable movement is the damage boost done on the thorns in the room with the locked chest. Normally, climbing into these would knock Robin away to the left, but holding left during the animation actually causes a boost to the right instead. A down press can also be used to have the reduced crouch knockback as well, despite Robin having no time to crouch before being hurt.
	$LF
]div
[div class=p 
	"After this is the first (and only) instance of an obscure tech with the stomp. If Robin lands exactly on the edge of a platform, the landing animation is immediately cancelled. This is used here to break the red block without needing a wrench cancel afterward. Thanks to DL Kurosh for reminding me this tech existed!
	$LF
]div
[div class=p 
	"The next new tech used is after the room with the 3 alburtus. Normally it’s required to do a full extra loop around this room to raise the purple block in the crawlspace, allowing you to jump rather than simply fall downward. However, it’s possible to instead buffer a jump input out of the crawlspace to jump off of air during coyote frames.
	$LF
]div
[div class=p 
	"In the small house near the end of the area, Robin is forced to step on a man’s head to progress, knocking him unconscious in the process (very rude, I know). This normally locks you into a short animation, but it’s possible to instead perform a stomp and cancel it just before hitting him to avoid this. Both the stomp and the cancel are frame perfect inputs, making this likely the hardest trick in the game. Thankfully it’s minor enough to be completely irrelevant in RTA runs.
	$LF
]div
[div class=p 
	"After this is a short minigame where Robin has to raise and lower a platform to place boxes on the correct levels. The pattern of boxes is fixed, so no RNG manip needs to be done here to have more optimal boxes. Seeing as you’re limited to only one input that does anything during this, not much can be done to make it more interesting to watch.
	$LF
]div
[div class=p 
	"Completing this rewards Robin the roller bomb shot, which unlocks a new piece of tech. Swapping to this gun and quickly back to the stun gun before releasing a charge shot allows Robin to charge 1 frame faster.
	$LF
]div
[div class=p 
	"Somewhat painfully, this new gun is only required for a single spot in the run: the block puzzles before the boss Inti. If a way around this is found, the entire trip through shard wastelands could be skipped.
	$LF
]div
[div class=p 
	[b 
		"Tweak Crafting in Save Points
	]b
	$LF
]div
[ul 
	[li 
		" Tweaks are supposed to be crafted in crafting tables, but can be equipped and unequipped in Icons of Prayer (the statues used to save the game). However, due to an oversight in menu structure, we can access the Tweak Crafting menu from the Tweak Equip menu by holding weapon swap and pressing Wrench at the text blurb about what Tweaks are. This allows us to bypass crafting stations entirely. This used to be possible without holding weapon swap, but konjak added this requirement to make it harder to do accidentally, rather than fully patching it out.
		$LF
	]li
]ul
[div class=p 
	"After a short trip back to the beginning of this area to craft a breathless tweak and find some water, the major divergences from a no airswim run can finally begin. A small section of land under the water here is actually high enough to walk on, allowing us to crouch walk directly into the water surface rather than falling into it. This preserves Robin’s grounded state, avoiding a soft lock at a later cutscene and allowing black space movement, as well as preserving the crouching hitbox so Robin can swim underneath screen collision.
	$LF
]div
[div class=p 
	"To escape the water here and begin the swim, a shard swim is done on the transition to the left. From here, we can swim downward into the closed off fast travel and use it to reach Isilugar without fighting either of the two area bosses. Apologies for the noise from mashing the fast swim button, I promise your ears won’t be subjected to it for much of the run.
	$LF
]div
[h3 id=IsilugarIsilugarDepths 
	" Isilugar/Isilugar Depths
	$LF
]h3
[div class=p 
	"Since we reached this area by extremely unintended means, it’s currently a soft lock minefield. Progressing upward on the left path causes a softlock with an absolutely horrific noise to accompany it, while trying to progress forward in the area also causes soft locks when touching any cutscene trigger. Thankfully there is a way to set the proper flags for the area to allow progression, but it requires reaching the top of the area to trigger a cutscene that normally happens after the Chrome boss fight.
	$LF
]div
[div class=p 
	"Our first objective along the way to this cutscene is collecting the parkour schematic, which gives access to the dodger tweak. Due to being in airswim, we can simply swim inside the walls to reach it easily. After collecting it, moving upwards immediately would pop Robin downwards inbounds, so swimming into the wall on the right side first is required.
	$LF
]div
[div class=p 
	"After this, Robin runs out of air and starts to drown, so we need to find an air refill. There’s a cutscene trigger directly above this room, but we can’t swim directly upward to it as Robin gets caught on the floor collision above her. Instead, a corner warp is done on the transition to the right, placing Robin in the ceiling above the cutscene trigger and allowing Robin to just barely get the air she needs. Don’t question why Mina turning a door into a tree gives Robin more breath, it makes perfect sense.
	$LF
]div
[div class=p 
	"After this, another shard swim is performed to teleport further right in the next room, placing Robin directly next to a sign that can be used for another breath refill. Following the sign’s helpful directions, our next goal is to reach the living quarters above. At this point the game expects us to already be up there and has blocked access to the lower section where we currently are, so it’s not possible to swim upward inbounds. We instead swim to the right where no valid screen exists, and use a short black space swim to gain height to be put inside the wall. This wall is not fully solid, containing several pockets of movable space that Robin can get stuck inside. Due to this, a slightly weird looking path must be taken to reach the top screen, where we collect the final required metallium.
	$LF
]div
[div class=p 
	"After collecting the sea schematic for an additional breathless, it’s time to craft the remaining tweaks: dodger and a second breathless. The lady next to the save statue here annoyingly takes priority over it for interaction, so it’s necessary to interact with it much further left than I’d have liked. Since it takes two interactions to craft and equip, Robin has to be moving fairly slowly here to not drift out of the interact zone too early.
	$LF
]div
[div class=p 
	"The next cutscene where Robin is floating midair crouching and staring at her dad’s forehead to assert dominance is the one I mentioned earlier that sets flags for this area to allow progression. A new piece of tech is used here to skip some of Polro’s dialog by selecting an invalid option when given choices. This is normally slower because it requires losing fast text, but Polro is just chatty enough for it to be barely worth doing.
	$LF
]div
[div class=p 
	"After skipping a few more cutscenes, we swim over to Minora’s room, utilizing a shard swim on the way to skip past the room with the save statue. Another shard swim is done inside Minora’s room to reach the room to the right that leads to the “secret” schematic. Collecting this is useless for this run, but coming here provides a convenient path back to the lower part of the area.
	$LF
]div
[div class=p 
	"For the next section, we don’t want to be swimming, so we touch the water with the two manobites to return to the normal character state. From here, we need to reach the transition on the top right of the room. This would be trivial in airswim, but unfortunately we just exited that and now must do it the hard way. After luring one of the manobites towards the middle platform, we place a bomb on it then jump off the nearby nut and shoot a missile downwards at the second one. This allows two kill jumps in quick succession, granting just enough height to reach the top transition.
	$LF
]div
[div class=p 
	"The next room requires the roller bomb shot to solve some fairly simple puzzles, then towards the end of the room we begin setting up for the Inti skip. This room is wider than the Inti room by one screen length, so if we can store a grounded position from the right side of this room then trigger an oob warp in the Inti room, it will teleport Robin fully past Inti. The weird movement after the final puzzle is to set Robin’s grounded position properly, then ensure she’s never touching the ground during one of the subsequent checks. This does unfortunately prevent us from doing the fastest possible movement here, but it’s a small price to pay for skipping an entire boss fight.
	$LF
]div
[h4 id=IntiSkip 
	" Inti Skip
	$LF
]h4
[div class=p 
	"In the Inti room, swinging on the nut that normally activates the boss can place Robin inside the moving platform, which zips her upward oob. The game is usually good at preventing this zip from occurring by stopping the moving block before you get inside it, but there’s a single frame where swinging will cause a zip. Additionally, during the zip Robin counts as grounded, so it’s critical that a grounded pos update doesn’t occur during this. Some time was lost waiting for the zip to align properly with the update cycle.
	$LF
]div
[div class=p 
	"After the successful oob warp, Robin must fall a short distance into a cutscene trigger. Since cutscenes only start after you touch the ground, it’s slightly faster to stall in the air using a stomp, which allows Robin to barely make it onto the top platform rather than falling to the ground below.
	$LF
]div
[div class=p 
	"After this cutscene, Robin is placed directly below Inti with Agent White attacking her. Due to not having fought Inti yet however, the game attempts to lock the camera to the top half of the screen. But since Robin is on the bottom half, it then realizes she’s off camera and attempts to perform a screen transition. The end result of this is that Agent White immediately stops existing, and the screen flashes black for the movement in this room, making everything unfortunately invisible. Not much is missed though, as all that must be done here is a gun boost onto an elevated platform, followed by a zip into the top part of the screen using the purple door that raises during the Inti fight. This takes around 20 seconds because during each black flash the game is fully frozen, providing only a few actual gameplay frames per second.
	$LF
]div
[div class=p 
	"On the far left of the Inti room is a cutscene trigger that only activates while touching the ground. It’s possible to fully avoid this, but that prevents progression through the Agent White autoscrollers, so I instead opted to touch the ground as far left as possible.
	$LF
]div
[h4 id=WhiteSkip 
	" White Skip
	$LF
]h4
[div class=p 
	"After a few annoying autoscrollers, the real fight with Agent White begins. It’s a very simple fight which can be beaten with literally no player input. I’m not joking, press no buttons at all and Mina will kill White for you before he kills you. So of course we need to complicate things a bit by instead skipping this fight entirely. If you enter the boss room on the exact right frame, Robin will teleport forward off camera. Since she’s off camera, the game performs a screen transition, reloading the boss room. Boss triggers in this game will only activate a single time, regardless of if you’ve actually beaten the boss, so reloading the room after activating the boss trigger removes White from existence without needing to actually kill him.
	$LF
]div
[h4 id=Soldiers 
	" Soldiers
	$LF
]h4
[div class=p 
	"The game now teleports us back to Inti, where we activate the final story trigger for this area. Once this is done, all that’s left to do in this area is return to the top half and fight some soldiers to get the electric wrench.
	$LF
]div
[div class=p 
	"The soldiers fight is definitely the most RNG heavy section of this run, as each soldier has both random movement and attacks. Additionally, there’s almost no time between them for RNG manipulation. The first soldier must be manipulated to jump upward into Robin’s missile, defeating him instantly. The next three soldier kills are consistent, but the two in the bottom left room required heavy manipulation. They must be manipulated to walk near each other so they can be hit by a single offscreen missile. I was unable to make this happen without losing a small amount of time on movement into this room. The two in the top right room also required heavy RNG manipulation to be able to defeat the gun soldier without slowing down. The final hit on him with the wrench must be done very late due to iframes from the charge shot, allowing the soldier time to get an attack in, which often blocked the exit pathway. The next two soldiers must also group together for a single missile, but this was much easier to accomplish due to not needing to fire the missile immediately upon entering the room.
	$LF
]div
[div class=p 
	"After defeating the last soldier and getting the wrench upgrade, Robin finally has everything she needs to complete the game.
	$LF
]div
[h3 id=ImpactZone 
	" Impact Zone
	$LF
]h3
[div class=p 
	"Now that we have everything, it’s time to head back down to the water and begin the last airswim all the way to the final area. To begin this swim, a dodge roll is used to preserve a smaller hitbox into the water, allowing Robin to slip oob under the screen. Swimming all the way left to the next screen is necessary here because Robin is currently under the collision, meaning she can’t swim upward. Once on the left screen however, it’s possible to move upward a bit then transition back right while continuing upward. We touch the water surface here from oob for a quick air refill, then head up into the ceiling and continue left all the way to the fast travel.
	$LF
]div
[div class=p 
	"The final area of the game, impact zone, unlocks after completion of another late game area, midway. The transition to the impact zone is however always active despite being closed off, placed directly under the first (and only so far) boss fight. To reach it, we fast travel back to blockrock and do a series of three oob warps in order to just barely cover enough distance before Robin drowns.
	$LF
]div
[div class=p 
	"The first of these is set up by grabbing the ladder directly above the fast travel exit, setting Robin’s last grounded position to be near the top of the screen. In the room above this, we swim left a screen then down into oob space to get warped upward and quickly exit the room. Next we need to swim up past the pluto and briefly touch the ladder there to set up the next two warps. At this point in an RTA run, it’s required to make a large detour to refill your air, but with perfect movement this is unnecessary. After touching this ladder, we need to touch oob in the room to the left. The fastest way to do this is by getting inside the floor collision before transitioning left. Due to the preserved crouch hitbox, it’s trivial to get under the collision, but to actually get inside it it’s necessary to transition downward then back up. Touching oob after transitioning left teleports Robin all the way across the room, and from here all that’s needed is to keep moving left while reading the sign on the way for air.
	$LF
]div
[div class=p 
	"For the final section of this swim, we can grab a health refill from the save statue. This isn’t necessary, but it allows for faster swimming on the way to the impact crater. One last oob warp on the screen to the left and down from the save statue places Robin directly next to the impact crater. A diagonal down-left transition is used to get to the crater, rather than separate left and down ones. Transitioning left at the bottom of the screen here would normally place Robin too far to the right on the next screen, causing her to pop out of the collision into oob space and soft lock. Under certain circumstances however, the game allows Robin to move a significant extra distance before activating the transition. I’m not certain why this is the case and I haven’t seen it happen anywhere else, so there could be potential timesave in other spots using this tech if I investigate more.
	$LF
]div
[div class=p 
	"After entering the impact zone, a shard swim is used to get inside the floor under the first arena battle. From here, it’s trivial to swim all the way down the right wall, skipping all four of the battles.
	$LF
]div
[h4 id=Nightmares 
	" Nightmares
	$LF
]h4
[div class=p 
	"In order to do anything here, it’s necessary to leave airswim. The game conveniently autosaves on entering the nightmares, so all it takes to achieve this is dying and reloading.
	$LF
]div
[div class=p 
	"Before we can battle the Starworm, we must escape the four Nightmares, each representing a character from the game (Elro, Mina, Royal and Black respectively). The goal of each (except the final one) is to open the sunflowers in each room, each having its own means of activation.
	$LF
]div
[div class=p 
	"Elro is very straightforward, only requiring us to repeatedly wrench the nut in the center of the room. In most playthroughs he will be far more aggressive based on dialog choices throughout the game, but since we skip all of those he is automatically fully passive.
	$LF
]div
[div class=p 
	"During the transitions into both Mina and Royal, we press and hold wrench. This causes a glitch where Robin is considered to be spinning her wrench for the rest of the room. This is known as the Infinite Wrench Glitch. This also causes the game to keep Robin electrified for as long as the glitch happens. We use this to quickly activate the sunflowers in these phases.
	$LF
]div
[div class=p 
	"Black is the simplest nightmare, as we only have to shoot her to finish it.
	$LF
]div
[div class=p 
	"Before the Starworm Battle, we have a conversation with Polro, Robin’s father. We are then prompted with a decision: we can get to him and hug him, or head to the door and move away. This decision affects which type of rocks the final boss will summon as a shield later on. If you go to the door you get rocks that require the bomb gun to break, and if you hug Polro you get rocks that require the stun gun. Unfortunately it is faster to hug him, both in the time it takes to walk over to him and in breaking the rock shield later.
	$LF
]div
[h4 id=BossStarworm 
	" Boss: Starworm
	$LF
]h4
[div class=p 
	"Starworm has a consistent attack pattern, but the bobbing of its head is more random. This is irrelevant if you’re only using guns to attack, but because of the high damage wrench swings do it is much faster to use those whenever possible. A missile is also used to finish the fight as these have the highest damage of any single attack we have access to.
	$LF
]div
[h4 id=BossLucasBirbasaurusRex 
	" Boss: Lucas Birbasaurus Rex
	$LF
]h4
[div class=p 
	[img class=embed mw-100 src=https://i.imgur.com/T4pw1Vy.png 
	]img
	$LF
]div
[div class=p 
	"	
	$LF
	"The final boss of the game. Lucas has several attacks at his disposal, but most of them are incredibly slow to deal with. The best attack he can do by far is a stomp on the ground with a long windup. He can also add a fakeout to this stomp, further increasing the time it takes. This attack was manipulated to happen first using shots during the time between this fight and the Starworm. Enough damage is dealt during this that he immediately goes into his phase transition, where he spawns an enemy then jumps in the air briefly. He actually chose the worst possible enemy to spawn in this movie, but the next phase activation killed it before it even finished spawning in. After this comes the rocks, which can be easily taken out with a single charged stun gun shot. Lucas is briefly invincible after this so there’s no point following his jump attempting to hit him. After he lands, another stomp is manipulated, during which the remainder of the damage is dealt.
	$LF
]div
[div class=p 
	"Final input happens when putting Mina’s seeds into the Starworm after the final boss, on frame 82027. Under normal circumstances, the final input is on a textbox during the end sequence, but as stated earlier this does not play out properly in this category.
	$LF
]div
[div class=p 
	"Under RTA timing rules, this run’s frame count is 81037, meaning a final time of 22:30.84.
	$LF
]div
[div class=p 
	"Side note: The provided TAS file has a slightly different damage sequence at the very end of the boss fight that saves a few frames over the given encode. As this is such a minor difference, I didn't consider it worth reuploading.
	$LF
]div
[h3 id=PotentialImprovements 
	" Potential Improvements
	$LF
]h3
[ul 
	[li 
		" 
		[b 
			"RNG
		]b
		": In various sections such as the soldiers and the final boss, small amounts of time were lost to RNG manipulation.
		$LF
	]li
	[li 
		" 
		[b 
			"Settlement 17
		]b
		": As stated earlier, there is a faster kerthunk skip as well as a potential time save on talking to Pontus.
		$LF
	]li
	[li 
		" 
		[b 
			"Tweak Crafting
		]b
		": Crafting the breathless tweak in shard wastelands instead of isilugar isn’t necessary, but saves time on the swim to the parkour schematic. I did not think to check if this time save was worth the loss of crafting earlier, so it’s possible that this is slightly unoptimal.
		$LF
	]li
	[li 
		" 
		[b 
			"Early Bomb Gun
		]b
		": All of the indoor areas in the game are connected, making it possible to do a skip from settlement 17 all the way to the house at the end of shard wastelands. This allows you to save a massive amount of time on getting the bomb gun, but unfortunately also causes a soft lock afterward. If a way to prevent this soft lock was discovered, this would easily be faster.
		$LF
	]li
	[li 
		" 
		[b 
			"Nightmares
		]b
		": Using the infinite wrench glitch on Mina causes Robin to electrify faster, but also prevents use of gun boosts to reduce charging downtime. More testing could be done here to ensure that this glitch is the faster strategy for this section.
		$LF
	]li
]ul
[h3 id=Acknowledgements 
	" Acknowledgements
	$LF
]h3
[ul 
	[li 
		" The rest of the Iconoclasts speedrunning community, for helping to find all of the glitches and skips that make this run possible, as well as feedback during the creation of it.
		$LF
	]li
	[li 
		" DL Kurosh, Ptkyr, and 56 for giving feedback on this submission.
		$LF
	]li
	[li 
		" Ikuyo for allowing me to shamelessly copy/paste parts of her no airswim submission.
		$LF
	]li
	[li 
		" My cat Frankie for being incredibly cute.
		$LF
	]li
]ul
[div class=p 
	[img class=embed mw-100 src=https://i.imgur.com/LgHZqgf.png 
	]img
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/feos 
		"feos
	]a
	": Claiming for judging.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/feos 
		"feos
	]a
	": Great game, great movie, great submission text. Awesome job!
	$LF
]div
[div class=p 
	"What I need to talk about is how we approach here something we've never done before. This movie looked like a technical milestone for tasvideos, and it ended up being a philosophical milestone as well.
	$LF
]div
[div class=p 
	"First I needed to gather opinions on whether we should consider this ending legitimate, traditional collection of 
	[a href=https://en.wikipedia.org/wiki/Quantitative_research rel=noopener external nofollow 
		"quantitative data
	]a
	" that we do here all the time. But since this has never happened before, and movies so glitched that credits don't even begin rolling weren't accepted yet, I needed to do a 
	[a href=https://en.wikipedia.org/wiki/Qualitative_research rel=noopener external nofollow 
		"qualitative interview
	]a
	" regarding the point of view that considers this ending illegitimate. It uncovered a ton of important insight!
	$LF
]div
[div class=p 
	"Most importantly, considering my position and contribution over the years, 
	[a href=https://tasvideos.org/Forum/Posts/512266 rel=noopener external nofollow 
		"I'm sorry
	]a
	" that tasvideos was stuck in the trend of prosecutorial bias for so many years. We were trying to represent this hobby in the best way possible, and for some reason that required heavy regulation of what TASers are allowed to do if they want their movie to be featured on the site. It's not even like we really rejected more than we accepted overall. It's just that we were viewer-focused and not TASer-focused in terms of our policies. If viewers don't see value in your piece of work worth of several years, it will be rejected. Add to this having to combat the community every once in a while when there's a major disagreement, thinking we know better because we dig deeper than our content creators.
	$LF
]div
[div class=p 
	"So I dug deep here, and I found fundamental problems with the POV that is against legitimacy of this movie's ending.
	$LF
]div
[div class=p 
	"Gameplay in a game can usually be divided into 2 parts, and they are usually not consecutive, but spread across the game in all sorts of variations: primary gameplay challenge and trivial filler. One makes you try hard and overcome some problem, another gives you a break. In most games that people speedrun, primary gameplay challenge is the thing people want to see beaten fast, and the thing they want to try beating fast. Trivial filler also needs to be done fast of course, but it's not challenging, and therefore not as fun. A lot of times it's connected to presenting the plot to the player, and often it contains dialogs that you have to go through to get to the next wave of "hardships".
	$LF
]div
[div class=p 
	"This movie properly reaches and defeats the final boss, while skipping portions of prior gameplay. Primary gameplay challenge is completed, which is when speedrunners sometimes measure their final times. Trivial filler mostly has the lowest priority, because all we want from it is to go away as quickly as possible, along with whatever plot it tries to present us.
	$LF
]div
[div class=p 
	"This movie happens to corrupt the game and cause a bug in a dialog that is a part of the ending sequence. The ending sequence does duly start after defeating the final boss, but it can't finish, because that bugged dialog won't automatically go away either, it basically softlocks the rest of the ending sequence.
	$LF
]div
[div class=p 
	"So the primary challenge that we care about the most is completed, and the trivial filler dialog that presents the plot stalls the game inside the ending sequence. Normally you progress through this dialog by holding a couple buttons. So it is literally trivial, and low priority. But does this bug make this trivial dialog critically important suddenly, just because the game won't normally let you wait it out? Does the credits sequence matter so much that the first part of the ending and having beaten the final boss absolutely don't count anymore?
	$LF
]div
[div class=p 
	"If we take the mechanical approach and simply look at in-game flags, at the software in isolation, at how it normally behaves when you beat the game, the ending is incomplete. But at the same time, the challenge of the game has been completed. And the ending in a game is most of the time a set of different in-game flags and they all get set when you beat the game the intended way. But beating games the intended way is something we at tasvideos never wanted to enforce. If somebody wants to do it, and it has value for the audience, we would accept it. But most of the time, doing the unintended is more surprising, and therefore more entertaining.
	$LF
]div
[div class=p 
	"We don't often get to see the entirety of the ending sequence when a movie just glitches the game real hard into thinking it has ended, which is called "game end glitch". In those cases we may not even be sure what we're seeing as an actual ending and not just some irrelevant graphics that 
	[em 
		"look like
	]em
	" the ending. This is why we check how the game behaves afterwards. It's basically the only way to know the game is really in a "beaten" state at all, since you skipped beating it entirely.
	$LF
]div
[div class=p 
	"What we sometimes do with "game end glitch" and "executes arbitrary code" movies is asking the author to include 
	[em 
		"more
	]em
	" of the ending, so it is as complete as feasible, and the game feels beaten to a layperson. And when you control how glitched you make the game and when you have enough control to call the ending directly, often it's not hard (and doesn't add much extra time to the movie) to make the ending appear complete.
	$LF
]div
[div class=p 
	"In the case of this game though, fixing the ending is possible, but it requires a detour that takes several minutes and 
	[a href=https://tasvideos.org/Forum/Posts/512239 rel=noopener external nofollow 
		"contradicts the primary goal of this run
	]a
	", also making it more similar to the goal that avoids airswim. Since the detour is not relevant to this goal, we may not even get a movie that implements it to make the purists happy. Now this never used to be an argument here at tasvideos, we only cared about formalism and legism, but this is deemed to change if we ever cared about inspiring people to contribute their works to us, and to be respectable in the entire TAS hobby.
	$LF
]div
[div class=p 
	"So the mechanical approach to this ending contradicts the entire point of speedrunning, because it assigns critical value to something that is often seen as a burden that you skip ASAP. Never in a speedrun do you pause to show the plot better, or to make people read the dialog, unless it's a speed/entertainment trade-off of some sort. Trivial filler remains trivial filler.
	$LF
]div
[div class=p 
	"The mechanical approach also makes the problem unsolvable in that we complain that we don't have the correct people as our audience, and those that are there don't appreciate dehumanized computer programs and their internal flags in isolation. "The game is not completed, but the audience for some weird reason thinks it is, and there's no solution that would make both sides happy."
	$LF
]div
[div class=p 
	"Finally, it's ridiculous to dehumanize a computer program whose entire existence is 100% human-focused. Videogames exist exactly for humans to play them. They are made by humans for humans, even if it's a bot that designs videogames, even if it's a videogame that bots or animals can play. If you take humans out of equation, you should be consistent and take the game itself out of equation too, because it wouldn't exist without its human focus.
	$LF
]div
[div class=p 
	"This movie is not meant to set a formal precedent for what is or isn't allowed, but it's meant to set a precedent for what and how we acknowledge when making a decision. Accepting this human-focused submission.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/feos 
		"feos
	]a
	": Forgot to replace the movie with 
	[a href=https://tasvideos.org/Forum/Posts/512127 rel=noopener external nofollow 
		"one with proper annotations
	]a
	".
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/EZGames69 
		"EZGames69
	]a
	": Processing...
]div
