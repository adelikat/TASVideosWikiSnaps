6
[h2 id=NesSuperSpikeVBall 
	"NES - Super Spike V'Ball
	$LF
]h2
[div class=p 
	"Super Spike V'Ball is a volleyball game created by TechnosJapan (those people responsible for River City Ransom).
	$LF
]div
[h3 id=GameObjectives 
	"Game Objectives
	$LF
]h3
[ul 
	[li 
		"Beat the World Cup (Hardest difficulty) as quickly as possible.
		$LF
	]li
]ul
[h3 id=GameplayNotes 
	"Gameplay Notes
	$LF
]h3
[ul 
	[li 
		"Uses luck manipulation (via service choice) to determine how the opponent returns the ball after a serve
		$LF
	]li
	[li 
		"Uses luck manipulation (via delayed spikes) to prevent the CPU from getting defensive hits.
		$LF
	]li
	[li 
		"Uses 2 player co-op mode to save time.
		$LF
	]li
]ul
[div class=p 
	[b 
		"Serving:
	]b
	" The court can essentially be broken up into a 3x3 grid yielding 9 regions for the serve to land.  There are also two service options: standard and jump-serve.  Thus there are 18 possible serves that will land in bounds.
	$LF
]div
[div class=p 
	"There are four possible return patterns after a serve.
	$LF
]div
[ol 
	[li 
		"Regular bump, set, spike sequence (seen scattered throughout run)
		$LF
	]li
	[li 
		"Set, spike sequence (seen scattered throughout run)
		$LF
	]li
	[li 
		"Bump return directly back over net (seen rarely in run)
		$LF
	]li
	[li 
		"Spiked directly off serve (seen rarely in run)
		$LF
	]li
]ol
[div class=p 
	"Service choice was based on which option resulted in the quickest return from the opponent.  
	$LF
]div
[div class=p 
	"Standard serves were frequently performed to yield return pattern #2 by the opponents.
	$LF
]div
[div class=p 
	"Ball flight-speed 
	[em 
		"is
	]em
	" faster with a jump-serve than a standard serve, but almost always results in return pattern #1.  This is slower than getting pattern #2 with a standard serve; thus, jump-serves rarely yield the quickest return.  After the first game, jump-serves were relegated to use when all 18 service options yielded return pattern #1 (taking advantage of the faster ball speed).
	$LF
]div
[div class=p 
	"Instances where return patterns #3 & #4 were attainable they were selected.
	$LF
]div
[div class=p 
	"The opponents never get a chance to serve throughout the run.
	$LF
]div
[div class=p 
	[b 
		"Defense:
	]b
	$LF
	"Classic defense of waiting for a bump after the CPU attacks is only occasionally used; always followed up with a quick scoring spike.
	$LF
]div
[div class=p 
	[b 
		"Blocking:
	]b
	$LF
	"If possible, a block was performed to immediately drive the ball back down to the opponents sand for a point.  Otherwise the ball was returned with a bump, spike combination or via a 'failed' block.  
	$LF
]div
[div class=p 
	"'Failed' blocks are blocks in which the ball appears to bounce off the blocking player's head and stays on his side of the net; spikes can be performed following this 'failed' block slightly faster than a bump/spike combination.
	$LF
]div
[div class=p 
	[b 
		"'Ball Out':
	]b
	$LF
	"Occasionally in the early stages, the CPU will hit the ball out of bounds.  It's also possible for the CPU to lose the ball out of bounds trying to defend a super spike. Both of these results in the referee doing an additional 'Ball Out' animation.  In the few instances this arose, I chose a different service/spike option that didn't result in the ball going out of bounds.  Though the volley may have taken a few extra frames, they were offset by not playing the animation.
	$LF
]div
[div class=p 
	[b 
		"Targeting:
	]b
	"  
	$LF
	"In addition to serves, spikes can be directed to any of the 9 court regions and were chosen to prevent defensive hits by the opponent.
	$LF
]div
[div class=p 
	"Where the CPU targets its hits is mostly predetermined and unaffected by the serve choice.  
	[b 
		[em 
			"Sometimes
		]em
	]b
	" the 'Human' character positions can affect the targeted point, but when it does and where the character had to be to alter the target point was not consistent.  As my limited trials of position altering showed little consistent benefit, this strategy was mostly ignored in making this TAS.
	$LF
]div
[div class=p 
	"Side notes on targeting:
	$LF
]div
[div class=p 
	"There is an U/D L/R input glitch that moves the target point to strange locations, but they're always on the 'human' side of the court and thus this glitch is not useful for a vs. CPU game.  It might be interesting in a PvP mode though.
	$LF
]div
[h2 id=PotentialImprovements 
	"Potential Improvements
	$LF
]h2
[div class=p 
	"As each volley can alter the predetermined CPU targeting of the next volley, changing even one serve/volley would likely impact every volley thereafter.  It's 
	[em 
		"possible
	]em
	" that a different sequence of service choices could yield more short return combinations (#3 & #4) or even reduce some of the #1 returns to #2.   Any such sequence variations may shorten the overall video, but the volley on which that run deviates from this run would likely be slower than the current volley.
	$LF
]div
[div class=p 
	"To test all such permutations would be impractical (309,237,645,312 if my math is correct).
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/GoddessMaria 
		"GoddessMaria
	]a
	": Judging.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/GoddessMaria 
		"GoddessMaria
	]a
	": After having a look at this, I do conclude that there is enough of optimization and entertainment for it to be accepted into Moons. The varying means to quickly score and win kept it from being repetitive helped here. So anyway...
	$LF
]div
[div class=p 
	"Accepting.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/feos 
		"feos
	]a
	": Okay this one will be easy anyway.
]div
