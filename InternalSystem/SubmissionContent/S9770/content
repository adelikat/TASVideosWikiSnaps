7
[h2 id=OptimizingMovement 
	"Optimizing Movement
	$LF
]h2
[hr 
]hr
[h4 id=LedgeBoosts 
	"Ledge Boosts
	$LF
]h4
[div class=p 
	"When first looking at this game, you'd think the physics are super simple and straightforward, which is honestly what I thought when I first took in this game, however as I experimented with it, I noticed a lot of underlying mechanics with this game's physics. Some examples include the fact that when you land after jumping/falling, it will take around 20 frames to accelerate to full walking speed, as well as "ledge boosting," which involves landing on the edge of a platform allowing us to walk and fall off the other end of said platform with full walking speed. When walking off a platform normally without ledge boosting, you will slow down significantly for several frames before beginning the fall, and you will also move slower horizontally while falling, which loses much more do to sponge gliding, depending on the situation. If you hold neutral through a sponge glide, you will glide at the speed you were at in the air, which is useful for many areas in the run. There are even times where I slow down intentionally to activate a ledge boost to save time. The key to optimal movement in this game is to essentially spend as much time in full walking speed as possible, while choosing the correct spots to accelerate such that you don't lose time from the acceleration frames. If the section you're walking on doesn't allow you to walk at full speed for long enough, depending on the situation it is faster to do a sponge glide to the exact spot you need to jump.
	$LF
]div
[h4 id=Jumping 
	"Jumping
	$LF
]h4
[div class=p 
	"This game does have dynamic jumping, although it is very subtle. The jumps work such that holding the jump button for less than 8 frames will result in the smallest possible jump, while holding it from 8-11 frames will result in a higher jump, with a slight increase after every frame you hold it, meaning an 11-frame jump or more will result in the highest jump. Jumping while riding Mystery is slightly different, with the increased jumps starting after holding for 6-9 frames, with a 9-frame jump or more being the maximum. The only reason why doing a higher jump generally loses time is because you will spend more time moving at regular air speed that could be spent moving at full walking speed. Because of this the fastest way to jump is to do the smallest kind of jump possible that still allows you to clear the wall/gap in front of you without slowing down. Although there is a little more to jumping gaps because as I stated before, without a ledge boost you will slow down significantly before you're about to fall off a ledge. As such, in parts of the game where activating a ledge boost is impossible, the optimal way to jump a gap is to input your jump two frames before you start slowing down, since you'll move faster in the air than you would during the slowdown frames that would happen when approaching the end of a platform (unless you are riding mystery. Ledge boosts happen 100% of the time when riding mystery).
	$LF
]div
[h4 id=Robots 
	"Robots
	$LF
]h4
[div class=p 
	"Now let's talk about robots. There are a few types of robots in this game, starting with the plain gray robots that are in practically every level. These robots have a few variations with some moving vertically (but can be bubbled to move horizontally), some moving only horizontally, and some being stationary. Their direction can be forcefully changed by jumping on them or bumping them. Every robot in the game has a specified respawn point if you destroy it. The red bomb bots can move horizontally or be stationary, and if you bump, bubble, or jump on them, it will start a timer for them to blow up. These timers don't have a set duration, but are instead cycle dependent. If you activate the timer near the end of its cycle it will blow up sooner, and if you activate it earlier in the cycle it will blow up later. This is why I waited to hit that one bomb bot in 2-4, the cycle was near the end so I couldn't push it for long enough before it blew up, meaning I had to wait for it to restart. There are giant blue robots that we see a couple times, but they don't have any defining features other than their insane hit boxes (like the one in 3-2). Finally there are the transforming red robots, which you can bubble and push when the spikes are on its head, and bounce on them when the spikes are on its sides. These robots can't be destroyed unless pushed off the map, and it is intended that you can only jump on them when they are in the correct form, however if you jump on one that you bubbled, you'll actually have a 2-frame window to get a jump out, which is used in 4-3.
	$LF
]div
[h4 id=Extra 
	"Extra
	$LF
]h4
[div class=p 
	"SpongeBob's hitbox is just barely bigger on his back side for some reason, so when you turn around his hit box will be flipped. This is a tiny bit useful (only for the TAS) for hitting load zones to exit areas, as doing a frame perfect turn most of the time will allow you to hit the load zone exactly 1 frame sooner, unless you are on a bad sub-pixel. Who doesn't love frame perfect strats that save 1 frame? This can also be used to grab collectibles ever so slightly sooner. The glitching back and forth that I do occasionally in the air is just to look cool, it does not save or lose any time. When opening locked doors or destroying breakable walls, it's faster to turn back a little and start accelerating before the door/wall fully opens up, since you'll get to full walking speed sooner.
	$LF
]div
[h2 id=GlitchesUsed 
	"Glitches Used
	$LF
]h2
[hr 
]hr
[h4 id=SpatDuping 
	"Spat Duping
	$LF
]h4
[div class=p 
	"In levels with Mystery, a glitch called spat suping can be utilized, although it's not fast for every level. For every non-boss fight level, you will need to collect all 3 golden spatulas to unlock the portal at the end of each level. By using this frame perfect glitch, however, we can collect two spatulas at the same time while leaving the slowest one behind. The way it works is by holding neutral on the perfect frame when about to grab a spatula while riding Mystery. Since Mystery is able to grab collectibles as well, coming to a full stop on that frame aligns his hitbox with SpongeBob's perfectly while grabbing the spatula, making the game think we grabbed it with both of them at the same time. This is the easier and faster of the two ways of spat duping, but it only works if the spatula is obtainable from the ground, and if it's set at the correct height.
	$LF
]div
[div class=p 
	"The second method of spat duping involves performing a frame perfect dismount off of Mystery just before grabbing the spatula and is used if the spatula is not obtainable from the ground, or set at the proper height. This works in the same way as the first method, aligning their hit boxes perfectly on the frame they grab the spatula. It's more difficult to time than the first one, and it's also slower because after dismounting, there's a two second cooldown before you're able to ride Mystery again. The hardest part about it is jumping at the proper height, since even if you dismount on the correct frame, if either Mystery is too low or SpongeBob is too high, you won't dupe the spat. Although it can be used for pretty much any Mystery level spatula, if it doesn't save at least a few seconds, it isn't worth doing. You can even end a level with 6/3 spatulas, or 40/20 Krabby Patties utilizing this glitch. Items like the keys or screws used to unlock doors are unable to be duped.
	$LF
]div
[h4 id=ChompJumping 
	"Chomp Jumping
	$LF
]h4
[div class=p 
	"This term refers to when we chomp with mystery right after jumping, then buffer another jump during the chomp, which causes us to get a jump in the air. It's not certain why this works since from what we can tell, it doesn't give you a grounded frame after chomping in this way, but our theory is that by chomping within a 3-frame window after getting the first jump out, the chomp stores the state of being grounded until the chomp animation ends, allowing us to jump mid-air. This glitch does not work if you try to jump after the chomp animation ends. The maximum number of jumps you can chain together in this way before the game drops the grounded state is 5. What's crazy to think about when watching 5 back-to-back chomp jumps is that in order to get to the next jump you need to chomp as soon as possible, or the game will drop the grounded state, so getting 5 back-to-back chomp jumps would involve performing 5 frame perfect chomps in very quick succession in order to keep the grounded state for long enough. This is performed once in level 3-5. After a lot of attempts, the most chomp jumps we've been able to chain together RTA is 4, and it's only happened once.
	$LF
]div
[h4 id=FastGliding 
	"Fast Gliding
	$LF
]h4
[div class=p 
	"In all honesty, we can't really tell if this was an intended mechanic, but I believe it's more than likely not. None of the other GBA SpongeBob games that utilize the sponge glide allow you to do this, and this game does not inform you of it. It was stated earlier that fast gliding involves holding neutral once you begin a sponge glide, and you will begin gliding at whatever speed you were falling at. This makes for some pretty flashy damage boosts, such as the ones in 1-4 and 2-5. What was intended was the player would a directional input hold through the glide, and you would only go less than half of full walking speed. 
	$LF
]div
[div class=p 
	"There are also different ways of releasing a sponge glide. The first one which is generally slower in most cases unless it's necessary in order to activate a ledge boost, is to hold the glide into the landing, which causes you to come to a full stop for a frame before accelerating. It will also force you to wait an extra frame before jumping if you need to right after. The other way which is usually faster is to end the glide in the air before landing, since you never come to a full stop and begin walking right away. This also helps clear some gaps that you may be just barely short on, because the animation of deflating the glide slows down your fall for a little bit. The deflating animation will also delay your landing until the animation ends, which helps in the TAS by avoiding extra landings at times.
	$LF
]div
[h4 id=HonorableMentions 
	"Honorable Mentions
	$LF
]h4
[ul 
	[li 
		[b 
			"R Clips:
		]b
		" This glitch involves clipping through a thin enough ceiling by doing a dismount from mystery right underneath it within a 2-frame window. In the TAS, it was only useful once in 2-5, since normal ceilings are too thick to be able to be R clipped through. This is called R clipping because the R button is the button used to dismount Mystery.
		$LF
	]li
]ul
[ul 
	[li 
		[b 
			"Jammed Mystery:
		]b
		" In order to get Mystery jammed, you'll need a pressure plate door that can be activated and deactivated by a robot walking over it. When the door opens up, you would dismount Mystery in the opening of the door, then wait for it to close. If you position him correctly, when you jump on him with the door closed you can do one of two things; you can either walk straight through the door, or you can just jump infinitely with no end. We perform a Jammed Mystery in 3-4 so we don't have to wait for the robot to walk back over the pressure plate.
		$LF
	]li
]ul
[ul 
	[li 
		[b 
			"Ladder Glitch:
		]b
		" This is actually a banned glitch, due to the fact you need to hold up and down at the same time, which is not possible on the original hardware. What happens is when you're climbing up a ladder while holding up and down, when you reach the top of the ladder you will continue climbing until you let go or jump off. I wanted this TAS to be comparable to an acceptable RTA run, so I did not utilize it anywhere here for consistency.
		$LF
	]li
]ul
[h2 id=FinalNotes 
	"Final Notes
	$LF
]h2
[hr 
]hr
[div class=p 
	"This is my first time ever submitting to TAS videos, so I hope I met all the criteria here. At the moment, this TAS is around 8 minutes 49 seconds better than the current WR held by 24Hourrunz. I'd like to thank 24Hourrunz for practically founding this entire game's speedrun and tech, as much of the TAS builds off of things that he found. Also thanks to RetroEdit for introducing me to TAS studio, so I could edit the earlier parts of the TAS, since I hadn't yet gotten a full grasp on the game's physics and mechanics.
	$LF
]div
[div class=p 
	"I didn't know if having the timer comparing to the WR and the BTT (Best Theoretical Time) was appropriate for the submission video, so I made two separate videos. One unlisted with just the game for the submission, and the one with the comparison that's public. Here is the version available publicly with the comparisons: 
	(youtube|v=oohOejXBPnU)
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/eien86 
		"eien86
	]a
	": Claiming for judging.
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/eien86 
		"eien86
	]a
	": Replacing with truncated movie to last input
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/eien86 
		"eien86
	]a
	": A neat little platformer with puzzle components feature everybody's favourite dish cleaning tool. Execution is clean and visibly optimized. The run is faster than the current 
	[a href=https://www.speedrun.com/bfbbgba/runs/zgep57dy rel=noopener external nofollow 
		"RTA WR
	]a
	". Accepting to Standard
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/inconsistent 
		"inconsistent
	]a
	": Processing...
]div
