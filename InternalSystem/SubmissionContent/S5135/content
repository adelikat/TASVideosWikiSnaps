11
[h3 
	" Game objectives
	$LF
]h3
[p 
	"This is an improvement of more than 400 frames over the previous submission.  
	$LF
]p
[ul 
	[li 
		" Emulator used: BizHawk 1.11.4
		$LF
	]li
	[li 
		" Takes damage to save time
		$LF
	]li
]ul
[p 
	(youtube|v=5oWTdSckik4)
	$LF
]p
[h3 
	"Level Times
	$LF
]h3
[p 
	"Timing taken between the emergence of each intro screen.  (Edit:  Not entirely accurate now, due to updated movie)
	$LF
]p
[table 
	[tbody 
		[tr 
			[th 
				"Level
			]th
			[th 
				"Current
			]th
			[th 
				"Previous
			]th
			[th 
				"Difference
			]th
		]tr
		[tr 
			[td 
				"0101
			]td
			[td 
				"1302
			]td
			[td 
				"1302
			]td
			[td 
				"0
			]td
		]tr
		[tr 
			[td 
				"0102
			]td
			[td 
				"2912
			]td
			[td 
				"2952
			]td
			[td 
				"-40
			]td
		]tr
		[tr 
			[td 
				"0103
			]td
			[td 
				"3091
			]td
			[td 
				"3104
			]td
			[td 
				"-13
			]td
		]tr
		[tr 
			[td 
				"0201
			]td
			[td 
				"3434
			]td
			[td 
				"3447
			]td
			[td 
				"-13
			]td
		]tr
		[tr 
			[td 
				"0202
			]td
			[td 
				"3311
			]td
			[td 
				"3340
			]td
			[td 
				"-29
			]td
		]tr
		[tr 
			[td 
				"0203
			]td
			[td 
				"4890
			]td
			[td 
				"4912
			]td
			[td 
				"-22
			]td
		]tr
		[tr 
			[td 
				"0301
			]td
			[td 
				"1553
			]td
			[td 
				"1576
			]td
			[td 
				"-23
			]td
		]tr
		[tr 
			[td 
				"0302
			]td
			[td 
				"4889
			]td
			[td 
				"4988
			]td
			[td 
				"-100
			]td
		]tr
		[tr 
			[td 
				"0303
			]td
			[td 
				"4063
			]td
			[td 
				"4093
			]td
			[td 
				"-30
			]td
		]tr
		[tr 
			[td 
				"0304
			]td
			[td 
				"2214
			]td
			[td 
				"2223
			]td
			[td 
				"-9
			]td
		]tr
		[tr 
			[td 
				"0401
			]td
			[td 
				"2556
			]td
			[td 
				"2556
			]td
			[td 
				"0
			]td
		]tr
		[tr 
			[td 
				"0402
			]td
			[td 
				"3578
			]td
			[td 
				"3579
			]td
			[td 
				"-1
			]td
		]tr
		[tr 
			[td 
				"0403
			]td
			[td 
				"5137
			]td
			[td 
				"5157
			]td
			[td 
				"-20
			]td
		]tr
		[tr 
			[td 
				"0501
			]td
			[td 
				"2983
			]td
			[td 
				"2988
			]td
			[td 
				"-5
			]td
		]tr
		[tr 
			[td 
				"0502
			]td
			[td 
				"4049
			]td
			[td 
				"4054
			]td
			[td 
				"-5
			]td
		]tr
		[tr 
			[td 
				"0503
			]td
			[td 
				"3748
			]td
			[td 
				"3801
			]td
			[td 
				"-53
			]td
		]tr
		[tr 
			[td 
				"0504
			]td
			[td 
				"5800
			]td
			[td 
				"5855
			]td
			[td 
				"-55
			]td
		]tr
	]tbody
]table
[h3 
	" Improvements
	$LF
]h3
[h4 
	" Subpixel manipulation
	$LF
]h4
[p 
	"Far more attention was paid to subpixel values this time, which accounts for the vast majority of savings.  The game works with 8 units per pixel, with our partners moving with default speeds of 5/6/7/8/10 respectively.  Each variation on when we accelerate, or kick, can give subtle differences in these values, which all have to be fully tested.  They may not provide any immediate difference, but may mean the difference between making a jump or not on a later section.  They may add up to a large enough amount to allow our acceleration to spill over onto the next speed value, or maybe we would actually prefer smaller speeds because then it'll be easier to turn around.  Maybe we want the smallest one possible, but which still allows us to perform a particular trick later on?  If we do become faster on one section, that may just mean a tactic change to compensate on the next platform, and so therefore the next one too, etc.  As you can imagine, it's somewhat impossible to truly know the long term effects of Subx manipulation, and so painfully all variations have to be fully tested and compared with each other.  This does sadly require an exponential increase in the amount of rerecords needed, but it pays off.  This involved continueing what was previously thought to be inferior strategies, but might still become better later on.  All have to be fully tested up to the next convergence point, where our x coords become standardised.  Such examples include slamming into walls, entering beams, teleports, or putting our partner on a water barrel. 
	$LF
]p
[h4 
	" Staggered Acceleration
	$LF
]h4
[p 
	"Speed generally increases by increments of 4 each time,.  While waiting for partners to move along corners, the standard drill is to use the spare time to get a running start.  However, the maximum run up won't necessarily give the best x coord, and so it's often beneficial to get smaller run ups instead.  This will only be valid if a few extra frames to not give sufficient acceleration to spill onto the next speed value.  
	$LF
]p
[h4 
	" Jumpshoves
	$LF
]h4
[p 
	"Rather than simply running into our partner from behind, we can instead choose to jump and land slightly inside them, which can displace them forward by x=2, 3 or 4, depending on both the gradient and Eek's position.
	$LF
]p
[h3 
	" Stage by stage comments
	$LF
]h3
[h4 
	" Misereek
	$LF
]h4
[p 
	"01-No improvements.
	$LF
]p
[p 
	"02-The first of the annoying levels to test.  Each gap we cross gives us varying tactics of when to actually kick, and how long to accelerate for, each resulting in the next section having also different potential tactics.  All combination of everything had to be fully tested, all the way to the very end of the level sadly.  The effort pays off, since saved time even means we can clear the porcupine in a fluid motion without needing to stop.  40 frames saved.
	$LF
]p
[p 
	"03-To push granny off the barrel as soon as possible, we obviously need to land behind her as soon as possible.  However, just doing the basic sprint from the left hand edge results in our x position not being entirely optimal.  We would either be x=4 short of landing, or due to our high speed would land halfway along the barrel instead.  Of course, this means our motion would have to be delayed until Granny's arthritic bones moved her sufficiently along to being pushing from this central position, wasting precious frames.  However, since we have a bunch of downtime, this time it gets used wisely.  Using a few wiggles and speed control, the x coord is manipulated into a giving +4 difference, resulting in a proper location to land on the barrel.  This removes the wait and saves us 18 frames  on the first floor.  On the next floor, just jumping directly up (with a bit of extra height from our attack) can get us in position to swap Granny, without the need for annoying skidding/turning first.  But once again, this time we constrained by the coconut cycle on the top floor, reducing all improvements to 13 frames saved.
	$LF
]p
[h4 
	" Eek! vs. The Flying Saucers
	$LF
]h4
[p 
	"01-Changing when we kick over the first enemy can give slightly different x subpixel values, which while providing no immediate benefit can mean the difference between making or missing a kick during the zigzag section.  Again, fully checking all values found the optimal solution, providing a 12 frame improvement getting upstairs.  The UFO fire cycle then slows us down to only 2 frames saved.  Next, getting past the enemy with a long push is 7 frames faster than swapping, and 4 frames worth of optimisation on the roof gives total saving of 13 frames.
	$LF
]p
[p 
	"02-Better optimisation on lower half saves 12 frames ascending upwards, but both the laser cycle and the bridge cycle reduce this to only 2 frames saved getting into the teleporter.  For the second half, the bubble journey was optimised by a further 17 frames, which would otherwise be lost waiting for Annabel to walk into the beam.  But since even the previous TAS was forced to wait upstairs for a bit, we have approx 40 frames worth of excess time to utilise somehow.  Rather than just using it for increased acceleration at the end, instead it gets used at the start of the section to push her further along in the first place.  But due to slow speeds and the awkward ledge positions, the inefficiency of pushing her along does cost significant time, resulting in only 15 frames being saved, for 17 total this level.
	$LF
]p
[p 
	"03-Better acceleration control and subpixel manipulation saves another 17 frames total.
	$LF
]p
[h4 
	" Halloweek!
	$LF
]h4
[p 
	"01-The only waiting period here happens after being whacked by the stalactite, and so that needs to be shortened.  This was done by crossing all other gaps earlier, lengthening the duration of the final stretch, to kick over the gap with greater speed.  That, a better opening, and jumpshoves saves a significant total of 23 frames.
	$LF
]p
[p 
	"02-With our partner moving with speed 7, and a long waiting period at the start, this gives us time to set up 7 potential subpixel positions to test.  All of these have to be fully executed up to the next convergence point, which turns out to be the kick onto the mushroom.  All variations can have 3 frames saved through MOT properly, but a further 3 can be saved through only one unique subx position.  For second half, the saved time so far means we can beat the fire cycle, so our partner no longer gets burned, resulting in a huge saving.
	$LF
]p
[p 
	"03-10 frames get saved in the first section, but then 5 of them get lost due to the fireball blocking our way up the zigzag.  For the next major section, we get restricted once again by periodic fireballs motion.  Replicating the previous strategy requires waiting for a fireball to get out of our way on the first descent, and then waiting again for another to free us on the way down with the barrel.  This negates all improvements, and giving us at most a 2 frame saving on the final time.  So instead, our partner was released much earlier, eliminating the corner wait, beating the fire cycle, but then having to wait longer at the end for our partner to catch up.  Worth it however, since overall that makes this level 30 frames faster.
	$LF
]p
[p 
	"04-Deliberately kicking earlier or later on each tree allows us to maximise the longest stretches, and minimise the shortest ones.  This'll keep velocities as high as possible, saving 9 frames.
	$LF
]p
[h4 
	" Bearz 'n The Hood
	$LF
]h4
[p 
	"01-6 frames saved ascending on first section, 5 Frames lost waiting for the helicopter cycle.  More time wasted waiting for the lift, then waiting for more helicopters, and then finally the trashcan enemy.  0 frames saved.
	$LF
]p
[p 
	"02-8 Frames saved ascending to lift, 8 frames wasted waiting for it.  As you'd expect, no frames possible to be saved here, only 1 frame quicker loading the level for some reason.
	$LF
]p
[p 
	"03-Jumping over the buildings allows us to transverse the majority of the upper course without needing to slow down, saving 50 frames getting to our partner.  This big saving gives us enough time to set off all the manhole covers in the sewer BEFORE we position our partner on the barrel.  Obviously the barrel still restricts our progress, but now we now have a huge amount of spare time for a maximum run up,  saving 20 frames on the final stretch.
	$LF
]p
[h4 
	" It's A Wonderful Nine Lives
	$LF
]h4
[p 
	"01-Proper speed control up first bit saves 5 frames, and allows us to access the washing line ledge with a lower X Coord.  A smaller distance to transverse means we don't spill onto 18 speed, and that means we can kick our partner without excess distance traveled.  This then saves time when we're forced to go back to retrieve him, finishing the upper section 16 frames faster.  But like always, the electricity cycle at the very end restricts our progress, forcing a slight route change.  Our partner gets rerouted above, and dropped onto the power grid instead.  With the saved time so far, we can get just far enough to kick into the low hanging ceiling, which allows us to continue with minimal delay.  Using this intermediate step does mean that we're now at lower speeds at the very end, slowing the final dash down, but overall this new method results in being 5 frames faster than simply waiting at the beginning.
	$LF
]p
[p 
	"02-First half dictated by lift, second half by electricity cycle.  A few frames were saved on the descent, but were not needed, as there's more than enough time for the new trick anyway.  Sprinting to our partner from the above girder gives us greater speed, which saves 5 frames crossing the final electricity grid.
	$LF
]p
[p 
	"03-Another common example where tonnes of potential subx positions were needed to be tested, while we wait for the lift to ascend.  Clearly worthwhile though, since individual improvements eventually built up to the point where we can utilise the ball and chain again, giving nice total of 53 frames saved.
	$LF
]p
[p 
	"04-MOT and light kicks used on more spots, which were overlooked in the previous submission.  50 frames saved on first half.  Despite being so early that the lift now blocks our way, simply by choosing to do the next few kicks early as possible, means we can still have a long acceleration burst but now done upstairs instead.  Next using the nearby wall ledge to slowdown saves another 4 frames turning around, for 55 total.
	$LF
]p
[hr 
]hr
[p 
	[a class=intlink href=/Users/Profile/Fog 
		"Fog
	]a
	": Judging.
	$LF
]p
[p 
	[a class=intlink href=/Users/Profile/Samsara 
		"Samsara
	]a
	": E E K B O Y S (picking this up from Fog with his permission).
	$LF
]p
[p 
	[a class=intlink href=/Users/Profile/Samsara 
		"Samsara
	]a
	": File replaced with an eek-provement, WarHippy added as a co-eek-thor, and eek-cepting as an eek-provement to the 
	[a class=intlink href=/3111M 
		"published reek
	]a
	". Run. Excuse me.
	$LF
]p
[p 
	[a class=intlink href=/Users/Profile/feos 
		"feos
	]a
	": gfdsja
]p
