4
[ul 
	[li 
		"- Plays on Hard difficulty (hardest available)
		$LF
	]li
	[li 
		"- Aims for fastest time
		$LF
	]li
	[li 
		"- Takes damage to save time
		$LF
	]li
	[li 
		"- Manipulates luck
		$LF
	]li
]ul
[p 
	"This is my improvement of Castle of Illusion. Although this version differs in cathegory from the previous one, it's my intention that it causes obsoletion of the old movie. This one takes damage, while the other was said to not take damage (even though there was a "hidden" damage). I chose to take damage because it indirectly enables for some shortcuts or overall faster looking routes.
	$LF
]p
[p 
	"The total difference is 2841 frames (aproximately 47.35 seconds), but it inserts last input a little later than really needed to finish the game. This is done to make the total avi length a little smaller (at the end of the movie, mickey stands on where he must be to release the power of the crystals).
	$LF
]p
[p 
	"A big part of the improvement was possible by using luck manipulation on the clown boss and the hammer boss (on last level). This hadn't been done on the other version because it was very old and terrible and full of shame!
	$LF
]p
[h3 
	" Mickey's movement
	$LF
]h3
[h4 
	" Jumping
	$LF
]h4
[p 
	"Jumping increases the maximum possible horizontal velocity. This applies to when mickey is already moving at his maximum walking speed. I'm really not sure about the optimal differences when walking speed is below it's maximum value, but it seems that accelerating on the ground is faster than in the air. A memory watch tool would help optimize this part, but I believe what I did isn't too far from optimal.
	$LF
	"The height of the jump is not important, as long as mickey stands on the ground as little as possible (1 frame).
	$LF
]p
[h4 
	" Ducking
	$LF
]h4
[p 
	"Ducking stops horizontal speed
	$LF
]p
[h4 
	" Extending the jump
	$LF
]h4
[p 
	"By holding down the jump button during the maximum height value of the jump, mickey falls slower. Only applicable to the tallest jump possible, can't do it on smaller jumps.
	$LF
]p
[h4 
	" Reaching a pixel further
	$LF
]h4
[p 
	"During the ascending portion of the jumping animation, mickey is effectively moved 1 pixel forward, and then moved 1 pixel back after the ascending animation is done. This is not abusable to acumulate pixels forward, but it allows to activate triggers 1 frame earlier during jumps (exit doors, swinging vines, moving cubes, etc).
	$LF
]p
[h4 
	" Unbalanced animation on flat surface
	$LF
]h4
[p 
	"Can be activated on various ways, most of them by alternating directions every other frame. One easy way is to tap "down" 3 times, 1 frame intervals.
	$LF
]p
[h3 
	" Input display animation
	$LF
]h3
[p 
	"This was my first attempt at animating the buttons on the input display. I had never heard of anything quite like it, but the folks at the IRC channel told me that JXQ beat me to it. I'm not sure if what he did is similar in any way to what I did here, but I tried to not overdo it. The animations are present between screens (not during the level) and just on the first and last levels.
	$LF
	"The animations were made using Maximus' wonderful 
	[a href=/forum/t/4448 
		".NET TAS Editor
	]a
	". Yes, by hand. Frame by frame, then copy paste, remove frames, etc etc. They told me JXQ made a program for that, which is cool. But I did it old style. Caveman style.
	$LF
]p
[p 
	"I wanna thank myself for improving this game and I hope someone gets rid of that old XVID avi please! 
	$LF
]p
[hr 
]hr
[p 
	(__wikiLink|user:Truncated)
	": Accepted as an improvement to the shameful predecessor. Good job!
]p
