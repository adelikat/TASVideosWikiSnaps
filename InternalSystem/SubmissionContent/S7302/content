8
[div class=p 
	"Serena's SGB Ultraman Ball
	$LF
]div
[pre 
	$LF
]pre
[h3 id=GameObjectives 
	" Game objectives
	$LF
]h3
[ul 
	[li 
		" Emulator used: BizHawk 2.7.0
		$LF
	]li
	[li 
		" Aims for fastest time
		$LF
	]li
	[li 
		" Genre: Platform
		$LF
	]li
]ul
[h3 id=GameOverviewChoice 
	" Game Overview/Choice
	$LF
]h3
[div class=p 
	"Ultraman Ball is a platform game featuring the ability to morph into a ball form, which bounces and is in general much harder to control. I was unaware of this game's existence before seeing it at the recent GDQ event, and thought it looked short and simple enough to TAS as a small project before moving on to another large one.
	$LF
]div
[h3 id=Improvements 
	" Improvements
	$LF
]h3
[div class=p 
	"This movie beats 
	(__wikiLink|displaytext=the previous submission by TaoTao|href=/3144S)
	" by a significant margin, although I am unsure on an exact frame count as their submission appears to use a non-standard method of timing. From looking at the 
	[a href=https://www.youtube.com/watch?v=y5Eo874_Fes rel=noopener external nofollow 
		"provided youtube encode
	]a
	", their time from power on to final input appears to be around 6:18, rather than the listed 6:04.45. This places my movie roughly 9 seconds ahead.
	$LF
]div
[div class=p 
	"Aside from general movement improvements, I also discovered two new glitches used in this run: the ladder clip and wall jump. There were also places in the previous submission where movement that should be optimal ended up being significantly slower due to lag.
	$LF
]div
[div class=p 
	"The game startup sequence in their submission is noticeably faster, but I believe this is due to an emulation inaccuracy in VBA. I was unable to replicate it when using BizHawk.
	$LF
]div
[h3 id=Movement 
	" Movement
	$LF
]h3
[div class=p 
	"Horizontal speed values:
	$LF
]div
[table 
	[tbody 
		[tr 
			[th 
				" 
			]th
			[th 
				"Ultraman
			]th
			[th 
				"Ball
			]th
		]tr
		[tr 
			[th 
				"Ground
			]th
			[td 
				"16
			]td
			[td 
				"24
			]td
		]tr
		[tr 
			[th 
				"Air
			]th
			[td 
				"16
			]td
			[td 
				"32
			]td
		]tr
		[tr 
			[th 
				"Slope
			]th
			[td 
				"16
			]td
			[td 
				"40
			]td
		]tr
	]tbody
]table
[div class=p 
	"Due to the much higher speed of the ball form, this run uses it almost exclusively. The two exceptions where the ultraman form is faster are when accelerating up to 16 units/frame, and when jumping off of a ladder/vine, which sets the player's speed to 48 units for a single frame.
	$LF
]div
[h3 id=Tricks 
	" Tricks
	$LF
]h3
[h4 id=Levitation 
	" Levitation
	$LF
]h4
[div class=p 
	"Switching into ball form cancels all acceleration for that frame, as well as setting the Y velocity to 0. This can be abused to move horizontally while losing minimal height by repeatedly switching form, however this is of limited use due to it reducing the player's speed to the slower 16 units/frame of the ultraman form. If moving downward, the higher speed can be maintained by switching away from and back to the ball on two consecutive gameplay frames. This can be accomplished either by pausing and unpausing the game, or by timing the form switch inputs around a lag frame. Pausing the game loses 2 frames, but is often worth it to keep higher speed.
	$LF
]div
[div class=p 
	"As an additional note, the acceleration cancelling effect happens regardless of if switching form is actually possible. This can be abused when near a ceiling in order to either rise up to it faster, or fall away from it slower.
	$LF
]div
[h4 id=KnockbackCancelling 
	" Knockback Cancelling
	$LF
]h4
[div class=p 
	"When colliding with a breakable block in ball form, the player is normally forced to bounce away from it. If moving upward, this can be prevented by switching away from ball form on the same frame the block is broken. This maintains a speed of 16 units/frame, but in most situations ultraman will collide with another block before it is possible to switch back, immediately losing this speed. As in the levitation trick above, lag frames or pausing may be abused to switch back to ball form faster in order to keep high speed past the breakable block.
	$LF
]div
[h4 id=LadderClipping 
	" Ladder Clipping
	$LF
]h4
[div class=p 
	"When jumping off of a ladder/vine towards a wall, ultraman is normally placed into a wall sliding state. If both a directional input and the jump button are pressed, he will instead be placed inside of the wall. From here, it is impossible to continue moving horizontally through the wall, but switching to ball form and jumping will quickly zip the player to the top of the wall. This has an odd side effect of offsetting the visual tile data slightly, allowing it to be read from unrelated memory. If repeated enough times, the screen can be completely filled with nonsense data. Since this is visual only, I was unable to find a use for it, but this is likely still worth looking into.
	$LF
]div
[div class=p 
	"Example of the visual glitch:
	$LF
]div
[div class=p 
	[img class=embed mw-100 src=https://i.imgur.com/sltKGkK.png 
	]img
	$LF
]div
[h4 id=WallJump 
	" Wall Jump
	$LF
]h4
[div class=p 
	"Without a ladder, moving towards a wall will still clip ultraman slightly into it before immediately pushing him away. Switching to ball form on the frame this clip happens and immediately jumping allows a jump to be performed before the player is pushed out of the wall. This additionally bumps the player up to the next tile vertically, allowing extremely fast movement up walls if this glitch is chained in quick succession. On walls to the right of the player, this can be done simply by alternating B and A, but on left walls it is necessary to move slightly away from the wall and back towards it to clip again.
	$LF
]div
[h3 id=AdditionalInfo 
	" Additional Info
	$LF
]h3
[div class=p 
	"Memory addresses:
	$LF
]div
[table 
	[tbody 
		[tr 
			[td 
				"C201
			]td
			[td 
				"Current form (1 byte, unsigned)
			]td
		]tr
		[tr 
			[td 
				"C205
			]td
			[td 
				"Position X (2 bytes, unsigned)
			]td
		]tr
		[tr 
			[td 
				"C207
			]td
			[td 
				"Position Y (2 bytes, unsigned)
			]td
		]tr
		[tr 
			[td 
				"C209
			]td
			[td 
				"Velocity X (1 byte, signed)
			]td
		]tr
		[tr 
			[td 
				"C20A
			]td
			[td 
				"Velocity Y (1 byte, signed)
			]td
		]tr
		[tr 
			[td 
				"C518
			]td
			[td 
				"Boss Invincibility Frames (1 byte, unsigned)
			]td
		]tr
	]tbody
]table
[div class=p 
	"ROM SHA-1: 3CDFCFB1A88D0CBFEB1C7B12751409FAF69BBA02
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/CasualPokePlayer 
		"CasualPokePlayer
	]a
	": Replaced movie file with one with the correct cycle count
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/ThunderAxe31 
		"ThunderAxe31
	]a
	": Claiming for judging.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/ThunderAxe31 
		"ThunderAxe31
	]a
	": All right, putting aside all emulation differences, this movie only brings improvements. As such, accepting as an improvement over the 
	(__wikiLink|displaytext=published movie|href=/1811M)
	".
	$LF
]div
[div class=p 
	"Additional note for the publisher: I've made sure that the CycleCount value in the Header.txt is correct, however I'm not sure if the site is parsing it correctly, or if the System Framerate setting is correct in the Catalogging Information for this submission. We know for sure that this submission uses SGB2, because Gambatte doesn't emulate SGB1. The difference is that SGB1 is known for running GB/C games faster than intended, leading to incorrectly shorter timings, while SGB2 instead runs at the intended GB/C speed, thanks to improved hardware. However, according to CasualPokePlayer, the output video framerate in practicality is the same as the SNES, with frames skipped/duped internally to maintain the SNES framerate. So, to make it short, I can't tell for sure if the currently displayed timing is correct, or if the current framerate in Catalog is correct for encoding. Please refer to CasualPokePlayer and feos if you also have any doubt.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/fsvgm777 
		"fsvgm777
	]a
	": Processing.
]div
