7
[pre 
	"Emulator used: <Snes9x-1.43-improvement13-win32>
	$LF
	"Obtain Screw Attack
	$LF
]pre
[p 
	"-All was done by me-ZENEO9
	$LF
]p
[p 
	"This is my first time using TAS,i read every tricks to Super Metroid.
	$LF
	"Metroid Maze is ROM hack of orginal Super Metroid.
	$LF
	"I like this hack because it's awesome,short and easy to TAS.
	$LF
	"Thanks
	$LF
]p
[p 
	"-ZENEO9
	$LF
]p
[p 
	"Super Metroid Tricks - 
	$LF
	"Varying Samus's hitbox
	$LF
	"Samus's hitbox when jumping is not matched perfectly to her visual sprite. This allows for some time saving maneuvers.
	$LF
	"Landing earlier
	$LF
	"When aiming down or somersaulting, Samus's sprite is smaller vertically. By pressing up, L, R, or shooting, Samus will stand up fully and land a couple frames earlier.
	$LF
	"Note: By pressing the shot button for only one frame while somersaulting, Samus will unspin, but not shoot. However, if you have Charge Beam collected, or have any other weapon selected, Samus will shoot immediately after unspinning.
	$LF
]p
[p 
	"Corner hugging
	$LF
	"When jumping to clear a platform, a somersaulting jump may not get the height needed. However, a jump of the same power and speed may be able to clear the platform if Samus aims down a few frames before she would normally catch the platform, as the hitbox for aiming down is even smaller than the somersaulting hitbox.
	$LF
	"Preserving the aimed-down posture while falling forward
	$LF
	"(AKA "back-down fall")
	$LF
	"Usually, when you push down during a fall to enter the aimed-down posture (for instance, in a preparation for a corner hug), Samus's horizontal speed is reset. However, if you simultaneously press back and down on the d-pad, she will continue moving forward, preserving all the benefits of having reduced vertical hitbox at the same time. It can be used for more effective corner boosting or clearing certain vertical rooms without stopping. Note: sometimes it requires shooting right before pressing back in order for this trick to work.
	$LF
]p
[p 
	"Corner boosting
	$LF
	"When falling alongside a wall or a ledge that ends, aiming down and then immediately left/right on the d-pad at the right frames will shift Samus's position a few pixels down and, in case of pressing d-pad towards the ledge, go under it faster. It happens due to "aiming down" hitbox having about half the normal height; by pressing left or right Samus restores her full-size hitbox and gets immediately pushed down out of the ledge boundaries her hitbox is colliding with.
	$LF
	"SMV demonstration.
	$LF
]p
[p 
	"This trick is the most effective at the beginning of the jump/fall. At full downward speed, Samus will sometimes fail to be pushed down if she falls too fast for the hitbox to "reach" the ledge's boundaries.
	$LF
]p
[p 
	"Platform grabbing
	$LF
	"Samus can jump up to a platform faster than normal by aiming downward on the final frame that the jump button is held, and then immediately moving toward the platform for one frame.
	$LF
	"In case you need to continue moving in the same direction, it is advised to time your jump so that you don't bump into the platform's edge before grabbing it. Sometimes it means doing a higher jump or pressing down a frame earlier.
	$LF
]p
[p 
	"Morphball tricks
	$LF
	"Morphing ball is the signature item of every Metroid game. It has many uses in Super Metroid due to its high maneuverability and initial momentum.
	$LF
	"Morphball bounce
	$LF
	"Pressing down twice in mid-air will put Samus in morph ball mode in mid-air. Samus's horizontal velocity will remain until she hits the ground if the jump button is held while pressing down, and holding forwards after morphing.
	$LF
	"When hitting the ground as a ball, Samus will bounce once before fully entering the "ground" state, where her speed is reduced to that of morph ball's roll. This bounce can be useful in a situation where a lot of small platforms would otherwise cause slower jumping.
	$LF
]p
[p 
	"Waterball
	$LF
	"When using a morphball bounce while jumping into the water (without the gravity suit), the speed before hitting the water can be kept until the end of the morphball bounce.
	$LF
	"Graveworm says:
	$LF
]p
[p 
	""Water ball" works because, as a ball, you keep all your speed when going into the water. You can even keep Speed booster even if you don't have the Gravity suit if you jump into the water from the ground. You can also use the "mockball" technique underwater if you build the speed up from the dry ground and jump into the water. Also, since gravity is changed underwater, you bounce much higher and can keep your speed longer, even though the water slows you down due to friction.
	$LF
]p
[p 
	"Mockball
	$LF
	"A mockball is a method of using the morph ball without resetting running speed. To perform it, jump into the air when at the desired speed. After reaching the peak of the jump (or releasing the jump button), hold the jump button and press down twice to morph into a ball, followed by immediately holding forward. If done close enough to the ground that Samus doesn't bounce, Samus will instead glide smoothly along the ground in ball form at the speed she was previously running with.
	$LF
	"Morphing through platforms
	$LF
	"(AKA "kagoball")
	$LF
	"Certain objects (such as Kagos, moving or temporary platforms, certain enemies — generally everything that is of the "SPECIES" object code
	"[
	[a id=7 
	]a
	[a href=#r7 
		"7
	]a
	"]
	") in the game can be passed through if Samus morphs one frame before landing on the object, providing falling speed is sufficient
	"[
	[a id=8 
	]a
	[a href=#r8 
		"8
	]a
	"]
	". A well-known example is the two vertical moving spiked platforms to the right of the Elite Pirate guards near Ridley's lair.
	$LF
]p
[p 
	"SMV demonstration.
	$LF
]p
[p 
	"Bomb jumping
	$LF
	"Morphball bombs can be used to propel Samus in the air. While very slow, this technique is so robust that there are nearly no limitations to its explorative properties.
	$LF
	"When Samus's hitbox is "caught" by bomb explosion, you temporarily lose control over her. The lock happens when the bomb countdown timer reaches 9. If you're caught in a lock, you have to wait until Samus is propelled and the upward speed reaches zero.
	$LF
]p
[p 
	"Hovering
	$LF
	"Hovering is basically IBJ (see below) without gaining height. It can be used to lose height (albeit very slowly), wait for something without unmorphing, or as a preparation for IBJ.
	$LF
	"To hover without gaining height optimally, you need to lay a new bomb every time the counter on the previous one reads 7, and once per 2-3 jumps, 6.
	$LF
]p
[p 
	"SMV demonstration.
	$LF
]p
[p 
	"To descend while hovering, lay a new bomb every time the counter on the previous one reads 5, and, once per 3-4 jumps, 4.
	$LF
]p
[p 
	"SMV demonstration.
	$LF
]p
[p 
	"Infinite bombjump
	$LF
	"(AKA "IBJ")
	$LF
	"In Super Metroid, it is possible to reach unlimited height with bombjumps. There are two different ways to do IBJ.
	$LF
]p
[p 
	"Through hovering: an easier method. Each new bomb should be laid when the counter on the previous reads 12 (except the first one). Visually, the button should be pressed as Samus's sprite is about to touch the previous bomb's sprite while falling. Each jump gains ~15 pixels of height on average with this method.
	$LF
	"Through copying double bombjump: harder to do, but more effective. Each new bomb should be laid when the vertical speed address reads 0.1024
	"[
	[a id=9 
	]a
	[a href=#r9 
		"9
	]a
	"]
	" (visually, at the apex of each jump). Each jump gains ~21 pixels of height on average with this method.
	$LF
	"Diagonal bombjump
	$LF
	"Diagonal bombjumps are used to cross pits or other similar obstacles which are impossible (or at least infeasible) to cross otherwise. There are three different ways of doing this type of bombjump.
	$LF
	"Simple diagonal bombjump.
	$LF
	"Extended diagonal bombjump.
	$LF
	"Height-oriented diagonal bombjump (Terimakasih's method).
	$LF
	"TODO: add demos and explanations here.
	$LF
]p
[p 
	"Horizontal bombjump
	$LF
	"(AKA "HBJ")
	$LF
	"Horizontal bombjump is a way to travel across long distances without gaining height (mainly useful in rooms that have low ceilings, rendering diagonal bombjump impossible). There are two ways of doing HBJ:
	$LF
]p
[p 
	"Through hovering.
	$LF
	"Through diagonal bombjumps.
	$LF
	"TODO: add demos and explanations here.
	$LF
]p
[p 
	"Springball jump extension
	$LF
	"Springball doesn't check if Samus is on the ground to initiate a jump — only her vertical speed. By letting a bomb propel Samus and pressing jump when her upward acceleration reaches zero, you can successfully springball from mid-air. You can extend the jump height afterwards further by infinite bombjumping. You can't do double springball jumps in such fashion, though.
	$LF
	"Gravity jump
	$LF
	"After obtaining the gravity suit, when underwater, press start to pause the game, then jump just as the screen is fading out, the later the jump, the higher the jump will be. Switch to Samus's status screen and turn off the gravity suit. When the game resumes, Samus will jump extremely high, even if her jump carries her out of the water. This trick also works with Spring Ball, although this is hardly useful due to lower jump height.
	$LF
	"SMV demonstration.
	$LF
]p
[p 
	"By using Speed Booster to increase the jump strength further, it's possible to jump really high.
	$LF
]p
[p 
	"SMV demonstration.
	$LF
]p
[p 
	"Walljumping
	$LF
	"(AKA "WJ")
	$LF
	"One of the key moves in the game when it comes to traveling through vertically aligned rooms. To execute it, Samus must be somersaulting near a wall. Press away from the wall for atleast one frame, then press jump while holding the d-pad in the same direction. If Samus hasn't strayed away from the wall by more than 6 pixels, she will kick it and receive vertical acceleration close to that of a normal jump.
	$LF
]p
[p 
	"To walljump effectively, you need to find a good balance between keeping the amount of jumps low and not letting the acceleration decay long enough to slow you down. Good idea would be to monitor the RAM addresses for vertical speed (listed in the table below) and not let it fall under a specific (chosen arbitrary) value. Letting it drop under 3 pixels/frame is almost always slower than doing another jump, though.
	$LF
]p
[p 
	"Continuous walljump
	$LF
	"(AKA "CWJ")
	$LF
	"By not turning around prior to walljumping, Samus keeps her speed intact after a jump. It has many timesaving applications, such as:
	$LF
]p
[p 
	"Old MB room on the way to blue Brinstar;
	$LF
	"Pre-Wave beam room missile pack skip;
	$LF
	"Wrecked Ship missile lake room;
	$LF
	"and many others.
	$LF
	"The only drawback of using this method is that you won't be able to release jump and continue somersaulting without losing speed. This can only be worked around by exiting the spinjump state by shooting or other similar way (see the OMBR demo above).
	$LF
]p
[p 
	"Note: The missile lake jump is actually manageable in realtime. To do it, you must be standing right in front of the door and start running from there, then jump on the last possible frame. When you reach the pole, you have exactly two frames to press jump until you drown, so the timing is pretty strict. Presence of the missile on that pole won't change or interfere with the timing involved in this trick.
	$LF
]p
[p 
	"A special case of the CWJ is "upwards CWJ". Its use is very limited, but it can save a few frames if a good application is found. One example of this is:
	$LF
]p
[p 
	"Post-Red Brinstar power bomb room.
	$LF
	"TODO: Add more relevant demos
	$LF
]p
[p 
	"Entering doors and getting items early
	$LF
	"(AKA "walljump pickup")
	$LF
	"When spinjumping forward, the game checks the tile immediately behind Samus to see if she can wall jump off of it, starting with the top-most tile and moving down. If any solid tiles are found, the game stops checking and allows Samus to walljump.
	$LF
]p
[p 
	"Additionally, the game considers Samus as touching any tiles checked, allowing you to trigger items and doors earlier by spinjumping and turning around right as the tile is within walljump range. If an item that is to be collected requires Samus to turn around immediately after collecting it, using this technique can get the item a bit faster. This can also be utilized when entering doors that do not require momentum in the direction they are entered (such as boss rooms).
	$LF
]p
[p 
	"The maximum distance of a remote trigger pickup depends on Samus's velocity by the moment of the walljump check and can go as high as 8 pixels away from the target. This is especially noticeable during Torizo skip.
	$LF
]p
[p 
	"If you don't need to turn around nor continue rising after touching the trigger, but instead want to preserve the horizontal speed, you can substitute the turnaround with pressing back+down in a way similar to back-down fall.
	$LF
]p
[p 
	"Avoiding turnaround animation
	$LF
	"(AKA "elevator hop")
	$LF
	"By pressing either left or right on the d-pad and pressing jump during one of the next frames, it's possible to spinjump (and thus turn around) instantly, without having to wait for the full six frames of turnaround animation cycle. This is especially useful when regaining control after elevator rides, such as in Ceres.
	$LF
]p
[p 
	"Exploiting the turnaround animation
	$LF
	"When not somersaulting, Samus has a short animation whenever she changes direction, which has several interesting properties.
	$LF
	"Fall through crumble blocks quickly
	$LF
	"(AKA "edgehogging")
	$LF
	"When landing on a crumble block (or a block about to be destroyed by a bomb), if Samus is in one of her turnaround animations, her falling speed will not be reset — instead, her vertical speed will continue rising even though she's not moving.
	$LF
]p
[p 
	"This can be performed on consecutive rows of crumble blocks in succession.
	$LF
]p
[p 
	"SMV demonstration.
	$LF
]p
[p 
	"It is a good idea to use this technique when waiting for a block to detonate, instead of making a high jump to build vertical speed up. Compare: with edgehogging, without edgehogging.
	$LF
]p
[p 
	"Jump continues rising when turning around
	$LF
	"If Samus is jumping up while turning around in mid-air, she will continue to rise until the animation is complete, even if the jump button is not pressed. Also, if Samus bumps into a ceiling during this animation, but is no longer under the ceiling when the animation finishes, her jump can continue to rise, despite being "stalled" by the ceiling.
	$LF
	"SMV demonstration
	$LF
]p
[p 
	"Corner jump
	$LF
	"(AKA "flatley jump")
	$LF
	"First introduced by Michael Flatley (hence the name), corner jump is a technique that effectively allows jumping from mid-air. To do it, run off a ledge turning around just before Samus enters the "falling" state, and press jump while turning around.
	$LF
]p
[p 
	"SMV demonstration.
	$LF
]p
[p 
	"Exploiting the animation lock
	$LF
	"Samus has several uninterruptible animations that can be used to avoid unwanted effects such as damage knockback or other slowdowns. The first one is morphing/unmorphing, the second is turning around when unmorphed and not somersaulting.
	$LF
	"Normally, taking a hit from an enemy will throw Samus off from her intended movement. If you time it so that the damage source touches Samus while she is in one of the intermediate animation frames, it will register a hit but won't affect her movement in any form.
	$LF
]p
[p 
	"It can also be used to prolong beneficial effects, such as running speed and speed echoes.
	$LF
]p
[p 
	"SMV demonstration.
	$LF
]p
[p 
	"See also: kagoball.
	$LF
]p
[p 
	"Shoulder pumping
	$LF
	"When running, each time L or R is pressed or released, Samus's position is shifted forward by one pixel. By putting L or R on autofire, Samus's running speed is effectively increased.
	$LF
	"Note that this does not actually increase Samus's forward velocity; rather, it is a series of increases in her forward position. Thus, when jumping, this extra "speed" is lost, because shoulder pumping does not affect movement in the air. For this reason, there are times when shoulder pumping is a slower strategy than regular running — particularly, when a short platform is followed by a long jump.
	$LF
]p
[p 
	"Shooting Samus's beam (particularly, making her thrust her arm cannon forward) yields the same effect, although it is of much lesser use.
	$LF
]p
[p 
	"Note: Alternating L and R or shooting inbetween doesn't give any additional benefits, but may serve as a shortcut when optimizing lag-filled sequences.
	$LF
]p
[p 
	"Stop-on-a-dime
	$LF
	"Pressing L or R with no direction held for one frame will bring Samus's movement to an immediate halt.
	$LF
	"Charging shinespark in shorter distance
	$LF
	"After getting the Speed Booster, Samus's speed is kept track of in two different ways. Her actual horizontal velocity is increased each frame that the dash button and the forward direction are pressed together. During a certain frame of Samus's run animation, the game will also increment the boost counter if these buttons are pressed. This is kept track of visually by the speed of Samus's running animation. Once the boost counter is incremented four times, the speed echoes appear and Samus can break speed blocks.
	$LF
	"The fact that these are kept track of separately makes for some useful applications.
	$LF
]p
[p 
	"Samus's boost counter is tied to her running animation, specifically to the "magic frame" (), on both NTSC and PAL ROMs. Thus, pressing the dash button on only these check frames (while constantly moving forward) will give Samus her speed echoes — even though she's moving at near walking speed!
	$LF
]p
[p 
	"NTSC: If forward is pressed from frame 0 and on, dash should be pressed on frames 25, 50, 70, and 85. On frame 85, both dash and down can be pressed together and Samus will charge her speed in preparation for a shinespark.
	$LF
	"PAL: If forward is pressed from frame 0 and on, dash should be pressed on frames 20, 40, 60 and 70. On frame 70, both dash and down can be pressed together and Samus will charge her speed in preparation for a shinespark.
	$LF
	"Once unleashed, the shinespark travels at full speed, even though Samus was hardly running previously! This allows charging the shinespark in areas that do not have enough running room to charge up normally.
	$LF
]p
[p 
	"The distance can be made even shorter by using a type of "stutter-walk" during the first 24 frames (NTSC) / 19 frames (PAL). This is done by releasing the forward button following a certain pattern. Samus will be able to achieve the first level of boost in almost no distance at all, and from there the technique is the same. The patterns are:
	$LF
]p
[p 
	"NTSC — press forward for 3 frames, release, 3 more, release, 3 more, release, 4 more, release, 7 more, release (3-3-3-4-7-). The minimum distance required to charge the spark using this technique is 164.25 pixels (165.25 to full stop).
	$LF
	"PAL — TODO: determine a short enough pattern.
	$LF
	"Note: These patterns might not be the shortest overall, but they are the shortest ones known at the moment. It is not yet known what exactly determines their length, so you are encouraged to try understanding the mechanism behind it or at least to search for shorter patterns. If you are not an editor, share your thoughts in the discussion thread.
	$LF
	"Wrapping beam shots around
	$LF
	"Doors on the far left of a room can be triggered by firing a shot diagonally off the far right side of the room, at the same height as the door. Charged Wave/Spazer and uncharged or charged Wave/Plasma are known to work. Beams disappear as soon as they're offscreen, so the beam must be at full width as it reaches the edge of the screen in order to trigger the door. You should hear the opening sound of the door if done correctly. This generally does not work firing left to open a door on the right, but under extremely specific circumstances it might be possible.
	$LF
	"SMV demonstration.
	$LF
]p
[p 
	"Passing through solid objects/surfaces
	$LF
	"Samus's positioning and block collision checks can be abused over and out due to numerous quirks including crouching, shinesparking or the X-ray climb.
	$LF
	"Jumping through ceilings
	$LF
	"At the right height below a thin (one-block) ceiling, Samus can jump through it by jumping straight up while kneeling. A correctly-placed frozen enemy can be used as a platform as well. It works because crouching prior to the jump makes Samus start it about half a block above the ground, effectively placing her inside the ceiling.
	$LF
	"SMV demonstration.
	$LF
]p
[p 
	"Horizontal platforms thinner than a full block can be passed through simply by jumping straight up through them if the vertical speed is sufficient.
	$LF
]p
[p 
	"TODO: add a demo here.
	$LF
]p
[p 
	"Falling through thin floors
	$LF
	"Floors that are thinner than a full block can be passed through by having Samus unmorph or stand up in a place with not enough room vertically. Since collision check while unmorphing/standing up gives a priority to the upper side of her hitbox, the lower side sinks into the ground, allowing Samus to pass through a thin floor. This is used to enter the Maridia tube from the outer side without breaking it.
	$LF
	"SMV demonstration.
	$LF
]p
[p 
	"Passing through robots
	$LF
	"Robots on the Wrecked Ship can be passed through if Samus is invincible from recently taking damage and the robot is moving toward her.
	$LF
	"See also: kagoball.
	$LF
]p
[p 
	"Passing through Zebetites
	$LF
	"To pass through the first Zebetite in Tourian, you must take damage for the invincibility effect (therefore you �443�must disable Screw Attack�444�). Freeze the lower Rinka (fireball) as soon as it spawns, and then spinjump onto it to "land" on it. This will push Samus to the left very slightly, but enough to jump straight up and walk through the Zebetite provided you are still invincible. The remaining three Zebetites will not appear.
	$LF
	"SMV demonstration.
	$LF
]p
[p 
	"The other way to pass through the Zebetite is to diagonally shinespark beneath it. After the crash animation ends, Samus will end up inside the pillar; after that you need to jump up and aim downwards, jump up again and finally walk or damage boost through the Zebetite.
	$LF
]p
[p 
	"SMV demonstration.
	$LF
]p
[p 
	"X-ray climb
	$LF
	"(AKA "door glitch")
	$LF
	"Known mainly as the door glitch of NES Metroid fame, this technique allows an incredible amount of sequence breaking and traveling out-of-rooms possibilities.
	$LF
]p
[p 
	"To execute it, get yourself stuck in a door (by trying to walljump off of it from the other room) or an array of self-restoring blocks, crouch and enable X-ray scope, then turn around and immediately release dash button. If you do it before the turnaround animation is finished, Samus will be forced to stand up upon turning around with her vertical position shifted up by 5 pixels. By crouching and repeating the process, you can wrap around the screen, travel out-of-rooms and do other interesting things, including 6% runs and no-boss runs.
	$LF
]p
[p 
	"The optimal way to x-ray climb is to repeat the following (starting from a crouched position): press run for 11 frames, then backward for a frame, then down for a frame, and wait 4 frames.
	$LF
]p
[p 
	"SMV demonstration
	$LF
]p
[p 
	"Exploiting enemies
	$LF
	"Despite being inherently harmful, enemies and most other hazards that deal collision damage can be abused in many ways to ease traveling, gaining speed, and other things.
	$LF
	"Enemy knockback
	$LF
	"Most easily exploited on spikes, but possible during any hit, enemy knockback will send Samus flying at high speed in the direction opposite to the one she is facing at the moment of being hit. To perform this trick, you must be hit by an enemy and enter the "ouch" animation. There is a window of 4 frames (the first two frames of the "ouch", and two frames before it) during which you must press and hold the jump button and backwards. She will continue to fly backwards until either of these buttons are released, or until she lands on solid ground (in which case she will instatly turn in the direction she was flying).
	$LF
	"This technique is quite robust; depending on the direction and height the collision takes place at, and timing of pressing jump, enemy knockback can start higher or lower, and go shorter or farther. Experiment depending on the situation.
	$LF
]p
[p 
	"Passing through enemies unharmed
	$LF
	"If an enemy is taking damage at the moment its and Samus's hitboxes collide, the hit will not be registered. However, there is little to no chance that Samus will have enough speed to pass the enemy's hitbox by the time it finishes taking damage. By shooting an enemy with a plasma beam, it will become intangible for a number of frames, thus allowing Samus to pass through it easily until that timer runs out and beam finishes colliding with the enemy's hitbox.
	$LF
	"Note that the enemy that Samus is passing through doesn't need to be actually harmed by the plasma shot to be rendered harmless.
	$LF
]p
[p 
	"SMV demonstration.
	$LF
]p
[p 
	"The effect won't work on solid damage sources and enemies that eject Samus out of their collision zone (Mother Brain is an example of such enemy).
	$LF
]p
[p 
	"The same can also be done using power bombs, but in that case the enemy must be harmed in order to be rendered intangible.
	$LF
]p
[p 
	"Screw Attack invincibility cancel
	$LF
	"After being hit, Samus is invincible for a brief amount of time. In certain situations, it may be desirable to take damage as fast as possible. Using the Screw Attack will cancel any damage invincibility and allow Samus to get hit again much faster.
	$LF
	"Note: This only happens if there are active enemies in the room. If there are no active enemies, such as a room with only spikes, Screw Attack will not disable invincibility after being hit.
	$LF
]p
[p 
	"Avoiding cooldowns
	$LF
	"There are situations when you have to wait for a certain weapon-related effect to "wear off" until you regain full control of Samus and her weaponry. There are several ways to bypass such effects or reduce their duration.
	$LF
	"Grappling beam cooldown cancel
	$LF
	"Each type of weapon has a certain time span, during which it renders Samus's gun inactive (see "cooldown timer" in the RAM address table). After the cooldown timer is activated, no other weapon can be used, including bombs. However, it does NOT include the Grappling beam. The grapple can be used immediately after it is selected, and in the right situation, can hit certain enemies or open doors a few frames faster, since this delay is no longer present.
	$LF
	"Shinespark crash animation cancel
	$LF
	"It is possible to cut 31 frames off the usual shinespark crash animation by using a powerbomb shield. It will work only on the second and subsequent sparks, and only until you leave the room.
	$LF
	"SMV demonstration.
	$LF
]p
[p 
	"Entering green gates backwards
	$LF
	"(AKA "green gate glitch", "GGG")
	$LF
	"This can only be done when a gate can normally be opened from the left. By jumping at the gate, aiming diagonally up, and shooting a Super Missile in mid-air, a green gate can be opened from the wrong side.
	$LF
]p
[p 
	"SMV demonstration.
	$LF
]p
[p 
	"Drewseph claims this trick can also be done with a gate facing right, provided the speed is sufficient. Unfortunately, none of such gates in SM have enough flat ground to accelerate before them.
	$LF
]p
[p 
	"Crystal Flash
	$LF
	"(AKA "CF")
	$LF
	"The Crystal Flash is a way to gain back energy at the expense of weapons. To perform a Crystal Flash, drop a power bomb, and hold the weapon button, the "down" direction, L, and R. The bomb will explode, and a few seconds later, Samus will be encased in a white ball as her energy fills.
	$LF
]p
[p 
	"The prerequisites for this technique are 10 or more Missiles, 10 or more Super Missiles, 11 or more Power Bombs, and 50 or less energy (with empty reserve tanks).
	$LF
]p
[p 
	"Note: It is possible to do the Crystal Flash with only 10 (or even less) power bombs, which might be useful if you want to keep the amount of Power Bomb tanks picked up as low as possible. This, however, requires that the power bomb you drop to initiate the Flash kills an enemy which drops a bomb refill. If you manage to pick it up it and return to the initial position (where you dropped the bomb) in time, the Flash will start. Obviously, you won't be able to use this workaround in rooms that have no enemies in them.
	$LF
]p
[p 
	"Charge beam combos
	$LF
	"(AKA "powerbomb shield", "beam shield", "SBA")
	$LF
	"Various beams can be deactivated temporarily. By activating only the Charge beam and any other beam, and selecting the power bomb icon, Samus can use a variety of special attacks simply by charging the beam. The type of attack will depend on the beam selected and they all do 150 damage. The attack will be unleashed once the charge counter (see RAM address table) reaches 120 (in other words, after two seconds the button is pressed).
	$LF
]p
[p 
	"Ice: This combo causes four small ice crystals to circle Samus. The crystals will disappear when they strike an enemy, but they inflict moderate damage. Any remaining crystals will fly straight outward on the 20th repetition of the sound effect.
	$LF
]p
[p 
	"Wave: This combo creates four small purple projectiles. If Samus is standing still, the projectiles oscillate in the shape of an X. If she is moving, they will orbit her in a wave pattern. The projectiles are very powerful but vanish after striking an enemy. Any remaining projectiles will vanish partway through the 10th repetition of the sound effect. By far, the most effective combo.
	$LF
]p
[p 
	"Spazer: This combo creates two groups of three needle-like projectiles (similar to Spazer beam shots). They start just above Samus' head, circling down below her, then circling high above her, and finally raining straight down and vanishing. They are powerful, but disappear after striking an enemy.
	$LF
]p
[p 
	"Plasma: This combo causes four large green circular projectiles to circle around Samus. The projectiles start near her, then move outward, inward, and fly away. They inflict a great deal of damage and, like the Plasma beam itself, cut straight through enemies.
	$LF
]p
[p 
	"Glitched beams
	$LF
	"A glitched beam is a side-effect of having both Spazer and Plasma equipped at the same time. It is done by placing the selection box on either of the boot upgrades, then pressing left and A simultaneously. Be warned, though: the beams are very buggy (can corrupt the game cart's SRAM, for example) and should be used with great caution.
	$LF
	"Kejardon says:
	$LF
]p
[p 
	""The beams use a simple index to find just about all their relevant data, and so when you overflow the index (which happens with any combination of plasma + spazer), the game starts pulling data and code from essentially random locations. What it does from there is anyone's guess. No, let me rephrase that — what it does from there, nobody can guess. The only way to know would be to read the game's programming."
	$LF
]p
[p 
	"Murder beam
	$LF
	"Usage: charge your beam and go to the menu, then equip all five beams. Exit the menu and fire it while facing straight to the left. Dispatching it in any other direction will crash the game. Shooting it uncharged will crash the game. 
	$LF
	"Effect: the result of a dispatched murder beam is a kind of an area-of-effect weapon that is considered charged power-bomb damage-type beam that can freeze, go through enemies and through walls. Different enemies react to this damage differently, so experiment in each case. It is known that it deals 200 damage per 16 in-game frames to Mother Brain, though. 
	$LF
	"Known applications: Mother Brain's 3rd form, Ridley, Golden Torizo.
	$LF
	"By far, the most useful glitched beam. It is commonly used in unassisted speedruns to speed up Mother Brain's 2nd & 3rd forms kill.
	$LF
]p
[p 
	"Space/time beam
	$LF
	"(AKA "ISP beam")
	$LF
	"Usage: equip Ice, Spazer and Plasma (Charge optional), shoot anywhere. 
	$LF
	"Effect: …is pretty much unpredictable. The S/T beam is considered bomb damage-type beam that can freeze and go through enemies, but its main feature is corrupting the game's memory (differently, depending on where and how you dispatched the beam). This is a severe hardware glitch that can destroy the game's SRAM, crash it or produce very interesting results that differ on different emulators. Unless you're dispatching it at point-blank to a solid surface, the game will lag heavily. Experiment at your own risk. 
	$LF
	"Known applications: out-of-room traveling, triggering Zebes's explosion, resetting picked up items and room statuses.
	$LF
]p
[p 
	"TODO: Show these applications.
	$LF
]p
[p 
	"One interesting application this beam allows is bypassing the point of no return in Tourian and exiting it backwards.
	$LF
]p
[p 
	"YouTube video.
	$LF
]p
[p 
	"Note: triggering Zebes's explosion does not work on Snes9x. Also, dispatching a bomb spread during the effect helps to ease the lag.
	$LF
]p
[p 
	"Chainsaw beam
	$LF
	"Usage: equip Wave, Spazer and Plasma, shoot anywhere at point-blank (shooting straight up doesn't work). Works with Charge beam equipped, too, but that removes the chainsaw beam's only significant advantage — see below. 
	$LF
	"Effect: destroys beam-destroyable blocks, opens blue hatches. The beam is considered super missile damage-type, possesses a high rate of fire (similar to that of the Grappling beam), but very limited range, and it doesn't deal actual damage. 
	$LF
	"Known applications: nothing useful is known so far.
	$LF
	"SMV demonstration.
	$LF
]p
[p 
	"Any other combination involving Spazer+Plasma
	$LF
	"Effect: simply crashes the game. Thus, only these three glitched beams are known.
	$LF
	"Specific Boss Tricks
	$LF
	"Bomb Torizo
	$LF
	"You can escape Torizo by the use of shoulder pumping, walljump trigger pickup and very precise positioning.
	$LF
	"The door timer (RAM address 7EDE6A,1u), before it starts the countdown, oscillates between "1" and "2" each frame. Depending on what the value is by the time of triggering the bombs, you'll get either 41 or 42 frames to escape once you regain control. You need 42 — it will not work with 41.
	$LF
]p
[p 
	"Then, you should pick up the bombs by using the walljump check, meaning you have to press away from them at the maximum possible distance (horizontal position 180.xxxxx is recommended). Picking up the bombs farther than 180.65535 will put you at 180.65535 regardless; this is the best you can hope for.
	$LF
]p
[p 
	"You should land immediately after you take the bombs. Ideally, you should have only one frame of air movement before you land. You can check it by pressing and holding shoot button before the control over Samus is regained: if she still has time to unspin before landing, try to take the bombs lower.
	$LF
]p
[p 
	"Upon landing, start running with 30 Hz shoulder-pump immediately, and jump at the last possible frame that allows you to clear the corner and get stuck in the door. If you get stuck at horizontal position of 28.0, everything is alright. If more, something is wrong.
	$LF
]p
[p 
	"After you succeed in getting 28.0, just load a state at the moment of the final jump and press away from the door when you come close enough to it (usually less than x=36.0). If everything is alright, you'll catch the trigger before the door slams shut.
	$LF
]p
[p 
	"SMV demonstration.
	$LF
]p
[p 
	"TODO: Port Kriole's method here, since it's faster and easier to do.
	$LF
]p
[p 
	"The trick also works on the PAL version, but due to differences in event timing, you have much greater margin of error. It apparently is enough to be feasible on console (although still requires very good timing).
	$LF
]p
[p 
	"Spore Spawn
	$LF
	"Spore Spawn only needs to be fought to get Super Missiles. By getting them in the first room on the right in green Brinstar (by using the mockball or shoulder pumping), this mid-boss becomes useless. Even the Super Missile expansion that Spore Spawn was supposed to guard can be collected by entering the chamber through its exit with an appropriately timed Super Missile, or by using the Crystal Flash in the chamber.
	$LF
	"Kraid
	$LF
	"Kraid can be killed before fully coming out of the ground with four super missiles or three super missiles and one missile. If you move forward during the last shot, the projectile will connect with Kraid faster, resulting in a faster kill. A charged Wave+Plasma shot can also speed up the battle if Kraid is fought after Draygon.
	$LF
	"Note that the screen will not fully scroll if Kraid is killed during the first phase, but leaving the room through either door will fix this.
	$LF
]p
[p 
	"Crocomire
	$LF
	"Saving Crocomire until after you get the plasma beam makes the fight a breeze. One charged Ice+Wave+Plasma shot will hit him enough times to send him crawling all the way back into the lava.
	$LF
	"Phantoon
	$LF
	"Phantoon can also be hit more times than normally allowed by using the Doppler effect — running forward very slowly (see "stutter walking" under Charge shinespark in shorter distance) while constantly firing missiles. With enough missiles (and one super missile at the end), Phantoon can be killed in one round.
	$LF
	"SMV demonstration.
	$LF
]p
[p 
	"In fact, as much as a single missile pack is enough for the task.
	$LF
]p
[p 
	"SMV demonstration.
	$LF
]p
[p 
	"Botwoon
	$LF
	"10 super missiles will take down this miniboss, but four can be substituted by using a Wave SBA. Both techniques allow killing him in one round under TAS conditions, however only the latter allows the same in realtime play.
	$LF
	"Draygon
	$LF
	"Draygon is a unique boss in the way that he takes damage from Samus during a shinespark — 150 damage per frame (as much as 2400 damage can be delivered in a single charge). Using this property, Draygon can be killed in two rounds by combining 
	[a class=intlink href=/SuperMetroidTricks#ChargeBeamCombos 
		"Wave SBAs
	]a
	" and shinesparking through him, with super missiles used as necessary.
	$LF
	"SMV demonstration.
	$LF
]p
[p 
	"Draygon can also be killed quickly by abusing the X-Ray Scope together with the Plasma beam, which, however, requires you to obtain Plasma before killing Draygon, which may be infeasible in a speedrun.
	$LF
]p
[p 
	"SMV demonstration.
	$LF
]p
[p 
	"Finally, if Draygon is killed via shinespark, the variable that determines whether or not Samus is "blue" is not reset. In this state, a new shinespark can be charged simply by ducking. The drawback to the blue suit is that it is lost by pressing the dash button. In the existing runs on the site, the blue suit glitch is used to shinespark along the top of the large room just two rooms outside Draygon's lair.
	$LF
]p
[p 
	"Golden Torizo
	$LF
	"Each charged plasma shot can register two hits if Samus is ducking nearby and shooting straight up (press L and R at once to do so). During one of the Torizo's jumps, the beam will register two hits with just an up-angled shot.
	$LF
	"Keep in mind that Golden Torizo is able to dodge regular missiles and catch supers. While the latter can be bypassed by spamming them while he prepares to throw the caught missile back, the former can be used to temporarily interrupt his attacks.
	$LF
]p
[p 
	"However, if you aren't going for 100% item collection, it is advisable to simply skip this fight. It's possible (and is even faster) to take Screw Attack from behind, anyway.
	$LF
]p
[p 
	"Ridley
	$LF
	"When Ridley's health hits 0, he will die the next time he grabs you, but you often have to wait for his AI to decide to do so. Placing a power bomb will instantly cause Ridley to attempt to grab Samus, however, allowing you to end the fight quicker.
	$LF
	"On the other hand, you don't have to be grabbed if you don't want to: Ridley will still die all alone after several seconds.
	$LF
]p
[p 
	"Mother Brain
	$LF
	"The Mother Brain fight is divided into three distinct phases, each with separate energy count:
	$LF
	"First form — 3000 energy units. Harmless by itself. Requires breaking the glass before the actual damage can be dealt. When energy reaches zero, the room is locked in a single screen.
	$LF
	"Second form — 18000 energy units. The fastest way to deal with this form is shooting charged Ice+Wave+Plasma. Murder beam is slower both in-game and in realtime. When energy reaches zero, Mother Brain starts shooting the beam that drains Samus's ammo and energy, which initiates the metroid cutscene.
	$LF
	"Third form — 36000 energy units. The damage is dealt as soon as the energy count is reset, if any of the methods listed below are used. When energy reaches zero, Mother Brain dies.
	$LF
	"It is possible to have Mother Brain's energy drained away right at the start of the third phase while Samus is supposed to be uncontrollable; it requires shooting the Murder beam right before Mother Brain delivers her last beam attack. After you acquire the Hyper Beam, it will take only 1-2 shots to finish her off.
	$LF
]p
[p 
	"Note that, while this method is preferred if you're aiming solely for lower in-game time, it is much slower (and uglier) in realtime due to heavy lag and having to enter the menu at least once.
	$LF
]p
[p 
	"SMV demonstration.
	$LF
]p
[p 
	"With enough energy, it is also possible to retain control of Samus during the metroid cutscene. All that is needed is having 700 to 999 energy (must be current energy, not in reserves) and de-equipping the Varia Suit before Mother Brain uses her final attack. The game will still attempt to put Samus into the kneeling pose a few times during the cutscene, but this can be circumvented by being in mid-air each time the game attempts to enforce Samus's pose.
	$LF
]p
[p 
	"Even with the metroid on you, you can still attack Mother Brain by firing point blank. However, the metroid stops following Samus as soon as she has full health, though it will teleport to her again when Mother Brain attacks it.
	$LF
]p
[p 
	"TODO: add an SMV demonstration.
	$LF
]p
[p 
	"Malicious bugs and glitches
	$LF
	"While Super Metroid has an enormous amount of useful bugs and glitches, some of them should be avoided as they can interfere with the play, crash the game, or have other unwanted effects.
	$LF
	"Springball lock
	$LF
	"If you morph in midair instead of on the ground or through mockball, you lose the ability to control the height of a springball jump. Even if you unmorph during such jump, Samus will continue rising. It has no known benefits as of now — thus, springball jumps should only be done after prior mochballing.
	$LF
	"Shinespark glitches
	$LF
	"(AKA "Things not to spark into".)
	$LF
	"There are several objects and environments that do not cope too well with Samus's ability to shinespark. They include:
	$LF
]p
[p 
	"Lava and quicksand
	$LF
	"Effect: Samus will move at a pathetically low speed (about 0.11 px/f) with her energy drained as usual, until she runs out of it (then the game might crash regardless). Note: the speed will vary depending on how deep Samus is submerged (compare: the same lava demo, but two pixels higher).
	$LF
	"Mother Brain
	$LF
	"Effect: energy depleted at a very fast rate.
	$LF
	"Yapping Maw.
	$LF
	"Effect: game crashes.
	$LF
	"Mechanics of the in-game timer
	$LF
	"(paraphrased from moozooh)
	$LF
	"Super Metroid keeps track of completion time to display upon completion of the game. The timer does not run at all times, however. The main goal of the in-game timer is to measure the length of the actual play, as opposed to sequences that do not involve input.
	$LF
]p
[p 
	"The in-game timer stops for the following:
	$LF
]p
[p 
	"Door transitions
	$LF
	"Item acquisition message boxes
	$LF
	"Frames of lag
	$LF
	"Pause screens (but ONLY after complete fadeout; thus, it is impossible to save any time by pausing)
	$LF
	"Ceres station exploding animation
	$LF
	"The in-game timer does not stop for the following:
	$LF
]p
[p 
	"X-ray scope
	$LF
	"Elevator rides (except for small portion)
	$LF
	"Refilling energy from reserve tanks (when done without pausing)
	$LF
	"Refilling energy in Samus's ship
	$LF
	"Crystal flash
	$LF
	"Due to the nature of the timer, aiming for the fastest frame count does not always coincide with aiming for the fastest in-game timer. There are several techniques that can lower the in-game timer while raising the frame count, such as:
	$LF
]p
[p 
	"Taking routes which have more door transitions, but are shorter within the rooms
	$LF
	"Pausing to disable certain upgrades for sequences that may be faster without them
	$LF
	"Performing lag-causing actions that would be faster (in real-time) if lag were removed (such as the Murder Beam)
	$LF
	"Entering doors at a different height, which will cause the screen to move the door to its appropriate spot before scrolling
	$LF
	"Opposite actions can be taken to have the reverse effect on the timers. The main point is that both timers cannot be satisfied simultaneously in all circumstances. This raises the question, "Which one do I use when making a TAS?" The answer is that it is up to the author's preference.
	$LF
]p
[p 
	"Aiming for frame count exclusively
	$LF
	"Aiming for frame count gives more consistent, but less varying and overall slower action.
	$LF
	"Benefits	 Drawbacks
	$LF
	"Less non-action sequences	 Slowest action sequences
	$LF
	"Less time spent collecting items	 Less items available to vary technique
	$LF
	"Little to no laggy scenes or menu entering	 Lag and menus are not "free" options
	$LF
	"Shorter door transitions	 Optimizing screen scrolling is a concern (if your position at the moment of entering the door is shifted from the center of the screen, it will take much more time to catch up)
	$LF
	"Aiming for in-game timer exclusively
	$LF
	"Aiming for in-game timer gives more waiting, but faster and more varying action.
	$LF
	"Benefits	 Drawbacks
	$LF
	"Fastest action sequences	 Longest in realtime
	$LF
	"More items, which allows more variety in technique during play	 More non-action sequences
	$LF
	"No concerns about using menu screen (that is, as much as needs be)	 More visually redundant scenes ("menu action", etc.)
	$LF
	"No concerns about minimizing lag	 More laggy scenes
	$LF
	"Many authors choose to do a combination of the two timing methods. For example, one author might aim for frame count, but not take extra time to optimize door transitions because he or she thinks it looks sloppy. Another author may aim for in-game timer, but avoid entering the pause menu when unnecessary because he or she thinks it disrupts the flow of the run.
	$LF
]p
[p 
	"It's up to each author to decide what they feel will make the most entertaining TAS.
	$LF
]p
[p 
	"Useful memory addresses
	$LF
	"More memory addresses can be found at Kejardon's RAM Map.
	$LF
	"Address	 Parameters	 Meaning
	$LF
	"7E0AF6	 2 bytes, unsigned	 Horizontal position
	$LF
	"7E0AF8	 2 bytes, unsigned	 Horizontal sub-pixel position
	"[
	[a id=1 
	]a
	[a href=#r1 
		"1
	]a
	"]
	$LF
	"7E0AFA	 2 bytes, unsigned	 Vertical position
	$LF
	"7E0AFC	 2 bytes, unsigned	 Vertical sub-pixel position
	$LF
	"7E0B00	 1 byte, unsigned	 Vertical hitbox radius
	$LF
	"7E0B42	 1 byte, unsigned	 Horizontal speed
	"[
	[a id=2 
	]a
	[a href=#r2 
		"2
	]a
	"]
	", pixels
	$LF
	"7E0B44	 2 bytes, unsigned	 Horizontal speed, fraction of a pixel
	$LF
	"7E0B46	 1 byte, unsigned	 Horizontal momentum
	"[
	[a id=3 
	]a
	[a href=#r3 
		"3
	]a
	"]
	", pixels
	$LF
	"7E0B48	 2 bytes, unsigned	 Horizontal momentum, fraction of a pixel
	$LF
	"7E0B2E	 1 byte, unsigned	 Vertical speed, pixels
	$LF
	"7E0B2C	 2 bytes, unsigned	 Vertical speed, fraction of a pixel
	$LF
	"7E0B3F	 1 byte, unsigned	 Speed boost level
	$LF
	"7E0A68	 1 byte, unsigned	 Shinespark charge timer
	$LF
	"7E0DC2	 1 byte, unsigned	 Beam charge counter
	$LF
	"7E0CCC	 1 byte, unsigned	 Weapon cooldown timer
	$LF
	"7E0BDC	 2 bytes, signed	 Projectile 1 X speed, 1/256th pixels
	"[
	[a id=5 
	]a
	[a href=#r5 
		"5
	]a
	"]
	$LF
	"7E0BF0	 2 bytes, signed	 Projectile 1 Y speed, 1/256th pixels
	$LF
	"7E0B64	 2 bytes, unsigned	 Projectile 1 X position, pixels
	$LF
	"7E0B8C	 2 bytes, unsigned	 Projectile 1 X position, fraction of a pixel
	$LF
	"7E0B78	 2 bytes, unsigned	 Projectile 1 Y position, pixels
	$LF
	"7E0BA0	 2 bytes, unsigned	 Projectile 1 Y position, fraction of a pixel
	$LF
	"7E0BDC	 2 bytes, unsigned	 Projectile 1 X speed, 1/256th pixels
	$LF
	"7E0BB4	 2 bytes, unsigned	 Projectile 1 X hitbox radius, pixels
	$LF
	"7E0BC8	 2 bytes, unsigned	 Projectile 1 Y hitbox radius, pixels
	$LF
	"7E0C86	 1 byte, unsigned	 1st bomb timer
	$LF
	"7E0C88	 1 byte, unsigned	 2nd bomb timer
	$LF
	"7E0C8A	 1 byte, unsigned	 3rd bomb timer
	$LF
	"7E0F8C	 2 bytes, unsigned	 First Enemy's (Most Bosses) energy
	$LF
	"7E0FCC	 2 bytes, unsigned	 Second Enemy's (Mother Brain) energy
	$LF
	"7E0F9C	 1 byte, unsigned	 First Enemy's (Most Bosses) invincibility timer
	$LF
	"7E1842	 2 bytes, unsigned	 In-Game frame counter
	"[
	[a id=4 
	]a
	[a href=#r4 
		"4
	]a
	"]
	$LF
	"7E09DE	 1 byte, unsigned	 In-Game Minutes
	$LF
	"7E09DC	 1 byte, unsigned	 In-Game Seconds
	$LF
	"7E09DA	 1 byte, unsigned	 In-Game Frames
	$LF
	"[
	[a id=1 
	]a
	[a href=#r1 
		"1
	]a
	"]
	": Samus's position and speeds are tracked down to 1/65536th of a pixel, although the effective values are all multiples of 256, ±1.
	$LF
	"[
	[a id=2 
	]a
	[a href=#r2 
		"2
	]a
	"]
	": Speeds and momentums are unsigned. Regardless of which direction Samus is moving, these are always positive.
	$LF
	"[
	[a id=3 
	]a
	[a href=#r3 
		"3
	]a
	"]
	": Momentum and speed together determine how far Samus moves per frame. Momentum often must reach 0 before Samus can stop or change direction.
	$LF
	"[
	[a id=4 
	]a
	[a href=#r4 
		"4
	]a
	"]
	": This value increments by 1 for each frame that counts toward the in-game timer, and wraps at 65536. Useful as a frame-counter when measuring by in-game time rather than absolute time.
	$LF
	"[
	[a id=5 
	]a
	[a href=#r5 
		"5
	]a
	"]
	": Add 2 to the address to get the next projectile's data. Bombs count as projectiles 6-10. Super missiles use up two projectile slots, but the second projectile used can be ignored.
	$LF
]p
[p 
	"Fun stuff
	$LF
	"Dying in Ceres: contrary to the popular belief, it is possible to die that early in the game before it has a chance to blow the station up. Provided by P.JBoy.
	$LF
	"Super Metroid Inanity: series of funny glitches involving Mother Brain. By Kejardon.
	$LF
	"Contributors
	$LF
	"This page is a collaborative effort of the following people:
	$LF
	"Content maintenance — JXQ, Kejardon, moozooh, P.JBoy;
	$LF
	"Demos, advice and other help — Graveworm, hero of the day, Saturn, catnap222, evilchen, BlueGlass, Tonski and others.
	$LF
]p
[hr 
]hr
[p 
	(__wikiLink|/Mmbossman|mmbossman)
	": Ignoring for the moment that this is an unapproved hack that hasn't even been discussed on the forum, you currently have another (faster) submission in queue, and the queue is cluttered enough. Since you're new I'm doing you a favor by canceling this instead of rejecting it, but in the future please take the time to read our 
	[a class=intlink href=/Rules 
		"Rules
	]a
	" and 
	[a class=intlink href=/FAQ 
		"FAQs
	]a
	".
]p
