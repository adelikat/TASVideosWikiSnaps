5
[div class=card mb-2 
	[div class=card-header 
		[strong 
			"Table of contents
		]strong
	]div
	[div class=card-body 
		[ul 
			[li 
				[a href=#Introduction 
					" Introduction
					$LF
				]a
			]li
			[li 
				[a href=#ComparisonMovie 
					" Comparison Movie
					$LF
				]a
			]li
			[li 
				[a href=#SoftwareHardware 
					" Software + Hardware
					$LF
				]a
				[ul 
					[li 
						[a href=#RomInformation 
							" Rom Information
							$LF
						]a
					]li
					[li 
						[a href=#Emulator 
							" Emulator
							$LF
						]a
					]li
					[li 
						[a href=#RoutingBot 
							" Routing Bot
							$LF
						]a
					]li
				]ul
			]li
		]ul
	]div
]div
[h3 id=Introduction 
	" Introduction
	$LF
]h3
[div class=p 
	"I had this game as a kid on one of those bootleged 50000-in-1 carts and would play it on my bootleg Famicom. I didn't really like it back then; it was kinda hard and there were just too many stages. As a grown-up TASer, I always pondered the idea of TASing this game, but it still seemed like a very hard challenge for a couple reasons.
	$LF
]div
[div class=p 
	"First, the current solution by Bisqwit seemed already very optimized. It wasn't clear I could come up with a better solution. Second, my tasing bot (
	[a href=https://github.com/SergioMartin86/jaffarPlus rel=noopener external nofollow 
		"JaffarPlus
	]a
	") uses a breadth-first approach to exploration, which is entirely the wrong approach for this kind of games. That is, games where the action (hitting the cue ball) and knowing its outcome (how the table ends up) are separated in time by several hundred frames.
	$LF
]div
[div class=p 
	"In the end, I decided to give it a try but I knew I had to come up with a different approach. For this, I developed 
	[a href=https://github.com/SergioMartin86/LunarBot rel=noopener external nofollow 
		"LunarBot
	]a
	", a hybrid depth-first-breadth-second brute force bot. Here, I consider strokes instead of frames for the outer breadth-first exploration. Within each stroke, I advance as many frames as necessary to know its outcome. After each stroke, I keep the combination of angles/power that scored the most balls and had least amount of frames.
	$LF
]div
[div class=p 
	"Those who read Bisqwit's submission notes in previous publications know there are many more factors to this challenge. Score rate and tallying is whole drama that I had to factor into the bot. This tallying forces the player to make "suboptimal" shots, just to reduce the rate and prevent bonuses. I went into great lengths in adding heuristics and calibrating the reward function to properly handle this. (For details, see the 
	[a href=https://github.com/SergioMartin86/LunarBot/blob/main/games/nes/lunarBall/explorer.cpp rel=noopener external nofollow 
		"code
	]a
	")
	$LF
]div
[div class=p 
	"Compared to Bisqwit's setup 15 years ago, I count with a much stronger hardware resources and a much more refined software/emulation setup (quickerNES is much faster than anything available back then). This play a determinant role in this taking me a few weeks, compare to the months it took him. 
	$LF
	"Nevertheless, I do feel like making this movie was, above all else, a personal chess-like battle of algorithms.
	$LF
]div
[div class=p 
	"I purposefully went into this not wanting to know the tricks that Bisqwit had applied and only took inspiration from his movie encode. I did not read his sub notes nor did I take a look at his code. I believe the end result came down to the heuristics and daring optimization techniques we both applied. At the end of the day, I truly respect his work and am honored to be the one to obsolete it.
	$LF
]div
[h3 id=ComparisonMovie 
	" Comparison Movie
	$LF
]h3
[div class=p 
	"This movie compares 
	(__wikiLink|href=/1565M|implicitdisplaytext=1565M)
	" with this submission. The old movie finishes certain stages faster. This is because the initial conditions carried on from the previous stage has an effect on the best possible solution. Also emulation differences make it so that executing a shot under the same conditions (angle, position, power, power increase/decrease direction) would result in different outcomes. 
	$LF
]div
[div class=p 
	(youtube|v=V2Sv4MZmJ10)
	$LF
]div
[h3 id=SoftwareHardware 
	" Software + Hardware
	$LF
]h3
[h4 id=RomInformation 
	" Rom Information
	$LF
]h4
[ul 
	[li 
		" Name: Lunar Ball
		$LF
	]li
	[li 
		" ROM: Lunar Ball (J) 
		"[!]
		".nes
		$LF
	]li
	[li 
		" SHA1: AA5C574A4743991A3523DFD78A39D782BEDE262A
		$LF
	]li
	[li 
		" MD5: 26F1B77980A216767EA63C41397476E5
		$LF
	]li
]ul
[h4 id=Emulator 
	" Emulator
	$LF
]h4
[ul 
	[li 
		" EmuHawk 2.10 (Core: QuickerNES)
		$LF
	]li
]ul
[h4 id=RoutingBot 
	" Routing Bot
	$LF
]h4
[ul 
	[li 
		" Bot: 
		[a href=https://github.com/SergioMartin86/LunarBot rel=noopener external nofollow 
			"LunarBot
		]a
		$LF
	]li
	[li 
		" Routing Core: 
		[a href=https://github.com/SergioMartin86/QuickerNES rel=noopener external nofollow 
			"QuickerNES
		]a
		$LF
	]li
	[li 
		" Platform: 
		$LF
		[ul 
			[li 
				" 2 x AMD Epyc 7763 (128 cores, 256 threads) + 512Gb RAM
				$LF
			]li
			[li 
				" Exploration Rate: ~15k shots/s
				$LF
			]li
		]ul
	]li
]ul
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/CoolHandMike 
		"CoolHandMike
	]a
	": Claiming for judging.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/CoolHandMike 
		"CoolHandMike
	]a
	": Watching botted runs of these difficult to optimize games where there is an absolutely massive pool of possibilities is impressive.  Enjoyed this tas with some of the very unlikely shots.   This submission improves on the previous publication by a good amount.  
	$LF
]div
[div class=p 
	"Accepting for Standard.
	$LF
]div
[div class=p 
	"Good work!
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/despoa 
		"despoa
	]a
	": Processing...
]div
