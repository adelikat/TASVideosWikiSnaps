6
[h2 id=Behold! 
	" Behold!
	$LF
]h2
[p 
	"It is time to unleash the ultimate destruction of this piece of interactive game software called Super Mario World!
	$LF
]p
[p 
	(youtube|v=Zr-T-J3nXG8)
	$LF
]p
[h3 id=Gameobjectivesarecomfyandeasytowear 
	" Game objectives are comfy and easy to wear
	$LF
]h3
[ul 
	[li 
		" Emulator used: lsnes rr2
		$LF
	]li
	[li 
		" Win the game
		$LF
	]li
	[li 
		" (very fast)
		$LF
	]li
	[li 
		" 
		[small 
			[a class=extlink href=https://docs.google.com/document/d/1zhwSQzKvBwdEiWku1NEow0IBzNMPiH5FEWRTFsWMHq8 rel=nofollow 
				"details
			]a
		]small
		$LF
	]li
]ul
[h3 id=Saving...donotturnoffth- 
	" Saving... do not turn off th-
	$LF
]h3
[p 
	"Overwriting the bytes in a savegame is not an instant process. Resetting halfway through can result in a corrupted savegame. To try and avoid loading faulty data, most games use a checksum, so does SMW. The checksum is 16 bits and thus can only hold 2^16 = 65536 different values. This means a working corrupted savegame can be created with a well-timed reset.
	$LF
]p
[h3 id=SuperSRAMWorld 
	" Super SRAM World
	$LF
]h3
[p 
	"Loading corrupted savegame data itself does not crash the game or lead to any dangerous codepaths.
	$LF
]p
[p 
	"However, a corrupted submap value will make the game load graphic bytes from various locations (and one of those locations can be SRAM itself). Having corrupted graphics doesn't crash the game, but important here is how the game first decompresses the data into a buffer in memory ($7E:AD00). There are no checks for the bounds (only 0xC00 = 3072 bytes are allocated), so we can buffer overflow bytes all the way to $7F:8000 where SMW stores its OAM clearing routine, which runs every frame when there are sprites on the screen.
	$LF
]p
[p 
	"Of course, we're not only able to overwrite the data with random values, we can actually overwrite the bytes with arbitrary code.
	$LF
]p
[h3 id=ArbitraryCodeExecution? 
	" Arbitrary Code Execution?
	$LF
]h3
[p 
	"Arbitrary Code Execution.
	$LF
]p
[h3 id=Therearelikeafewdozenframes,whichoneisthebest? 
	" There are like a few dozen frames, which one is the best?
	$LF
]h3
[p 
	"There are at least 3 interesting ones (check the credits), but to avoid spoilers I'll just give you this one.
	$LF
]p
[p 
	[img class=embed src=https://i.imgur.com/rC2lTa3.png 
	]img
	$LF
]p
[h3 id=Sothere's"dirty"SRAM?Tellme,whatis"clean"SRAM? 
	" So there's "dirty" SRAM? Tell me, what is "clean" SRAM?
	$LF
]h3
[p 
	"The 
	[a class=intlink href=/2926M 
		"current
	]a
	" published run 
	[a class=intlink href=/Forum/P/453965#453965 
		"relies on a SRAM byte to have a specific value
	]a
	" for it to work. It just so happens that our accepted SNES emulators fill the SRAM with the required byte.
	$LF
]p
[p 
	"If the current run is allowed to be on this site, then this new run, which relies on SRAM intialization as well, has to be accepted.
	$LF
]p
[p 
	"Is filling the memory with a single byte "cleaner" than filling it with somewhat random data? This particular run goes the extra mile and also includes a payload, but remove the payload and you will get a crash which can in theory lead to controller registers, and to the credits all over again, extending this run by a few frames.
	$LF
]p
[p 
	"If this run is rejected, is the current run faulty as well?
	$LF
]p
[hr 
]hr
[p 
	[a class=intlink href=/Users/Profile/Nach 
		"Nach
	]a
	": This run is in violation of the 
	[a class=intlink href=/MovieRules#WeDoNotAllowSaveAnchoredMovies 
		"various
	]a
	" 
	[a class=intlink href=/MovieRules#NoRandomizedOrUnverifiedCustomInitialRamState 
		"rules
	]a
	". Rejecting.
]p
