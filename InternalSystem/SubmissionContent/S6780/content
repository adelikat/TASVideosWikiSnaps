14
[div class=p 
	"Castlevania III is a gothic horror themed platformer by Konami for the NES. 
	$LF
	"This movie obsoletes the current wrong warp run on the U version by 3161 frames, or about 52.6 seconds through new tricks and strategies.
	$LF
]div
[h3 id=GameObjectives 
	" Game objectives
	$LF
]h3
[ul 
	[li 
		" Emulator used: BizHawk 2.3.0, NESHawk Core
		$LF
	]li
	[li 
		" Takes Damage to Save Time
		$LF
	]li
	[li 
		" Uses Death and Game Over to Save Time
		$LF
	]li
	[li 
		" Manipulates Luck
		$LF
	]li
	[li 
		" Genre: Platform
		$LF
	]li
]ul
[h3 id=Comments 
	" Comments
	$LF
]h3
[div class=p 
	"Castlevania III is a tie-in game by Konami for the hit animated television series of the same name.
	$LF
	"This run uses a secret bonus character who was likely included by the developers as an easter egg.
	$LF
	"He seems to have been kinda rushed and not very well implemented as there is a large warp glitch that allows bypassing most of the game with him.
	$LF
	"This run saves 3161 frames, or about 52.6 seconds over the previous run by arandomgameTASer, Samsara and Mothrayas through new tricks and better strategies.
	$LF
	"Like the previous run, this run uses the USA version of the game as it facilitates the warp glitch.
	$LF
	"There was also a new trick found by the RTA community involving Grant which is exclusive to the U version, which saves several seconds over the course of this run.
	$LF
	"There is a number of significant differences between U and J.
	$LF
	"Most importantly, instead of Grant's throwing dagger, he only has a stabbing dagger with a tiny range.
	$LF
	"It is still a fairly convenient attack due to its low start lag and fast attack speed.
	$LF
	"In addition, the game has been made substantially harder in a number of ways, especially Dracula himself.
	$LF
	"Details are outlined in the comments below.
	$LF
]div
[h3 id=Tricks 
	" Tricks
	$LF
]h3
[h4 id=SubweaponCancelling 
	" Subweapon Cancelling
	$LF
]h4
[div class=p 
	"By pressing the attack button on the right frame, the throwing animation for projectile attacks can be skipped. This works by pressing the attack button...
	$LF
]div
[ul 
	[li 
		" ...immediately after crouching (Grant's Throwing Dagger (J), Alucard's Fireballs)
		$LF
	]li
	[li 
		" ...on the frame you're walking off a ledge
		$LF
	]li
	[li 
		" ...on the frame you're landing on the ground
		$LF
	]li
	[li 
		" ...when dismounting stairs as the camera scrolls vertically
		$LF
	]li
]ul
[h4 id=SkippingForcedCrouch 
	" Skipping Forced Crouch
	$LF
]h4
[div class=p 
	"By attacking on the right frame in midair, you can skip the forced crouch animation when landing from a high ledge
	$LF
]div
[h4 id=VerticalScreenWrappingNew 
	" Vertical Screen Wrapping (New!)
	$LF
]h4
[div class=p 
	"This trick was discovered by KutsuShita.
	$LF
	"If you're in midair and attack with Grant's dagger, approaching a wall and letting go of Right immediately as you touch the wall will zip Grant upwards by 128 pixels with a lot of vertical momentum.
	$LF
	"This can be used to instantly go to the other half of the screen or do huge vertical leaps.
	$LF
	"If you are on the top of the screen, you wind up at the bottom, if you are on the bottom of the screen,
	$LF
	"you wind up at the top.
	$LF
	"It only works facing right.
	$LF
	"If you do it at the wrong position, Grant may up below the screen and die.
	$LF
	"This trick is the reason why I wanted to do the run.
	$LF
]div
[h4 id=EnteringCeilings 
	" Entering Ceilings
	$LF
]h4
[div class=p 
	"Jumping into a ceiling will add 32 subpixels to Grant's horizontal possition, irrespective of any walls in his way.
	$LF
	"This can be used to clip into walls by jumping into an inner corner several times.
	$LF
	"It is not possible to move right up to a wall to do it in one jump because Grant will try to cling to the wall.
	$LF
	"Instead, with optimal subpixel positioning, 5 jumps are required to get into a ceiling.
	$LF
]div
[h4 id=HorizontalScreenWrappingNew 
	" Horizontal Screen Wrapping (New!)
	$LF
]h4
[div class=p 
	"At the left or right edge of the screen, Grant can interact with walls on the other side.
	$LF
	"This allows him to wrap the screen horizontally by pulling himself up a corner.
	$LF
	"This is normally not useful because it's hard to get to the edge of the screen quickly, but some exceptions exist.
	$LF
]div
[h3 id=Warp 
	" The Warp
	$LF
]h3
[div class=p 
	"This is the big one. 
	$LF
	"By dismounting from the stairs in BLK-4-01 and walking through the glitched worlds, it is possible to wrong warp to the final stage, saving a huge amount of time.
	$LF
	"During the course of the making of this run, I tried to figure out the wrong warp to understand what is going on.
	$LF
	"While I didn't discover any of this, here is a write up detailing its workings.
	$LF
	"The wrong warp is effectively an errant write, writing an unexpected value to an unexpected location in memory.
	$LF
	"Get ready for some dry, dry, theory.
	$LF
]div
[h4 id=WhereToWrite 
	" Where to Write
	$LF
]h4
[div class=p 
	"This is the simpler part.
	$LF
	"The culprit code is located at 
	[code 
		"$28132
	]code
	" (loaded in at 
	[code 
		"$8132
	]code
	" during runtime) and is executed whenever a room is loaded or the camera crosses a 64 pixel boundary.
	$LF
	"The code looks like this:
	$LF
]div
[pre 
	"LDY #$00   
	$LF
	"LDA ($00),Y
	$LF
	"STA $07C2,X
	$LF
	"BEQ $8178  
	$LF
	"INY        
	$LF
	"LDA ($00),Y
	$LF
	"CLC        
	$LF
	"ADC $09    
	$LF
	"STA $07DA,X
	$LF
	"LDA $0A    
	$LF
	"ADC #$00   
	$LF
	"AND #$01   
	$LF
	"STA $07E0,X
	$LF
	"INY        
	$LF
	"LDA ($00),Y
	$LF
	"STA $07D4,X
	$LF
	"INY        
	$LF
	"LDA ($00),Y
	$LF
	"STA $07E6,X
	$LF
	"INY        
	$LF
	"LDA ($00),Y
	$LF
	"STA $07CE,X
	$LF
	"...
	$LF
	$LF
]pre
[div class=p 
	"Effectively, a pointer to a 5-byte struct is dereferenced and the component bytes are written to
	$LF
	[code 
		"$7C2,X
	]code
	", 
	[code 
		"$7DA,X
	]code
	", 
	[code 
		"$7D4,X
	]code
	", 
	[code 
		"$7E6,X
	]code
	" and 
	[code 
		"$7CE,X
	]code
	", respectively. 
	$LF
	"Either 
	[code 
		"$0
	]code
	" or 
	[code 
		"$1
	]code
	" is also written to 
	[code 
		"$7E0,X
	]code
	" for good measure.
	$LF
	"Ordinarily, the data is somehow related to the enemies, and 
	[code 
		"X
	]code
	" is supposed to be between 0 and 5, writing to a number of 6 byte tables in RAM.
	$LF
	"The value for 
	[code 
		"X
	]code
	" is loaded from a table located at 
	[code 
		"$2840C
	]code
	" (
	[code 
		"$840C
	]code
	" at runtime), containing 32 entries going 
	[code 
		"0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0
	]code
	" and so on, i.e. a 
	[code 
		"mod 6
	]code
	" table.
	$LF
	"This table is indexed by the current camera position divided by 64. 
	$LF
	"However, if the camera position is way out of bounds (above 2048), we read outside of the table and find a value from regular program code.
	$LF
	"If the camera position is between 
	[code 
		"$3540
	]code
	" and 
	[code 
		"$357F
	]code
	", we read from 
	[code 
		"$840C,$D5
	]code
	", which happens to be 
	[code 
		"$70
	]code
	".
	$LF
	"Added to 
	[code 
		"$7C2
	]code
	", this happens to be 
	[code 
		"$7C2 + $70 = $832
	]code
	", which happens to be the same address as 
	[code 
		"$32
	]code
	", the level index.
	$LF
	"In other words, with a specific out-of-bounds camera position, we can corrupt the level index.
	$LF
]div
[h4 id=WhatValueIsWritten 
	" What Value is Written
	$LF
]h4
[div class=p 
	"This part is substantially more complicated, but it also comes down to a combination of camera position and the current room.
	$LF
	"As mentioned, we write data from a 5-byte struct into RAM. 
	$LF
	"These structs are accessed indirectly through a pointer table located at 
	[code 
		"$2A03F
	]code
	".
	$LF
	"We must find a struct where its first byte is 
	[code 
		"$0E
	]code
	", the final level index.
	$LF
	"Fortunately, several such structs exist, at indices 
	[code 
		"$0D
	]code
	", 
	[code 
		"$11
	]code
	" and several others.
	$LF
]div
[div class=p 
	"The next part is then how to access this struct.
	$LF
	"It is accessed like this, immediately before we write the data (see above):
	$LF
]div
[pre 
	"LDA $76    
	$LF
	"ASL A      
	$LF
	"TAY
	$LF
	"...
	$LF
	"LDA ($98),Y
	$LF
	"ASL A      
	$LF
	"BCS $811A 
	$LF
	"TAY        
	$LF
	"LDA $A03F,Y
	$LF
	"STA $00    
	$LF
	"LDA $A040,Y
	$LF
	"STA $01
	$LF
	"...
	$LF
	$LF
]pre
[div class=p 
	[code 
		"$76
	]code
	" is the camera position divided by 64 as before, which is then multiplied by 2.
	$LF
	"The index for the struct is fetched indirectly from a pointer at 
	[code 
		"($98),Y
	]code
	".
	$LF
	"The value of this pointer is determined by the current screen index. 
	$LF
	"Every screen in the game has a unique pointer.
	$LF
	"The pointers for the screens are arranged like this in ROM:
	$LF
]div
[pre 
	"$293F1  Block 0  (Beginning)
	$LF
	"$29401  Block 1  (Clock Tower)
	$LF
	"$29425  Block 2  (Mad Forest)
	$LF
	"$29439  Block 3  (Ship)
	$LF
	"$29451  Block 4  (Death Tower)
	$LF
	"$29463  Block 5  (Bridge)
	$LF
	"$2946F  Block 6  (Swamp)
	$LF
	"$29478  Block 7  (Caves)
	$LF
	"$2948F  Block 8  (Sunken City)
	$LF
	"        <Large Gap...>
	$LF
	"        ...
	$LF
	"$29BF1  Block 9  (Crypt)
	$LF
	"$29BFB  Block A  (Cliffs)
	$LF
	"$29C17  Block B  (Rafters)
	$LF
	"$29C25  Block C  (Entry Hall)
	$LF
	"$29C2F  Block D  (Riddle)
	$LF
	"$29C45  Block E  (Final Approach)
	$LF
	$LF
]pre
[div class=p 
	"As you can see, the pointers for the screens are mostly adjacent to eachother in ROM, save for one large gap in the middle.
	$LF
	"The combination of screen and camera position is used to index the struct pointer table at 
	[code 
		"$2A03F
	]code
	".
	$LF
	"However, we need to have a specific camera position (see above).
	$LF
	"This means that we read from the screen pointer itself out of bounds, but it also limits the number of possible rooms we can use for this.
	$LF
	"Unfortunately, 
	[b 
		"no valid room in the game is practical to use with the camera position that we need
	]b
	". 
	$LF
	"However, the gap in-between those screens is our saviour.
	$LF
	"Most of the bytes in this gap are 
	[code 
		"$00
	]code
	", which means that 
	[code 
		"$98
	]code
	" may be loaded with zero, which allows us to read an index from zero-page!
	$LF
]div
[div class=p 
	"We read from 
	[code 
		"$D5 << 1 = $1AA
	]code
	", so in practical terms, we read a value from 
	[code 
		"$AA
	]code
	" to use as an index for the table of structs.
	$LF
	"The task then becomes finding a way to get the correct index (
	[code 
		"$0D
	]code
	", 
	[code 
		"$11
	]code
	", etc.) into 
	[code 
		"$AA
	]code
	" to read it.
	$LF
	"Unfortunately, again, under normal circumstances 
	[code 
		"$AA
	]code
	" doesn't contain a suitable value.
	$LF
	"We therefore need to repeat this whole process to get 
	[code 
		"$AA
	]code
	" to contain 
	[code 
		"$11
	]code
	", which finally enables the wrong warp to work.
	$LF
	"This is in itself not trivial, but at this point I decided it was simpler to just copy the old route and be done with it.
	$LF
]div
[div class=p 
	"The reason why the previous run and this run both go to the swamp is because, as you can see, the screens for the swamp are physically closer in ROM to the invalid gap: We skip several blocks worth of screens that do not contain usable wrong warps.
	$LF
	"At this point, we simply need to venture enough screens out of bounds to hit a screen that points to 
	[code 
		"$00
	]code
	".
	$LF
	"Another potential approach could be to go out of bounds in the clock tower and use yet more memory corruption to get a large enough screen index to reach the gap early. 
	$LF
]div
[div class=p 
	"I wrote 
	[a href=https://github.com/scrimpeh/cv3tools/tree/master/AkuRomAnaylzer rel=noopener external nofollow 
		"some tools
	]a
	" to find possible rooms and camera positions to find memory corruptions in this game.
	$LF
	"Messy as the code is, it helped immensely in figuring out the possibilities.
	$LF
]div
[div class=p 
	"It is also worth noting that unfortunately, 
	[b 
		"there is no credits warp
	]b
	" using this method. 
	$LF
	"A credits warp would work by setting the gamestate variable 
	[code 
		"$18
	]code
	" to 
	[code 
		"$0C
	]code
	".
	$LF
	"Unfortunately, 
	[code 
		"$0C
	]code
	" only ever occurs in the first byte of the 5-byte structs, but there is no suitable offset to add to 
	[code 
		"$7C2
	]code
	" to get to 
	[code 
		"$81E
	]code
	".
	$LF
	"Knowing this would have saved me a lot of frustration and hours wasted many years ago.
	$LF
]div
[h4 id=InPractice 
	" In practice
	$LF
]h4
[div class=p 
	"In theory, the wrong warp is simple and repeatable:
	$LF
	"Just go to the right screen with the right camera position, and make sure any variables in zero page are set correctly if required.
	$LF
	"In practice, every time the screen changes, other variables are overwritten as well, causing all manner of strange effects and instability.
	$LF
	"In addition, actually getting the correct camera positions is also easier said than done.
	$LF
	"I still haven't fully deciphered how the camera position gets set between screen changes all the time.
	$LF
	"The current wrong warp as it is is an utter miracle, because the specific sequence of room changes it executes happen to be exactly right to prevent the game from freezing or otherwise glitching out with undesired effects.
	$LF
	"I do not know how much research the original discoverer of the glitch did, but it is nothing short of stunning that it is as optimal as it is.
	$LF
	"Not only does the warp work, but it is also repeatable enough that real time runners successfully do it.
	$LF
]div
[div class=p 
	"It still is not trivial however. 
	$LF
	"While the wrong warp itself is repeatable, the screens you come across in the glitched worlds are somewhat based on RNG, so it is very possible to get dismounted from the stairs and die or get stranded in the glitched world.
	$LF
]div
[div class=p 
	"As for the J version of the game, the principles of the wrong warp apply just the same, however, some of the exact values you get are different. 
	$LF
	"The J version is also substantially more unstable, causing freezes and general havoc much more easily.
	$LF
]div
[div class=p 
	"Phew.
	$LF
]div
[h3 id=StageByStageComments 
	" Stage by stage comments
	$LF
]h3
[h4 id=Block1Village 
	" Block 1 (Village)
	$LF
]h4
[div class=p 
	"As usual, the goal for this stage is to get a triple shot holy water to roast the boss with.
	$LF
	"Right off the bat, you see me pick up the dagger.
	$LF
	"This in itself loses 5 frames, but I make up the time later by using the dagger in the vertical climbing section.
	$LF
	"There is no practical time difference, but I was tired of doing the same start over and over again.
	$LF
	"A jump loses 3 frames, unless you jump from close to the edge of a block, in which case it only loses 2 frames.
	$LF
	"Similarly, landing loses 2 frames, unless the ground stops shortly before your feet where you're landing, in which case you save a frame again.
	$LF
]div
[div class=p 
	"I manipulate Medusa Heads out of my way by turning around for a frame.
	$LF
	"When turning, it is generally better to let go of any directional input for a frame first, as you do not move back that way.
	$LF
	"Similarly, I manipulate some zombies to not spawn in my way so I do not need to jump over them. 
	$LF
	"I generally got lucky, and did not need to manipulate a lot to get through this section.
	$LF
]div
[div class=p 
	"The rest of the stage goes as usual.
	$LF
	"The flames on the boss take a random amount of frames to disappear. 
	$LF
	"There can be up to 5 frames between the best RNG and the worst RNG.
	$LF
	"Overall, I save 41 frames over the old run.
	$LF
]div
[h4 id=Block2ClocktowerAscent 
	" Block 2 (Clocktower Ascent)
	$LF
]h4
[div class=p 
	"Some slight changes in approaching certain sections end up saving a few frames each.
	$LF
	"Walking on the large gears for a few frames also saves time.
	$LF
	"It also saves a considerable amount of lag in the final climbing section, because I do not advance the camera as fast.
	$LF
]div
[div class=p 
	"For Grant, I must make sure that he is close to the floor as he dies, because the orb only spawns once he hits the floor.
	$LF
	"Overall, not much to mention about this stage. 54 frames saved, and 95 in total.
	$LF
]div
[h4 id=Block2ClocktowerDescent 
	" Block 2 (Clocktower Descent)
	$LF
]h4
[div class=p 
	"This is where things get fun.
	$LF
]div
[div class=p 
	"Pausing manipulates the Medusa Head to spawn in a different place, so it does not hit me.
	$LF
	"I need to carefully time my pause to minimize lag.
	$LF
	"I save a bunch of time over the old run by having better control of Grant. 
	$LF
	"We also see the first instances of vertical screen wraps, using them to get to the bottom of the screen very quickly.
	$LF
	"Because Grant moves up with a lot of velocity, I need to make sure there's a ceiling below me to grab on to.
	$LF
]div
[div class=p 
	"In the final room, it is faster to destroy the candle and pick up an extra heart than it is to avoid it.
	$LF
	"While it means I need to wait for one heart to tick down, this is better than not being able to trigger the stage end early.
	$LF
	"I also jump into the stage end trigger because it is faster than walking into it.
	$LF
	"Overall, 418 frames were saved in this stage.
	$LF
]div
[h4 id=Block3MadForest 
	" Block 3 (Mad Forest)
	$LF
]h4
[div class=p 
	"I need to carefully plan out my stopwatch usage throughout this section to minimize my jumps.
	$LF
	"Grant loses between 9 and 12 frames for a simple jump, depending on the specifics.
	$LF
	"Overall, I can get by with several fewer jumps than the previous run.
	$LF
	"Taking damage in this section also affects the wrong warp later, so I must make sure to exit this stage with full health.
	$LF
	"Overall, 62 frames were saved in this stage.
	$LF
]div
[h4 id=Block4Swamp 
	" Block 4 (Swamp)
	$LF
]h4
[div class=p 
	"I make use of a different stair dismount method than the previous run.
	$LF
	"Using Grant, I jump with enough height to wind up 4 pixels above the floor, switch to Trevor, and then immediately switch back.
	$LF
	"This causes Grant to stand in the air, allowing him to climb the stairs several pixels high.
	$LF
	"I still need to change to Trevor once to actually clear the end of the stairs, leading to me starting the wrong warp as Trevor.
	$LF
	"Later on, the game changes my character to a glitched Trevor anyway, so it makes no difference for the wrong warp.
	$LF
	"Trevor also climbs up screens about 10 frames faster (although he loses that time when moving down screens again), which also saves a bit of time.
	$LF
]div
[div class=p 
	"The wrong warp you see is the same route as the previous run but with all of the fat trimmed.
	$LF
	"I eliminate several redundant character switches and don't go as far into certain rooms as the previous run.
	$LF
	"Beyond that, as mentioned previously, it all comes down to executing the right sequences of screen changes with the right camera positions to corrupt memory in just the right way that the wrong warp activates without messing up anything vital.
	$LF
	"Immediately as the game level is changed, the stairs beneath Grant's feet disappear and I deathwarp to the final level.
	$LF
	"Overall, the wrong warp is executed 1356 frames faster.
	$LF
]div
[h4 id=BlockAFinalApproach 
	" Block A (Final Approach)
	$LF
]h4
[div class=p 
	"This stage immediately puts me in a difficult spot.
	$LF
	"I need to get an axe, a shot multiplier, and as many hearts as I can muster up to Dracula.
	$LF
	"There are not enough enemies and candles on the way to comfortably get everything I need without unacceptably long detours.
	$LF
	"Enemies drop a heart on every 8th frame.
	$LF
	"In addition, once 4 enemies have dropped a heart, the fifth enemy will drop a subweapon, which is determined by RNG.
	$LF
	"I use this to skip the axe in the first screen and save 238 frames.
	$LF
	"This only exacerbates the crunch for hearts I'm under.
	$LF
]div
[div class=p 
	"The next screen is lag city.
	$LF
	"The Medusa Heads spawning cause an unreal amount of lag, so I stay at the top of the screen to despawn them until the gears are unloaded.
	$LF
	"Again, this starves me of several hearts I would really like, but it saves a whopping 188 frames of lag.
	$LF
	"While the gears are on screen, you cannot really do much of anything, even moving or jumping causes lag.
	$LF
	"Once the gears are gone though, it's smooth sailing and I kill as many Medusa Heads as I can.
	$LF
	"Sometimes, two spawn clumped up together on the same spot.
	$LF
	"You can manipulate the drop timer by pausing to always force a heart drop.
	$LF
	"Thankfully, I did not have to use this.
	$LF
	"It is also worth noting than an axe will only cause the first Medusa Head it hits to spawn a heart, since the others spawn the score bonuses instead.
	$LF
	"They still count toward my shot multiplier though, letting me hit several targets with one axe.
	$LF
	"In the next room, I take more damage to get through the bone pillars faster.
	$LF
]div
[div class=p 
	"In the next section, there is probably the only useful instance of horizontal screen wrapping in the game.
	$LF
	"By manipulating the correct subpixel position and minimizing jumps, Grant can jump into the block right next to the screen edge, jump toward the wall on the left side of the screen and wrap around.
	$LF
	"Not only does this save 75 frames, but it also conveniently puts a pork chop right in my way, which is more than a little handy.
	$LF
]div
[div class=p 
	"The next room also uses a vertical warp to reach the pendulum faster. 
	$LF
	"Lag management is imperative here, as is carefully scrolling the camera in the right way.
	$LF
	"Crouching also helps to reduce lag by a few frames. 
	$LF
	"Finally, I approach Dracula himself...
	$LF
]div
[h4 id=Dracula 
	" Dracula
	$LF
]h4
[div class=p 
	"I experimented with several attack patterns to find the optimal damage cycle.
	$LF
	"Typically, using an animation cancel to throw an axe and then jumping and attacking twice is the fastest method, making short work of Drac 1 and Drac 2.
	$LF
	"Each form of Dracula has 64 HP, but they take differing amounts of damage.
	$LF
	"Drac 1 takes 5 damage per knife, and 7 damage per axe, but stacking multiple sources of damage will often reduce the damage inflicted for some reason.
	$LF
	"It's still worth it, just not as efficient as you might think.
	$LF
]div
[div class=p 
	"Dracula's second form is quite involved. 
	$LF
	"He has 5 heads, all of which have 13 HP. 
	$LF
	"He takes 2 damage from a dagger, and 3 damage from an axe.
	$LF
	"If a head dies, the hitbox for the attack remains active and can damage another head.
	$LF
	"Finding the most efficient way to spread damage while minimizing lag is therefore the goal of the fight.
	$LF
	"I deliberately take damage from Drac 2 to get on the other side of him, which also conveniently reduces lag, probably because Grant's sprite is only visible every other frame.
	$LF
]div
[div class=p 
	"Finally, we get to Drac 3 who is a major PITA.
	$LF
	"His laser beams have been buffed significantly compared to the J version, but the only thing that has been buffed more is the lag.
	$LF
	"While the fight is an easy affair in the J version, minimizing lag is vital and incredibly difficult here.
	$LF
	"I have 16 axes which do 4 damage each, allowing me to finish the fight using just axe throws. 
	$LF
	"The dagger does 3 damage.
	$LF
	"I can also stack multiple attacks on his hitbox, but it's not as convenient as it might seem because I need to wait for the axes to go offscreen before I can attack again.
	$LF
	"The positioning for this is also very precise, making using an animation cancel the only viable option to get two axes on him consistently.
	$LF
]div
[div class=p 
	"The entire fight is also on a timer, due to the platforms.
	$LF
	"I need to finish the fight so I can land on the moving platform on the earliest possible frame.
	$LF
	"The goal is therefore to finish him off while still landing on the platform as early as possible while also minimizing lag.
	$LF
	"I manipulate his lasers to go into the ground always so they disappear as fast as possible.
	$LF
	"While his lasers are active, I stop attacking him for a while to minimize lag.
	$LF
	"Doing anything, moving, jumping or attacking causes lag during this time.
	$LF
	"There is not enough time to eliminate all lag, I do need to have some axes on screen while the lasers are out.
	$LF
	"I make use of damage stacking to get more axes out during the time there is no lag.
	$LF
	"While waiting for his lasers to disappear I can ride out the delay of waiting for the existing axes to leave the screen.
	$LF
]div
[div class=p 
	"Finally, with the final axe, I jump up to the platform just in time, finishing the stage 1230 frames ahead.
	$LF
	"While my final axe throw is later than the previous run, I need to hold the jump button for the entire time I'm moving up to the platform anyway, so it does not delay input end.
	$LF
]div
[h3 id=OtherComments 
	" Other comments
	$LF
]h3
[h4 id=LooseEndsAndImprovements 
	" Loose Ends and Improvements
	$LF
]h4
[div class=p 
	"I investigated the wrong warp for a long time and I'm in awe just how rickety it is.
	$LF
	"Despite all my research, I still cannot rule out that there is a faster method to execute the wrong warp, either by doing a different route in the swamp, or using a new route starting in the clock tower.
	$LF
]div
[div class=p 
	"As mentioned, there is also no credits warp using this method.
	$LF
	"A proper credits warp would therefore need a different glitch, that would likely veer directly into ACE territory on the J version.
	$LF
]div
[div class=p 
	"Finally, the current run is not perfect.
	$LF
	"I lose on the order of about 10 frames in the first stage through bad strategy.
	$LF
	"I should have picked up fewer hearts early, because this spawns a whip upgrade from the candle in the last room of BLK-1-02, which I need to jump over.
	$LF
	"I also duck under a fleaman, waiting for several frames, but it would've likely been faster to take damage from the previous fleaman instead.
	$LF
]div
[div class=p 
	"I also would've liked a triple shot against Dracula, as this would've probably sped up the fight on the order of about 60 frames.
	$LF
	"However, the number of hearts I would've needed to pick up to get a triple shot and to get enough hearts to take advantage of it would've killed that improvement.
	$LF
]div
[h4 id=FinalComments 
	" Final Comments
	$LF
]h4
[div class=p 
	"And that was Castlevania 3. 
	$LF
	"Again.
	$LF
]div
[div class=p 
	"I've been more than a little infatuated with the game for quite a while now, and I'm glad to finally have some sort of understanding of those glitched worlds which mystified me for so many years.
	$LF
	"Big thanks go out to the RTA speedrunning community of the game, in particular KutsuShita for finding the upwarp, as well as Burb, Spriven, SBDWolf, Pianotorious and bogaa.
	$LF
	"I'd also like thank the previous TASers of this game, especially Sanhaim-Grim, Bablo, zggzdydp and arandomgameTASer, Samsara and Mothrayas for their many years of discoveries and findings.
	$LF
	"Special thanks also go out to FerretWarlord for listening to my incessant yelling about this game.
	$LF
]div
[div class=p 
	"Finally, thank you very much for making it this far, and I hope you enjoy the run.
	$LF
]div
[div class=p 
	"-scrm
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/ThunderAxe31 
		"ThunderAxe31
	]a
	": Judging.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/ThunderAxe31 
		"ThunderAxe31
	]a
	": Accepting as improvement over the 
	(__wikiLink|displaytext=current publication|href=/3224M)
	".
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/feos 
		"feos
	]a
	": Pub.
]div
