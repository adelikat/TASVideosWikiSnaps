8
[h2 id=A2600PrincessRescuein06:08.47byMothrayas
 
	" A2600 Princess Rescue in 06:08.47 by 
	[a class=intlink href=/Users/Profile/Mothrayas 
		"Mothrayas
	]a
	$LF
]h2
[p 
	(youtube|v=u6SqyqEFJOc)
	$LF
]p
[h3 id=Gameobjectives
 
	" Game objectives
	$LF
]h3
[ul 
	[li 
		" Emulator used: BizHawk 2.2.1
		$LF
	]li
	[li 
		" Any%
		$LF
	]li
	[li 
		" Fastest death%
		$LF
	]li
	[li 
		" Fastest gameover%
		$LF
	]li
	[li 
		" Abuses death to save time
		$LF
	]li
	[li 
		" Abuses gameover to save time
		$LF
	]li
	[li 
		" Uses glitch warps/stage skipping
		$LF
	]li
	[li 
		" Manipulates luck (random enemy positioning)
		$LF
	]li
]ul
[h2 id=Aboutthegame
 
	" About the game
	$LF
]h2
[p 
	[em 
		"Princess Rescue
	]em
	" is an Atari 2600 homebrew game, programmed by Chris Spry and released in 2013. Princess Not Toadstool has been kidnapped by the evil Not Koopa, and it is up to Not Mario to traverse through the Not Mushroom Kingdom and its networks of overworld settings, underground settings, platforming stages, and castles, as well as breakable blocks containing coins and mushrooms that make Not Mario grow bigger.
	$LF
]p
[p 
	"The setting of this game is most definitely original design and is most definitely not a retelling of Super Mario Bros.
	$LF
]p
[h3 id=Gameplay
 
	" Gameplay
	$LF
]h3
[p 
	"This game has 16 stages across 4 worlds. Each world consists of an overworld stage, underworld stage, sky/platform stage, and a castle stage.
	$LF
]p
[h2 id=Tricks
 
	" Tricks
	$LF
]h2
[h3 id=Generalproperties
 
	" General properties
	$LF
]h3
[ul 
	[li 
		" The game polls input, renders, and updates motion at 20FPS. Input is only accepted every third BizHawk frame.
		$LF
	]li
	[li 
		" The game includes a run button (joypad up), but run speed only applies when the screen is not scrolling. When the screen is scrolling, walking also follows run speed.
		$LF
	]li
	[li 
		" Only two jump heights are possible - normal jump, and run jump. The difference between both jumps still exists even when the screen is scrolling and non-run speed is identical to run speed. However, jump physics are still very limited overall, making some areas very cumbersome to traverse through quickly.
		$LF
	]li
]ul
[h3 id=GameOverskip
 
	" Game Over skip
	$LF
]h3
[p 
	"Every first level of a world can be skipped by game overing, and then holding up during the game over sequence. This causes the game to erroneously select the second level of the world, even though it is not supposed to be accessible yet. While a game over requires three deaths, it's still faster than clearing the stage normally, so it is done in all applicable situations. Therefore, 1-1, 2-1, 3-1 and 4-1 are all skipped in this run.
	$LF
]p
[h3 id=Enemyspawning
 
	" Enemy spawning
	$LF
]h3
[p 
	"Enemy spawning is somewhat random and can be influenced in a number of ways. Firstly, only a limited amount of enemies can be on screen at once, so keeping an enemy (or sometimes two) on screen can be used to prevent other enemy spawns that might get in the way.
	$LF
]p
[p 
	"Secondly, some properties (like vertical spawning place for flying enemies) appear to be randomized, and sometimes a frame delay or two can be used to manipulate a better positioning.
	$LF
]p
[h3 id=Trampolinespawn
 
	" Trampoline spawn
	$LF
]h3
[p 
	"The trampolines in the third stages of every world only spawn once all other sprites are removed from the screen. Therefore, it's important to save time in the areas with trampolines by either removing nearby enemy sprites as soon as possible, or abusing enemy sprite spawning logic to make sure no enemies are spawned around them to begin with.
	$LF
]p
[h3 id=Walljump
 
	" Walljump
	$LF
]h3
[p 
	"Like in Super Mario Bros., touching the walls at the right horizontal and vertical position can make the player character's foot clip into a floor tile, enabling him to jump from it. Compared to the original game, it's much easier to perform, due to the lack of acceleration, less position options, and the fact that the jump input can be buffered in this game.
	$LF
]p
[h3 id=Castleceilingclip
 
	" Castle ceiling clip
	$LF
]h3
[p 
	"When the player character bumps his head into a ceiling in a castle stage, he shifts backwards by a few pixels. By doing this next to a corner, it's possible to clip into a wall and vertically zip through it. Most notably used in 4-4.
	$LF
]p
[h2 id=Stage-by-stagecomments
 
	" Stage-by-stage comments
	$LF
]h2
[h3 id=1-1
 
	" 1-1
	$LF
]h3
[ul 
	[li 
		" Just running into the first Not Goomba until gameover. This makes this run somewhat unique, in that any% also contains both fastest death and fastest game over categories.
		$LF
	]li
]ul
[h3 id=1-2
 
	" 1-2
	$LF
]h3
[ul 
	[li 
		" The area directly after the pipe is the fastest way to kill yourself up to 2-1, so two more deaths are done here to set up for the 2-1 skip.
		$LF
	]li
	[li 
		" The second area also contains a vertical moving platform, which locks itself in place when the player character steps on it. Unfortunately, touching it causes some lag and also can kill a lot of momentum. The time loss is minimized as much as possible, but there's still some delay.
		$LF
	]li
]ul
[h3 id=1-3
 
	" 1-3
	$LF
]h3
[ul 
	[li 
		" Normally, two Not Goombas spawn at the end of the first section which need to be removed before the trampoline appears. However, with some routing of enemies killed/not killed, a Not Koopa prevents the Not Goombas from spawning and causes the trampoline to appear immediately.
		$LF
	]li
	[li 
		" Another vertical moving platform in the second area here. Stepping on top of it costs the least amount of time.
		$LF
	]li
]ul
[h3 id=1-4
 
	" 1-4
	$LF
]h3
[ul 
	[li 
		" A Not Koopa is bypassed in a narrow vertical section by clipping into the left wall to give me room to stomp him from above and move on.
		$LF
	]li
	[li 
		" There's a Not Bowser boss battle in each of these castle stages. Not Bowser is defeated by stomping on him 3 times. There's a slight invincibility period between each jump, but it's brief enough that with some good movement you can bounce off him for repeated hits and defeat him very quickly.
		$LF
	]li
]ul
[h3 id=2-1
 
	" 2-1
	$LF
]h3
[ul 
	[li 
		" Player dies.
		$LF
	]li
]ul
[h3 id=2-2
 
	" 2-2
	$LF
]h3
[ul 
	[li 
		" Yet another vertical moving platform, and an annoyingly placed one too.
		$LF
	]li
]ul
[h3 id=2-3
 
	" 2-3
	$LF
]h3
[ul 
	[li 
		" Again some specific enemy routing is required to get the enemies to show up in the correct places so the trampoline is accessible as soon as possible. At least there's some leeway here.
		$LF
	]li
]ul
[h3 id=2-4
 
	" 2-4
	$LF
]h3
[ul 
	[li 
		" Those ceiling bumps are really annoying, and still are forced to happen quite a few times even after minimizing them, but it's still optimal to just let them happen. Trying to reverse the player character to negate the pushback doesn't save any frames.
		$LF
	]li
	[li 
		" Not Bowser is defeated the same way as the previous.
		$LF
	]li
]ul
[h3 id=3-1
 
	" 3-1
	$LF
]h3
[ul 
	[li 
		" This is the optimal place to kill the player character three times here.
		$LF
	]li
]ul
[h3 id=3-2
 
	" 3-2
	$LF
]h3
[ul 
	[li 
		" Unfortunately, the vertical platform is just barely impossible to avoid.
		$LF
	]li
]ul
[h3 id=3-3
 
	" 3-3
	$LF
]h3
[ul 
	[li 
		" I delay movement by a few frames a few times in order to manipulate enemy spawns. With some very specific manipulation, and hitting a Not Koopa at a very specific position, it's possible to avoid having a Not Koopa somewhere in the final screen (typically in the top right) and having the trampoline spawn instantly.
		$LF
	]li
]ul
[h3 id=3-4
 
	" 3-4
	$LF
]h3
[ul 
	[li 
		" There's now a platform in the middle of the Not Bowser fight, but it doesn't really change the strategy any.
		$LF
	]li
]ul
[h3 id=4-1
 
	" 4-1
	$LF
]h3
[ul 
	[li 
		" Again the optimal kill position is here, so three deaths are done here.
		$LF
	]li
]ul
[h3 id=4-2
 
	" 4-2
	$LF
]h3
[ul 
	[li 
		" A small delay was needed in the first section to avoid having a Not Bullet Bill spawn in a bad position. The specific position where the final Not Bullet Bill is located also causes a Not Piranha Plant to not spawn in the final pipe, also saving several frames.
		$LF
	]li
	[li 
		" Another small delay was needed in the second section to avoid having a Not Koopa Paratroopa in the way of a jump arc, saving some frames.
		$LF
	]li
]ul
[h3 id=4-3
 
	" 4-3
	$LF
]h3
[ul 
	[li 
		" Yet some more small delays here to manipulate enemies for the trampoline spawn.
		$LF
	]li
]ul
[h3 id=4-4
 
	" 4-4
	$LF
]h3
[ul 
	[li 
		" A wall clip is done to go through some tricky geometry near the start of the stage.
		$LF
	]li
	[li 
		" The final Not Bowser fight is optimized for early end of input. Input is ended on the first frame of the second jump - doing a jump on the small wall is the fastest way to end input early and still get three jumps on Not Bowser.
		$LF
	]li
]ul
[h2 id=Finalcomments
 
	" Final comments
	$LF
]h2
[h4 id=Screenshot
 
	" Screenshot
	$LF
]h4
[p 
	[img class=embed src=https://i.imgur.com/XhItjD7.png 
	]img
	$LF
]p
[h4 id=Thanks
 
	" Thanks
	$LF
]h4
[p 
	"Thanks to darbian for his 
	[a class=extlink href=https://youtu.be/MK45Riienxc rel=nofollow 
		"real-time WR speedrun video
	]a
	" (6:24) which introduced me to the game. (Thanks also to dekutony for posting a game topic for this game, with said WR speedrun).
	$LF
]p
[p 
	"Also, thanks to EZGames69 for discussing this game with me, and sending me a deathless WIP which made for an useful reference point in many occasions.
	$LF
]p
[p 
	"And thanks to you for watching!
	$LF
]p
[hr 
]hr
[p 
	[a class=intlink href=/Users/Profile/feos 
		"feos
	]a
	": If 94900 hits on Google for "Princess Rescue" isn't enough for you, a 
	[a class=extlink href=https://www.wired.com/2013/07/princess-rescue/ rel=nofollow 
		"dedicated Wired article
	]a
	" will probably help to prove this game's notability. First, the very existence of that article, second, points it makes about what is notable about this game.
	$LF
]p
[p 
	"This run uses a technique that looked like a debug combination at the first glance - being able to advance the level number after Game Over - but it turns out to be an actual game bug. 
	[a class=extlink href=https://www.atari2600homebrew.com/uploads/1/1/0/7/11070919/4161294_orig.j%70g rel=nofollow 
		"The manual
	]a
	" says that after Game Over you can revisit levels that you've beaten. This is how it works.
	$LF
]p
[p 
	"After the Game Over screen, you go to the first room of the level you've died in. You press Up or Down, and then B to confirm your choice and enter the room you've chosen. If you press Up after you've reached the last room you're supposed to enter, you get back to 1-1, and vice versa. The glitch here is that if you press Up 
	[em 
		"at the same frame
	]em
	" as B, you get access to second room of the level you've died in. And if you press Down in that case, you go back to the title screen.
	$LF
]p
[p 
	"So that's an example of an actual game bug, erroneous assumption made by the developer, or simply an oversight, doesn't matter how you call it. This run is legitimate and it also got great feedback, accepting to Moons.
	$LF
]p
[p 
	[a class=intlink href=/Users/Profile/fsvgm777 
		"fsvgm777
	]a
	": Processing.
]p
