3
[p 
	"This is a Tool-Assisted Speedrun of Game Boy Tetris, Mode B, played at level "9 heart" with an initial height of 5.
	$LF
]p
[pre 
	$LF
]pre
[h3 id=Gameobjectivesandcategories
 
	" Game objectives and categories
	$LF
]h3
[ul 
	[li 
		" Emulator used: VBA 1.7.2.560 v19.3
		$LF
	]li
	[li 
		" Uses a cheat at the title screen to access the "heart levels"
		$LF
	]li
	[li 
		" Beats "Mode B" at level "9 heart" with an initial height of 5
		$LF
	]li
	[li 
		" As fast as possible (real time)
		$LF
	]li
	[li 
		" Input is ended when the last piece is dropped
		$LF
	]li
	[li 
		" Best ending (which is the same as plain level 9 though)
		$LF
	]li
]ul
[h3 id=Comments
 
	" Comments
	$LF
]h3
[p 
	"This is the other project I've been working on in the past few days. I remember I managed to beat level "9 heart" with height 5 (which actually means 5×2=10) on my real Game Boy a few times when I was younger, and I know other people could do that as well (there's even a video on Youtube by some guy). This to prevents comments like "hey this can be done in real time". Yes, yes I know, just like it's possible to get 999999 points in NES Tetris. But this is faster once TAS'd! Also I dare you delete two Tetrises in real time. So I decided to make this TAS since there are already Tetris movies for NES and N64, but not for the Game Boy. The "heart levels" are accessed by pressing down at the title screen when selecting "1 player". They are 10 level numbers faster than the regular levels, so level "9 heart" is as fast as level 19. However, internally there is no distinction between regular levels and "heart levels", so the scoring system is exactly the same (level "9 heart" gives you as many points as level 9, while the real level 19 gives you many more), and also the ending scene is the same as plain level 9, there is no extra reward in that matter. The input ends when the last piece is dropped. I don't enter the name in the high score table. This is by far the TAS on which I worked the most, I had to rerecord a lot of times to get the correct combinations of pieces. Also I tested several combinations of key inputs, because the drop doesn't work in a linear way. While the fastest way to move pieces to the left and to the right is to press the directional keys every other frame (no matter even and odd, as long as they're alternated), the down key doesn't work in that way. Sometimes it's faster to alternate it, sometimes it's faster to keep it pressed for two consecutive frames and then release it; in no circumstances (except for the very beginning when the piece would stand still at the top) it's faster to keep it always pressed. This has required me to check several patterns for each drop. I think they're all frame perfect. In this movie there are no speed/entertainment tradeoffs whatsoever. I aim only for speed. I don't care about the score, though it's implied that I should delete as many lines as possible at the same time since the deletion takes time. For this reason I delete a Tetris twice. It wasn't possible to delete it more times because of the very limited area I have at the beginning.
	$LF
]p
[h3 id=Stagebystagecomments
 
	" Stage by stage comments
	$LF
]h3
[p 
	"There are no stages here. I just delete 25 lines as fast as possible.
	$LF
]p
[h3 id=Othercomments
 
	" Other comments
	$LF
]h3
[p 
	"<Explain here things the audience would probably like to see>Everyone loves Tetris.
	$LF
	"<Explain also things that could be improved in your movie>Maybe by delaying some frames at the title screen and/or somewhere else it might be possible to manipulate other starting fields. This one was good enough for me.
	$LF
	"<You may also suggest screenshots.>No idea. But I have an encode: http://rapidshare.com/files/241173713/teris-tas-nineko.mkv (please note that it's not captioned, it's just an encode of the raw emulator output, I hate to work with a 160×144 screen).
]p
