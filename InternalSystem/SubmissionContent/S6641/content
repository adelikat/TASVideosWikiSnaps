8
[div class=p 
	"Hello everyone. In light of the recent unoptimized submission of this game that was recently made, I decided to create an optimized TAS of this game.
	$LF
]div
[h4 id=Game 
	" The Game
	$LF
]h4
[div class=p 
	"Cabbage Patch Kids: Adventure in the Park was released for the Colecovision. A version was also ported by Coleco to the Atari 2600, which went unreleased due to the video game crash of 1983. However, a copy of the game later turned up at a flea market in the early 2000s, which led to the game being rediscovered.
	$LF
]div
[h4 id=Gameplay 
	" Gameplay
	$LF
]h4
[div class=p 
	"You play as Anna Lee, the cabbage patch kid. Your goal is to navigate Anna Lee safely through all of the obstacles in the park, without getting hurt. The game has a total of 30 different screens, with Anna reaching her house on every 10th screen. The controls are simple, as they are for pretty much every Atari 2600 game: you hold the joystick to move left and right, and press B to jump. You can also change the direction of your jump in mid-air, but there's no point in this TAS where it's useful to do so, so it isn't seen here.
	$LF
]div
[h4 id=Optimizations 
	" Optimizations
	$LF
]h4
[div class=p 
	"Your player moves 1 pixel forwards 3 out of every 4 frames while walking, and 1 pixel forward 1 out of every 2 frames while jumping. As a result of this, you move faster walking than you do jumping, so I attempt to walk wherever I can in the game. It seems that if you press jump during the 1 frame where you don't move a pixel forwards, then you lose a frame, so I avoid doing that. In case anyone ever decides that they want to take another crack at optimizing this game, the player's X-position is stored at address 0X26
	$LF
]div
[div class=p 
	"Now then, let's get onto the riveting gameplay! Note that the graphics in my temporary encode of the TAS are kind of messed up for some reason, so I will point out any graphical inaccuracies down below as well.
	$LF
]div
[h4 id=Gameplay_2 
	" Gameplay:
	$LF
]h4
[h2 id=Stage0 
	" Stage 0:
	$LF
]h2
[div class=p 
	"Walk right
	$LF
]div
[h2 id=Stage1 
	" Stage 1: 
	$LF
]h2
[div class=p 
	"Walk right - jump once.
	$LF
]div
[h2 id=Stage2 
	" Stage 2: 
	$LF
]h2
[div class=p 
	"Walk right - jump 4 times.
	$LF
]div
[h2 id=Stage3 
	" Stage 3: 
	$LF
]h2
[div class=p 
	"Here, you have to press jump as soon as you land on the trampolines, or you will jump straight up on them instead of jumping to the right off of them.
	$LF
]div
[h2 id=Stage4 
	" Stage 4: 
	$LF
]h2
[div class=p 
	"Now we're getting tricky - walk right and jump 5 times!
	$LF
]div
[h2 id=Stage5 
	" Stage 5:
	$LF
]h2
[div class=p 
	"The graphics are kind of messed up on this screen in my temp-encode, but there are 2 ropes swinging in the background here.
	$LF
]div
[h2 id=Stage6 
	" Stage 6:
	$LF
]h2
[div class=p 
	"Jump once
	$LF
]div
[h2 id=Stage7 
	" Stage 7: 
	$LF
]h2
[div class=p 
	"One little optimization I perform here is that I time my last jump so that I skip landing on the last riser, which saves me a jump, which in turn saves me time. If I landed on the last platform and then walked off, I would have lost a life. Doing this is actually frame-perfect, even though it doesn't look like the timing would be that tight. This is mainly just because your character falls like a sack of bricks a second after they start their jump, which limits how large of a gap you can jump over.
	$LF
]div
[h2 id=Stage8 
	" Stage 8:
	$LF
]h2
[div class=p 
	"Walk right again
	$LF
]div
[h2 id=Stage9 
	" Stage 9:
	$LF
]h2
[div class=p 
	"Here, I use a little optimization which was first noticed by Spikestuff last year. I walk left for a few frames to squeeze under the barrel without jumping, which saves a little bit of time.
	$LF
]div
[h2 id=Stage10 
	" Stage 10:
	$LF
]h2
[div class=p 
	"We're home!
	$LF
]div
[h2 id=Stage11 
	" Stage 11:
	$LF
]h2
[div class=p 
	"Walk right.
	$LF
]div
[h2 id=Stage12 
	" Stage 12:
	$LF
]h2
[div class=p 
	"Walk right and do some jumps.
	$LF
]div
[h2 id=Stage13 
	" Stage 13:
	$LF
]h2
[div class=p 
	"This fire actually shoots flames at you, but in my temp encode you can't really see this. Either way, the flames go over my head, so I can just keep walking right without issue.
	$LF
]div
[h2 id=Stage14 
	" Stage 14:
	$LF
]h2
[div class=p 
	"There are 3 platforms here, but my temp encode makes it look like there's only 2, which makes it look like I'm floating.
	$LF
]div
[h2 id=Stage15 
	" Stage 15:
	$LF
]h2
[div class=p 
	"Jump on the island; jump off the island.
	$LF
]div
[h2 id=Stage16 
	" Stage 16: 
	$LF
]h2
[div class=p 
	"Get past the 2 leaping fish.
	$LF
]div
[h2 id=Stage17 
	" Stage 17:
	$LF
]h2
[div class=p 
	"Here, I had to delay my last jump to avoid getting hit by the falling stars, which means I had to do 1 jump on the trampoline.
	$LF
]div
[h2 id=Stage18 
	" Stage 18:
	$LF
]h2
[div class=p 
	"Again, there's 3 platforms here, even though you can only see 1 in my encode.
	$LF
]div
[h2 id=Stage19 
	" Stage 19:
	$LF
]h2
[div class=p 
	"Cross the floating island with falling stars.
	$LF
]div
[h2 id=Stage20 
	" Stage 20:
	$LF
]h2
[div class=p 
	"Home again at last! Thank goodness!
	$LF
]div
[h2 id=Stage21 
	" Stage 21:
	$LF
]h2
[div class=p 
	"There are 2 ropes here, even though only 1 is visible in my encode.
	$LF
]div
[h2 id=Stage22 
	" Stage 22:
	$LF
]h2
[div class=p 
	"More risers, more stars...
	$LF
]div
[h2 id=Stage23 
	" Stage 23:
	$LF
]h2
[div class=p 
	"More water, more stars...
	$LF
]div
[h2 id=Stage24 
	" Stage 24:
	$LF
]h2
[div class=p 
	"Risers and a single bee.
	$LF
]div
[h2 id=Stage25 
	" Stage 25:
	$LF
]h2
[div class=p 
	"The jump to get under the rising flame as it was going up without getting hit was very tight, and saved me about 16 frames.
	$LF
]div
[h2 id=Stage26 
	" Stage 26:
	$LF
]h2
[div class=p 
	"3 trampolines and a bumblebee.
	$LF
]div
[h2 id=Stage27 
	" Stage 27:
	$LF
]h2
[div class=p 
	"Some risers and a single bee... But this time, with a flame!
	$LF
]div
[h2 id=Stage28 
	" Stage 28:
	$LF
]h2
[div class=p 
	"Water and a bee.
	$LF
]div
[h2 id=Stage29 
	" Stage 29:
	$LF
]h2
[div class=p 
	"3 platforms and a bee.
	$LF
]div
[h2 id=Stage30 
	" Stage 30:
	$LF
]h2
[div class=p 
	"As is the case at the end of most Atari 2600 platformers, I jump at the end of the screen so that I can end input early, since you keep moving forward after you start jumping even if you aren't holding right. And with that, the game is over! Continuing to play from here on out will result in stages 10-20 repeating indefinitely
	$LF
]div
[h4 id=FinalThoughts 
	" Final Thoughts:
	$LF
]h4
[div class=p 
	"Sometimes when I finish TASing a game, I will say that this is the game I have spent the most effort working on of any TAS I've done. In this case, however, that is not the case. In fact, I would go so far as to say that this is the least effort I've put into any TAS I've ever made. Nevertheless, I will continue to say the one other thing that I usually say at the end of my submission notes for a movie: I hope that you enjoy watching my TAS!
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/feos 
		"feos
	]a
	": This run is faster than the drafts Spike and 
	(__wikiLink|displaytext=I|href=/Forum/Posts/484705)
	" had, so it's good. The jumping at the end of a "loop" can be considered a game end, or a level end, but maxing out the increasing difficulty is the most obvious valid ending, for completeness and new gameplay. It's really boring either way though, so I'm accepting this to Vault.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/Spikestuff 
		"Spikestuff
	]a
	": Publishing.
]div
