9
[div class=card mb-2 
	[div class=card-header 
		[strong 
			"Table of contents
		]strong
	]div
	[div class=card-body 
		[ul 
			[li 
				[a href=#Introduction 
					" Introduction
					$LF
				]a
			]li
			[li 
				[a href=#SoftwareHardware 
					" Software + Hardware
					$LF
				]a
				[ul 
					[li 
						[a href=#RomInformation 
							" Rom Information
							$LF
						]a
					]li
					[li 
						[a href=#Emulator 
							" Emulator
							$LF
						]a
					]li
					[li 
						[a href=#AdditionalTools 
							" Additional Tools
							$LF
						]a
					]li
				]ul
			]li
		]ul
	]div
]div
[h3 id=Introduction 
	" Introduction
	$LF
]h3
[div class=p 
	"This is my longest movie so far. It solves all 160 rooms (16 stages x 10 rooms) in the game. 
	$LF
]div
[div class=p 
	"I came to this way in a rather indirect way. As I was working in implementing DOSBox as core for Bizhawk, I started to fantasize about those old DOS games I used to play and how I could TAS them very comfortably now. Among those games was 
	[a href=https://en.wikipedia.org/wiki/Soko-Ban rel=noopener external nofollow 
		"Sokoban
	]a
	", a puzzle game where you play as a warehouse worker having to push boxes to their designated places. It was hard and I couldn't beat more than two levels (hey, I was a kid).
	$LF
]div
[div class=p 
	"So now I thought, I could surely program a very lightweight version of the game in C++, transcribe the levels, and then brute force it using 
	[a href=https://github.com/SergioMartin86/jaffarPlus rel=noopener external nofollow 
		"JaffarPlus
	]a
	". However, turns out people had that same idea a long time ago and an abundance of 
	[a href=https://ieee-cog.org/2020/papers/paper_44.pdf rel=noopener external nofollow 
		"spectacularly well optimized
	]a
	" solvers already exist. Then I figured I might as well use those.
	$LF
]div
[div class=p 
	"So I set up to transcribing Sokoban levels for use on those solvers / optimizers I found. However, transcription took a lot of effort and the glooming thought that perhaps a significant change in the DOSBox core would mean it'll desync in the end made me think this would have to wait. That is, unless I found a similar kind of game for an already well supported console. Then I found this game.
	$LF
]div
[div class=p 
	"The process went as follows:
	$LF
]div
[ul 
	[li 
		" Grab transcriptions of the levels from this 
		[a href=https://gamefaqs.gamespot.com/genesis/586456-shove-it-the-warehouse-game/faqs/18830 rel=noopener external nofollow 
			"Game FAQ
		]a
		". I had to fix a bunch of them that had transcription errors.
		$LF
	]li
	[li 
		" Use 
		[a href=https://festival-solver.site/ rel=noopener external nofollow 
			"Festival
		]a
		" to solve them all in batch
		$LF
	]li
	[li 
		" Use 
		[a href=https://jsokoapplet.sourceforge.io/ rel=noopener external nofollow 
			"Jsoko
		]a
		" to iteratively optimize the solutions
		$LF
	]li
	[li 
		" Use my own translator that took .sok format solutions to Bizhawk inputs
		$LF
	]li
	[li 
		" In the improved movie (
		(__wikiLink|href=/UserFiles/Info/638788723424797950|implicitdisplaytext=UserFiles/Info/638788723424797950)
		") I used YASO 2.153 Optimizer which yielded better results
		$LF
	]li
]ul
[div class=p 
	"I know 
	(__wikiLink|href=/5781M|implicitdisplaytext=5781M)
	" followed a similar approach. However, I find it unsatisfying that they only solved the minimal number of rooms to advance. I find it more entertaining to see all levels, including the large ones. There is a relaxing aspect of spending 4 hours watching a very efficient worker do his job with extreme precision.
	$LF
]div
[div class=p 
	"One little caveat is that, for some stages, I had to skip room 8 to reach rooms 9 and 10, before going back to 8. This is because, for some of the stages, beating room 8 will automatically advance you to the next one and making rooms 9 and 10 unreachable. Very strange progress mechanics.
	$LF
]div
[div class=p 
	"In any case, I will also probably improve on the any% movie. I'm pretty sure I can cut a bunch of frames off that one, even if I have to build my own optimizer.
	$LF
]div
[h3 id=SoftwareHardware 
	" Software + Hardware
	$LF
]h3
[h4 id=RomInformation 
	" Rom Information
	$LF
]h4
[ul 
	[li 
		" Name: Shove It! - The Warehouse Game (USA)
		$LF
	]li
	[li 
		" ROM: Shove It! - The Warehouse Game (U) 
		"[!]
		".bin
		$LF
	]li
	[li 
		" SHA1:E4094C5A575F8D7325E7EC7425ECF022A6BF434E
		$LF
	]li
	[li 
		" MD5:2C6A960F66D1C87855424E6528D6EAC6
		$LF
	]li
]ul
[h4 id=Emulator 
	" Emulator
	$LF
]h4
[ul 
	[li 
		" EmuHawk 2.10 (Core: GPGX)
		$LF
	]li
]ul
[h4 id=AdditionalTools 
	" Additional Tools
	$LF
]h4
[ul 
	[li 
		" Source Transcriptions: 
		[a href=https://gamefaqs.gamespot.com/genesis/586456-shove-it-the-warehouse-game/faqs/18830 rel=noopener external nofollow 
			"FAQ
		]a
		" by Sean Shannon 
		$LF
	]li
	[li 
		" Solver: 
		[a href=https://festival-solver.site/ rel=noopener external nofollow 
			"Festival
		]a
		$LF
	]li
	[li 
		" Optimizer: 
		[a href=https://jsokoapplet.sourceforge.io/ rel=noopener external nofollow 
			"JSoko
		]a
		$LF
	]li
	[li 
		" Second round optimizer: 
		[a href=https://github.com/joriswit/YASS rel=noopener external nofollow 
			"YASS
		]a
		$LF
	]li
]ul
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/Darkman425 
		"Darkman425
	]a
	": Claiming for judging.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/Darkman425 
		"Darkman425
	]a
	": To quote the manual:
	$LF
]div
[figure 
	[figcaption class=author 
		"Quoting Shove It! ...The Warehouse Game manual, page 7
	]figcaption
	[div class=p 
		"There are 16 stages in all, each with 10 rooms. That's a total of 160 rooms for hours of fun!
		$LF
	]div
]figure
[div class=p 
	"They certainly weren't lying about that. Those 4 hours of shoving all look well optimized for the fewest moves to me as far as I could tell from watching all of it. Nice work finding those solutions!
	$LF
]div
[div class=p 
	"There was one point that I want to point out that I mentioned in the 
	(__wikiLink|displaytext=previous Shove It! submission notes|href=/8858S)
	" when I judged that one:
	$LF
]div
[figure 
	[figcaption class=author 
		"Quoting past me, from 2024
	]figcaption
	[div class=p 
		"Each stage consists of 10 rooms but only the key rooms are needed to move onto the next stage. From what I can gather, the waits at the end of finishing a key room affects the RNG to check if that counts as the key room needed to move onto the next stage.
		$LF
	]div
]figure
[div class=p 
	"That's what you ran into when you had to menu past some of the XX8 rooms to play the XX0 rooms. I assume ideally that you'd want to wait a bit before finishing an XX0 room to ensure the next stage has the key room also set to XX0 but there's a real chance that the wait could be slower compared to simply menuing past an XX8 room and going back. It'd probably save mere frames at best but it's something to note. I can't get over how a Sokoban game, a genre known to have pretty much no RNG, has an RNG element introduced for game progression.
	$LF
]div
[div class=p 
	"Accepting to Standard for full completion.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/Darkman425 
		"Darkman425
	]a
	": Input file replaced by 
	(__wikiLink|displaytext=a 4 minute improvement|href=/Forum/Posts/535279)
	" by the author.
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/despoa 
		"despoa
	]a
	": Processing...
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/Darkman425 
		"Darkman425
	]a
	": Input file replaced with an unknown rerecord count since botting was primarily used in this TAS's production.
]div
