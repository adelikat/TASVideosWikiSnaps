31
[p 
	"This total control run of Pokemon Red played on a Super Game Boy by 
	(__wikiLink|/TASBot|TASBot)
	" was presented at 
	[a class=extlink href=http://gamesdonequick.com rel=nofollow 
		"Awesome Games Done Quick 2015
	]a
	" and is widely known as "Pokemon Plays Twitch", presented here in a more illustrative way by adding extra button presses after the payload completes thanks to a 
	[a class=intlink href=/Userfiles/Info/27905811443158947 
		"Lua script from Ilari
	]a
	".  If you are unfamiliar with Pokemon Plays Twitch, I recommend 
	[a class=extlink href=http://arstechnica.com/gaming/2015/01/pokemon-plays-twitch-how-a-robot-got-irc-running-on-an-unmodified-snes/ rel=nofollow 
		"starting with this Ars Technica article
	]a
	" that describes the event and what we were able to accomplish, as well as the videos showing the presentations we did in front of 100,000+ live viewers (
	[a class=extlink href=https://archive.org/details/AwesomeGamesDoneQuick2015 rel=nofollow 
		"archive.org
	]a
	" or on YouTube for 
	[a class=extlink href=https://www.youtube.com/watch?v=P28kp66XMw4 rel=nofollow 
		"part 1
	]a
	" and 
	[a class=extlink href=https://www.youtube.com/watch?v=tLqU8qDkOZE rel=nofollow 
		"part 2
	]a
	").  As noted below, 
	[b 
		"the submission text that would normally be found here can instead be found in 
		[a class=extlink href=https://www.alchemistowl.org/pocorgtfo/pocorgtfo10.pdf rel=nofollow 
			"issue 0x10 of the PoC
		]a
	]b
	" - please consider the article to be the detailed technical description of this run.
	$LF
]p
[h3 
	" Authors
	$LF
]h3
[p 
	"While many, many people contributed in various ways, the movie file itself contains input from three people - Ilari, p4plus2 and dwangoAC.  Before I (dwangoAC) go any further I must credit Ilari for all of his hard work, without which this whole project would never have been possible.  Credit also goes to p4plus2 for his amazing payload.  Masterjun contributed the item swap order converted over from Pokemon Yellow but none of his input ended up in the final run; his contributions are no less notable, however, so I've placed credit for his work in this section.  See the end of these notes for the full list of credits.
	$LF
]p
[h3 
	" Accomplishments
	$LF
]h3
[ul 
	[li 
		" Successfully completes a Super Game Boy enabled game
		$LF
	]li
	[li 
		" Hijacks said SGB and deliberately crashes part of it
		$LF
	]li
	[li 
		" Transfers data at 3,840 bytes a second
		$LF
	]li
	[li 
		" Plays back the full screenplay presented at AGDQ 2015
		$LF
	]li
	[li 
		" Explains things better than this text can
		$LF
	]li
	[li 
		" Allows Pokemon to Play Twitch chat
		$LF
	]li
	[li 
		" Shows how 
		(__wikiLink|/TASBot|TASBot)
		" wins the internet
		$LF
	]li
]ul
[h3 
	" Teaser poster from the article by 
	[a class=extlink href=http://www.corkami.com rel=nofollow 
		"Ange Albertini
	]a
	$LF
]h3
[p 
	[img class=embed src=http://ic.pics.livejournal.com/ac/9096/1323478/1323478_1000.png 
	]img
	$LF
]p
[p 
	"Full size image: http://acbit.net/static/tas/PokemonPlaysTwitchPosterByAngeAlbertini.png
	$LF
]p
[h3 
	" Comments
	$LF
]h3
[p 
	"Usually here at TASVideos, authors use the submission notes to explain what's going on in the game.  In this case, the run is going to describe *itself* at a datarate of 3.8k per second (in reality thanks to 5-bit lowercase letter encoding we manage to eke out more characters per second than we would otherwise, but I'm getting ahead of myself - see the description for full details on this and much more).  In brief, this run starts with the full screenplay as shown in the second presentation from AGDQ 2015, followed by a rapidfire presentation of all printable characters, emoticons, and emoji, and finally a full description of how everything was accomplished.
	$LF
]p
[p 
	"To properly read the explanation by watching the movie you'll need to frame advance or pause and unpause frequently.  While novel, this is perhaps not the best method to consume this information in part because things like B) are interpreted as emoticons and the script strips characters like < and >, but this is the full contents of an article that can be found in 
	[a class=extlink href=https://www.alchemistowl.org/pocorgtfo/pocorgtfo10.pdf rel=nofollow 
		"issue 10
	]a
	" of the 
	[a class=extlink href=https://www.alchemistowl.org/pocorgtfo/ rel=nofollow 
		"International Proof of Concept or GTFO Journal
	]a
	" which was distributed in print form to attendees at 
	[a class=extlink href=http://shmoocon.org/ rel=nofollow 
		"ShmooCon 2016
	]a
	".
	$LF
]p
[p 
	"The text in the article was written by Ilari, p4plus2 and I.  The article itself references this submission by URL / submission ID and the article had to be completed early enough to allow the article to be sent to the printing press to be distributed at ShmooCon, meaning there was an intermediate time where this submission existed without proper documentation about it.  During that intermediate period, FractalFusion took it upon himself to 
	[a class=intlink href=/Forum/P/424915#424915 
		"transcribe the entire article text
	]a
	" from the movie which amused all of us greatly.
	$LF
]p
[h3 
	" Encode with all button presses displayed
	$LF
]h3
[p 
	(youtube|v=dKe82bikBOU)
	$LF
	"Also, a hardware verification encode is available at: https://youtu.be/NTzrbhCTEhw
	$LF
]p
[h3 
	" Movie file and emulator notes
	$LF
]h3
[p 
	"The 
	[a class=intlink href=/Userfiles/Info/27793144712275990 
		"original submission file
	]a
	" was pretty evil; I uploaded it with the wrong gametype to get past the not-yet-complete (at the time) lsmv file check that cannot currently understand SGB games. Mothrayas was able to correct the problem and replaced the submission file with an updated version that can now be considered an intermediate file.  The *actual* movie file that should be associated with this is 
	[a class=extlink href=https://www.alchemistowl.org/pocorgtfo/pocorgtfo10.pdf rel=nofollow 
		"issue 10
	]a
	" (simply rename the .pdf to .lsmv) but at 55 MB it is too large to submit given current site restrictions.  To play the movie, the Gambatte core.so library must first be loaded via File -> Load -> Load shared object / Load linked library.  This has been confirmed to work in both Linux and Windows with the 
	[a class=intlink href=/Lsnes 
		"lsnes
	]a
	" build "Beta - rr2-β23 with SGB Core" (
	[a class=extlink href=http://nach.tasvideos.org/lsnes-rr2-beta23-installer.exe rel=nofollow 
		"Windows build
	]a
	").
	$LF
]p
[h3 
	" Full Credits (using the same format as the run)
	$LF
]h3
[pre 
	"dwangoAC: Main project organizer
	$LF
	"and presenter, primary tester,
	$LF
	"Stage 0/1 movie files, PR
	$LF
	"Ilari: Emulator coder (lsnes),
	$LF
	"developer of Stages 3-5, payload
	$LF
	"tester, game mechanic researcher
	$LF
	"p4plus2: Primary payload author,
	$LF
	"encoding scheme creator, SNES
	$LF
	"expert, general stage 3-x help
	$LF
	"Masterjun: Stage 0/1 original
	$LF
	"idea and research, SNES advice
	$LF
	"micro500: Wiring harness build,
	$LF
	"Python IRC to bot streaming,
	$LF
	"poll speed firmware modification
	$LF
	"true: Creator of NES/SNES Replay
	$LF
	"device, reset handling updates
	$LF
	"TheAxeMan: Python script support
	$LF
	"ais523: Data encoding assistance
	$LF
	"Nach: SGB docs, site defacement
	$LF
	"Tompa: On-site hardware support
	$LF
	"padz: Pokemon Red research
	$LF
	"Vulajin: Camera serial interface
	$LF
	"twm: Initial IRC Python script
	$LF
	"Full article in next PoC||GTFO!
	$LF
]pre
[hr 
]hr
[p 
	[a class=intlink href=/Users/Profile/Mothrayas 
		"Mothrayas
	]a
	": Updated submission file.
	$LF
]p
[hr 
]hr
[p 
	[a class=intlink href=/Users/Profile/Nach 
		"Nach
	]a
	": This run is quite a technical marvel. I want to stress that a ton of effort went into making this run itself, from improving emulators, exploiting mistakes in a game, working around limitations, using overlooked system features, writing new code in two different languages, to displaying a brand new program in an extremely creative and unexpected way. Despite what this run does however, it must be judged on its merits of itself, not the merits of what the same technology did for a demonstration at a popular gaming conference.
	$LF
]p
[p 
	"To start with, let me lay out any bias I may have due to my contributions before I get into specific analysis of this run itself. I was involved with the team to prepare for the aforementioned gaming conference. I got people together in an IRC channel to work together, I contributed some build scripts to make it easier for some collaborators to get software building, and I packaged up some binaries for various collaborators. I also did research on how to get an SGB to run SNES code from a DMG application which was necessary for this run. Lastly, I provided an interface to allow the aforementioned demonstration to deface the site. Due to my involvement, I am inclined and have incentive to want to see a run like this published. However, I am going to be focusing on what this run itself does and splitting that from the demonstration as a whole. While I assisted in the production, I do not believe my contributions are significant enough to bias any decisions I make, and we can agree that some of them like defacing the site doesn't actually occur with the run submitted here.
	$LF
]p
[p 
	"To begin analysis, one must realize what this run is not. This run does not deface any websites, it does not control any cameras, and it most certainly does not 
	[em 
		"play
	]em
	" Twitch. In fact, this run does no networking of any kind. As a Magician, I appreciate the intricacies of what this run portrays to the uneducated individual. However, in truth, this run is actually 
	[em 
		"Pokémon Plays Notepad
	]em
	". It does nothing more with its payload than receive input which can be converted to text and displayed within a text-based output (emoticons and a brief 
	[em 
		"screenshot
	]em
	" aside). All the networking, parsing of IRC-based commands, controlling cameras, and everything else happened outside this run on some other computer during a demonstration. Nothing within the SNES itself was responsible for any of it.
	$LF
]p
[p 
	"As far as networking goes, this did NOT bring the Super Nintendo or Gameboy onto the Internet, nor introduce them to networking. The novelty of supplying hardware used alongside these consoles to supply network input for another player (or all the players) is hardly anything new. Emulators brought Internet play to games on these consoles long ago by providing their own network stack for input. Further, the XBand Modem precedes the creation of this run by more than two decades, and was officially sanctioned hardware for remote networked play. Various Gameboy consoles (including the SGB2) are also capable of real duplex networking on their own using the gamelink port or infrared communication. Making use of those could actually allow a future Pokémon hack to achieve true duplex networking without having the magician's assistant operating the mechanics behind the scenes.
	$LF
]p
[p 
	"Feedback for this run at the demonstration was wildly enthusiastic and extremely positive. Much of that enthusiasm spilled over into the discussion thread for this. For what the run itself actually does though (filtering those who were fooled), I could find little positive feedback (although there was some). Contrasting to some of our other total control runs, positive feedback for what this run actually does is quite slim in comparison. Judging this run solely on its own merits makes it hard to consider it significantly entertaining. From the standpoint of a viewer with no prior experience or expectations, this run does nothing more than print out some text somehow and show some imagery.
	$LF
]p
[p 
	"This run must also be considered against another 
	[a class=intlink href=/2341M 
		"Pokémon total control run
	]a
	". The precedent has been till now to consider DMG and SGB interchangeable as seen by 
	[a class=intlink href=/Movies-GB-SGB-GBC-Stars-Moons 
		"numerous obsoletion chains
	]a
	". We've also toyed with the idea of drastically different cross-system obsoletions, although I'm not certain if we have a hard precedent to cite regarding this or not. As far as games go, we've had Blue and Red constantly obsolete each other, and we've even had 
	[a class=intlink href=/1999M 
		"one game obsolete a completely different game
	]a
	", making it difficult for me to consider one Generation 1 Pokémon game different enough from another. These runs don’t even make it out of the first room to a point where the gameplay itself significantly diverges (if we were even were to consider these differences significantly divergent). Internally, Yellow is actually a later iteration of the engine with considerable improvements removing bugs and a different compilation resulting in memory layout differences (like most other revisions in classic games). However, what can be 
	[em 
		"seen
	]em
	" in the run is ultimately what matters.
	$LF
]p
[p 
	"I've toyed with the idea of publishing this taking into account that it runs SNES code to differentiate it from the existing Pokémon total control run. However, after much deliberation, I find the argument lacking. From the viewpoint of creating this run, it could have been created on any SNES game with critical exploits, such as Super Mario World, and would even have had less limitations, but was intentionally not selected because the creators had something else in mind. Pokémon was intentionally selected because of a previous phenomenon known as 
	[em 
		"Twitch Plays Pokémon
	]em
	", where players used an IRC channel to collaborate to play through Pokémon Red (and later, other games). The creators wanted to turn this on its head, and allow the game to 
	[em 
		"take revenge
	]em
	" so to speak. This is actually the most crucial determinant in which platform this game is for.
	$LF
]p
[p 
	"The creators also wanted to show off something more technically challenging than just controlling a DMG game. They wanted to show mastery of the SGB and SNES from a DMG game. However, that latter point is not a technical novelty, as Space Invaders already did this back in 1994, and it's even documented how to do so in the Super Gameboy programming manual, making it an officially sanctioned and somewhat expected feature of the SGB. This component was actually one of the least challenging in creating this run.
	$LF
]p
[p 
	"As far as TASing goes, we like showing off different techniques, and making use of SNES code is assuredly one of them. However, I have to consider this as subservient to the original game. Therefore, the fact that it runs SNES code is an optional technique to all runs in general for the original game, such as whether the run decides to make use of Fly or a glitch to acquire Mew in a random battle. At best we can consider this a different type of total control run, but it is still in fact a total control run for a first generation Pokémon game with gameplay beginning on a DMG processor.
	$LF
]p
[p 
	"Based on the lackluster positive feedback, and that publication would require another run to obsolete this on entertainment values, I cannot in good faith accept this for publication. However, the final nail in the coffin is actually that this run is not complete. All our runs complete something in some sense. They reach a game endpoint, or reach a point in the game where there is no new material, or they reach the end of a payload with has some kind of endpoint. All our total control runs with the exception of the previous 
	[em 
		"Pi Day
	]em
	" run reach a noticeable endpoint of a final cut scene or a special The End screen. 
	[em 
		"Pi Day
	]em
	" itself actually has a natural endpoint of exactly 3:14.15 seconds into the run (as well as other endpoints if dragged on to add additional digits to π). The conclusion to the input to 
	[em 
		"Notepad
	]em
	" in this run is entirely arbitrary. Therefore its very mechanics provide no natural conclusion and no definition for what kind of modifications to this run would be acceptable to obsolete it or not. I have no alternative but to reject this.
	$LF
]p
[hr 
]hr
[p 
	[a class=intlink href=/Users/Profile/Nach 
		"Nach
	]a
	": This is a bit unorthodox, but due to the nature of this run, 
	[a class=intlink href=/Users/Profile/dwangoAC 
		"dwangoAC
	]a
	" asked me to include some groundwork on the kind of discussion and site improvements that would need to occur to make a run like this acceptable. This really isn't the place to discuss this, so if people want to do so, please start a new thread with the following material. Feel free to copy what you want, using each of the following sections as needed in each of their respective threads.
	$LF
]p
[p 
	"We have a two-fold problem in our current methods in classifying and organizing published movies which currently prevent us from publishing this and other runs. There are various loopholes and rule 
	[em 
		"hacks
	]em
	" we could employ to try and shove some runs into the existing framework. However, I think it better we fully analyze the issues at hand and properly deal with them, allowing the site to become better as a whole, inviting new contributions.
	$LF
]p
[p 
	"The first problem we face is a lack of conscious understanding of how to differentiate different kinds of 
	[em 
		"total control
	]em
	" or execution of 
	[em 
		"arbitrary code
	]em
	" runs. The site offers a categorization tool known as 
	[em 
		[a class=intlink href=/MovieClassGuidelines 
			"movie classes
		]a
	]em
	". Logistically, this tool allows site users to find runs of a certain genre or make use of certain techniques. More importantly however, it provides a conscious objective understanding of something certain runs do or don't do compared to others. Many of these movies classes share a direct relationship with the various branches of runs that exist for a particular game. Regardless of what the name of the branch is, which sometimes has identical categories under different names for different games (such as the different >100% 
	[em 
		"100%
	]em
	" completion of the Donkey Kong Country series), there is generally that implicit relationship we have not yet made explicit. We really need some kind of effort to map all kinds of existing branches to movie classes to better consciously understand what objective criteria separates various runs. We then need to see if there are any would-be movie classes missing that our branching would indicate we should have.
	$LF
]p
[p 
	"The above point is all the more true regarding our various 
	[em 
		"total control
	]em
	" or execution of 
	[em 
		"arbitrary code
	]em
	" runs. They are clearly different from each other, however we haven't done anything to differentiate between them, and they are all lumped together in a single generic understanding. This lumping, or lack of sub-categorization, prevents us from accepting a wide range of these runs for a single game, as the underlying 
	[em 
		"goal
	]em
	"/
	[em 
		"objective
	]em
	" or key differentiating factor is the same for them all. I already raised 
	[a class=intlink href=/Forum/P/373757#373757 
		"this point in another discussion
	]a
	" nearly two years ago, actually predicting this and other recent runs, and perhaps future runs that we'll be seeing. I believe it's time we restart this discussion, and find some way to categorize different 
	[em 
		"total control
	]em
	" runs so we can accept multiple of them for existing games, where we find objective grounds to differentiate between multiple (not to mention organize them better and allow each genre to be searched for individually).
	$LF
]p
[p 
	"The second problem here is our overall classification of game runs or lack thereof. We relatively recently introduced a concept to the site known as 
	[em 
		"tiers
	]em
	". However, we as of yet failed to make good use of this system.
	$LF
]p
[p 
	"The site was built upon showing off Tool-Assisted Superplays. The idea behind the superplay is a run which shows off something which is extremely difficult or impossible for a mere human to do, and doing it again and again in an entertaining manner. A by-product of this superplay is completing a game as fast as the game allows, often faster than is humanly possible. This is the superplay that is also known as the Speedrun.
	$LF
]p
[p 
	"The site originally accepted movies based on entertainment, but also acknowledged movies which went above and beyond in their superplaying, and best represented the TAS genre, and labeled such runs with a Star. The length aspect of each run was used to obsolete longer runs, and thus also showed the site was in some way a way to keep track of fasted possible records for a game. However, the superplay non-speedrun known as the playaround looks more at entertainment factors and techniques shown off, and actually longer runs are usually used in this case to obsolete the shorter. Since we wanted to find a way to allow any kinds of runs that were superhuman in completing games, even when lacking entertainment, tiers was born.
	$LF
]p
[p 
	"We invented the Vault in order to store runs which were not entertaining, but were the fastest completion of games in a mainstream manner. At the same time we shifted the concept of a Star to a pseudo-tier. I say pseudo-tier, because the sentiment on the site regarding Stars is still the pre-Tier definition. As a tier, there really should be an objective divider between what runs do or do not do in order to tier things one way or another. However, with Stars, we are still primarily looking at things at a percentage level which in no way objectively views the accomplishments of each run on its own. There is a sort of middle ground by stating Stars could be for top two or three runs which best portray their genre/platform/franchise, which on the one hand objectively views runs as the best of technique wise, but still pays some attention to outside factors. However, with various genres under-represented due to not being as entertaining to most of the audience compared to other genres, this hasn't really been accomplished either.
	$LF
]p
[p 
	"Returning to the main problem, we are not really tier-ing our runs, as we lack strong tier boundaries between much of them. We do view Stars as a tier 
	[em 
		"above
	]em
	" Moons, and Moons as a tier 
	[em 
		"above
	]em
	" Vault, something which I have no intention of changing, but we don't make use of this system to properly and totally differentiate between different runs and classify them properly. Tiers are directly tied to criteria that a run must conform to. Due to the open ended nature of the 
	[em 
		"total control
	]em
	" and other kinds of runs, we really do need a different set of established criteria on when to accept runs, how to view obsoletions and so on.
	$LF
]p
[p 
	"Resistance to creating new tiers generally has two arguments. The first is that we can find ways to 
	[del 
		"hack
	]del
	"alter the existing rules to find a way to shove in runs we wish to accept. This approach sort of works, but does reject many runs we'd like to publish somehow, muddles some of our rules, and also lacks acknowledgment that some runs are drastically different from each other. This first argument by some is also actually predicated on the second argument, that new tiers which by definition are not Moon nor Star must be unentertaining, or minimally, fail to acknowledge the entertainment factors in runs in these new tiers. However, this lack of acknowledgment can be easily overcome if new tiers are created in groups. Meaning, that if we decided we wanted tiers to cover runs which are technically impressive, using techniques like new code entered via controllers which is impossible for a human, we could simply make two of them. Both cover the technically impressive of this nature, but only one of them conveys that the run is also entertaining. The various lists on the site are then modified accordingly to add the new Grade-A tier here to the entertainment qualifying lists.
	$LF
]p
[p 
	"To be sure, we are seeing runs which take very different approaches to games than others. Overall, when we look at a run, we look at how the run behaves in the gameplay portion of it. We reject runs for sloppy gameplay, and obsolete runs when a newer run shows it performs the gameplay better. We tend to ignore what happens during the non-gameplay segments which change due to different versions of the game (switching between USA and Japan), or mistakes made in utilizing the in-game menus, not proceeding through them to the fullest (forgetting to exploit wrap-around or figuring out the menu system's controller poll mechanics). Yet at the same time, somewhat hypocritically, we do allow for runs to take advantage of these auxiliary features, such as exploiting buffer overflows in menus, or finding corruption bugs in the built-in save management features. A critical look into this phenomena indicates we should perhaps be splitting these things into two tiers, the runs which focus solely on the gameplay (or try to anyway), and those which exploit non-gameplay features somehow. This way, each can have its own set of rules as to what is considered good or bad play, and how multiple runs for a game compare against each other across versions.
	$LF
]p
[p 
	"Returning to the problem at hand, in my opinion, we need a way to classify these 
	[em 
		"total control
	]em
	" and similar runs. They need to have their own rules regarding completion criteria, as well as overall criteria on what is allowed and disallowed. I find a key factor here that games which lack these exploits are finite. Baring loops, there are a (nearly incalculable) finite amount of ways to complete a game. However, in games that we can add our own code, once we do so, there are now an infinite amount of ways to proceed. These two groups are now objectively distinct, and we really do need to come up with a set of rules for each. These rules we develop should take into account how the different groups of these runs differ from each other as I entailed in my presentation of the previous problem, and allow for many runs per game, but limit the infinite.
	$LF
]p
[p 
	"An important point to consider in developing a tier and rules for it is how a run makes use of the existing game once its payload begins. This run to my knowledge is the first run to no longer make any use of the game whatsoever once the payload begins. Meaning that the final payload can be ran on any SNES game once controller input to RAM becomes possible. Since it's not tied to a game, do we accept different runs of Notepad attached to Super Mario World, Super Metroid, Kirby Super Star, and others? Not only do we have to categorize what kind of diversity we allow for any given game, we need to limit how we apply this diversity to many different games, as I do not wish to publish the same virtually identical payload over and over.
	$LF
]p
[p 
	"I already began work in trying to 
	[a class=intlink href=/Nach/RFCTierTechnicalShowcase 
		"define a new tier
	]a
	" for these kinds of runs in order to spark some discussion. However, I find this initial work to be lacking in that it does not make use of yet to be developed movie class/branch criteria, and it does not supply a series of rules on how to deal with the aforementioned sub-problems in this tier problem. If we can iron these issues out, I'd be happy to enable the site to support it, and then accept this run if it conforms to the new rules.
	$LF
]p
[p 
	"In closing I want to add that runs like this which include payloads and play them take tool-assistance to their epitome input-wise, and we should put the effort in to properly acknowledge them.
]p
