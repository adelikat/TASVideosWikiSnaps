4
[h3 id=GameObjectives 
	" Game objectives
	$LF
]h3
[ul 
	[li 
		" Emulator used: lsnes rr2-beta23
		$LF
	]li
	[li 
		" Heavy glitch abuse
		$LF
	]li
	[li 
		" Uses sub-frame resets
		$LF
	]li
	[li 
		" Aims for fastest time
		$LF
	]li
	[li 
		" Uses game-breaking glitches
		$LF
	]li
	[li 
		" Corrups save data
		$LF
	]li
	[li 
		" Abuses programming errors
		$LF
	]li
	[li 
		" Manipulates luck
		$LF
	]li
	[li 
		" Arbitrary Code Execution
		$LF
	]li
]ul
[h3 id=OldRoute 
	" Old Route
	$LF
]h3
[div class=p 
	"Please see the previous submission for things that are not explained
	$LF
]div
[h3 id=NewRoute 
	" New Route
	$LF
]h3
[div class=p 
	"knbnitkr suggested a new route plan to me.
	$LF
]div
[h4 id=NoEncounterFlag 
	" No-encounter flag
	$LF
]h4
[div class=p 
	"Karnak Castle exit turned out to turn off no-encounter flag $0A53.
	$LF
]div
[h4 id=BlackChocobo 
	" Black Chocobo
	$LF
]h4
[div class=p 
	"Crescent Town turns on Black Chocobo flag $0A93 and event tiles flag $0A1B in the forest.
	$LF
	"The event black chocobo will crash the game if checked.
	$LF
]div
[h3 id=DetailedRoute 
	" Detailed route
	$LF
]h3
[div class=p 
	[img class=embed mw-100 src=https://i.imgur.com/0GllItL.png 
	]img
	[br 
	]br
	$LF
]div
[ul 
	[li 
		" Saved to data 1 at the position of $0AD8 = {X=0x9E, Y=0x86}.
		$LF
		[ul 
			[li 
				" In the initial state it is more difficult to reduce than adding an even number of checksums, so I first increased it with config ($0970-). 
				$LF
			]li
			[li 
				" By setting to store the cursor position, cursor movement of the menu screen is shortened.
				$LF
			]li
			[li 
				" To compress the final checksum adjustment time, I did it 4 steps higher than the previous TAS.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Saved to data 3 and 2 at position of $0AD8 = {X=0x9E, Y=0x7B}.
		$LF
	]li
]ul
[ul 
	[li 
		" Resetting while saving to data 1, at position of $0AD8 = {X=0xAD, Y=0x90}.
		$LF
		[ul 
			[li 
				" I adjusted the checksum by reducing the increased configuration value.
				$LF
			]li
			[li 
				" It is important to speed up the message of the battle, but if you speed up the battle speed faster you will only accelerate the enemy.
				$LF
			]li
			[li 
				" By subframe reset, the position of data 1 has become {X=0xAD, Y=0x86}.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Loaded from data 1.
		$LF
		[ul 
			[li 
				" It walked 8 steps to the right and 2 steps down.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Resetting while saving to data 2, at position {X=0xB5, Y=0x8A}.
		$LF
		[ul 
			[li 
				" The checksum was adjusted by only waiting for 8 frames when saving the data without using the config screen.
				$LF
			]li
			[li 
				" By subframe reset, the position of data 2 has become {X=0xB5, Y=0x7B}.
				$LF
			]li
			[li 
				" Unlike the previous TAS, the checksum is correct.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Loaded from data 2.
		$LF
		[ul 
			[li 
				" It walked upwards.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Saved to data 2 at position {X=0xB6, Y=0x69}.
		$LF
		[ul 
			[li 
				" Waited 5 frames for the next checksum adjustment.
				$LF
			]li
			[li 
				" Normal reset.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Loaded from data 3.
		$LF
		[ul 
			[li 
				" It walked two steps to the right.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Resetting while saving to data 2, at position {X=0xA0, Y=0x7B}.
		$LF
		[ul 
			[li 
				" Changed his position to the second back for arbitrary code execution.
				$LF
			]li
			[li 
				" By subframe reset, the position of data 2 has become {X=0xA0, Y=0x69}.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Loaded from data 2.
		$LF
		[ul 
			[li 
				" In this position of the ocean there is an event related to the ship, so I got it!
				$LF
			]li
			[li 
				" The double speed flag by the chocobo is kept even on the ship, so it is quadrupled.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Saved to data 2 and 4 at position {X=0x9F, Y=0x6D, ShipX=0xA0, ShipY=0x6D}
		$LF
		[ul 
			[li 
				" Turned upward for the next checksum adjustment.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Moved to west-northwest by ship.
		$LF
		[ul 
			[li 
				" Turned rightward for the next checksum adjustment.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Saved to data 3 and resetting while saving to data 2, the position of data 2 has become {X=0x8A, Y=0x62, ShipX=0x8A, ShipY=0x6D}.
		$LF
		[ul 
			[li 
				" Data 2 was apparently lost as the checksum was incorrect.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Loaded from data 4.
		$LF
		[ul 
			[li 
				" It does not move.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Resetting while saving to data 2, at position {X=0x9F, Y=0x6D}.
		$LF
		[ul 
			[li 
				" By subframe reset, the position of data 2 has become {X=0x9F, Y=0x6D, ShipX=0x8A, ShipY=0x6D}.
				$LF
			]li
			[li 
				" The checksum of data 2 was still inaccurate.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Loaded from data 3.
		$LF
		[ul 
			[li 
				" It does not move.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Resetting while saving to data 2, at position {X=0x8A, Y=0x62}.
		$LF
		[ul 
			[li 
				" The checksum was adjusted mainly by the setting of the custom pad of config.
				$LF
			]li
			[li 
				" By subframe reset, the position of data 2 has become {X=0x8A, Y=0x6D, ShipX=0x8A, ShipY=0x6D}, same as the ship.
				$LF
			]li
			[li 
				" This is the best position to go straight down or left without hitting the land.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Loaded from data 2.
		$LF
		[ul 
			[li 
				" The ship went to Crescent Town and sank as the event progressed.
				$LF
			]li
			[li 
				" Black Chocobo flag $0A93 and event tiles flag $0A1B were turned on as the event progressed.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Resetting while saving to data 1.
		$LF
		[ul 
			[li 
				" Overwritten from SRAM $0000 to $05EF (WRAM $0500-$AEF) for the next checksum adjustment.
				$LF
			]li
			[li 
				" Data 1 was apparently lost as the checksum was incorrect.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Loaded from data 2.
		$LF
		[ul 
			[li 
				" Went to Karnak Castle to turn off no-encounter flag $0A53.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Resetting while saving to data 1.
		$LF
		[ul 
			[li 
				" Overwiten from SRAM $0000 to $0591 (WRAM $0500-$A91).
				$LF
			]li
			[li 
				" The no-encount flag $0A53 and event tile flag $0A1B on data 1 are turned off.
				$LF
			]li
			[li 
				" As a result of previous adjustments, the final checksum was adjusted without waiting time.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Loaded from data 1.
		$LF
		[ul 
			[li 
				" Input for arbitrary code execution was made on the load screen.
				$LF
			]li
			[li 
				" Input for arbitrary code execution was made at the end of the battle.
				$LF
			]li
		]ul
	]li
]ul
[h3 id=ArbitraryCodeSetup 
	" Arbitrary code setup
	$LF
]h3
[div class=p 
	"A direct page is 256 bytes that SNES CPU frequently accesses, and it has a memory address set according to the scene of the game different.
	$LF
	"In this game, the jump address of the BRK opcode is set to $000000.
	$LF
	"The direct page is set to $0000 in the battle scene, and pad input is put in $0000-$0005. 
	$LF
	"But after loading the save data the memory will be filled with 0.
	$LF
	"Therefore to execute arbitrary code it was necessary to fight before checking the helmet.
	$LF
	"However, because it is disturbed by the "no-encounter flag ($0A53:0x80)", you need to see the event getting off Chocobo.
	$LF
]div
[h4 id=ClosedMenuInput 
	" Closed menu input
	$LF
]h4
[div class=p 
	"When walking, the direct page will be set to $0B00,
	$LF
	"And when you open the menu screen it will be set to $0100.
	$LF
	"If you input the pad in two frames at the moment the menu screen closes, it will be put into $0100-$0105 and it will not change until you open it again.
	$LF
]div
[pre 
	"26135|........A.......|
	$LF
	"26136|..sSudl.A.L.....|
	$LF
]pre
[table 
	[tbody 
		[tr 
			[th 
				"address
			]th
			[th 
				"00
			]th
			[th 
				"01
			]th
			[th 
				"02
			]th
			[th 
				"03
			]th
			[th 
				"04
			]th
			[th 
				"05
			]th
		]tr
		[tr 
			[td 
				"$0100
			]td
			[td 
				"20
			]td
			[td 
				"3E
			]td
			[td 
				"A0
			]td
			[td 
				"3E
			]td
			[td 
				"A0
			]td
			[td 
				"3E
			]td
		]tr
	]tbody
]table
[h4 id=BattleEndInput 
	" Battle end input
	$LF
]h4
[div class=p 
	"If you escape when the second character is in order, $000A will be "FC 00 01".
	$LF
	"Then $0000 was adjusted at the moment the battle screen closed.
	$LF
]div
[pre 
	"26640|....u...A.......|
	$LF
]pre
[table 
	[tbody 
		[tr 
			[th 
				"address
			]th
			[th 
				"00
			]th
			[th 
				"01
			]th
			[th 
				"02
			]th
			[th 
				"03
			]th
			[th 
				"04
			]th
			[th 
				"05
			]th
			[th 
				"06
			]th
			[th 
				"07
			]th
			[th 
				"08
			]th
			[th 
				"09
			]th
			[th 
				"0A
			]th
			[th 
				"0B
			]th
			[th 
				"0C
			]th
			[th 
				"0D
			]th
			[th 
				"0E
			]th
			[th 
				"0F
			]th
		]tr
		[tr 
			[td 
				"$0000
			]td
			[td 
				"80
			]td
			[td 
				"08
			]td
			[td 
				"80
			]td
			[td 
				"08
			]td
			[td 
				"80
			]td
			[td 
				"08
			]td
			[td 
				" 
			]td
			[td 
				" 
			]td
			[td 
				" 
			]td
			[td 
				" 
			]td
			[td 
				"FC
			]td
			[td 
				"00
			]td
			[td 
				"01
			]td
			[td 
				" 
			]td
			[td 
				" 
			]td
			[td 
				" 
			]td
		]tr
	]tbody
]table
[h4 id=CheckedBlackChocoboInput 
	" Checked Black Chocobo input
	$LF
]h4
[pre 
	"26929|B.sSu..rA.L.....|
	$LF
	"26930|B.sSu.lrAXLR....|
	$LF
]pre
[table 
	[tbody 
		[tr 
			[th 
				"address
			]th
			[th 
				"00
			]th
			[th 
				"01
			]th
			[th 
				"02
			]th
			[th 
				"03
			]th
			[th 
				"04
			]th
			[th 
				"05
			]th
			[th 
				"06
			]th
			[th 
				"07
			]th
			[th 
				"08
			]th
			[th 
				"09
			]th
			[th 
				"0A
			]th
			[th 
				"0B
			]th
			[th 
				"0C
			]th
			[th 
				"0D
			]th
			[th 
				"0E
			]th
			[th 
				"0F
			]th
		]tr
		[tr 
			[td 
				"$0100
			]td
			[td 
				"20
			]td
			[td 
				"3E
			]td
			[td 
				"A0
			]td
			[td 
				"3E
			]td
			[td 
				"A0
			]td
			[td 
				"3E
			]td
			[td 
				"F0
			]td
			[td 
				"BB
			]td
			[td 
				"F0
			]td
			[td 
				"BB
			]td
			[td 
				"50
			]td
			[td 
				"02
			]td
			[td 
				"80
			]td
			[td 
				"01
			]td
			[td 
				"F0
			]td
			[td 
				"BB
			]td
		]tr
		[tr 
			[td 
				"$0110
			]td
			[td 
				"A0
			]td
			[td 
				"B9
			]td
			[td 
				"00
			]td
			[td 
				"00
			]td
			[td 
				" 
			]td
			[td 
				" 
			]td
			[td 
				" 
			]td
			[td 
				" 
			]td
			[td 
				" 
			]td
			[td 
				" 
			]td
			[td 
				" 
			]td
			[td 
				" 
			]td
			[td 
				" 
			]td
			[td 
				" 
			]td
			[td 
				" 
			]td
			[td 
				" 
			]td
		]tr
	]tbody
]table
[h4 id=Last3FramesInput 
	" Last 3 frames input
	$LF
]h4
[div class=p 
	"When Joypad-Registers was read by unjust timing, bit position slipped, so I did the input by which that was considered.
	$LF
]div
[pre 
	"             1-1              1-2              2-1              2-2
	$LF
	"26930|B.sSu..rA.L.....|................|................|................|
	$LF
	"26931|B.sSu.lrAXLR....|.Y....l.AXL..1..|.Ys.u.lr.X.R.1..|.Ys..d.rAXL.0.23|
	$LF
	"26932|B....d.rA.LR.1.3|BY..u.lr.X.R01..|BY.S.d.rA....1.3|BY......A.L...2.|
	$LF
]pre
[div class=p 
	"Actual Joypad binary
	$LF
]div
[table 
	[tbody 
		[tr 
			[td 
				"  
			]td
			[td 
				"  
			]td
			[td 
				"A9
			]td
			[td 
				"D6
			]td
			[td 
				"C9
			]td
			[td 
				"85
			]td
			[td 
				"D7
			]td
			[td 
				"CB
			]td
		]tr
		[tr 
			[td 
				"B5
			]td
			[td 
				"85
			]td
			[td 
				"85
			]td
			[td 
				"D5
			]td
			[td 
				"5C
			]td
			[td 
				"CB
			]td
			[td 
				"A2
			]td
			[td 
				"C0
			]td
		]tr
	]tbody
]table
[h3 id=ExecutedCodes 
	" Executed codes
	$LF
]h3
[pre 
	"-- NMI occured --
	$LF
	"00cee0 jml $001f00   <001f00> A:008d X:299c Y:11c8 S:1ff5 D:0b00 DB:00 nvmxdIzC V:225 H:  88
	$LF
	"001f00 brk #$00               A:008d X:299c Y:11c8 S:1ff5 D:0b00 DB:00 nvmxdIzC V:225 H: 120
	$LF
	"000000 bra $000a     <00000a> A:008d X:299c Y:11c8 S:1ff1 D:0b00 DB:00 nvmxdIzC V:225 H: 184
	$LF
	"00000a jsr ($0100,x) <002a9c> A:008d X:299c Y:11c8 S:1ff1 D:0b00 DB:00 nvmxdIzC V:225 H: 206
	$LF
	"000101 rol $3ea0,x   <00683c> A:008d X:299c Y:11c8 S:1fef D:0b00 DB:00 nvmxdIzC V:225 H: 264
	$LF
	"000104 ldy #$f03e             A:008d X:299c Y:11c8 S:1fef D:0b00 DB:00 nvmxdIzc V:225 H: 332
	$LF
	"000107 tyx                    A:008d X:299c Y:f03e S:1fef D:0b00 DB:00 NvmxdIzc V:225 H: 356
	$LF
	"000108 beq $00c5     <0000c5> A:008d X:f03e Y:f03e S:1fef D:0b00 DB:00 NvmxdIzc V:225 H: 370
	$LF
	"-- Start automatic polling --
	$LF
	"00010a bvc $010e     <00010e> A:008d X:f03e Y:f03e S:1fef D:0b00 DB:00 NvmxdIzc V:225 H: 386
	$LF
	"00010e beq $00cb     <0000cb> A:008d X:f03e Y:f03e S:1fef D:0b00 DB:00 NvmxdIzc V:225 H: 408
	$LF
	"000110 ldy #$00b9             A:008d X:f03e Y:f03e S:1fef D:0b00 DB:00 NvmxdIzc V:225 H: 424
	$LF
	"000113 brk #$f0               A:008d X:f03e Y:00b9 S:1fef D:0b00 DB:00 nvmxdIzc V:225 H: 448
	$LF
	"000000 bra $000a     <00000a> A:008d X:f03e Y:00b9 S:1feb D:0b00 DB:00 nvmxdIzc V:225 H: 512
	$LF
	"00000a jsr ($0100,x) <00f13e> A:008d X:f03e Y:00b9 S:1feb D:0b00 DB:00 nvmxdIzc V:225 H: 574
	$LF
	"004218 sbc ($77,x)   <00ab89> A:008d X:f03e Y:00b9 S:1fe9 D:0b00 DB:00 nvmxdIzc V:225 H: 636
	$LF
	"00421a lda #$c9d6             A:0cbc X:f03e Y:00b9 S:1fe9 D:0b00 DB:00 nvmxdIzc V:225 H: 686
	$LF
	"00421d sta $d7       <000bd7> A:c9d6 X:f03e Y:00b9 S:1fe9 D:0b00 DB:00 NvmxdIzc V:225 H: 704
	$LF
	"00421f wai                    A:c9d6 X:f03e Y:00b9 S:1fe9 D:0b00 DB:00 NvmxdIzc V:225 H: 732
	$LF
	"-- End automatic polling <85b5 d585 cb5c c0a2> --
	$LF
	"-- NMI occured --
	$LF
	"00cee0 jml $001f00   <001f00> A:c9d6 X:f03e Y:00b9 S:1fe5 D:0b00 DB:00 NvmxdIzc V:225 H:  80
	$LF
	"001f00 brk #$00               A:c9d6 X:f03e Y:00b9 S:1fe5 D:0b00 DB:00 NvmxdIzc V:225 H: 112
	$LF
	"-- Start automatic polling --
	$LF
	"000000 bra $000a     <00000a> A:c9d6 X:f03e Y:00b9 S:1fe1 D:0b00 DB:00 NvmxdIzc V:225 H: 176
	$LF
	"00000a jsr ($0100,x) <00f13e> A:c9d6 X:f03e Y:00b9 S:1fe1 D:0b00 DB:00 NvmxdIzc V:225 H: 198
	$LF
	"004218 lda $85,x     <00fbc3> A:c9d6 X:f03e Y:00b9 S:1fdf D:0b00 DB:00 NvmxdIzc V:225 H: 260
	$LF
	"00421a sta $d5       <000bd5> A:396b X:f03e Y:00b9 S:1fdf D:0b00 DB:00 nvmxdIzc V:225 H: 294
	$LF
	"00421c jml $c0a2cb   <c0a2cb> A:396b X:f03e Y:00b9 S:1fdf D:0b00 DB:00 nvmxdIzc V:225 H: 322
	$LF
]pre
[h4 id=AboutTheCode 
	" About the code
	$LF
]h4
[div class=p 
	"The event pointer $0BD6-$0BD8 was rewritten to 0xC9D639, and the event engine $C0A2CB was executed by JML(Jump to New Location Long).
	[br 
	]br
	$LF
	"The memory address to be corrected is less than the previous TAS.
	[br 
	]br
	$LF
	"Rewriting is much less than the previous TAS, because the event pointer is closer to "THE END".
	[br 
	]br
	$LF
]div
[h3 id=SpecialThanks 
	" Special Thanks
	$LF
]h3
[pre 
	"knbnitkr, Yu-ki(hs)
	$LF
]pre
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/Masterjun 
		"Masterjun
	]a
	": Judging.
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/Masterjun 
		"Masterjun
	]a
	": Just like in the judgment message of the 
	(__wikiLink|displaytext=last submission|href=/5899S)
	", this run executes controller registers while they're being updated, which is not emulated correctly. I will accept this run, but a longer run that doesn't rely on updating controller data will be considered superior and can obsolete this run even if it's longer.
	$LF
]div
[div class=p 
	"This run also skips the most part of the credits. However, it still reaches the correct end screen.
	$LF
]div
[div class=p 
	"A lot of content that made the previous run entertaining, such as the tight movement around NPCs and some fast-paced battles don't appear anymore. But the entertainment votes in the discussion thread poll show there is entertainment to be found. If the ratings of the publications agree, this can stay in Moons.
	$LF
]div
[div class=p 
	"Accepted to Moons as an improvement to the 
	(__wikiLink|displaytext=previous run|href=/3692M)
	".
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/fsvgm777 
		"fsvgm777
	]a
	": Processing.
]div
