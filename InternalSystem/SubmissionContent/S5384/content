13
[p 
	(youtube|v=Vjm8P8utT5g|w=400|h=360)
	$LF
]p
[div class=toc 
	[ul 
		[li 
			[a href=#heading-268 
				" Introduction
				$LF
			]a
		]li
		[li 
			[a href=#heading-1244 
				" Goal
				$LF
			]a
		]li
		[li 
			[a href=#heading-1944 
				" Goal choice
				$LF
			]a
		]li
		[li 
			[a href=#heading-4773 
				" Game choice
				$LF
			]a
		]li
		[li 
			[a href=#heading-5047 
				" Emulator choice
				$LF
			]a
		]li
		[li 
			[a href=#heading-7244 
				" ACE setup
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#heading-8202 
						" First stage
						$LF
					]a
				]li
				[li 
					[a href=#heading-8722 
						" Second stage
						$LF
					]a
				]li
				[li 
					[a href=#heading-10528 
						" Third stage
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#heading-12141 
				" The Payload
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#heading-12161 
						" How Gameboy graphics work
						$LF
					]a
				]li
				[li 
					[a href=#heading-15070 
						" How the playback of Gameboy content is done
						$LF
					]a
				]li
				[li 
					[a href=#heading-20266 
						" Portal credits
						$LF
					]a
				]li
				[li 
					[a href=#heading-23717 
						" SpongeBob video sequence
						$LF
					]a
				]li
				[li 
					[a href=#heading-29657 
						" Ending
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#heading-30157 
				" Storyboard
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#heading-30482 
						" Scene 1: Pokémon Yellow - In which the protagonist encounters Oak in the Hall of Fame and doesn't find his princess.
						$LF
					]a
				]li
				[li 
					[a href=#heading-30907 
						" Scene 2: Pokémon Gold - In which a saved game is loaded that makes no sense.
						$LF
					]a
				]li
				[li 
					[a href=#heading-31521 
						" Scene 3: Pokémon Crystal - In which the protagonist catches a shiny Celebi and talks to a kid with a Gameboy.
						$LF
					]a
				]li
				[li 
					[a href=#heading-32451 
						" Scene 4: Tetris - In which a kid shows off their superhuman block stacking abilities.
						$LF
					]a
				]li
				[li 
					[a href=#heading-32913 
						" Scene 5: various - In which the protagonist finds his way home and plays the NES.
						$LF
					]a
				]li
				[li 
					[a href=#heading-33292 
						" Scene 6: SMB DX - In which the protagonist plays SMB but every time Mario hits a block it gets faster.
						$LF
					]a
				]li
				[li 
					[a href=#heading-33821 
						" Scene 7: Pokémon Yellow - In which Prof. Oak turns out to be GLaDOS in disguise.
						$LF
					]a
				]li
				[li 
					[a href=#heading-34248 
						" Scene 8 - In which SpongeBob performs a magic trick.
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#heading-35070 
				" Source code
				$LF
			]a
		]li
		[li 
			[a href=#heading-35289 
				" Conclusion
				$LF
			]a
		]li
		[li 
			[a href=#heading-35962 
				" Judgement
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#heading-36081 
						" Legitimacy
						$LF
					]a
				]li
				[li 
					[a href=#heading-37224 
						" Feedback
						$LF
					]a
				]li
				[li 
					[a href=#heading-37477 
						" Entertainment Quality
						$LF
					]a
				]li
				[li 
					[a href=#heading-37839 
						" Payload Uniqueness
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#heading-39769 
								" Pokémon Gold - Pokémon Crystal
								$LF
							]a
						]li
						[li 
							[a href=#heading-40342 
								" Tetris
								$LF
							]a
						]li
						[li 
							[a href=#heading-40897 
								" Link's Awakening
								$LF
							]a
						]li
						[li 
							[a href=#heading-41835 
								" Super Mario Bros.
								$LF
							]a
						]li
						[li 
							[a href=#heading-42678 
								" Portal Music
								$LF
							]a
						]li
						[li 
							[a href=#heading-43532 
								" SpongeBob Squarepants
								$LF
							]a
						]li
					]ul
				]li
				[li 
					[a href=#heading-43811 
						" Legality
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#heading-44758 
								" Pokémon Gold - Pokémon Crystal - Tetris - Link's Awakening - Super Mario Bros.
								$LF
							]a
						]li
						[li 
							[a href=#heading-45558 
								" Portal Music
								$LF
							]a
						]li
						[li 
							[a href=#heading-47658 
								" SpongeBob Squarepants
								$LF
							]a
						]li
						[li 
							[a href=#heading-48107 
								" Bottom Line
								$LF
							]a
						]li
					]ul
				]li
				[li 
					[a href=#heading-48187 
						" Conclusion
						$LF
					]a
				]li
				[li 
					[a href=#heading-48458 
						" Advertising Clause
						$LF
					]a
				]li
			]ul
		]li
	]ul
]div
[p 
	[b 
		"Note:
	]b
	" The submission text below contains lots of spoilers that may take away from the experience.
	$LF
	"I recommend watching it first and then coming back here to find out what the hell you just watched.
	$LF
]p
[h2 
	" Introduction
	$LF
	[a id=heading-268 
	]a
]h2
[p 
	"I've always wanted to explore arbitrary code execution (ACE),
	$LF
	"but it's not easy to come up with something meaningful to do with it.
	$LF
	"Since you have the potential to do literally anything, you are held to a high standard,
	$LF
	"so it doesn't seem like you're wasting people's time sitting through the setup
	$LF
	"for what feels like an unsatisfying effect, even though the run is technically excellent (
	[a class=intlink href=/4213S 
		"unfortunate example
	]a
	").
	$LF
]p
[p 
	"I was working on this run for multiple months already and started to lose interest in the concept,
	$LF
	"when AGDQ 2017 came around, and I saw the amazing 
	[a class=intlink href=/GamesDoneQuick/AGDQ2017 
		"TASBot block
	]a
	",
	$LF
	"which showed a similar concept, but with a different focus, more suitable for a live event than a submission.
	$LF
	"After a brief defeated I-was-beaten-to-the-punch feeling, I realized that it's now or never, get this done.
	$LF
	"So thanks to everyone involved in that TASBot block, without it I may have dragged this out for many more months.
	$LF
]p
[h2 
	" Goal
	$LF
	[a id=heading-1244 
	]a
]h2
[p 
	"The aim of this run is to show more aspects of what you can do with ACE.
	$LF
	"I feel it is often misunderstood as "you can skip to the end", or "you can cause crazy effects in the game",
	$LF
	"the concept of being able to to literally anything is hard to grasp, perpetuated by the fact that in most
	$LF
	"applications what you want to do is fairly limited by the goal you have set within the game.
	$LF
]p
[p 
	"This is also an exploration of the limits of the Gameboy hardware.
	$LF
	"I try to do things that have not been done before on a Gameboy, things that it was clearly not designed
	$LF
	"for, and things that seem impossible at first glance.
	$LF
	"I'm not only exploiting the game, but the very hardware it runs on.
	$LF
]p
[h2 
	" Goal choice
	$LF
	[a id=heading-1944 
	]a
]h2
[p 
	"This run was began with a simple idea, to play another game within a game, using ACE exploits.
	$LF
	"This has been done before with toy examples,
	$LF
	"but I was aiming for a full-fledged existing game, in a way that is indistinguishable from the real thing.
	$LF
	"Obviously, it should be two games from the same system, you don't want to write emulators in ACE,
	$LF
	"plus running a powerful system (e.g. Wii) to emulate a much less powerful one (e.g. GB/NES) seems cheap.
	$LF
]p
[p 
	"Specifially, I looked at running Gen II Pokémon games inside a Gen I game.
	$LF
	"The reasoning was that I already had lots of experience with the Gameboy system and the games in particular from my previous runs (or so I thought).
	$LF
	"Gen I has easy and quick ACE setups, so you can get to the meat quickly,
	$LF
	"instead of wasting the majority of the time just for the setup.
	$LF
	"I quickly realized that Yellow will be my base game of choice,
	$LF
	"because it is the only one with Gameboy Color support, which is essential for Gen II.
	$LF
]p
[p 
	"But there were more problems.
	$LF
	"As a bit of background, GB game cartridges are not just ROM storage for the game, they also have their
	$LF
	"own controller on them and additional hardware pieces that vary by game.
	$LF
	"For example most games have writable storage built in to hold saved games or high scores.
	$LF
	"Gen II Pokémon games also have a battery-backed real-time clock in their cartridge,
	$LF
	"which is used to track real time in game.
	$LF
	"Gen I games don't have that (they have an entirely different controller in fact),
	$LF
	"which is a serious problem, meaning that Gen II code can't just be run on Gen I cartridges and work,
	$LF
	"even if we had a way to get the code on there somehow.
	$LF
]p
[p 
	"But this is going to be a predefined input file anyway, so I don't need to run all of the actual
	$LF
	"code, I just need to run equivalent code that produces the same audio-visual effect as the original.
	$LF
	"At first I thought about streamlining the original code by cutting not needed code paths and priming
	$LF
	"it so that it produced the predetermined results I wanted (basically pre-computing the emulation and
	$LF
	"only running the resulting instructions), but I came up with an even more radical idea: I realized that
	$LF
	"all the instructions that really mattered are those that put tiles on the screen or played some sounds.
	$LF
	"So all I need to do is emulate the actual audio-visual output of the game with the right timing,
	$LF
	"without any internal game state.
	$LF
]p
[p 
	"This realization was the key to this run, as it opened many more possibilities: The source of the A/V
	$LF
	"doesn't need to be another game. It could be a hack of a game. Or the mash-up of different games.
	$LF
	"Or from a different system. Or literally arbitrary A/V.
	$LF
	"This made this run become not about running a game in another game, but more about pushing the limits of the Gameboy hardware and see what is possible.
	$LF
]p
[h2 
	" Game choice
	$LF
	[a id=heading-4773 
	]a
]h2
[p 
	"The base game is not all that important, since the main point of this run is to showcase ACE.
	$LF
	"I chose Pokémon Yellow, because it has a very fast ACE setup, and it is has GBC capabilites,
	$LF
	"but any other game with an ACE exploit would work just fine.
	$LF
]p
[h2 
	" Emulator choice
	$LF
	[a id=heading-5047 
	]a
]h2
[p 
	"This run uses lsnes, because unlike the other preferred emulator BizHawk, it supports sub-frame inputs.
	$LF
	"Games can poll the joypad inputs at arbitrary times, as frequently as they like.
	$LF
	"However, most emulators arbitrarily limit your input capabilites to one input per frame,
	$LF
	"meaning that every time the game polls the inputs in that frame, this same one input is used.
	$LF
	"This is often seen as "good enough", since most game loops run only once per frame as well.
	$LF
]p
[p 
	"It's actually not good enough since the concepts of what a "frame" is is arbitrary too,
	$LF
	"and the game loop frames and the input frames often don't align properly,
	$LF
	"so you can miss out on inputs you could otherwise make on a real console.
	$LF
	"It would need to be at least twice per "frame" to work reliably,
	$LF
	"you can kind of see it as an unusual application of the 
	[a class=extlink href=https://en.wikipedia.org/wiki/Nyquist%E2%80%93Shannon_sampling_theorem  rel=nofollow 
		" Nyquist–Shannon sampling theorem
	]a
	" (with no actual connection to it),
	$LF
	"with the expected maximum frequency of one poll per frame.
	$LF
]p
[p 
	"An even better solution, which is used in lsnes, is to allow a different input every time the game polls the joypad.
	$LF
	"This way you ensure that you can definitely do any sequence of inputs that are possible on an actual console.
	$LF
	"It's still kind of awkward though, because it has an arbitrary concept of "frame" baked into the input file,
	$LF
	"so while you can define a different input for each poll of the game,
	$LF
	"you still need to know which arbitrary frame this input occurs at,
	$LF
	"instead of just having a list of inputs, once per poll, as they occur.
	$LF
	"When doing many inputs per frame, this becomes a problem, because you need to
	$LF
	"pretty much know exactly to the cycle where the input frame boundary will be,
	$LF
	"in order to assign them to the correct input frame.
	$LF
]p
[p 
	"When running your own code, being able to do as many inputs per frame as you want can be exploited
	$LF
	"to vastly increase the data throughput when injecting data using the joypad.
	$LF
	"Since the joypad is the only source of data you have, this dramatically speeds up the setup times,
	$LF
	"and allows for the real-time playback seen in this movie, with thousands of inputs each frame.
	$LF
]p
[h2 
	" ACE setup
	$LF
	[a id=heading-7244 
	]a
]h2
[p 
	"ACE setups are usually done in multiple stages, allowing for progressively more control.
	$LF
	"You can think of it as boot loaders of an operating system.
	$LF
]p
[p 
	"This run uses three bootstrapping stages to load a final payload stage that does everything.
	$LF
]p
[p 
	"So why not only use one and load the final payload right away?
	$LF
	"You are very limited at first in what you can manipulate, and it can take a long time,
	$LF
	"so you're often better off only creating a very simple program that is slightly more powerful than the current one,
	$LF
	"but can be built quickly, and let it do the rest of the work at a much faster speed.
	$LF
]p
[p 
	"The first stage is 9 bytes long, and written using item manipulation which costs multiple seconds per byte.
	$LF
	"The second stage is 13 bytes long, and written using the first stage at one byte per frame.
	$LF
	"After that, the second stage can write many bytes each frame,
	$LF
	"effectively making the rest of the rest of the setup instantaneous.
	$LF
]p
[h3 
	" First stage
	$LF
	[a id=heading-8202 
	]a
]h3
[p 
	"The inital ACE setup used in this run is very similar to 
	[a class=intlink href=/2341M 
		"FractalFusion's Pi movie
	]a
	", with only minor improvements.
	$LF
	"It spells out the same code, but uses menuing improvements to get there a bit faster (e.g. using swapping of 0-stacks as a faster way of throwing away items).
	$LF
	"The code effectively allows to write one byte per frame starting at $d350, and after each byte everything is immediately executed.
	$LF
	"See 
	[a class=intlink href=/Forum/P/342003 
		"FractalFusion's post
	]a
	" for detailed information on how it works.
	$LF
]p
[h3 
	" Second stage
	$LF
	[a id=heading-8722 
	]a
]h3
[p 
	"Using the first stage, the second stage is written at $d350:
	$LF
]p
[pre 
	"e2             ld [$ff00+c], a  // enable joypad read at all
	$LF
	"18 07          jr .start        // jump over unfinished parts of the code
	$LF
	".loop
	$LF
	"f2             ld a, [$ff00+c]  // read half-byte (nibble) input.
	$LF
	"cb 37          swap a           // swap upper and lower nibble.
	$LF
	"57             ld d, a          // store in register d temporarily
	$LF
	"f2             ld a, [$ff00+c]  // read another nibble
	$LF
	"aa             xor d            // combine the nibbles
	$LF
	"22             ld [hli], a      // write result in memory
	$LF
	".start
	$LF
	"ab             xor e            // xor with e = $5d
	$LF
	"20 f6 (7d ab)  jr nz, .loop     // loop if result not zero
	$LF
]pre
[p 
	"It heavily uses the existing values in the registers when reaching this point.
	$LF
	"Register c is 0, so [$ff00+c] conveniently points to $ff00, where the joypad inputs are read from.
	$LF
]p
[p 
	"In a Gameboy, the inputs are not all read at once, you can only read half of the inputs at a time,
	$LF
	"either the directional keys or the buttons, 4 bit each. The other half of the byte you receive is
	$LF
	"static garbage data.
	$LF
	"In order to read a full byte of data, the joypad is therefore polled twice,
	$LF
	"and the results are combined using xor, which ensures that for each byte you want to produce there is
	$LF
	"a combination of two inputs that does it.
	$LF
]p
[p 
	"The final "xor e" is only used for the exit condition.
	$LF
	"Zero is an important byte to be able to write and therefore a bad exit condition,
	$LF
	"and xoring with $5d makes it so that $5d is the exit condition instead, which happens to be an expendable value.
	$LF
]p
[p 
	"The main advantage of this stage over the first one is that it is able to run many times each frame,
	$LF
	"so it can potentially write more than 1000 bytes each frame, not just 1.
	$LF
]p
[h3 
	" Third stage
	$LF
	[a id=heading-10528 
	]a
]h3
[p 
	"The third stage has no concern for its size anymore since the second stage can write it very quickly,
	$LF
	"so it is focused on finishing the setup and putting the right bits into the right places for the payload to run.
	$LF
]p
[pre 
	"cd 96 1e   call $1e96      // call GBFadeOutToWhite, fades screen to white
	$LF
	"f3         di              // disable all interrupts
	$LF
	"e2         ld [$ff00+c], a // re-enable joypad reads
	$LF
	"e0 40      ld [rLCDC], a   // Disable LCD
	$LF
	"3c         inc a
	$LF
	"e0 4d      ld [rKEY1], a
	$LF
	"10 00      stop            // Enable double-speed mode
	$LF
	"21 00 c0   ld hl, $c000    // Write payload to $c000, similar to second stage
	$LF
	"           .loop
	$LF
	"f2         ld a, [$ff00+c]
	$LF
	"cb 37      swap a
	$LF
	"57         ld d, a
	$LF
	"f2         ld a, [$ff00+c]
	$LF
	"aa         xor d
	$LF
	"22         ld [hli], a
	$LF
	"ab         xor e
	$LF
	"20 f6      jr nz, .loop
	$LF
	"c3 00 c0   jp $c000        // Jump to written code
	$LF
]pre
[p 
	"It first calls GBFadeOutToWhite from Yellow's original code, which does a smooth screen transition to white.
	$LF
	"This is not at all necessary for the expolit to work, but helps with providing a smooth transition between the game and the ACE-controlled scenes that follow.
	$LF
	"After the transition it disables the screen (this is important to be able to access certain memory areas and be able to control the exact frame timing),
	$LF
	"and puts the system into double-speed mode.
	$LF
	"Double-speed mode is feature introduced in the GBC that increases the clock speed from 4MHz to 8MHz,
	$LF
	"effectively doubling the amount of computation you can do in the same amount of time (there are some caveats).
	$LF
]p
[h2 
	" The Payload
	$LF
	[a id=heading-12141 
	]a
]h2
[h3 
	" How Gameboy graphics work
	$LF
	[a id=heading-12161 
	]a
]h3
[p 
	[b 
		"Note:
	]b
	" This is only an overview over the relevant parts of how a Gameboy works,
	$LF
	"a more in-depth description can be found in the 
	[a class=extlink href=http://bgb.bircd.org/pandocs.htm rel=nofollow 
		"Pan Docs
	]a
	$LF
	"and the 
	[a class=extlink href=http://marc.rawer.de/Gameboy/Docs/GBCPUman.pdf rel=nofollow 
		"Gameboy CPU Manual
	]a
	", which were instrumental in figuring all of this out.
	$LF
]p
[p 
	"All graphics are based on 8x8 pixel tiles with 2bpp depth (i.e. 4 colors).
	$LF
	"These tiles can be rendered on the screen in three different ways: Background, Window and Sprites.
	$LF
	"The Background is a 32x32 tile grid (actually two of them that you can choose one of to use) that can be smoothly scrolled around on, and is often used for background images.
	$LF
	"The Window uses the same tile grids as be background, but is not scrollable and rendered over the background.
	$LF
	"They are often used for menus, dialogs, splashscreens, etc.
	$LF
	"Lastly, the Sprites are either single (8x8) or double (8x16) tiles, that can be places anywhere on the screen and can be semi-transparent.
	$LF
	"They are used for anything that moves on the background.
	$LF
	"In addition to tiles, there are color palettes, which define which of the 4 colors of a tile corresponds to which RGB color (15bit color depth).
	$LF
	"Palettes are not bound to individual tiles, but to the place in the background, window or sprite where they are used,
	$LF
	"so a single tile can be used with different palettes in different places.
	$LF
]p
[p 
	"The Gameboy renders its screen line by line, one at a time.
	$LF
	"Each line is largely treated independently from the others.
	$LF
	"The screen has 144 lines, with 160 pixels each.
	$LF
	"The time spent on each line is constant, exactly 912 cycles each (All listed cycle counts assume double-speed mode, single speed cycles counts are halved).
	$LF
	"These 912 cycles are split up into 3 phases, called Modes.
	$LF
	"The first phase is Mode 2, in which the LCD controller searches through the sprites to render, and which lasts for 160 cycles.
	$LF
	"It is followed by Mode 3, in which the data to render is sent to the LCD controller, and which can take anywhere from ~344 to ~592 cycles, depending on a lot of factors, like the number of sprites on that line.
	$LF
	"The rest of the time is spent in Mode 0 (also called HBlank), in which the LCD is inactive.
	$LF
	"After all 144 lines are rendered that way, 10 more sets of 912 cycles are spent with the LCD inactive in Mode 1 (also called VBlank).
	$LF
	"That makes a total of 912*154 = 140448 cycles spent per frame, resulting in a frame rate of 8388608 Hz/140448 = ~59.72 fps.
	$LF
]p
[p 
	"While the LCD controller is accessing data, it is inaccessible for the CPU.
	$LF
	"That means that tiles can only be written and background and window changed in Modes 0-2,
	$LF
	"and sprites can only be written in Modes 0 and 1.
	$LF
	"Gameboy games usually handle this by using the time while the screen is rendered to execute its game logic,
	$LF
	"and use the VBlank period to do all the graphics updates preparing for the next frame.
	$LF
]p
[h3 
	" How the playback of Gameboy content is done
	$LF
	[a id=heading-15070 
	]a
]h3
[p 
	"The main part of what this run does is provide a framework that allows the playback of arbitrary Gameboy footage in real-time.
	$LF
	"To achieve this, it takes several processing steps:
	$LF
]p
[p 
	"The source footage is played and all relevant writes to memory are logged,
	$LF
	"resulting in a log containing at which cycle which value was written to which address in memory.
	$LF
]p
[p 
	"From this log, you can determine the value of every address at every given cycle throughout the whole execution.
	$LF
	"This is used to determine, for each line of each frame, which tiles were rendered on that line in the background, window and sprites.
	$LF
	"Having gathered this information for all frames, you can work out which tiles and palettes are needed at which times, and when the background, window and sprite tiles need to be set to which value.
	$LF
	"The end result is a collection of actions that need to be taken with a range of cycles when they need to happen, which when executed have the same effect as the original footage.
	$LF
]p
[p 
	"This results in a way of rendering a scene to look the same as the original footage,
	$LF
	"but is generally more efficient, because it uses several optimizations that the original game doesn't use.
	$LF
	"For one, it only renders a tile only if it will actually be visible on the screen at some point during the scene,
	$LF
	"whereas games often render tiles that happen to end up off screen or covered by other tiles.
	$LF
	"Also, most games are loading and overriding tiles and palettes in chunks ("tilesets"), even if only some of them end up actually getting used,
	$LF
	"whereas the generated scene only loads a tile or palette if it ends up getting rendered, and tries to keep it loaded if it will be needed again later,
	$LF
	"so that most tiles and palettes are only loaded exactly once throughout the entire movie, even across different games.
	$LF
	"Additionally, tiles can be mirrored, allowing to re-use the same tile if they only differ by mirroring, so even fewer distinct tiles are used.
	$LF
	"Having full knowledge about the scene beforehand also means that you can load the necessary tiles and palettes spread out at convenient times, even long before they are actually needed.
	$LF
]p
[p 
	"In order to execute the actions to reproduce the scene, the list of actions needs to be serialized into a sequence of commands
	$LF
	"that can be executed one after the other so that each action is executed at the right time.
	$LF
	"This is a scheduling problem with lots of constraints, since each action not only has a different range of cycles it needs to be executed in,
	$LF
	"but also takes a different amount of time based on the type of action (e.g. loading a tile takes longer than setting a tile on the background grid).
	$LF
	"Also, different actions can only be executed at specific times when their memory regions are accessible (i.e. when they are not used by the LCD controller).
	$LF
]p
[p 
	"The used commands are hand-crafted assembly functions that are loaded as part of the ACE payload, and perform specific tasks (e.g. load a tile into memory),
	$LF
	"reading all necessary information (e.g. pixels of the tile, location where it should be stored) from the joypad.
	$LF
	"For each command, I know precisely how many cycles it takes, at which cycles it reads joypad inputs,
	$LF
	"and at which cycles it writes its output.
	$LF
	"This information is crucial to be able to schedule the commands properly,
	$LF
	"at each point you need to know exactly at which point of the rendering of the frame the Gameboy is,
	$LF
	"to avoid the times when the required memory is inaccessible.
	$LF
	"The whole execution is planned precisely down to the CPU cycle.
	$LF
]p
[p 
	"An example command used in this movie, which writes a single byte to HRAM:
	$LF
]p
[pre 
	"WriteHByteDirect:: ; 88 cycles, 4 inputs at cycles (12,28,40,56), output at cycle 64
	$LF
	"  ld hl, $ff00    ; 12
	$LF
	"  ld a, [hl]      ; 8
	$LF
	"  swap a          ; 8
	$LF
	"  xor [hl]        ; 8
	$LF
	"  ld c, a         ; 4
	$LF
	"  ld a, [hl]      ; 8
	$LF
	"  swap a          ; 8
	$LF
	"  xor [hl]        ; 8
	$LF
	"  ld [$ff00+c], a ; 8
	$LF
	"  ret             ; 16
	$LF
]pre
[p 
	"In order to define in which order the individual commands are executed,
	$LF
	"one of the commands pushes function pointers of the commands that should be executed in order onto the stack (again, read from the joypad).
	$LF
	"It is the first command to be executed after the payload has been loaded in the ACE initialization,
	$LF
	"and the last function pointer put onto the command stack always is the function itself, so that after the commands have been executed,
	$LF
	"we are ready to write a new command stack and keep going.
	$LF
	"Writing the new command stacks is interspersed between the commands that do the actual playback in regular intervals, since the stack has only limited capacity.
	$LF
]p
[p 
	"Game audio is handled in a similar way to the graphics:
	$LF
	"The log contains all memory writes to the sound subsystem, so by writing the same values we can recreate the same sound.
	$LF
	"Audio is not bound to any video frame, and its memory is always accessible.
	$LF
	"They are batched up when they happened in short succession in the original footage, and are replayed at approximately the same time (+- some thousand cycles).
	$LF
	"In the end they are actions that are sequenced into commands together with the graphics actions.
	$LF
]p
[h3 
	" Portal credits
	$LF
	[a id=heading-20266 
	]a
]h3
[p 
	"After the success of playing back GB game content using ACE, where the sound was merely a side aspect,
	$LF
	"I wondered how capable the sound hardware is, and what you can do with it.
	$LF
]p
[p 
	"Sound in a Gameboy turns out to be very limited in its abilities.
	$LF
	"It has 4 sound generating channels that can be connected to two output terminals.
	$LF
	"The first two channels generate square waves of different frequencies and amplitudes, with limited control over frequency and amplitude over time, and the last channel produces static noise.
	$LF
]p
[p 
	"Only the third channel is interesting, as it allows arbitrary wave patterns to be played.
	$LF
	"However, the RAM that holds the wave pattern only contains 32 samples that are repeated over and over, with only 4 bits per sample (i.e. 16 different possible values).
	$LF
	"It was clearly not designed for complex sounds like voice, but rather as an alternative way to creating waves with unusual shapes.
	$LF
	"You can hear this clearly in the title screen of Pokémon Yellow, with the very crude sound they achieved by overlaying multiple waves: You can hear the words, but it's not pleasant.
	$LF
]p
[p 
	"However, you can use the third channel to play longer pieces of arbitrary audio,
	$LF
	"by managing to update the wave RAM while the sound is playing.
	$LF
	"This of course requires perfect precision when to update them, to ensure they are played once and only once.
	$LF
	"The sound can only be played at very specific frequencies of 2097152/x Hz, where x is an integer between 1 and 2048.
	$LF
	"For this to line up nicely with the Gameboy's frames, only specific values of x work, exactly multiples of 57.
	$LF
	"All arbitrary sounds in this movie use x=114, which results in exactly 2 samples played every 912 cycles,
	$LF
	"so it lines up perfectly with the line timings of the screen, resulting in a sample frequency of ~18396 Hz.
	$LF
]p
[p 
	"Still, the problem remains that there are only 4 bits available per sample, not nearly enough to produce acceptable-quality sound.
	$LF
	"But there's one more audio control we can abuse: the volume control.
	$LF
	"The volume control provides a linear scaling of the audio with 8 discrete levels.
	$LF
	"By adjusting the volume for each sample, we can use it to increase the resolution of different amplitudes that can be achieved,
	$LF
	"from 16 to ~100 (some sample/volume conbinations result in the same effective amplitude).
	$LF
	"These effectively possible amplitudes are not evenly distributed though, there are more values available for the small amplitudes than for the large ones (which is actually exactly what you want).
	$LF
]p
[p 
	"So, what this movie does to produce high quality sounds (for a GB that is),
	$LF
	"is writing the wave RAM at exactly 2 samples every 912 cycles to update the samples data, while also rapidly adjusting
	$LF
	"the volume control at exactly the right times to tweak the resulting amplitudes.
	$LF
	"These processes need to be time shifted by 32 samples,
	$LF
	"meaning that the volume control affects the currently played sample, while the newly written sample is only played 32 samples into the future.
	$LF
]p
[p 
	"This requires a lot of precision and cycle counting, and is performed by a special assembly function that is loaded with the initial payload,
	$LF
	"and fed the sound data using the joypad inputs as usual. In the idle times between two audio samples,
	$LF
	"it updates the tiles on the screen to render the accompanying text and pictograms,
	$LF
	"so it also needs to be synced up with the LCD operations to only write when the memory is accessible.
	$LF
]p
[h3 
	" SpongeBob video sequence
	$LF
	[a id=heading-23717 
	]a
]h3
[p 
	"For the ending, I wanted to go all-out, and see how good of an A/V experience you could produce on Gameboy hardware using only the joypad inputs.
	$LF
]p
[p 
	"Part of it was that I wanted to show off so-called HiColor graphics.
	$LF
	"The Gameboy only has space to store 8 palettes each background tile can choose from, with 4 colors each,
	$LF
	"so the maximum amount of colors you can use on each frame is usually 32, and each 8x8 tile area can only use 4 of them at a time (plus some extra colors for the sprites which draw from different palettes, but they're not useful for this purpose).
	$LF
	"The so-called HiColor technique allows you to use significantly more colors in an image,
	$LF
	"by changing the palettes for each rendered line.
	$LF
	"This way, each line could use its own colors, even within the same 8x8 tile.
	$LF
	"This technique was not originally intended in the Gameboy's design,
	$LF
	"but it was actually used in some commercial Gameboy games.
	$LF
	"The problem with it is that you have only a very small time window to update the palettes before the next line is rendered.
	$LF
	"It is impossible to update all 8 palettes each line, so most games only update some of them, mostly 4, resulting in a total of 2304 possible colors each frame.
	$LF
	"However, there are still a lot of limitations (e.g. while you change the colors of the palettes, all tiles still point to the same palette indices, so the configuration of which tile uses which palette is constant for each line of 8x8 tiles),
	$LF
	"and it requires a lot of precision to do the palette change at exactly the right time, prohibiting the game from doing much else in the mean time.
	$LF
	"Moreover, the whole palette-swapping procedure needs to be repeated each frame, even if the screen content isn't changing at all,
	$LF
	"so it is a significant battery drain.
	$LF
]p
[p 
	"I did some calculations, to find out how much quality I can put into the sequence,
	$LF
	"limited by the amount of data I could possibly push through in a given amount of time.
	$LF
	"It came down to a balance of frame quality and frame rate:
	$LF
	"If I try to refresh the whole 20*18 tile screen every video frame, that's 20*18*16 = 5760 bytes of data,
	$LF
	"costing at least 5760*36 = 207360 cycles to read from the joypad (36 cycles is a lower bound, for just loading the byte, not actually doing anything with it).
	$LF
	"Additionally, I'd need to load 144*4 palettes for each line of the image to produce the HiColor effect,
	$LF
	"costing another 4608 bytes or 165888 cycles to load.
	$LF
	"Meanwhile, each Gameboy frame I need to maintain the palette switching to keep the HiColor effect going,
	$LF
	"costing around 62784 cycles, meaning there are only 77664 free cycles each Gameboy frame to do something useful
	$LF
	"like loading the next video frame.
	$LF
	"This would have meant I can only show a new video frame each ~6 Gameboy frames under ideal circumstances,
	$LF
	"resulting in ~10fps video, which I deemed not good enough.
	$LF
]p
[p 
	"Instead, I chose to lower the quality a bit to achieve a higher frame rate.
	$LF
	"The two compromises I made is to not update all the screen tiles, and to only update 2 of the
	$LF
	"palettes each line instead of 4, cutting down on the maintenance costs.
	$LF
	"This way I could push the frame rate up to a more acceptable 15fps, updating the video frame every 4 Gameboy frames,
	$LF
	"while maintaining a HiColor image with 960 total colors and good quality audio.
	$LF
]p
[p 
	"Unlike the playback of other Gameboy content before, this is not assembled out of individual pieces,
	$LF
	"but instead a single hand-crafted assembly function that coordinates everything, because of just how much
	$LF
	"preciosion is necessary down do every CPU cycle.
	$LF
	"It basically uses double-buffering to show one video frame, while building up the next one and switching them
	$LF
	"using the two available background tile maps.
	$LF
	"For each line that is rendered, it performs multiple operations:
	$LF
	"It updates the music samples and volume (as described above),
	$LF
	"it writes the next two palettes to update the HiColor image for the next line,
	$LF
	"it loads 1/2 of a new tile to memory for the next video frame,
	$LF
	"and it loads 3/8 of a palette to memory for the next video frame.
	$LF
	"The awkward fractions are necessary in order to be able to squeeze everything into the 912 clock cycles that are available for each line.
	$LF
	"The VBlank period is used to load the tile attributes (i.e. the mapping of tile to palette),
	$LF
	"and to prepare the rendering of the new frame.
	$LF
]p
[p 
	"Preparing the source video to be in a format that is suitable to be rendered this way
	$LF
	"while still looking acceptable was a challenge in itself.
	$LF
	"Even though there are many more colors available in HiColor mode, they are not available where you want them.
	$LF
	"Since I update only 2 palettes per line, that means the palette a specific 8x8 tile uses only updates every 4 lines,
	$LF
	"so there are still effectively up to 4x8 blocks of pixels which use the same 4-color palette.
	$LF
	"And since you only have 8 palettes available at a time for 20 tiles in each line,
	$LF
	"some will need to share the same palette.
	$LF
	"Determining which palettes are best and for which blocks to use them turns out to be a difficult problem
	$LF
	"with many constraints.
	$LF
	"I used some known algorithms to determine a good palette for each block (
	[a class=extlink href=https://en.wikipedia.org/wiki/Median_cut rel=nofollow 
		"Median cut
	]a
	", 
	[a class=extlink href=https://en.wikipedia.org/wiki/K-means_clustering rel=nofollow 
		"k-means clustering
	]a
	"),
	$LF
	"used some simplifying assumptions to distribute the palettes on the blocks,
	$LF
	"and some 
	[a class=extlink href=https://en.wikipedia.org/wiki/Dither rel=nofollow 
		"Dither
	]a
	" to smooth out the resulting image.
	$LF
]p
[p 
	"Moreover, the colors you see on the screen and the colors which a Gameboy Color produces are different,
	$LF
	"meaning that the same RGB value will produce different results on a computer screen and on a Gameboy screen.
	$LF
	"Luckily, a sneak peek into the source code of the emulator shows how it does the conversion,
	$LF
	"and all I need is to do the reverse transformation.
	$LF
	"One matrix inversion later I got a working color transformation to convert the video colors into GB colors.
	$LF
]p
[h3 
	" Ending
	$LF
	[a id=heading-29657 
	]a
]h3
[p 
	"After the ACE finished, I give control back to the original game.
	$LF
	"This is to demonstrate that even after all of this, the underlying game can still continue.
	$LF
	"I chose to put it back into the ending credits sequence, because it plays without further inputs,
	$LF
	"and it follows the usual convention of "beating the game", whatever that means at this point.
	$LF
]p
[p 
	"After the inputs have ended, you can take over with manual inputs to play the game normally,
	$LF
	"despite the ACE that happened.
	$LF
]p
[h2 
	" Storyboard
	$LF
	[a id=heading-30157 
	]a
]h2
[p 
	"There are 6 different games featured in the scenes played in this movie:
	$LF
	"Pokémon Yellow, Pokémon Gold, Pokémon Crystal, Tetris, The Legend on Zelda: Link's Awakening DX, and Super Mario Bros. DX.
	$LF
]p
[p 
	"Notes about the individual scenes:
	$LF
	"These give some insights into the thought process behind each scene.
	$LF
]p
[h3 
	" Scene 1: Pokémon Yellow - In which the protagonist encounters Oak in the Hall of Fame and doesn't find his princess.
	$LF
	[a id=heading-30482 
	]a
]h3
[p 
	"This scene is meant as a tribute to the usual credits warp that the viewer might have seen multiple times before and came to expect,
	$LF
	"but with a twist at the end using the infamous SMB quote, signaling that this is not an ordinary run,
	$LF
	"and foreshadowing the upcoming Gen II game as that next castle.
	$LF
]p
[h3 
	" Scene 2: Pokémon Gold - In which a saved game is loaded that makes no sense.
	$LF
	[a id=heading-30907 
	]a
]h3
[p 
	"The intro sequence of Pokémon Gold is played out for quite some time,
	$LF
	"to give the viewer a chance to realize what just happened, that this is a different game now,
	$LF
	"and ease them into the idea that we're going to switch games in an instant.
	$LF
	"The loading of a saved game is the transition to the next scene, but the stats of the save game don't match the next scene at all.
	$LF
	"While it would have been easy to make this more believable,
	$LF
	"I liked the idea of having small inconsistencies in the narrative for the viewer to discover.
	$LF
]p
[h3 
	" Scene 3: Pokémon Crystal - In which the protagonist catches a shiny Celebi and talks to a kid with a Gameboy.
	$LF
	[a id=heading-31521 
	]a
]h3
[p 
	"The location of this scene is chosen to be immediately familiar to most players who ever played a Gen II Pokémon game,
	$LF
	"next to the Pension and right before Goldenrod City.
	$LF
	"The initial walking around in the overworld, encountering and catching a Pokémon is selling the fact that we're actually playing Pokémon Crystal now.
	$LF
	"The inconsistency between the title screen being Gold and the gameplay being Crystal is again something for the viewer to discover.
	$LF
	"The caught Pokémon is a shiny Celebi, and the own Pokémon is a shiny Mew, as a reminder that this is no actual gameplay and I still have full control over what's happening,
	$LF
	"and to poke fun at how superficial the associated concepts of rarity are.
	$LF
	"The Gameboy kid is used as the transition to the next scene, framing it as if this is what the kid plays.
	$LF
]p
[h3 
	" Scene 4: Tetris - In which a kid shows off their superhuman block stacking abilities.
	$LF
	[a id=heading-32451 
	]a
]h3
[p 
	"Tetris was chosen because of its universal fame and recognizability, both in picture and sound, and its short length.
	$LF
	"The shown footage is my 
	[a class=intlink href=/2766M 
		"Tetris TAS
	]a
	" I did two years ago.
	$LF
	"The victory sequences have been sped up significantly, both as a showcase that this is possible as well with this framework,
	$LF
	"and as another small inconsistency for the viewer to find.
	$LF
]p
[h3 
	" Scene 5: various - In which the protagonist finds his way home and plays the NES.
	$LF
	[a id=heading-32913 
	]a
]h3
[p 
	"This scene jumps from game to game quickly, first Crystal, then Link's Awakening, back to Crystal, and finally Yellow.
	$LF
	"The scene ends in Yellow's house in front of the SNES (renamed to NES), where he started off,
	$LF
	"both to close the circle and to use the NES for the next scene transition.
	$LF
]p
[h3 
	" Scene 6: SMB DX - In which the protagonist plays SMB but every time Mario hits a block it gets faster.
	$LF
	[a id=heading-33292 
	]a
]h3
[p 
	"SMB 1-1 is again chosen because of its immediate recognizability by most viewers,
	$LF
	"and the fact that the GB version looks very similar to the NES version it represents here.
	$LF
	"The actual gameplay is just me playing around in 1-1, completing it semi-fast
	$LF
	"while not using any pipes to have a continuous scene start to finish.
	$LF
	"Including the "every time X it gets faster" meme in this sequence was merely an afterthought.
	$LF
]p
[h3 
	" Scene 7: Pokémon Yellow - In which Prof. Oak turns out to be GLaDOS in disguise.
	$LF
	[a id=heading-33821 
	]a
]h3
[p 
	"Keeping the theme of using other game's ending sequences, the Portal credits were a natural choice
	$LF
	"to show off the high quality audio capabilities with.
	$LF
	"It also fit nicely with with the text in the dialog mirroring the console text in the Portal credits.
	$LF
	"I also debated how long I should keep it playing, as to not overstay my welcome.
	$LF
]p
[h3 
	" Scene 8 - In which SpongeBob performs a magic trick.
	$LF
	[a id=heading-34248 
	]a
]h3
[p 
	"The choice for the video sequence was difficult.
	$LF
	"It needed to be short, not because I couldn't play longer sequences,
	$LF
	"but because it is really expensive on the inputs (it's basically uncompressed video pushed through a 4-bit input), blowing up the input file size.
	$LF
	"But it also needed to be recognizable, and somewhat related to the rest of the scenes.
	$LF
	"I ended up going with the "How does he do that?" scene from the SpongeBob Squarepants episode "Shanghaied",
	$LF
	"because I felt it was a fitting ending, at a state where the viewer is probably thouroughly confused about what's going on and how this is possible,
	$LF
	"and it was short enough that they may not even realize the sequence is part of the movie,
	$LF
	"in fact the technically most impresssive part of it.
	$LF
]p
[h2 
	" Source code
	$LF
	[a id=heading-35070 
	]a
]h2
[p 
	"The source code of all the tools and programs used to make this run can be found on 
	[a class=extlink href=https://github.com/MrWint/gb-tas-gen rel=nofollow 
		"GitHub
	]a
	".
	$LF
	"The usual caveats apply, it was not designed to be easly usable.
	$LF
]p
[h2 
	" Conclusion
	$LF
	[a id=heading-35289 
	]a
]h2
[p 
	"I'm very satisfied with how this turned out, and I learned a lot along the way,
	$LF
	"not just about the inner workings of a Gameboy, but also audio and video processing knowledge
	$LF
	"I didn't anticipate needing when I started: 
	[a class=extlink href=https://en.wikipedia.org/wiki/Dynamic_range_compression  rel=nofollow 
		" Dynamic range compression
	]a
	",
	$LF
	[a class=extlink href=https://en.wikipedia.org/wiki/Color_quantization  rel=nofollow 
		"Color quantization
	]a
	", 
	[a class=extlink href=https://en.wikipedia.org/wiki/Dither rel=nofollow 
		"Dither
	]a
	",
	$LF
	"audio and video container formats, and many more.
	$LF
]p
[p 
	"It was a lot of fun creating this, and I hope you enjoyed it.
	$LF
]p
[hr 
]hr
[p 
	[a class=intlink href=/Users/Profile/Nach 
		"Nach
	]a
	": Uploading a recompressed version of the author's proper input file. Also, judging.
	$LF
]p
[hr 
]hr
[h2 
	" Judgement
	$LF
	[a id=heading-35962 
	]a
]h2
[p 
	[a class=intlink href=/Users/Profile/Nach 
		"Nach
	]a
	": This was quite a run. Many aspects of it needed to be reviewed for judgement purposes.
	$LF
]p
[h3 
	" Legitimacy
	$LF
	[a id=heading-36081 
	]a
]h3
[p 
	"This run plays back correctly on a reasonably accurate emulator. However, it is unlikely this run will sync on actual hardware. However, what was done is deemed legitimate. With enough tweaking, a run with the same output should be possible on a real Gameboy Color. Since it does not actively exploit any emulator bugs, this is good enough for acceptance.
	$LF
]p
[p 
	"I will say though that playback on lsnes is a nightmare, processing the high rates of input updating its counters will bring many CPUs to it knees. Further, this is the first run I found where wine is incapable of running the Windows version of lsnes, as it crashes when the input gets heavy. Also, most emulators in wine and VirtualBox normally run as quickly as a native emulator does on Linux (often faster than even running the same Windows binary natively in Windows), although not so for this run. Something about what's going on here even brought my VirtualBox to such a slow crawl, that my ten year old laptop with a slow CPU could run it faster. None of this reflects on the legitimacy of the run though. An actual Gameboy Color has none of the overhead.
	$LF
]p
[h3 
	" Feedback
	$LF
	[a id=heading-37224 
	]a
]h3
[p 
	"User feedback for this run was terrific. It received many positive reviews, extremely entertained by the run. The feedback posted by viewers is good enough to qualify for the Stars Tier. The votes were good too, not that that matters.
	$LF
]p
[h3 
	" Entertainment Quality
	$LF
	[a id=heading-37477 
	]a
]h3
[p 
	"The entertainment level in this run was very good. The individual pieces shown were fun and entertaining. The part where Link suddenly walked through the door looking around wondering 
	[em 
		"What the triforce just happened, where am I?
	]em
	" was so funny, I literally almost choked on what I was drinking at the moment when I first saw it.
	$LF
]p
[h3 
	" Payload Uniqueness
	$LF
	[a id=heading-37839 
	]a
]h3
[p 
	"This is an important consideration in terms of accepting these kinds of runs. Some viewers incorrectly think these kinds of runs is all about technical mastery. While technical mastery is indeed a compelling reason for liking a run, it has no bearing on publishing it on our site. Technical mastery qualities alone is why I rejected 
	(__wikiLink|/4947S|4947S)
	" as our site has no place to publish such runs, nor criteria for doing so.
	$LF
]p
[p 
	"In order for a payload to be unique, it has to be tailored for the game in question, and offer something unique. Creating a payload which would work just as well being slapped onto every other game too is an immediate cause for disqualification. Our 
	[a class=intlink href=/2187M 
		"first payload
	]a
	" on this game had absolutely nothing to do with the game in question and was accepted, although in my opinion, based on an incorrect foundation of technical mastery and unfamiliarity to the concept by the viewership at large. I accepted our 
	[a class=intlink href=/2341M 
		"second payload
	]a
	" for this game as an improvement to the original, cutting out downtime, and replacing with something concise, and at least tied to a concept of a quick to exploit short run, not possible with many games. However, publishing as an original run is questionable due to it having nothing to do with the game, certainly so when the concept has started to become familiar.
	$LF
]p
[p 
	"Published payloads for other games have been tied in various ways on the games they were based, and I'm pleased to see someone finally made such a payload for this game which can obsolete the earlier ones. The payload represented for the most part provides a storyline which extends the game from which it is connected to. The different pieces are part of a story, they are not just free-floating concept demonstrations which have nothing to do with the game. This payload as a whole would not work on any other Gameboy Color game as an effective storyboard, and would seem alien.
	$LF
]p
[h4 
	" Pokémon Gold - Pokémon Crystal
	$LF
	[a id=heading-39769 
	]a
]h4
[p 
	"This segment is our first bit of payload, and 
	[em 
		"upgrades
	]em
	" the existing game to add on areas from a later game in the same series. It's possible to have more closely tied this to Pokémon Yellow with a superhuman effort, however, there is no other Gameboy Color game I can think of where this payload would seem like somehow upgrading the original game. Therefore, this is a legitimate unique payload for Pokémon Yellow, as it wouldn't fit well elsewhere. It also continues to provide a framework where the continuing payload fits in.
	$LF
]p
[h4 
	" Tetris
	$LF
	[a id=heading-40342 
	]a
]h4
[p 
	"This part of the payload could have technically been slapped onto any game. However, our author continued to make it part of the existing story. Pokémon has people playing games in them on their handheld consoles, and showing us an example of someone doing exactly that sticks to the story. Choosing any other Gameboy (Color) game could have worked too and that would be up to author preference, nevertheless it was a fine choice, and did not break the flow of the overall story started with the first payload and the original game itself.
	$LF
]p
[h4 
	" Link's Awakening
	$LF
	[a id=heading-40897 
	]a
]h4
[p 
	"This part of the payload to me was by far the funniest. At first glance, this looks like it could have been attached to any game, and indeed, it is possible to make this work within a storyline for payloads for other games. However it worked really well here, and did not break continuity with the overall payload.
	$LF
]p
[p 
	"Our player walks out of a building and ends up not just different from where they started, but in an entirely different game. Our author did a good job portraying the character's confusion as to what the heck just happened. The spot where they appeared is also a section known for somehow being a portal to a vast network of areas in Link's Awakening, and showing it's also somehow connected to a different game altogether really added to the humor. The player then walks into their residence in this game, and ends up back in their residence in Pokémon. In truth, this was executed flawlessly.
	$LF
]p
[h4 
	" Super Mario Bros.
	$LF
	[a id=heading-41835 
	]a
]h4
[p 
	"The original Pokémon has an SNES in the character's room, and the character plays what appears to be EarthBound on it (even though this is not explicitly stated or shown). Having the character play another SNES game and actually showing it would also fit in with the storyline of the payload, continuing what the game has, and works as being within the narrative. An NES game was chosen (via its Gameboy Color port), which is less plausible given the console icon, although we can postulate that the character owns a later model NES which was modeled after the SNES and therefore was only mistakenly thought to be an SNES. Changing the icon to make it look like the more recognizable original NES model would have been preferred, but all in all, this still continues a payload which is tailored to the original game.
	$LF
]p
[h4 
	" Portal Music
	$LF
	[a id=heading-42678 
	]a
]h4
[p 
	"The connection with this to the rest of the payload and game is the most tenuous of all the payloads. Choosing music from Portal, sort of fits as the storyline did involve our player using some portals between different games, but that's somewhat of a stretch in concept. The actual music having a reference to 
	[em 
		"doing stuff just because we can
	]em
	" ties in a bit with the fact the game is being exploited in this way. Other than that though, what was chosen really had no connection to the rest of it, nor do I think most viewers will make all the various assocations. This payload also goes on longer than it needs to for the connections it makes while not offering anything positive once the point has been established. If not for the strength of the rest of the payload, this segment would be enough of a reason to reject this run.
	$LF
]p
[h4 
	" SpongeBob Squarepants
	$LF
	[a id=heading-43532 
	]a
]h4
[p 
	"This short segment showing spectators in 
	[em 
		"complete disbelief as to what just happened
	]em
	" is fitting for a crazy payload. While it could also be tied onto other games, it fits in with the rest of the story here, and was short enough to not detract.
	$LF
]p
[h3 
	" Legality
	$LF
	[a id=heading-43811 
	]a
]h3
[p 
	"Being that this run uses content from elsewhere, a strong factor to consider is whether it is legal to publish this kind of run. I highly recommend others who wish to make a run like this in the future to carefully read this section and understand it before attempting to undertake what was done with this run.
	$LF
]p
[p 
	"Publishing material using content owned by others is illegal, unless it falls under 
	[a class=intlink href=/Nach/FairUse 
		"fair use
	]a
	". I enumerate the fair use criteria and how it relates to what we do in general in my aforementioned link. Part of what makes what we do legal is 
	[em 
		"the effect of the use upon the potential market for, or value of, the copyrighted work
	]em
	" namely that we are transforming the original work, providing only a small subset of it, and doing so in a way which advertises the original, potentially generating more profit for the copyright holder. However, what happens with this run doesn't quite fit into that mold.
	$LF
]p
[h4 
	" Pokémon Gold - Pokémon Crystal - Tetris - Link's Awakening - Super Mario Bros.
	$LF
	[a id=heading-44758 
	]a
]h4
[p 
	"In terms of the segments for these games in general, we only provided what can appear to be video clips from these games. 
	[a class=intlink href=/Forum/P/448452#448452 
		"thatguy
	]a
	" summarized it well, in that what we're doing basically amount to what we're doing when we publish any of our runs on YouTube. However, a key difference here is that our run being labeled 
	[em 
		"Pokémon Yellow
	]em
	" does not directly advertise these games. Therefore, in order to adhere to 
	[em 
		"fair use
	]em
	" as best we can, any place we publish videos for this, be it our pages, YouTube, Vimeo, Archive.org and elsewhere, we should be including some advertising words for these games. I will include a section at the end of this judgement as to what that should look like.
	$LF
]p
[h4 
	" Portal Music
	$LF
	[a id=heading-45558 
	]a
]h4
[p 
	"The legality of this segment gave me the most difficult time in dealing with this run. To be honest, it should not have been included. The author in this case has gotten lucky with the choice, as I'll explain in a moment, but something like this really should not be done. While game hacks often include some content from other games, the content is often minor and overlooked, often only recreated in the minute, it's certainly not a focal piece. Here, the content is pushed front and center, displayed, with lyrics, and with a considerably large typically not-fair-use-length segment.
	$LF
]p
[p 
	"The author has gotten lucky here that the copyright holder Valve Corporation has published a reasonable and forgiving 
	[a class=extlink href=http://store.steampowered.com/video_policy rel=nofollow 
		"policy
	]a
	". There are two main points of consideration from this policy:
	$LF
]p
[ol 
	[li 
		" 
		[em 
			"We are fine with publishing these videos to your website or YouTube or similar video sharing services.
		]em
		$LF
	]li
	[li 
		" 
		[em 
			"We're not fine with taking assets from our games (e.g. voice, music, items) and distributing those separately.
		]em
		$LF
	]li
]ol
[p 
	"With the first point, they are providing the intent that they approve of users advertising their content, as this is beneficial to them. With the second, they are providing the intent that they disapprove of using their content to distribute in a way which typically is not beneficial to them. What we're doing here clearly fits with their second point, however, if we advertise them appropriately, we can achieve their intent of the first point.
	$LF
]p
[p 
	"We know they want to have their music advertised, as various online music stores include minute long samples of their various music tracks for free playback, which is longer than the roughly 45 second track included in this run. If we recommend users to buy those tracks, then we can achieve the intent of the copyright holder.
	$LF
]p
[p 
	"All in all, the author has managed to 
	[em 
		"luck out
	]em
	" with the choice here, and I recommend future authors to avoid doing anything like this. I had to do considerable research to find a loophole here, which is unlikely to exist most of the time.
	$LF
]p
[h4 
	" SpongeBob Squarepants
	$LF
	[a id=heading-47658 
	]a
]h4
[p 
	"Typical fair use for video involves displaying a short segment, typically less than five seconds worth, of something culturally relevant and on point. Being that SpongeBob Squarepants is culturally relevant to many viewers, the video is short, and was used in a way which makes it part of something else falls under typical fair use. This kind of use does not even require any advertisement (although it doesn't hurt).
	$LF
]p
[h4 
	" Bottom Line
	$LF
	[a id=heading-48107 
	]a
]h4
[p 
	"As a whole I find the payload legal, although just barely.
	$LF
]p
[h3 
	" Conclusion
	$LF
	[a id=heading-48187 
	]a
]h3
[p 
	"After reviewing all the different aspects of this run, I have found it acceptable, as long as it is published with the appropriate advertising clauses (below). I am accepting this to Stars, and as an improvement to the 
	[a class=intlink href=/2341M 
		"existing published run
	]a
	".
	$LF
]p
[h3 
	" Advertising Clause
	$LF
	[a id=heading-48458 
	]a
]h3
[p 
	"Publishers, please include the following clause in all places this run is published to (including Archive.org):
	$LF
]p
[hr 
]hr
[p 
	"This video includes segments from some terrific games, including Pokémon Yellow, Crystal, and Gold, as well as from Super Mario Bros. Deluxe, Tetris, and The Legend of Zelda: Link's Awakening DX. Please check those games out.
	$LF
]p
[p 
	"This video includes music samples from The Orange Box soundtrack. If you've enjoyed what you've heard, you can purchase The Orange Box soundtrack from 
	[a class=extlink href=http://amzn.to/2nGjM7j rel=nofollow 
		"Amazon
	]a
	" or 
	[a class=extlink href=https://itunes.apple.com/us/album/orange-box-original-soundtrack/id270749981 rel=nofollow 
		"iTunes
	]a
	".
	$LF
]p
[p 
	"This video includes a clip from SpongeBob SquarePants (season two), which can be purchased in its entirety from 
	[a class=extlink href=http://amzn.to/2nGkCRv rel=nofollow 
		"Amazon
	]a
	" or 
	[a class=extlink href=https://itunes.apple.com/us/tv-season/spongebob-squarepants-season-2/id128316018 rel=nofollow 
		"iTunes
	]a
	".
	$LF
]p
[hr 
]hr
[p 
	[a class=intlink href=/Users/Profile/Spikestuff 
		"Spikestuff
	]a
	": TL;DR: It got accepted.
	[br 
	]br
	$LF
	"Publishing.
]p
