9
[div class=p 
	"What if - just hear me out - we could somehow play Color a Dinosaur on the SNES? The freeform creativity of such a game could - conceivably - unlock a brand new era of TAS creation previously unseen and unheard of in TASVideos history!
	$LF
]div
[div class=p 
	"After scratching my head for a bit, I decided the best way turns out to be putting the images into Mario Paint. In this sense, Mario Paint essentially becomes Super Color-A-Dinosaur. 
	$LF
]div
[div class=p 
	"I present therefore what I hope will open a new category for Mario Paint SNES on TASVideos after viewing and notes: Color-a-Dinosaur%. The key objectives are recreating - and coloring - the unique pattern templates from Color-a-Dinosaur as stamps, some version of the fanfare jingle, and the 16 dinosaurs - and coloring them in clearly creative and fun ways.
	$LF
]div
[div class=p 
	"This does, I've found out, turn out to be entirely possible. Assuming, of course, one is willing to do some legwork first.
	$LF
]div
[div class=card mb-2 
	[div class=card-header 
		[strong 
			"Table of contents
		]strong
	]div
	[div class=card-body 
		[ul 
			[li 
				[a href=#GameObjectives 
					" Game objectives
					$LF
				]a
			]li
			[li 
				[a href=#StoryMode 
					" Story Mode
					$LF
				]a
				[ul 
					[li 
						[a href=#ObtainSheetMusic 
							" Obtain Sheet Music
							$LF
						]a
					]li
					[li 
						[a href=#GetSheetMusicIntoMarioPaint 
							" Get Sheet Music into Mario Paint
							$LF
						]a
					]li
					[li 
						[a href=#ObtainImages 
							" Obtain Images
							$LF
						]a
					]li
					[li 
						[a href=#PrepareImages 
							" Prepare Images
							$LF
						]a
					]li
					[li 
						[a href=#TakingInventoryIntermission 
							" Taking Inventory ("Intermission")
							$LF
						]a
					]li
					[li 
						[a href=#UnderstandingGameSInputs 
							" Understanding Game's Inputs
							$LF
						]a
					]li
					[li 
						[a href=#ExaminingThatForumThread 
							" Examining that Forum Thread
							$LF
						]a
					]li
					[li 
						[a href=#ReturningToMovementAnalysis 
							" Returning to Movement Analysis
							$LF
						]a
					]li
					[li 
						[a href=#PlotterBasics 
							" The Plotter - Basics
							$LF
						]a
					]li
					[li 
						[a href=#PlottingImages 
							" Plotting Images
							$LF
						]a
					]li
					[li 
						[a href=#OptimizingPlottingImages 
							" Optimizing Plotting Images
							$LF
						]a
					]li
					[li 
						[a href=#HomageStamps 
							" Homage, Stamps
							$LF
						]a
					]li
					[li 
						[a href=#MusicRouting 
							" Music Routing
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#AssemblingTheTas 
					" Assembling the TAS
					$LF
				]a
			]li
			[li 
				[a href=#Afterword 
					" Afterword
					$LF
				]a
			]li
			[li 
				[a href=#Aftermath 
					" Aftermath
					$LF
				]a
			]li
			[li 
				[a href=#NotesFromTheMarioPaintManual 
					" Notes from the Mario Paint Manual
					$LF
				]a
				[ul 
					[li 
						[a href=#Controls 
							" Controls
							$LF
						]a
					]li
					[li 
						[a href=#HintsFromProfessorPaint 
							" Hints from Professor Paint
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#NotesFromTheMarioPaintPlayerSGuide 
					" Notes from the Mario Paint Player's Guide
					$LF
				]a
				[ul 
					[li 
						[a href=#ColorPalette 
							" Color Palette
							$LF
						]a
					]li
					[li 
						[a href=#SongEditorSoundEffectChart 
							" Song Editor Sound Effect Chart
							$LF
						]a
					]li
					[li 
						[a href=#IfYouWonder 
							" If You Wonder
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#CollectedAndOrganizedIshNotes 
					" The Collected and Organized-ish Notes
					$LF
				]a
				[ul 
					[li 
						[a href=#MajorityOfTheGame 
							" The Majority of the Game
							$LF
						]a
					]li
					[li 
						[a href=#FastStart 
							" Fast Start
							$LF
						]a
					]li
					[li 
						[a href=#CanvasMainGame 
							" Canvas / Main Game
							$LF
						]a
					]li
					[li 
						[a href=#SongEditor 
							" Song Editor
							$LF
						]a
					]li
					[li 
						[a href=#SpecialStampCreator 
							" Special Stamp Creator
							$LF
						]a
					]li
					[li 
						[a href=#AnimationLand 
							" Animation Land
							$LF
						]a
					]li
					[li 
						[a href=#WatchFile 
							" Watch File
							$LF
						]a
					]li
					[li 
						[a href=#PlotterCode 
							" Plotter Code
							$LF
						]a
					]li
					[li 
						[a href=#NotesSpecificToThisCategory 
							" Notes Specific to This "Category"
							$LF
						]a
					]li
					[li 
						[a href=#RandomNotes 
							" Random Notes
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#AdvancementsOthersCouldMake 
					" Advancements Others Could Make
					$LF
				]a
			]li
			[li 
				[a href=#ItSTimeToGo 
					" It's time to go
					$LF
				]a
				[ul 
					[li 
						[a href=#AuRevoir 
							" Au revoir
							$LF
						]a
						[ul 
							[li 
								[a href=#ButYouMayShoutEncore 
									" But you may shout "Encore!"
									$LF
								]a
							]li
						]ul
					]li
				]ul
			]li
		]ul
	]div
]div
[h2 id=GameObjectives 
	" Game objectives
	$LF
]h2
[ul 
	[li 
		" Emulator used: BizHawk 2.6.1 (x64)
		$LF
	]li
]ul
[ul 
	[li 
		" Fast where it counts, played for entertainment value where the zen of coloring is of more relevance.
		$LF
	]li
]ul
[ul 
	[li 
		" Properly recreates previous runs on older hardware.
		$LF
	]li
]ul
[ul 
	[li 
		" Properly empowers people playing back the TAS to color dinosaurs for themselves should they choose to take over from the recording at multiple points in time. (Now with sixteen colors, unique fill patterns, and no more flashing!)
		$LF
	]li
]ul
[ul 
	[li 
		" Has extensive notes in a summary section for anyone who cares to do anything tool-assisted in Mario Paint in the future.
		$LF
	]li
]ul
[ul 
	[li 
		" Tells the story of one brave, brave Sir Robin, who bravely ran away.
		$LF
	]li
]ul
[ul 
	[li 
		" Demonstrates what the very edge of sanity looks like in the way only adherents of Discordianism can.
		$LF
	]li
]ul
[ul 
	[li 
		" Is totally, like, just super chilled out by the time it's said and done, which is, like, the best reason to vote to publish.
		$LF
	]li
]ul
[h2 id=StoryMode 
	" Story Mode
	$LF
]h2
[div class=p 
	[b 
		[em 
			"After the story, run notes, afterword, and aftermath, you'll find summaries of my notes for other people who follow along in my footsteps later on. Those may actually be somewhat useful.
		]em
	]b
	$LF
]div
[div class=p 
	"The multiple-year long process used to produce this TAS.
	$LF
]div
[h3 id=ObtainSheetMusic 
	" Obtain Sheet Music
	$LF
]h3
[div class=p 
	"Color a Dinosaur wouldn't feel authentic if we couldn't reproduce the iconic - and awful - "picture completed" jingle when our picture is completed somehow.
	$LF
]div
[div class=p 
	"I am basically tonedeaf. This is a well known fact for anyone who has had the misfortune of listening to my "singing" at 3 in the morning as I walk home from across town.
	$LF
]div
[div class=p 
	"Thankfully, some tools exist to help us.
	$LF
]div
[div class=p 
	"We just have to:
	$LF
]div
[ul 
	[li 
		" Export the individual channels of the jingle audio.
		$LF
	]li
]ul
[ul 
	[li 
		" Open them in a spectrograph and obtain the note pitches and durations
		$LF
	]li
]ul
[ul 
	[li 
		" Awkwardly fumble out the BPM and meter because we're not good at all when it comes to musical theory, but guessing 4/4 and sliding the BPM until it lines up turns out to work well here. (300 BPM, by the way.)
		$LF
	]li
]ul
[ul 
	[li 
		" Ask for help from someone else who has some decent grasp of musical theory to figure out the piece's key and - at the time, this was CompuCat, from the TASBot Labs Discord server. (Thanks for your help, CompuCat!)
		$LF
	]li
]ul
[ul 
	[li 
		" Decide this is where we're stopping and send the sheet music to dwangoAC, for reasons I don't actually recall.
		$LF
	]li
]ul
[ul 
	[li 
		" Completely forget we were even doing this and let approximately one year pass. Let life happen while this simmers on the back burner.
		$LF
	]li
]ul
[ul 
	[li 
		" Try to locate the sheet music and fail, multiple times and multiple places, before ultimately finding the version sent to dwangoAC a year prior. (After messaging him to ask if he still has it laying around while he's at work - thank you for your patience and help, dwangoAC!)
		$LF
	]li
]ul
[ul 
	[li 
		" Recreate the sheet music in MuseScore using the PNG version sent to dwangoAC.
		$LF
	]li
]ul
[div class=p 
	[a href=https://imgur.com/fiPeXJs rel=noopener external nofollow 
		"https://imgur.com/fiPeXJs
	]a
	$LF
]div
[div class=p 
	"Great! Following these simple and totally sane steps, you should now have a copy of the sheet music for Color a Dinosaur!
	$LF
]div
[h3 id=GetSheetMusicIntoMarioPaint 
	" Get Sheet Music into Mario Paint
	$LF
]h3
[div class=p 
	"Now we have a new problem. The music sequencer in Mario Paint has five noteworthy properties.
	$LF
]div
[ul 
	[li 
		" It's only in the key of C Major, from the second G above middle C down to the B below middle C. There are no sharps or flats.
		$LF
	]li
]ul
[ul 
	[li 
		" It only has staff for the treble clef. (That is, there is no bass clef at all.) This is covered in the first point, but needs stressed.
		$LF
	]li
]ul
[ul 
	[li 
		" It has no idea what a sustain is, even for something as simple as defining a whole note versus a quarter note.
		$LF
	]li
]ul
[ul 
	[li 
		" You can only place notes on the beat. Given that the two time signatures in Mario Paint are 3/4 and 4/4, this means that your notes must start on the quarter note.
		$LF
	]li
]ul
[ul 
	[li 
		" It can only play one voice per pitch at a time, and a limited number of voices total at a time.
		$LF
	]li
]ul
[div class=p 
	"We can address each of these in turn.
	$LF
]div
[ul 
	[li 
		" Using 
		[a href=https://musescore.org/en rel=noopener external nofollow 
			"MuseScore's
		]a
		" tools, we can transpose music in the worst possible way - without knowing any musical theory whatsoever. So we transpose all the out of range notes on the treble clef into range. This turns out to mean transposing anything from the original song down a Major 6th on the treble clef. 
		[b 
			"After doing this, we just completely discard the sharps and flats.
		]b
		$LF
	]li
]ul
[ul 
	[li 
		" Again, we transpose, this time in a way so horrid that it could probably qualify as a crime. 
		[b 
			"We realize that about an octave and a half is between the treble and the bass clef, so we just transpose it all up a major 16th - two full octaves.
		]b
		" However, in order to match the change on the treble clef's transposition as closely as possible, we then have to transpose it upwards an additional Major 2nd. (Does this mean it totals a Major 18th? I don't think I want to know.) After doing this, we again completely discard the sharps and flats.
		$LF
	]li
]ul
[ul 
	[li 
		" Note durations? Who needs 'em! Every first year piano student knows that you just hold down the sustain pedal and slap the keys! So, we just chuck them out and worry about the note's pitch.
		$LF
	]li
]ul
[ul 
	[li 
		" This piece has eighth notes, so the next part gets a little hard. We basically half-ignore the measure divisions ingame and double up - a measure on the original sheet becomes two measures in Mario Paint.
		$LF
	]li
]ul
[ul 
	[li 
		" We - thankfully - only need three voices. We have to make a judgement call on what notes to play if any conflicts happen - if memory serves, we only have one conflict, so this turns out to be not-that-hard.
		$LF
	]li
]ul
[div class=p 
	"If you are a musician who has read that and is now hyperventilating, congratulations! You now have a fundamental understanding of the unique joy and excitement that Color-a-Dinosaur brought into the hearts of children in the late 80s! (Also, I'm half-sorry about the sustain pedal joke.)
	$LF
]div
[div class=p 
	"The jingle we now have is almost - but not quite - entirely unlike the original. Being derived from the original NES jingle by someone who can only be described - after reading the above notes - as "likely mentally unhinged", it's deemed perfectly in the spirit of the game and becomes the 16-bit completion jingle for the purposes of this TAS.
	$LF
]div
[div class=p 
	[a href=https://www.youtube.com/watch?v=UpC0USSkxMU rel=noopener external nofollow 
		"https://www.youtube.com/watch?v=UpC0USSkxMU
	]a
	$LF
]div
[div class=p 
	"We then experiment with this and playing it alongside the projection mode for images, and decide to delay the song two measures so there is enough time to "turn out the lights", as it were, and display our masterpieces in a style befitting the original, complete with slightly awkward delay.
	$LF
]div
[h3 id=ObtainImages 
	" Obtain Images
	$LF
]h3
[div class=p 
	"After that foray into madness, the date is 22 March 2021, and this part is remarkably easy by comparison.
	$LF
]div
[div class=p 
	"Open Color-A-Dinosaur and capture screenshots of each of the images. Number them from 1 to 16, in reading order. Having done so, clean them up (remove the pencil and lefthand junk), observe that the images approximate to some size on an 8x8px tile grid (216x192), and crop them to that size.
	$LF
]div
[div class=p 
	[a href=https://imgur.com/P6068vT rel=noopener external nofollow 
		"https://imgur.com/P6068vT
	]a
	$LF
]div
[div class=p 
	"While you're here, at least grab the fill patterns. The colors don't necessarily matter so much in this case; after all, part of the point of making it 16-bit is expanding the color palette. (And I'm not sure how we even begin to recreate that flashing thing the original game has going on without some sort of total control or hack.)
	$LF
]div
[div class=p 
	"Redesign the fill patterns to fit 16x16 pixels. Then realize they were already 16x16, you were just seeing a 14x14 window onto the pattern. Reconsider your life choices and how they led to this exact point for a moment before moving forwards.
	$LF
]div
[div class=p 
	[a href=https://imgur.com/awQ5mcH rel=noopener external nofollow 
		"https://imgur.com/awQ5mcH
	]a
	$LF
]div
[div class=p 
	"At first this may seem a waste of time. However, Mario Paint features a stamp editor, which will permit you to make 16x16 stamps to decorate images with. If you floodfill using one of those stamps, it actually lays it out as a flood filled pattern. (Granting, this is mostly being done for authenticity to original, and not from sheer necessity.)
	$LF
]div
[div class=p 
	"Call it a good time for a break because you're tired and it's 6:02 in the morning. And because you're talking about yourself in the second person.
	$LF
]div
[h3 id=PrepareImages 
	" Prepare Images
	$LF
]h3
[div class=p 
	"Now that it's 4:02 in the evening on 22 March 2021, we can work on preparing those images.
	$LF
]div
[div class=p 
	"We're first faced with what seems to be some kind of paradox: the SNES can output larger images, and yet our display with the smallest paintbrush is effectively only 124x84. (Reminder: Our images are around 216x192.)
	$LF
]div
[div class=p 
	[a href=https://imgur.com/3fUmuvW rel=noopener external nofollow 
		"https://imgur.com/3fUmuvW
	]a
	$LF
]div
[div class=p 
	"This seems like some kind of oversight. Why can't you do single pixels? Pondering this at lengths and doing some research leads us to realize that you can create a single pixel stamp and use that to paint images in.
	$LF
]div
[div class=p 
	"So that's what we do.
	$LF
]div
[div class=p 
	[a href=https://imgur.com/FzrIGyb rel=noopener external nofollow 
		"https://imgur.com/FzrIGyb
	]a
	$LF
]div
[div class=p 
	"As the smallest brush was 2x2 pixels and we now have a 1x1 pixel brush, we've effectively doubled what our apparent resolution is. So then our apparent resolution is now 248x168. Still a little short, but maybe we can wedge the images in there?
	$LF
]div
[div class=p 
	"So we cut the image area frame and proceed to use GIMP to place them behind it, do a little touch up, and find out that we can - in fact - *maybe* fit the images into the frame.
	$LF
]div
[div class=p 
	"We also discover:
	$LF
]div
[ul 
	[li 
		" The baseplane on image #5 isn't actually straight, so we can clean that up.
		$LF
	]li
]ul
[div class=p 
	[a href=https://imgur.com/pdBdhwA rel=noopener external nofollow 
		"https://imgur.com/pdBdhwA
	]a
	$LF
]div
[ul 
	[li 
		" The baseplane on image #6 is slanted, and likely meant to represent a slope, but because there's not enough detail to it, we can go ahead and straighten it out, too.
		$LF
	]li
]ul
[div class=p 
	[a href=https://imgur.com/cPd2R9h rel=noopener external nofollow 
		"https://imgur.com/cPd2R9h
	]a
	$LF
]div
[ul 
	[li 
		" Image #7, same adjustment. I'm going to stop posting the pictures, it's pretty easy to check if you feel a need.
		$LF
	]li
]ul
[ul 
	[li 
		" Image #8, the same adjustment but... On top of this, it's actually too tall to put onto our canvas. This is a good time to take a deep breath and once again consider what we're doing with our lives. If we leave a very small gap at the bottom and top so that those backplanes are singular spaces (so that floodfill works as expected), we will require the image to be 14 pixels shorter. We very carefully select 14 rows, by hand, with some content awareness around them, remove them, and then gently tweak the resulting image to be at least comparable to the original.
		$LF
	]li
]ul
[div class=p 
	[a href=https://imgur.com/ndZLaj9 rel=noopener external nofollow 
		"https://imgur.com/ndZLaj9
	]a
	$LF
]div
[ul 
	[li 
		" Image #9, thankfully just barely fits after that mess, and has the usual backplane adjustment.
		$LF
	]li
]ul
[ul 
	[li 
		" Image #10 is actually fine.
		$LF
	]li
]ul
[ul 
	[li 
		" Image #11, backplane adjustment.
		$LF
	]li
]ul
[ul 
	[li 
		" Image #12, just fine.
		$LF
	]li
]ul
[ul 
	[li 
		" Image #13 needs the usual backplane adjustment and is too tall, needs to lose 11 rows. I didn't feel like high-effort this time, not to mention how content dense this one is, so a different strategy to #8 was employed. First, we remove the entire background - the white fill in the back plane. Then, we separate several objects and relocate them.
		$LF
	]li
]ul
[ul 
	[li 
		[ul 
			[li 
				" The sun being moved to a new layer and moved down, along with the top spike being moved to a new layer and moved down, gives us 6 pixels. Halfway there for basically nothing!
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		[ul 
			[li 
				" The jawline up being separated from the body, and then moving the body to a new layer, and then moving it up gives us the remaining five pixels well enough.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		[ul 
			[li 
				" The body move makes the third spike from the top - the highest flopped over one - a bit cramped, so we move it to its own layer and then move it along the dinosaur's spine until it looks "good enough".
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		[ul 
			[li 
				" And then, of course, we fill in the backplane with a new layer of white, and flatten the image for export.
				$LF
			]li
		]ul
	]li
]ul
[ul 
	[li 
		" Image #14, just the backplane adjustment.
		$LF
	]li
]ul
[ul 
	[li 
		" Image #15 fits fine. The backplane, for once, is clearly meant to be curved. I don't feel like dealing with it, so I straighten it out to match the region in front of the dinosaur's front legs.
		$LF
	]li
]ul
[ul 
	[li 
		" Image #16 is just fine.
		$LF
	]li
]ul
[div class=p 
	"At that, we've managed to prep all 16 original images to be imported into Mario Paint.
	$LF
]div
[h3 id=TakingInventoryIntermission 
	" Taking Inventory ("Intermission")
	$LF
]h3
[div class=p 
	"We have something for the jingle, we have the fill patterns, and we have the images.
	$LF
]div
[div class=p 
	"All we need to do now is actually import all of them into the game.
	$LF
]div
[div class=p 
	"Mario Paint's mouse controls work something like a plotter; when the button is held, it draws on the current coordinate. When the button is released, it stops drawing. The same sort of can be said for the game's stamp patterns. Really, the entire control dynamic for the game is summarizable this way.
	$LF
]div
[div class=p 
	"Therefore, the best script for this is a relative-positioned plotter.
	$LF
]div
[div class=p 
	"Some experimentation shows that we can go quite fast, but if we go faster than 1 pixel at a time while drawing, we'll draw a dotted line with our stamp.
	$LF
]div
[div class=p 
	"The next task is to write a script that can solve the fastest route from point to point as a series of mouse inputs for us, and to design a plotter script of sorts that can take a black and white image and convert it into a rapid series of inputs.
	$LF
]div
[div class=p 
	"My usual tool being the Python programming language for such tasks, we'll use the PILLOW image editing library and examine the game's data instead of fighting with this.
	$LF
]div
[div class=p 
	"The plotter script, if it has the ability to just wait some number of frames, could very nearly generate our entire TAS for us with some careful work and planning. And, of course, experimentation.
	$LF
]div
[div class=p 
	"So first we get a feel for how the game responds to inputs, then we write the script.
	$LF
]div
[div class=p 
	"But before that, we call it a day for this. It's 5:01 in the afternoon and we've done a good amount of work for one day on this. There's a need to make spaghetti.
	$LF
]div
[h3 id=UnderstandingGameSInputs 
	" Understanding Game's Inputs
	$LF
]h3
[div class=p 
	"Now that it's 5:17 PM on 23 March 2021, and our companion has brought home turkey subs and that most sacred of love currencies - french fries - along with an energy drink, it's time to fight with this. 
	$LF
]div
[div class=p 
	"The (original) SNES Mouse has three sensitivity settings, all set by software. If you're interested in the nitty-gritty, that can
	$LF
	"be seen here on the NESdev Wiki:
	$LF
	[a href=https://wiki.nesdev.com/w/index.php/Mouse#Sensitivity rel=noopener external nofollow 
		"https://wiki.nesdev.com/w/index.php/Mouse#Sensitivity
	]a
	$LF
]div
[div class=p 
	"Looking at the sensitivity scaling, we can immediately realize that a direct mapping from the mouse value to an integer is likely at the base sensitivity setting. The question rapidly goes from "how does it behave?" to "where is the limit?"
	$LF
]div
[div class=p 
	"Utilizing RAM search and floundering about rather aimlessly, we come up with a slew of addresses which look promising for the data points we need. At a best guess, here is my RAM Watch chart after playing around with the music earlier and playing around with positioning and the stamps a bit now:
	$LF
]div
[table 
	[tbody 
		[tr 
			[td 
				"0004DC
			]td
			[td 
				"w
			]td
			[td 
				"s
			]td
			[td 
				"0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Cursor Screen X
			]td
		]tr
		[tr 
			[td 
				"0004DE
			]td
			[td 
				"w
			]td
			[td 
				"s
			]td
			[td 
				"0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Cursor Screen Y
			]td
		]tr
		[tr 
			[td 
				"0     
			]td
			[td 
				"S
			]td
			[td 
				"_
			]td
			[td 
				"1
			]td
			[td 
				"    
			]td
			[td 
				"               
			]td
		]tr
		[tr 
			[td 
				"000226
			]td
			[td 
				"b
			]td
			[td 
				"u
			]td
			[td 
				"0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Cursor Canvas X
			]td
		]tr
		[tr 
			[td 
				"000227
			]td
			[td 
				"b
			]td
			[td 
				"u
			]td
			[td 
				"0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Cursor Canvas Y
			]td
		]tr
		[tr 
			[td 
				"0     
			]td
			[td 
				"S
			]td
			[td 
				"_
			]td
			[td 
				"1
			]td
			[td 
				"    
			]td
			[td 
				"               
			]td
		]tr
		[tr 
			[td 
				"0000A9
			]td
			[td 
				"b
			]td
			[td 
				"h
			]td
			[td 
				"0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Something to do with Instrument?
			]td
		]tr
		[tr 
			[td 
				"000E8Db
			]td
			[td 
				"b
			]td
			[td 
				"h
			]td
			[td 
				"0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Actual selected instrument
			]td
		]tr
		[tr 
			[td 
				"000EB5
			]td
			[td 
				"b
			]td
			[td 
				"h
			]td
			[td 
				"0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Something to do with instrument?
			]td
		]tr
		[tr 
			[td 
				"0     
			]td
			[td 
				"S
			]td
			[td 
				"_
			]td
			[td 
				"1
			]td
			[td 
				"    
			]td
			[td 
				"               
			]td
		]tr
		[tr 
			[td 
				"00298C
			]td
			[td 
				"b
			]td
			[td 
				"u
			]td
			[td 
				"0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Special Stamp Editor Pixel 0, 0
			]td
		]tr
		[tr 
			[td 
				"00298E
			]td
			[td 
				"b
			]td
			[td 
				"u
			]td
			[td 
				"0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Special Stamp Editor Pixel 1, 0
			]td
		]tr
		[tr 
			[td 
				"0029AA
			]td
			[td 
				"b
			]td
			[td 
				"u
			]td
			[td 
				"0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Special Stamp Editor Pixel 15, 0
			]td
		]tr
		[tr 
			[td 
				"0029CC
			]td
			[td 
				"b
			]td
			[td 
				"u
			]td
			[td 
				"0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Special Stamp Editor Pixel 0, 1
			]td
		]tr
		[tr 
			[td 
				"002D6A
			]td
			[td 
				"b
			]td
			[td 
				"u
			]td
			[td 
				"0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Special Stamp Editor Pixel 15, 15
			]td
		]tr
		[tr 
			[td 
				"0004D1
			]td
			[td 
				"b
			]td
			[td 
				"u
			]td
			[td 
				"0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Stamp Current Color?
			]td
		]tr
		[tr 
			[td 
				"001124
			]td
			[td 
				"b
			]td
			[td 
				"u
			]td
			[td 
				"0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Stamp Current Color?
			]td
		]tr
	]tbody
]table
[div class=p 
	[em 
		"Aside: That's just my watch file's contents. I've reformatted it for this document's presentation.
	]em
	$LF
]div
[div class=p 
	"Whether what are marked as screen and canvas coordinates actually represent that is a bit sketchy. It's unclear in some ways, which is readily apparent by loading that watch and moving the mouse inside the canvas. Nonetheless, moving a single pixel on the screen adjusts those values by one pixel, so it's enough for our purposes.
	$LF
]div
[div class=p 
	"Now we just use the virtual pad to send controlled inputs and draw a single pixel, and we find out the way the mouse is read doesn't resolve to anything totally clear for me, personally.
	$LF
]div
[div class=p 
	"It would appear that any time the mouse is moved, the "actual" move takes place the next frame or (rarely) two frames later. Any time the button is clicked, it can take as many as three frames to read.
	$LF
]div
[div class=p 
	"Button clicks are inconsistent. Moves can be inconsistent.
	$LF
]div
[div class=p 
	"The best cleanup seems to be to wait three frames after a mouse move, five after a button click, for best response. By this, I mean that move wait wait wait (next) is correct, as well as click wait wait wait wait wait (next) is correct. (Consecutive moves seem okay; consecutive clicks I'm unsure but there's not many circumstances where clicking the mouse twice consecutively makes sense anyway.)
	$LF
]div
[div class=p 
	"Around this time, I went looking for anyone who had done *any* work on Mario Paint before me. This led me to Alden, which - after reviewing their forum history, led me to this forum topic:
	$LF
]div
[div class=p 
	(__wikiLink|href=/Forum/Topics/7209|implicitdisplaytext=Forum/Topics/7209)
	$LF
]div
[div class=p 
	"Alden evidently did their work with SNES9x, lua, and patience. WOW! Here's their page on that:
	$LF
]div
[div class=p 
	(__wikiLink|href=/HomePages/alden/AutomaticMarioPaint|implicitdisplaytext=HomePages/alden/AutomaticMarioPaint)
	$LF
]div
[div class=p 
	"That forum topic is worth review just for problems that I have to solve in the process of this. Although I was - until this moment - unaware of such work, it's worth examining it for a view of people who walked this before me. (It's safe to assume I've at least skimmed that topic going forwards in these notes.)
	$LF
]div
[h3 id=ExaminingThatForumThread 
	" Examining that Forum Thread
	$LF
]h3
[div class=p 
	"So I've covered it, here's the commentary on some of that thread:
	$LF
]div
[div class=p 
	(__wikiLink|href=/Forum/Topics/7209|implicitdisplaytext=Forum/Topics/7209)
	$LF
]div
[figure 
	[figcaption class=author 
		"Quoting Alden (27 August 2008)
	]figcaption
	[div class=p 
		"Making these was about as close to "by hand" as you could get without actually drawing it yourself. I leave the heavy lifting to premade solutions and sort of dangle them together. I start by finding an image, cropping and resizing to a size that will fit (about 245x165). Convert to a black-and-white-pixel-only bitmap (this step usually took a bit of tweaking to get a decent final image). This first part is all done "by hand", but finally I run the image through a script that converts it into a monster string of 1's and 0's. And double finally, I run that string through another script that paints the picture, pixel by pixel. (And yes, the scripts are in two different languages :S I'm lazy.)
		$LF
	]div
]figure
[div class=p 
	"YOWZA!
	$LF
]div
[div class=p 
	"The general method "works" and essentially is a variant on a plotter, but having the plotter external to the emulator likely would work better for the sake of sanity and time. Generally we talk about how it's impossible to understand a game's code well enough to create external tools, but this isn't exacty true; where the rules are rigidized enough, we can do so. (We do this, for example, at stellar distances where a signal round trip takes minutes to hours! The rigidized rules there being real world physics, generally.)
	$LF
]div
[figure 
	[figcaption class=author 
		"Quoting bisqwit
	]figcaption
	[div class=p 
		"For generating a natural looking method of drawing the edges you could apply a floodfill style algorithm. Just follow the edges in the direction that is in the same color and has the least angular change, and when you hit a dead end (a point that has no surrounding pixels that are yet to be traced), choose another yet unprocessed intersection / edge (preferably one that is closest to where you stopped) and repeat, until you have traced all the edges. When choosing another point to trace, try to choose one in the same color; and if none are remaining, then choose a different color.
		$LF
	]div
]figure
[div class=p 
	"I had been pondering a plotter, but this would be something comparable to a space filling strategy. I had actually looked into space filling curves as an approach, but the mathematics of cramming a fractal into a design's space are beyond me.
	$LF
]div
[div class=p 
	"It's worth noting that any method which minimizes time 
	[em 
		"not
	]em
	" spent drawing is going to do better overall on time. By extension, bisqwit's notes there are probably a winner.
	$LF
]div
[figure 
	[figcaption class=author 
		"Quoting bisqwit
	]figcaption
	[div class=p 
		"When drawing the edges, estimate the width of the brush needed, and draw on the center of the edge.
		$LF
	]div
]figure
[div class=p 
	"Bisqwit expands on this premise for a ways in the thread.
	$LF
]div
[div class=p 
	"I'm not going to take this up, but it's likely worth examination. Probably whether or not this saves time is image dependent, but solving for the brush placement is a bit much for me this instant, and I don't believe it will help me Color-a-Dinosaur!
	$LF
]div
[figure 
	[figcaption class=author 
		"Quoting bisqwit
	]figcaption
	[div class=p 
		"For the floodfill, you should research on the algorithm used by the game to perform the floodfill, and choose a floodfill point that is fastest by the game to perform.
		$LF
	]div
]figure
[div class=p 
	"If there's time, I'll check into this. I'm not optimistic on my time here. (Post-production note: This does appear to carry some validity, but there was a deadline and not time to investigate. Future people in this category may find some gains there with some patience and work.)
	$LF
]div
[figure 
	[figcaption class=author 
		"Quoting bisqwit
	]figcaption
	[div class=p 
		"When you feed the game a delta of 1, it is safe to assume that the cursor moves by 1 pixel. However, when you feed a delta of 20, the cursor might move by 15 pixels, or 40 pixels, or 0 pixels, depending on how it is programmed. This makes it very difficult to predict where your cursor is, and more importantly, to predict what kind of input you need to generate to place the cursor in some specific location.
		$LF
	]div
]figure
[div class=p 
	"So they had realized in 2008 what I'm fighting with this instant, in a completely different emulator. The mouse's data doesn't corrospond directly to what is programmed in game. Working out how that's distinct is necessary to establish anyhting resembling sanity.
	$LF
]div
[figure 
	[figcaption class=author 
		"Quoting bisqwit
	]figcaption
	[div class=p 
		"Mouse events, including movements, are ignored when the game is busy. Such as after setting a pixel, or after clicking an icon.
		$LF
	]div
]figure
[div class=p 
	"Yes, this seems to hold. Wish I had found this topic much sooner. Question for someone else later: Is there a good way to establish what the "busy" state is in the game? An address or anything that doesn't require guesswork?
	$LF
]div
[figure 
	[figcaption class=author 
		"Quoting bisqwit
	]figcaption
	[div class=p 
		"Clicking something for 1 frame does not register. Clicking for 2 frames usually is enough.
		$LF
	]div
]figure
[div class=p 
	"I'm finding 3 frames to be virtually bullet proof. We can extrapolate this to be a feature of the game's logic, not the emulator they were using.
	$LF
]div
[figure 
	[figcaption class=author 
		"Quoting bisqwit
	]figcaption
	[div class=p 
		"Occasionally the game forces your cursor to some position on screen. For example, when you click "save" on the custom cursor editor. Your input generator must be aware of this fact, or you'll experience a desync.
		$LF
	]div
]figure
[div class=p 
	"Comparatively true. If we do it as a plotter, we just call a halt and move on the plotter's coordinates. In effect, moves sent to the game and moves in the plotter are distinct; this way if the game moves us, we can move the plotter to match. (I had already essentially planned this, just to be able to take control and give it back arbitrarily.)
	$LF
]div
[figure 
	[figcaption class=author 
		"Quoting Alden
	]figcaption
	[div class=p 
		"I was using memory address 7E0226 and 7E0227 to track where the game thinks the cursor is
		$LF
	]div
]figure
[div class=p 
	"Those corrospond to what I've called cursor canvas positions in my watch file.
	$LF
]div
[h3 id=ReturningToMovementAnalysis 
	" Returning to Movement Analysis
	$LF
]h3
[div class=p 
	"Let's assume that x and y are treated the same, as their vectors are essentially equivalent relative to real world motion in the SNES mouse.
	$LF
]div
[div class=p 
	"We can gather some insight, then, by just moving the mouse itself.
	$LF
]div
[div class=p 
	"The sensitivity settings appear, on their face, to be a lie. This is slightly perplexing - if they don't actually change anything in the mouse's reading, what do they do?
	$LF
]div
[div class=p 
	"I pondered this for some time before it occurred to me to try selectively adding and removing frames from input sequences. Essentially, I created an arbitrarily large sequence of inputs that was:
	$LF
]div
[ul 
	[li 
		" start in a fixed position
		$LF
	]li
	[li 
		" move right ten pixels
		$LF
	]li
	[li 
		" delay x frames
		$LF
	]li
	[li 
		" click in our new position for y frames
		$LF
	]li
	[li 
		" delay x frames
		$LF
	]li
	[li 
		" move right 10 pixels
		$LF
	]li
	[li 
		" delay x frames
		$LF
	]li
	[li 
		" click in our new position for y frames again
		$LF
	]li
	[li 
		" delay x frames
		$LF
	]li
	[li 
		" move right 10 pixels
		$LF
	]li
	[li 
		" delay x frames
		$LF
	]li
	[li 
		" click in our new position for y frames again
		$LF
	]li
	[li 
		" delay x frames
		$LF
	]li
	[li 
		" move left 3 pixels for z frames - until we're back at the start. (Theoretical fastest is ten frames)
		$LF
	]li
]ul
[div class=p 
	"I read that as "total frames" = 6x + 3y + z + 3.
	$LF
]div
[div class=p 
	"Although not exhaustive, this should start to give some insight into the game's logic for input processing, regardless.
	$LF
]div
[div class=p 
	"The question is what the values are for X, Y, Z for each input setting. So I tested that. I also tested delaying and not delaying a few frames before the entire shebang to see if there was an even/odd reliance. Almost immediately I started to notice, while on 1 star/Tortoise, that the hold duration of a click changes how long I need to wait before I'm allowed to move.
	$LF
]div
[div class=p 
	"So if we assume that's the case, then just evaluating the tortoise speed, we get:
	$LF
]div
[table 
	[tbody 
		[tr 
			[th 
				" X 
			]th
			[th 
				" Y 
			]th
			[th 
				" Z 
			]th
			[th 
				" Total 
			]th
		]tr
		[tr 
			[td 
				"  7 
			]td
			[td 
				"  1 
			]td
			[td 
				" 10 
			]td
			[td 
				"     58  
			]td
		]tr
		[tr 
			[td 
				"  6 
			]td
			[td 
				"  2 
			]td
			[td 
				" 10 
			]td
			[td 
				"     55  
			]td
		]tr
		[tr 
			[td 
				"  5 
			]td
			[td 
				"  3 
			]td
			[td 
				" 10 
			]td
			[td 
				"     52  
			]td
		]tr
		[tr 
			[td 
				"  4 
			]td
			[td 
				"  4 
			]td
			[td 
				" 10 
			]td
			[td 
				"     49  
			]td
		]tr
		[tr 
			[td 
				"  3 
			]td
			[td 
				"  5 
			]td
			[td 
				" 10 
			]td
			[td 
				"     46  
			]td
		]tr
		[tr 
			[td 
				"  2 
			]td
			[td 
				"  6 
			]td
			[td 
				" 10 
			]td
			[td 
				"     43  
			]td
		]tr
		[tr 
			[td 
				"  1 
			]td
			[td 
				"  7 
			]td
			[td 
				" 10 
			]td
			[td 
				"     40  
			]td
		]tr
		[tr 
			[td 
				"  0 
			]td
			[td 
				"  8 
			]td
			[td 
				" 10 
			]td
			[td 
				"     37* 
			]td
		]tr
	]tbody
]table
[div class=p 
	[em 
		"asterisk denotes a failure in some way
	]em
	$LF
]div
[div class=p 
	"Note that I'm very bad at math, so the exact figures should be checked. I am reasonably sure about the relative three frame savings as we go down, though.
	$LF
]div
[div class=p 
	"In the last case, a slur results. A single pixel to the left during the return gets drawn. This seems to imply that values of:
	$LF
]div
[table 
	[tbody 
		[tr 
			[td 
				" x 
			]td
			[td 
				" 1  
			]td
		]tr
		[tr 
			[td 
				" y 
			]td
			[td 
				" 7  
			]td
		]tr
		[tr 
			[td 
				" z 
			]td
			[td 
				" 10 
			]td
		]tr
	]tbody
]table
[div class=p 
	"Are ideal here.
	$LF
]div
[pre 
	" 
	$LF
]pre
[div class=p 
	"In human terms, this means:
	$LF
]div
[pre 
	" 
	$LF
]pre
[ul 
	[li 
		" Perform x/y movements of the mouse without any delay between them.
		$LF
	]li
]ul
[ul 
	[li 
		" Hold the left button for a total of at least seven frames any time you click it
		$LF
	]li
]ul
[ul 
	[li 
		" Wait a frame between movement and mouse holds, both before and after.
		$LF
	]li
]ul
[pre 
	" 
	$LF
]pre
[div class=p 
	"Moving the mouse while holding left mouse button is subject to the same timing requirements - the only difference is that the pause is replaced by continuing to hold the left mouse button. In layman's terms, hold the mouse button for eight frames before trying to move it while drawing. (Yes, I tested this.)
	$LF
]div
[div class=p 
	"Hare shows some weird properties:
	$LF
]div
[table 
	[tbody 
		[tr 
			[th 
				" X 
			]th
			[th 
				" Y 
			]th
			[th 
				" Z 
			]th
			[th 
				" Total 
			]th
		]tr
		[tr 
			[td 
				"  1 
			]td
			[td 
				"  7 
			]td
			[td 
				" 10 
			]td
			[td 
				"     40* 
			]td
		]tr
		[tr 
			[td 
				"  1 
			]td
			[td 
				"  7 
			]td
			[td 
				" 11 
			]td
			[td 
				"     41  
			]td
		]tr
		[tr 
			[td 
				"  1 
			]td
			[td 
				"  6 
			]td
			[td 
				" 11 
			]td
			[td 
				"     38* 
			]td
		]tr
		[tr 
			[td 
				"  2 
			]td
			[td 
				"  7 
			]td
			[td 
				" 10 
			]td
			[td 
				"     46  
			]td
		]tr
	]tbody
]table
[div class=p 
	[em 
		"asterisk denotes a failure in some way
	]em
	$LF
]div
[div class=p 
	"Essentially, the most reliable option is likely 2/7/10, but is six frames slower than tortoise! Slow and steady wins the race, indeed!
	$LF
]div
[div class=p 
	"And the cheetah? Same issue. 2/7/10 or it's unreliable.
	$LF
]div
[div class=p 
	"I felt like, at this point, maybe I had botched this somehow and went back to test the tortoise again, just to check. Even after doing it on cycle after itself several times, it seems to hold fine.
	$LF
]div
[div class=p 
	"I don't understand why. At all.
	$LF
]div
[div class=p 
	"Still, this tells us - now - that for reliability, not much can beat the tortoise.
	$LF
]div
[div class=p 
	"All data with the tortoise had been done early on - each input to 11, and testing x + y movement together.
	$LF
]div
[div class=p 
	[a href=https://imgur.com/9lZUNqN rel=noopener external nofollow 
		"https://imgur.com/9lZUNqN
	]a
	$LF
]div
[div class=p 
	"Despite being far from glamourous, the test footage can be found as proof of when this was done, I suppose. Or at least proof of when it was no later than.
	$LF
]div
[div class=p 
	[a href=https://www.youtube.com/watch?v=zOt506Nrvz0 rel=noopener external nofollow 
		"https://www.youtube.com/watch?v=zOt506Nrvz0
	]a
	$LF
]div
[div class=p 
	"I had wanted to sleep at 4:34 in the morning (24 March), but that didn't work out. So while I did take a break for a few hours, it's 7:35 and I can't sleep because this image is bugging me.
	$LF
]div
[div class=p 
	"I charted the input delta for the x coordinate to the ingame result for x coordinates from that picture.
	$LF
]div
[table 
	[tbody 
		[tr 
			[th 
				" Input 
			]th
			[th 
				" Ingame 
			]th
		]tr
		[tr 
			[td 
				"      0 
			]td
			[td 
				"       0  
			]td
		]tr
		[tr 
			[td 
				"      1 
			]td
			[td 
				"       1  
			]td
		]tr
		[tr 
			[td 
				"      2 
			]td
			[td 
				"       2  
			]td
		]tr
		[tr 
			[td 
				"      3 
			]td
			[td 
				"       3  
			]td
		]tr
		[tr 
			[td 
				"      4 
			]td
			[td 
				"       4  
			]td
		]tr
		[tr 
			[td 
				"      5 
			]td
			[td 
				"       5  
			]td
		]tr
		[tr 
			[td 
				"      6 
			]td
			[td 
				"       6  
			]td
		]tr
		[tr 
			[td 
				"      7 
			]td
			[td 
				"       7  
			]td
		]tr
		[tr 
			[td 
				"      8 
			]td
			[td 
				"       8  
			]td
		]tr
		[tr 
			[td 
				"      9 
			]td
			[td 
				"       9  
			]td
		]tr
		[tr 
			[td 
				"     10 
			]td
			[td 
				"      10  
			]td
		]tr
		[tr 
			[td 
				"    >10 
			]td
			[td 
				"      10  
			]td
		]tr
	]tbody
]table
[div class=p 
	"This seems to hold for inputs on y axis as well.
	$LF
]div
[div class=p 
	"7:46 AM. I'm going to try sleeping now that I've done that bit of work that was bouncing around my head.
	$LF
]div
[div class=p 
	"And now it's 25 March 2021 at 12:41 in the morning. It was meatloaf day. Beyond that, I'm just back to work after playing some Evoland 2 with my companion.
	$LF
]div
[div class=p 
	"At this point, only two pieces of data are missing, both of which there's some access to.
	$LF
]div
[div class=p 
	"The first is where we are in the game's coordinates, which are reflected in WRAM addresses from my watch file, in that first segment, anyway:
	$LF
]div
[table 
	[tbody 
		[tr 
			[td 
				"0004DC
			]td
			[td 
				"w
			]td
			[td 
				"s
			]td
			[td 
				"0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Cursor Screen X
			]td
		]tr
		[tr 
			[td 
				"0004DE
			]td
			[td 
				"w
			]td
			[td 
				"s
			]td
			[td 
				"0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Cursor Screen Y
			]td
		]tr
		[tr 
			[td 
				"0     
			]td
			[td 
				"S
			]td
			[td 
				"_
			]td
			[td 
				"1
			]td
			[td 
				"    
			]td
			[td 
				"               
			]td
		]tr
		[tr 
			[td 
				"000226
			]td
			[td 
				"b
			]td
			[td 
				"u
			]td
			[td 
				"0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Cursor Canvas X
			]td
		]tr
		[tr 
			[td 
				"000227
			]td
			[td 
				"b
			]td
			[td 
				"u
			]td
			[td 
				"0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Cursor Canvas Y
			]td
		]tr
	]tbody
]table
[div class=p 
	"I'm just going to call those `4DC`, `4DE`, `226`, and `227` for short.
	$LF
]div
[div class=p 
	"`226` and `227` Do seem to be strictly the canvas. If we wanted just a straight plotter for the canvas, they'd work reasonably well. However, because we do want the entire screen, they're not going to work out. So we can ignore them.
	$LF
]div
[div class=p 
	"`4DC` and `4DE` look promising. They have minimum and maximum values I'll get to momentarily, but they seem to be unreliable for motion at the extremes. So in practice approximately 8px of distance towards their apparent edges is unreliable.
	$LF
]div
[div class=p 
	"After starting the below chart, I worked out why. Basically, if a movement would make the cursor go past the limit, it's ignored. So any point up to the limits is reliable if you're only travelling 1 pixel a frame, but if you're travelling 10 pixels a frame, then effectively you can only guarantee up to 10 pixels away from it. In turn, this seems to make it be some arbitrary distance it stops - in reality, it's stopped such that whatever speed you're trying to go doesn't exceed the boundary from the present position. (Hopefully that makes sense.)
	$LF
]div
[div class=p 
	"I also discovered that stamp placement is a little finicky on the right hand side, leading to the idea of a stamp with a pixel in the center or top right (instead of the top left). I tried both of these, and decided that a stamp towards the middle would likely be best. When you exit the canvas region, the frame turns black; when you enter it, the frame turns red; some experimentation led me to which pixel would always be drawable in the canvas region at the moment it was activated. (I spent some time tweaking a stamp and making note here.) If the stamp's drawing space coordinates go from (0, 0) at the top left to (15, 15) at the bottom right, that would be (8, 8) - I doubt this to be coincidental. Investigation of several tools shows that they align on the same coordinates for the canvas, and sliding out of the canvas with this stamp doesn't result in any displacement of the cursor graphics.
	$LF
]div
[pre 
	"4DC = Screen X
	$LF
	"4DE = Screen Y
	$LF
	$LF
]pre
[div class=p 
	"As signed 2-byte ints
	$LF
]div
[table 
	[tbody 
		[tr 
			[th 
				"              
			]th
			[th 
				"  4DC 
			]th
			[th 
				"  4DE 
			]th
		]tr
		[tr 
			[td 
				" Canvas Min    
			]td
			[td 
				"     4 
			]td
			[td 
				"    28 
			]td
		]tr
		[tr 
			[td 
				" Canvas Max    
			]td
			[td 
				"   251 
			]td
			[td 
				"  195  
			]td
		]tr
		[tr 
			[td 
				"               
			]td
			[td 
				"       
			]td
			[td 
				"       
			]td
		]tr
		[tr 
			[td 
				" Min           
			]td
			[td 
				"   -16 
			]td
			[td 
				"    8  
			]td
		]tr
		[tr 
			[td 
				" Reliable Min  
			]td
			[td 
				"    -6 
			]td
			[td 
				"   18  
			]td
		]tr
		[tr 
			[td 
				" Max           
			]td
			[td 
				"  271  
			]td
			[td 
				"  215  
			]td
		]tr
		[tr 
			[td 
				" Reliable Max  
			]td
			[td 
				"  261  
			]td
			[td 
				"  205  
			]td
		]tr
	]tbody
]table
[div class=p 
	"Essentially, this gives us one of the two pieces of data. The other one isn't quite so interesting; we mostly just want to know how TASStudio encodes mouse inputs, basically, as we can copy/paste to strings from it.
	$LF
]div
[div class=p 
	"The correct input configuation for this game is a mouse in the first port and a controller in the second port. (The second port controller can be used for a few pushbutton things.) So that's what my inputs should match, roughly.
	$LF
]div
[div class=p 
	"So, let's do four frames:
	$LF
]div
[ul 
	[li 
		" x+2
		$LF
	]li
	[li 
		" y+4
		$LF
	]li
	[li 
		" left click
		$LF
	]li
	[li 
		" right click
		$LF
	]li
]ul
[div class=p 
	"And see how that looks.
	$LF
]div
[div class=p 
	"Copy/paste from Tasstudio:
	$LF
]div
[pre 
	"|..|    2,    0,..|............|
	$LF
	"|..|    0,    4,..|............|
	$LF
	"|..|    0,    0,l.|............|
	$LF
	"|..|    0,    0,.r|............|
	$LF
	$LF
]pre
[div class=p 
	"Save as a Macro:
	$LF
]div
[div class=p 
	"... I couldn't? This is when I discovered I'd been running Bizhawk 2.4.3, and had to take some time to update and fix settings all the way into 2.6.1.
	$LF
]div
[div class=p 
	"I was, essentially, completely unamused. Especially upon finding that the issue was still present, likely due to testing (and support) of macros for the SNES mouse.
	$LF
]div
[div class=p 
	"So I'm stuck copy/pasting into TASStudio and doing it by hand. Still, knowing this, I now have everything I need to write a plotter for this game. So now it's time to do that, I suppose.
	$LF
]div
[h3 id=PlotterBasics 
	" The Plotter - Basics
	$LF
]h3
[div class=p 
	"A very, very basic plotter should have the ability to:
	$LF
]div
[ul 
	[li 
		" Drop Pen (draw on the paper)
		$LF
	]li
	[li 
		" Lift Pen (stop drawing on paper)
		$LF
	]li
	[li 
		" Make relative moves
		$LF
	]li
	[li 
		" Move to a specific location in the fastest line
		$LF
	]li
]ul
[div class=p 
	"Other features are essentially built on these. I'd like my plotter to have just a very few extra features:
	$LF
]div
[ul 
	[li 
		" Click - essentially, drop the pen for seven frames, then lift it.
		$LF
	]li
	[li 
		" Right-click - same thing, but right mouse button.
		$LF
	]li
	[li 
		" Pause - wait some number of frames, give no meaingful output.
		$LF
	]li
	[li 
		" Jumpto - change the internal coordinates without moving the pen itself (for example, if Mario Paint teleports our cursor for us).
		$LF
	]li
]ul
[div class=p 
	"I will build one last feature on top of this, but one thing at a time.
	$LF
]div
[div class=p 
	"(Please note that the files as are have been omitted for the sake of sanity in the increasing length of this publication, but will be provided at the end.)
	$LF
]div
[div class=p 
	"The time it took to get a basic plotter down stole most the night, and that's quite alright. Between that and reading manuals, it's now 8:52 in the morning on 25 March 2021, and I'm going to get some rest now.
	$LF
]div
[h3 id=PlottingImages 
	" Plotting Images
	$LF
]h3
[div class=p 
	"I rolled out of bed around 3:30 PM, 25 March. It's about 5:36 PM as I write this. (Incidentally, happy birthday, Caley!)
	$LF
]div
[div class=p 
	"Now that we have a plotter, the next step is to draw images with it. This requires PILLOW and a few assumptions.
	$LF
]div
[div class=p 
	"If I wanted to take the time, I could arrange a stack of pens and then define their rules such that each pen corrosponded to a color. Code could conceivably be written to swap the pens out.
	$LF
]div
[div class=p 
	"It just sounds like too much effort for this project with time steadily running down. So instead I'm going to just assume some basic preprocessing can be done.
	$LF
]div
[ul 
	[li 
		" The plotter isn't responsible for selecting the correct pen.
		$LF
	]li
]ul
[ul 
	[li 
		" The plotter isn't responsible for erasing the contents of the screen when there's more than just an empty space.
		$LF
	]li
]ul
[ul 
	[li 
		" The plotter is only responsible for printing a 1 bit image to the screen, starting with where it is "right now", essentially. Ideally as quickly as possible, but we'll settle for "at all" first.
		$LF
	]li
]ul
[div class=p 
	"This code is straightforward. Given that we already have the code to do the functions described in the previous section, we can make use of the PILLOW library and just read the pixels off one at a time. A very naive - but working - solution is as easy as traversing X and Y and clicking in each position. So that's how we'll start.
	$LF
]div
[div class=p 
	"Preparing images can look many ways, but the simplest start is just exporting them fullsize with everything non-necessary screened off. (Because white means "don't draw" to our plotter, this essentially means leaving those regions white.)
	$LF
]div
[div class=p 
	[a href=https://imgur.com/mrBQzT1 rel=noopener external nofollow 
		"https://imgur.com/mrBQzT1
	]a
	$LF
]div
[div class=p 
	"As I stated, it's quite possible to do this very naively. The first algorithm just traverses the X and Y in the image, and moves the pen accordingly.
	$LF
]div
[div class=p 
	[a href=https://gist.github.com/greysondn/d271f78abae880fdd03b83603407f9b8 rel=noopener external nofollow 
		"https://gist.github.com/greysondn/d271f78abae880fdd03b83603407f9b8
	]a
	$LF
]div
[div class=p 
	"(NB: A better and more complete version of the code will be presented towards the end of this document.)
	$LF
]div
[div class=p 
	"Testing that gave me a series of results that I'm not the proudest of.
	$LF
]div
[div class=p 
	[a href=https://imgur.com/JmTATcA rel=noopener external nofollow 
		"https://imgur.com/JmTATcA
	]a
	$LF
]div
[div class=p 
	"Essentially, due to the oddities - I think - in how the stamp draws, there's an offset of about 10 x and 11 y I didn't account for. So my drawing was done offset. This is easy to fix - we just add the offset as a property we can adjust in the plotter, then make use of it when drawing the image.
	$LF
]div
[div class=p 
	"But most painful is just 
	[em 
		"how slow this actually is
	]em
	" The last input is on frame 17302. There's sixteen of these! And I still have to put in the redone jingle and actually play it and color these images in between! AGGGGH!
	$LF
]div
[div class=p 
	"It's 9:33 PM and I've not eaten. The next step will be optimizing this algorithm. I have a few thoughts - and will give a bit of credit where it's due on that front - but one thing at a time. I'm going to take a break, joke with my companion, and dump the video of this being made.
	$LF
]div
[div class=p 
	[a href=https://www.youtube.com/watch?v=bm8SBYSqjl8 rel=noopener external nofollow 
		"https://www.youtube.com/watch?v=bm8SBYSqjl8
	]a
	$LF
]div
[h3 id=OptimizingPlottingImages 
	" Optimizing Plotting Images
	$LF
]h3
[div class=p 
	"It's 10:28 PM on 25 March 2021 (and still, happy birthday for about an hour and a half more, Caley) and it's time to talk about optimizations.
	$LF
]div
[div class=p 
	"I'm going to start by repeating the quote from Bisqwit earlier.
	$LF
]div
[figure 
	[figcaption class=author 
		"Quoting bisqwit
	]figcaption
	[div class=p 
		"For generating a natural looking method of drawing the edges you could apply a floodfill style algorithm. Just follow the edges in the direction that is in the same color and has the least angular change, and when you hit a dead end (a point that has no surrounding pixels that are yet to be traced), choose another yet unprocessed intersection / edge (preferably one that is closest to where you stopped) and repeat, until you have traced all the edges. When choosing another point to trace, try to choose one in the same color; and if none are remaining, then choose a different color.
		$LF
	]div
]figure
[div class=p 
	"I don't like the method as described, but what I'm going to do is likely influenced by having seen that message. So credit where credit is due: thank you bisqwit for inspiration here.
	$LF
]div
[div class=p 
	"The following things need done to the plotter to optimize it considerably:
	$LF
]div
[ul 
	[li 
		" The offset needs added to the plotter's code. That's not hard at all; just need to remember to do it.
		$LF
	]li
]ul
[ul 
	[li 
		" Any next-pixel that is 10 or fewer pixels away can be jumped straight to when the pen is down (Mario Paint won't draw the pixels in between.)
		$LF
	]li
]ul
[ul 
	[li 
		" Preference should go essentially from closest pixel to furthest pixel, although certain types of routing would 
		[em 
			"still
		]em
		" be faster.
		$LF
	]li
]ul
[ul 
	[li 
		" An actual intelligent search algorithm for pixels and a checklist of some sort needs to be maintained. The best I've got is 
		[a href=https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm rel=noopener external nofollow 
			"Djikstra's Algorithm
		]a
		" over the list of pixels. Slight bonus - I can in fact use the Manhattan distance as the heuristic cost here, so that should help just a little - namely in that I don't need to keep a running cost total anywhere.
		$LF
	]li
]ul
[div class=p 
	"It took me two hours and several attempts, but that certainly does work significantly better. I wound up just writing my own data structure that can search itself properly to handle the problem. Given the sheer amount of gains, I've decided this will be the final algorithm for this submission.
	$LF
]div
[div class=p 
	"The final input to draw the first image - correctly, in the correct place, even - is now 3180. Compare that to the first algorithm (which finished on frame 17302) and I've made tremendous gains by optimizing that code for the several features given above.
	$LF
]div
[div class=p 
	"It may still be possible to make other optimizations, but I'll leave that to someone else. I'm quite content with this lot, personally.
	$LF
]div
[div class=p 
	"It's now 1:12 in the morning, 26 March 2021. The next task is actually assembling the TAS itself. I'm going to dump a demo video of this algorithm in action and call it a night.
	$LF
]div
[div class=p 
	[a href=https://www.youtube.com/watch?v=ysb251-oiGs rel=noopener external nofollow 
		"https://www.youtube.com/watch?v=ysb251-oiGs
	]a
	$LF
]div
[h3 id=HomageStamps 
	" Homage, Stamps
	$LF
]h3
[div class=p 
	"It's 11:25 AM on the 26th of March 2021, and I'm going to carry on.
	$LF
]div
[div class=p 
	"I don't necessarily want to do all the fill patterns from the original game, I just want to have the pattern templates in Mario Paint for people who may wish to play around with this at some point.
	$LF
]div
[div class=p 
	"I did want to reference a couple of the NES runs while I'm doing this. Specifically, Deign's Stegosaurus run and Adelikat's Pterodactyl run. In order to do so, I'll need the fill patterns they each use.
	$LF
]div
[div class=p 
	"But first! There are 15 stamp pattern slots avaialble for users to save/load from in Mario Paint. I need 1 for the single pixel brush, which leaves me with 14. I want to leave 1 for people who play with this to swap into/out of, so now we're down to 13. Color-a-Dinosaur features 9 pattern bases, which means that I'm left with just 4 free.
	$LF
]div
[div class=p 
	"Let's see what adelikat and Deign use before freaking out.
	$LF
]div
[div class=p 
	"No lie, I did start to freak out here. That's because, at first glance, they're using a total of some 7 patterns - or perhaps 5. Well, the work is documented in this image:
	$LF
]div
[div class=p 
	[a href=https://imgur.com/eq7BIx9 rel=noopener external nofollow 
		"https://imgur.com/eq7BIx9
	]a
	$LF
]div
[div class=p 
	"I think - I'm not sure yet - that the Special Stamp Editor obeys much the same rules as the normal editor. So we just need to know literally every hit box, then to build out the stamps on those hitboxes.
	$LF
]div
[div class=p 
	"I've been gathering this data the entire time. Here's what I have as I hit this point:
	$LF
]div
[div class=p 
	[a href=https://imgur.com/LCb2gD7 rel=noopener external nofollow 
		"https://imgur.com/LCb2gD7
	]a
	$LF
]div
[div class=p 
	"I don't find the next bit too terribly interesting. Just lay out the patterns on that hitbox grid such that there will be 1 pixel of input for every cell. Some degree of routing can still be done here; knowing that gaps of 10 or fewer pixels can be drawn without lifting our pen means we should probably just gravitate for the center of cells unless there's a gap we can close up somehow.
	$LF
]div
[div class=p 
	"While doing this, I took the liberty of rearranging their planned order on the bar, too. There's no serious significance - mostly just what seemed to make more sense to me. The single pixel brush I need for plotting, the 9 pattern bases, the 4 for the homage pieces, and then the blank one.
	$LF
]div
[div class=p 
	"It takes me approximately 30 minutes to get them all together. Most of that is due to my poor ability to remember strings of numbers and having to flip between two images in GIMP, as opposed to anything particularly hard about it.
	$LF
]div
[div class=p 
	"I'm not sure if those will require the offset, and I'll still have to route color selection, saving, and clearing (loading a blank one?) by hand. Still, this does mean most of that routing will now handle itself. Next is routing the music input.
	$LF
]div
[h3 id=MusicRouting 
	" Music Routing
	$LF
]h3
[div class=p 
	"Essentially, I don't care much about this section. There are likely going to be a million ways I miss to optimize this, but I think the best I can do is just to know where the hitboxes are for specific sounds and route that. Mostly.
	$LF
]div
[div class=p 
	"Being said, we can make at least a few intelligent choices, if we just look at the sheet. I've entitled this "We Colorin'", and I guess it's something like the world's worst remix in terms of mechanisms used to produce it at this point. The original started on the first measure; the version during the TAS will be input, as previously discussed, on the third measure forwards.
	$LF
]div
[div class=p 
	[a href=https://imgur.com/Lb0T30X rel=noopener external nofollow 
		"https://imgur.com/Lb0T30X
	]a
	$LF
]div
[div class=p 
	"The first three things that should leap out are:
	$LF
]div
[ul 
	[li 
		" There are four symbols to be placed on the sheet
		$LF
	]li
]ul
[ul 
	[li 
		" The dog only exists at the beginning of the sheet; the end marker only exists at the end of the sheet.
		$LF
	]li
]ul
[ul 
	[li 
		" The tempo will need set
		$LF
	]li
]ul
[div class=p 
	"I think the best ordering is likely to be:
	$LF
]div
[ul 
	[li 
		" Going start-to-end, input all notes for the aeroplane.
		$LF
	]li
]ul
[ul 
	[li 
		" At the end, input the end marker.
		$LF
	]li
]ul
[ul 
	[li 
		" Going end-to-start, input all notes for the gameboy.
		$LF
	]li
]ul
[ul 
	[li 
		" Going start-to-end, input all notes for the dog.
		$LF
	]li
]ul
[ul 
	[li 
		" Fix the tempo and anything else, in likely no significant order other than from right-to-left (as the exit button is on the left and we can plan to start on the right).
		$LF
	]li
]ul
[ul 
	[li 
		" Exit.
		$LF
	]li
]ul
[div class=p 
	"With that, this entire TAS's preplanning is done. But really. The rest can be figured out as I go along.
	$LF
]div
[h2 id=AssemblingTheTas 
	" Assembling the TAS
	$LF
]h2
[ul 
	[li 
		" 0: To start the game, we need to click on Mario. So let's just move to the right and click him as soon as possible. (This was already done in the videos I was doing tests in anyway, so recycling!)
		$LF
	]li
]ul
[ul 
	[li 
		" 361: There's a very short animation that plays before loading the canvas; let's just click as soon as possible to exit it. (This was already done in the videos I was doing tests in anyway, so recycling!)
		$LF
	]li
]ul
[ul 
	[li 
		" 500: Having gotten this far for free, I decide to take a nap at 1:30 PM on 26 March 2021. Although I'm awake sooner, I don't get any further until at least 4:25 AM on 27 March 2021. (Happy Birthday, Abel!)
		$LF
	]li
]ul
[ul 
	[li 
		" 510: As soon as the game loads, I think the best option for how to proceed is to input the music. So that's what I proceeded to do. Part of that process was experimenting to see where collision boxes were.
		$LF
	]li
]ul
[ul 
	[li 
		" 530: First frame I can input anything approaching reliably. Apparently. And then 531 is ignored. And then 532 forwards seems fine. ... What?
		$LF
	]li
]ul
[ul 
	[li 
		" 728: I'm not overly convinced that there's anywhere I can horizontally hit the aeroplane that's going to be faster, because I still have to move the staff to the right. So it's just one stop on my way from left to right across the screen.
		$LF
	]li
]ul
[ul 
	[li 
		" 744: I will take the nearest point on the arrow, however. While clicking in the bar gives us an entire screen worth of jumping (7x clicking the arrow), at some point moving back and forth across the screen loses any benefit that gives us, especially for such a short composition. I think that's a full measure's distance, but experimentation by someone who actually has time and talent for this with a proper composition is warranted.
		$LF
	]li
]ul
[ul 
	[li 
		" 777: I hadn't examined my own sheet music when I wrote that, and it shows. The gap after this single note on the third measure is long enough to click into that space I just taked about.
		$LF
	]li
]ul
[ul 
	[li 
		" 900: Seven clicks is 56 frames. Surely the loss to movement for four notes isn't going to be 
		[em 
			"that
		]em
		" bad?
		$LF
	]li
]ul
[ul 
	[li 
		" 995: If I'm allowed to say, I'm surprised how fast that much went, honestly. Around 1/3 through composing the song already.
		$LF
	]li
]ul
[ul 
	[li 
		" 1007: The end marker seems to have slightly different collision from the rest. No real matter, but worth noting.
		$LF
	]li
]ul
[ul 
	[li 
		" 1029: Decided that I was going to go ahead and do the last screen of notes for the gameboy, since that seemed to go well for the aeroplane, which means that the horizontal click location barely matters as long as I don't have a dangling frame with fewer than ten pixels of movement.
		$LF
	]li
]ul
[ul 
	[li 
		" 1222: And just like that the gameboy is done. On to the dog!
		$LF
	]li
]ul
[ul 
	[li 
		" 1262: Looking ahead, I have just the tempo to fix, and two more dog notes to input. They will be on opposite sides of the screen. I think speed favors handling the tempo right now, so I go ahead and do so.
		$LF
	]li
]ul
[ul 
	[li 
		" 1282: Turns out you're allowed to hit the tempo every other frame.
		$LF
	]li
]ul
[ul 
	[li 
		" 1328: That's the last note. Now to exit the music editor. All things considered, I think that was fairly quick. 701 to 1328 is... 627 frames! SERIOUSLY?!? TEN AND A HALF SECONDS?!? ... So I watched it and... well, it's certainly fast anyway. So fast I couldn't follow it despite knowing how it was put together O.o Sorry, I've just... never done something this involved before. I genuinely expected that to take so, so much longer and be the second most boring part of this run.
		$LF
	]li
]ul
[ul 
	[li 
		" 1517: Now we're in the Stamp Creator. By way of comparison, the time from the last note to here was approximately 1/3 the time it took to assemble that entire song. Anyway, not very exciting, any of this, really. My plotter script gets to take over drawing, and I handle saving and loading.
		$LF
	]li
]ul
[ul 
	[li 
		" 1554: Quite the time to find two errors in a script you're counting on working, eh? (Github commit.)
		$LF
	]li
]ul
[ul 
	[li 
		" 1555: Bad when you fail to get it all the first time, eh? (Github commit.)
		$LF
	]li
]ul
[ul 
	[li 
		" 1581: It turns out that this can be a single frame click, but reliability gets wonky quickly if you do that.
		$LF
	]li
]ul
[ul 
	[li 
		" 1608: Same problem. Could be a single frame click, but then it wants to be unreliable for some reason.
		$LF
	]li
]ul
[ul 
	[li 
		" 1624: Sometimes, my script fails to buffer its very first instruction, which means I never receive it... and I don't really understand why this happens. It just seems to throw it away or something. Thankfully, more often than not, this is just a pair of tens, so I can just punch it in by hand if things are off by exactly ten.
		$LF
	]li
]ul
[ul 
	[li 
		" 1629: I just found out that the Save and Load signs are clickable. Thankfully, I think it's been caught before it would have required a fix.
		$LF
	]li
]ul
[ul 
	[li 
		" 2672: There's a number of errors I'm having to handle by hand here. I think it's in the script.
		$LF
	]li
]ul
[pre 
	"Status:
	$LF
	"x    : 78.0
	$LF
	"offX : -20
	$LF
	"y    : 16
	$LF
	"offY : 20
	$LF
	"lmb  : False
	$LF
	"rmb  : False
	$LF
	"buf  : 0
	$LF
	$LF
	"> moveto 220 120
	$LF
	$LF
	"[... output here then...]
	$LF
	$LF
	"> status
	$LF
	$LF
	"Status:
	$LF
	"x    : 220.0
	$LF
	"offX : -20
	$LF
	"y    : 120.0
	$LF
	"offY : 20
	$LF
	"lmb  : False
	$LF
	"rmb  : False
	$LF
	"buf  : 0
	$LF
]pre
[div class=p 
	"The actual position ingame is 210 110.
	$LF
]div
[div class=p 
	"I'm not sure why. Still, short misses like this are, as I said, solvable by hand. It's when we get to coloring dinosaurs I may have to stop and fix it.
	$LF
]div
[div class=p 
	"Or just go back to that first one I tested. One of those.
	$LF
]div
[ul 
	[li 
		" 2744: Saved by the fact the cell is still empty. Color-a-Dinosaur does not want to be ran anymore, is what I'm starting to gather here.
		$LF
	]li
]ul
[ul 
	[li 
		" 2957: Of course, Stamp 5 would have to go perfectly, to attempt to restore some degree of faith, however false.
		$LF
	]li
]ul
[ul 
	[li 
		" 3003: Literally just realized there's a clear button at the bottom. Wasn't on my screenshot because it doesn't load with the background. Woops. Not fixing it, but I will make use of it.
		$LF
	]li
]ul
[ul 
	[li 
		" 3028: Yeah, that's an instant gratification button. Dag nabbit.
		$LF
	]li
]ul
[ul 
	[li 
		" 3042: Clicking clear turns out to require 15 empty frames before drawing again. Still, minus movement to and from up top, that probably gains a few frames all the same.
		$LF
	]li
]ul
[ul 
	[li 
		" 4772: So we do all the cyan patterns, then the cyan and red,  then all the red patterns. Although this sees us saving out of order, it does save a little time over swapping colors back and forth.
		$LF
	]li
]ul
[ul 
	[li 
		" 6730: It's been nine hours or so nonstop of coloring dinosaurs. It's now 10:53 AM on 27 March 2021, and I'm calling it a day for this project for now. (Happy Birthday again, Abel!)
		$LF
	]li
]ul
[ul 
	[li 
		" 6731: 
		[a href=https://www.youtube.com/watch?v=qP4Rr4QQuWg rel=noopener external nofollow 
			"https://www.youtube.com/watch?v=qP4Rr4QQuWg
		]a
		$LF
	]li
]ul
[ul 
	[li 
		" 6772: It's 3 AM on 28 March 2021. Get excited, we about to start actually drawing (and coloring) dinosaurs.
		$LF
	]li
]ul
[ul 
	[li 
		" 6867: Abel says "One, two, better not sue..." at times like this. I usually just shout "TONDA GOSSA!"
		$LF
	]li
]ul
[ul 
	[li 
		" 9175: I just can't quite seem to get over how well that really works. Now to route, uh, Deign's coloring choices. I'm thinking cyan, red, cyan dotted, red dotted for pathing.
		$LF
	]li
]ul
[ul 
	[li 
		" 9266: For the sake of time constraints for publication deadline, I'm just guessing on routing these regions.
		$LF
	]li
]ul
[ul 
	[li 
		" 9552: I mean, yes, it runs fast, but production is slow. I've decided to speed things up by going ahead and inputting the remaining images with my plotter, as well as the code to display things. That way, if things go horribly wrong somehow, I can always come back to that version and resync it. (It's the 28th, I figure I have just today and tomorrow to get this completed, based on how much there is to proofread and edit here and my slow internet speed for the preview upload.) Basically, I built a macro starting from the frame one clicks the bottom right button all the way to drawing again... and then built out the plots for the individual images just after that. (Oddly enough, I can make quite alot of guarantees safely as a part of that O.o.)
		$LF
	]li
]ul
[ul 
	[li 
		" 9552: I have no idea how long I've been at it, but I have basic plottings of all the images in the TASStudio project now. Hopefully those don't desync too hard. I still want to try to color all these, but at least now I can guarantee they all make it, at minimum, into the final video. It's 7:20 AM 28th March 2021, I'm going to get some rest for now.
		$LF
	]li
]ul
[ul 
	[li 
		" 9552: I'm up, I'm up. 2:54 AM 29th March 2021. So, what I'm hoping is that putting in parts of coloring this only requires checking the location (and brush/top panel state) it's at after I'm done, setting it there, and then rolling forwards. In order to help with that (and possibly resyncing, I've marked where everything starts, ends in the TAS that matters (and locked markers to input so they move as I insert/delete frames). In the meantime, let's just carry on as though that will totally happen. (Weird side effect, I no longer need the plotter script if I've done this correctly. Everything is already plotted out. Probably keep it handy just to plot long moves, however. I'm lazy.)
		$LF
	]li
]ul
[ul 
	[li 
		" 9754: That eyelid. Ugh. Why? Also, was it a separate object in the original? Anyway, after much distraction, I'm actually making forwards progress.
		$LF
	]li
]ul
[ul 
	[li 
		" 9913: I'll talk about this move in just a moment.
		$LF
	]li
]ul
[ul 
	[li 
		" 9922: That move, specifically, is a bit weird. The input was sort of randomly ignored and/or clamped by the game itself in places. I think this matches the best possible for it, although it may be possible to remove some inputs as "ignored anyway" or "not helping". (I routed that using my plotter and it failed harder than usual.)
		$LF
	]li
]ul
[ul 
	[li 
		" 10120: Remember - I'm routing this via rapid guesswork under time pressure, and I'm not doing much twice right now to test due to that time pressure. So the right toe comes first because I think the slightly higher position on the middle toe might potentially save a frame here; otherwise, it probably didn't matter at all and was up to me anyway.
		$LF
	]li
]ul
[ul 
	[li 
		" 10205: At this point, any segment not rapidly routed by the plotter or copy/pasted as a macro is probably done by hand using a controller. (For the curious, before this, I had 1338 rerecords.)
		$LF
	]li
]ul
[ul 
	[li 
		" 11251: And there we have it! Deign's masterpiece recreated in Mario Paint! ... Just being honest, probably just replacing it with purple here would have been better. And perhaps "not only". Maybe on a CRT this would have looked better?
		$LF
	]li
]ul
[ul 
	[li 
		" 11252: Anyway, I started to remove the empty frames and fix a lot of small things, but it kept causing major desyncs. I don't have time to investigate the pileon effect for every time I want to delete 2 or 3 frames, so I'm afraid it has to stay the way it is for now. (Obviously this is lost time, but if you were going to read this entire thing and actually approve this ridiculousness, this is far from the first issue in how it was produced.)
		$LF
	]li
]ul
[ul 
	[li 
		" 11254: The "display and play jingle + erase" macro was initially assembled by hand to be pretty well perfect. Close enough to be intimidating anyway. You can find my notes down below about the major timesaving findings. It runs to about 12137.
		$LF
	]li
]ul
[ul 
	[li 
		" 11747: I might have cut the end of that too soon. Although the jingle is definitely over, there are the aesthetics of letting that last note sink into someone's awareness. (Due to the lack of delay, it almost seems like the lights come up slightly before the jingle is over. Feel free to check the objective timing frame by frame!)
		$LF
	]li
]ul
[ul 
	[li 
		" 12076: I literally just guessed at the fastest way to clear the screen here. Others may actually be faster. (For sufficiently small images, just using the eraser itself will be fastest!)
		$LF
	]li
]ul
[ul 
	[li 
		" 12166: This bit was originally written for when I stopped at 9552 to plot all the images. So I had to resync it because the state was wildly out of line. Fun, fun.
		$LF
	]li
]ul
[ul 
	[li 
		" 12196: And we're back on track again.
		$LF
	]li
]ul
[ul 
	[li 
		" 14779: Spinosaurus. Although many depictions were easy to find on the net, the one I liked most was in shades of green with this strange green-to-red-to-white fade on the spines, plus black dots, and the underbelly was white. Since I can't do the strange design on the spines, I'll just do them in some weird patterning with plenty of green (and hopefully red) in it. But once again, I just focused on coloring it. So better times are definitely possible, even for the same design. In fact, I went so far as to unpause the game at half speed to record this segment.
		$LF
	]li
]ul
[ul 
	[li 
		" 18917: Back on track for the display/erase cycle. I think he looks charming. I mean, personally. Really! (Or she!) But it's 8:34 AM and I have to make my companion breakfast, so hold that thought and stop my work timer.
		$LF
	]li
]ul
[ul 
	[li 
		" 19828: And 9:31 AM. A desync happens here. A proper fix would have set the brush and then let it run starting at the top of the image, but I'm under time pressure, like I said, so I'm just going to return to the spot the plot is done from once I've got that sorted out again.
		$LF
	]li
]ul
[ul 
	[li 
		" 19933: And we should be back on track.
		$LF
	]li
]ul
[ul 
	[li 
		" 22217: And now we color this... Brontosaurus. Littlefoot? ... Littlefoot.
		$LF
	]li
]ul
[ul 
	[li 
		" 23747: Back to erasing and drawing the next one. By selecting the stamp before letting this run, I save myself some labor time resyncing all the way until it's time for me to color again. A few thousand frames I don't have to do any more work in.
		$LF
	]li
]ul
[ul 
	[li 
		" 26912: As it turns out, this is "Viktor", an original dinosaur created for this game. There were three of these. And I'm not having any luck at all finding a coloring guide so... time to be a bit creative with this.
		$LF
	]li
]ul
[ul 
	[li 
		" 30349: And just like that, four of our dinosaurs have been colored. On to the next. But first! It literally just occurred to me to start keeping a list of which patterns I've used, woops!
		$LF
	]li
]ul
[ul 
	[li 
		" 31263: I'll never get through all these patterns. There are legitimately too many for how little art I have to work on.
		$LF
	]li
]ul
[ul 
	[li 
		" 33309: Triceratops... Cera? Cera.
		$LF
	]li
]ul
[ul 
	[li 
		" 36454: I think that actually gives her some degree of justice, actually. Certainly not perfect, but a decent work of art.
		$LF
	]li
]ul
[ul 
	[li 
		" 39512: It's Vinnie, another original dinosaur made just for this game with no coloring guide!
		$LF
	]li
]ul
[ul 
	[li 
		" 43566: I mean, I think he's rather charming, personally. But regardless, that's another one down, ten more to go.
		$LF
	]li
]ul
[ul 
	[li 
		" 47009: Ah, yes! The Pterodactyl, the best ending in the original game. I'd be sadly put upon if I didn't take the analogue to the historic run on TASVideos for this version of Color-a-Dinosaur.
		$LF
	]li
]ul
[ul 
	[li 
		" 47496: Sequence breaking was established as part of this edition. A nice fringe benefit of being one to help create it, I suppose.
		$LF
	]li
]ul
[ul 
	[li 
		" 47824: Careful manipulation of input cycling maximizes entertainment value, especially in the exploratory literature accompanying the run before you.
		$LF
	]li
]ul
[ul 
	[li 
		" 48167: I tried to ask the original dev his thoughts on this maneuver, but he never got back to me with any meaningful answer. I mean, sure, when IGN contacts a dev, they have some time to comment on a speedrun, but when I contact them, they're all like "Who are you? How did you get in my house? No, I'm not a game developer!"
		$LF
	]li
]ul
[ul 
	[li 
		" 48427: And there you have it. Just like that, we've recreated an absolute treasure originally created by adelikat.
		$LF
	]li
]ul
[ul 
	[li 
		" 51711: "Crested Dinosaur". I'm not sure if it's original or an actual creature, but I am sure this is going to be another fun one.
		$LF
	]li
]ul
[ul 
	[li 
		" 58428: Duckbill... Ducky? Ducky.
		$LF
	]li
]ul
[ul 
	[li 
		" 65323: Vern, because of course I missed at least one original dinosaur when I checked the list. This is rather exciting!
		$LF
	]li
]ul
[ul 
	[li 
		" 71425: Crested Duckbill. They put... a lot of crests and duckbills, by volume, into that game, didn't they? I'mma just start using the colors I've not used yet haphazardly to help check them off. It's not really possible to make sane art anymore with what I've got left, I don't think.
		$LF
	]li
]ul
[ul 
	[li 
		" 77337: Vera, another original dinosaur for the original game. Interestingly, in the manual's coloring book, she's not holding the twig/branch. Otherwise it doesn't matter too terribly much; she still just gets the next colors on the palette.
		$LF
	]li
]ul
[ul 
	[li 
		" 84014: I managed to make Vera sort of work... this is Mini Stegosaurus. See if I can do it twice, eh?
		$LF
	]li
]ul
[ul 
	[li 
		" 90228: Probably Tyrannosaurus Rex? The image here is quite different from the one in the manual.
		$LF
	]li
]ul
[ul 
	[li 
		" 95733: Torosaurus. I thought I was doing horrible on time, but honestly, I'm doing okay looking at the space between images. I know it probably doesn't feel that way watching it, and it certainly doesn't feel that way recording this at 1/4 speed and less at times.
		$LF
	]li
]ul
[ul 
	[li 
		" 102037: Protoceratops. Also the last dinosaur to color!
		$LF
	]li
]ul
[ul 
	[li 
		" 117356: Deign seems to be the first one to do the Color-a-Dinosaur NES run. Adelikat has the Pterodactyl run. Lord Tom references it in his SMB3 Total Control TAS. CompuCat helped more than a year ago as this is published with the music transcription for the fanfare from Color-a-Dinosaur. TASVideos.org was useful for the data in the forum posts. (I had to capitalize "ORG" to avoid a decender from the "g" getting lost.) dwangoAC and the AGDQ TASBot block seem to have captured the attention of quite a lot of people - he played Lord Tom's SMB3 TC there. Abel & Dove gave up considerable amounts of time with me - including part of Abel's birthday - for me to work on this TAS. And of couse - we always appreciate the viewers. [...] The last dinosaur, here on the credits page, is an upscale from Lord Tom's TC TAS. Enjoy it, as coloring it gives a bit of time to read the credits, essentially, which is more the goal here than coloring it is.
		$LF
	]li
]ul
[ul 
	[li 
		" 122218: I was afraid that if anyone reencoded, they'd cut too quickly from the end frame, so a single frame of input with what I hope are special looking numbers exists way out here to conclude the take.
		$LF
	]li
]ul
[div class=p 
	"It is 2:16 PM on 29 March 2021, and finally - FINALLY - this project is completed.
	$LF
]div
[h2 id=Afterword 
	" Afterword
	$LF
]h2
[div class=p 
	"You may have already guessed this had nothing to do with me coloring a dinosaur. Actually, as far as I'm concerned, my work could conceivably have been done with just the jingle, the stamps, and the lineart for the 16 dinosaurs cycled through. This makes it possible to save the game and get a saveram image that has the dinosaur you'd like and stamp templates on it. (You can always discard the extra four if you'd like - the ones in color at the end of the stamp line - and you can always use the templates to build out patterns similar to the original and save them in any slots you've decided you don't need.)
	$LF
]div
[div class=p 
	"Had I stopped there, we'd have saved about 12 minutes, I think. It didn't seem right, however; I wanted to at least give shoutouts to Deign, Adelikat, and Lord Tom - and I felt the best way was by recreating their works.
	$LF
]div
[div class=p 
	"Everything after that was just falling into the zen of coloring, honestly. I don't regret it, but I regret that I ran so short on time that I couldn't do it proper justice for every single image. Maybe a later version will run faster and have better coloring. If I ever do a later version - and certainly others are welcome to pick it up and roll with it.
	$LF
]div
[div class=p 
	"I hope you enjoyed this. The last year or so has really worn down my spirits - some deservedly, some not deservedly - and I think everyone just needed something that was absurd and overcommitted to its own premise. I genuinely hope this made you smile.z
	$LF
]div
[h2 id=Aftermath 
	" Aftermath
	$LF
]h2
[div class=p 
	"The original version of this document - written in markdown - has 13963 words. There were 1618 rerecords. The final video has 122219 frames.
	$LF
]div
[div class=p 
	"The amount of time spent on this project appears to be approximately 54 hours 30 minutes. ( 
	[a href=https://imgur.com/TY6h2AZ rel=noopener external nofollow 
		"https://imgur.com/TY6h2AZ
	]a
	" ) Much of the timekeeping is done in the open in this document itself.
	$LF
]div
[h2 id=NotesFromTheMarioPaintManual 
	" Notes from the Mario Paint Manual
	$LF
]h2
[div class=p 
	"Many people may not have the manual handy, so I'm including this little section here of snippets from the manual just to summarize some key data points that are assumed throughout this document to be known.
	$LF
]div
[h3 id=Controls 
	" Controls
	$LF
]h3
[div class=p 
	"Left Mouse Button
	$LF
]div
[blockquote 
	" Clicking the left mouse button will allow you to select various icons, advance through the color palette, and draw with the tools in Mario Paint. (Manual, Pg 3, "Click")
	$LF
]blockquote
[div class=p 
	"Right Mouse Button
	$LF
]div
[blockquote 
	" The right mouse button pauses the game in Gnat Attack and allows you to move backwards through the color palette. (Manual, Pg 3, "Click")
	$LF
]blockquote
[div class=p 
	"A single right click will bring you to the stamp pallette from the default palette, as opposed to going through the entire list. Saves at least 20 frames, probably more.
	$LF
]div
[h3 id=HintsFromProfessorPaint 
	" Hints from Professor Paint
	$LF
]h3
[blockquote 
	" Draw slowly with the small pen to avoid drawing broken lines. (Manual, Pg 7, "Small, Medium, and Large Pens")
	$LF
]blockquote
[div class=p 
	"In some ways, that seems like a dead hint about the jumps-to-position thing with the pens and stamp.
	$LF
]div
[blockquote 
	" The small pen tip makes a line that is two squares wide on the stamp gird. Try making a stamp that only uses one square of the stamp grid. Once you've saved it to your database, click on the Mario icon and draw with this ultra fine dot. This should help you draw lines in areas that require a lot of detail. You can also create an eraser using the same procedure with a single white dot. (Manual, Pg 13, "Save")
	$LF
]blockquote
[div class=p 
	"So it turns out the award for first discovering that trick goes to... The manual itself. The game itself literally tells you in its manual.
	$LF
]div
[h2 id=NotesFromTheMarioPaintPlayerSGuide 
	" Notes from the Mario Paint Player's Guide
	$LF
]h2
[div class=p 
	"I don't know why a painting game has a player's guide, but it exists. I don't necessarily assume any of this to be known, it's just interesting to see laid out.
	$LF
]div
[h3 id=ColorPalette 
	" Color Palette
	$LF
]h3
[div class=p 
	"A page of the color palette effects can be found on page 13 of the players guide. Or here, clipped from there:
	$LF
]div
[div class=p 
	[a href=https://imgur.com/sECBbrG rel=noopener external nofollow 
		"https://imgur.com/sECBbrG
	]a
	$LF
]div
[h3 id=SongEditorSoundEffectChart 
	" Song Editor Sound Effect Chart
	$LF
]h3
[div class=p 
	"The chart of sounds for the song editor appears on page 69 of the player's guide. Or, again, here:
	$LF
]div
[div class=p 
	[a href=https://imgur.com/vlfsTbT rel=noopener external nofollow 
		"https://imgur.com/vlfsTbT
	]a
	$LF
]div
[h3 id=IfYouWonder 
	" If You Wonder
	$LF
]h3
[div class=p 
	"The rest is just filler, and stamp patterns, and songs on the composer, and artwork done in the game. Also projects you could do like a video greeting on an old VCR. Also a profile and small gallery for an artist who won an art competition.
	$LF
]div
[div class=p 
	"There is some neat stuff in there, don't get me wrong. I just don't think it's going to be very useful for people trying to do a comparable speedrun.
	$LF
]div
[h2 id=CollectedAndOrganizedIshNotes 
	" The Collected and Organized-ish Notes
	$LF
]h2
[div class=p 
	"A decent number of these are in the above document, but they're a proper mess to track down. Figure that's the long research notes as a story and this is the shorter version, in a lot of ways. Be sure to also read the notes from the manual and the player's guide up above.
	$LF
]div
[h3 id=MajorityOfTheGame 
	" The Majority of the Game
	$LF
]h3
[ul 
	[li 
		" The mouse speed labelled tortoise/one star seems to be the most reliable for consistency. No appreciable speed gains come from changing this setting.
		$LF
	]li
]ul
[ul 
	[li 
		" The two axises of the mouse are largely independent of one another. So moving 1 pixel max to keep drawing actually means you can move 1 in the x-axis and 1 in the y-axis simultaneously, for example.
		$LF
	]li
]ul
[ul 
	[li 
		" The maximum distance you can move in one frame is 10px - on each axis.
		$LF
	]li
]ul
[ul 
	[li 
		" The most reliable and fastest (overall) clicking seems to come from a click of exactly seven frames, with a one frame break (of no inputs) on either side. (If you need to move while holding, hold eight frames before attempting to move.)
		$LF
	]li
]ul
[ul 
	[li 
		" If you click something and wonder if it activated (without waiting several hundred frames to find out), if it requires loading something, see if the cursor animation stops on frame advance of just a few frames. Typically when the game is "busy", the cursor animation stops. (This is most evidenced going from scene-to-scene such as from the main paint canvas to the music editor.)
		$LF
	]li
]ul
[ul 
	[li 
		" The game's boundaries seem to be inconsistent throughout the game for mouse motion, but a basic view is that x ranges from -16 to 271 and y ranges from 8 to 215. If you plan to run this game, be ready to constantly adjust your expectations (and input) as coordinates you can reach on one screen become unreachable on another for no clear reason.
		$LF
	]li
]ul
[ul 
	[li 
		" If you build inputs and they're tempermental or seem wrong despite being the correct inputs for what you're trying to achieve (like moving a set distance), try inserting delays before/after and sometimes even in between somewhere. The game's logic is not very clear in when it's busy, and a high-value asset for TASing this game would be figuring out a reliable indicator outside "woops, didn't work, let me rewind and put in delay frames".
		$LF
	]li
]ul
[h3 id=FastStart 
	" Fast Start
	$LF
]h3
[ul 
	[li 
		" First valid frame for input: 131
		$LF
	]li
]ul
[ul 
	[li 
		" First frame to click Mario: 263, only need to click one frame. Optimal position: Probably (228, 172) if you plan to do stamps. (The position is retained to the main game's screen.)
		$LF
	]li
]ul
[ul 
	[li 
		" First frame to skip workout animation: 364, only need to click one frame.
		$LF
	]li
]ul
[ul 
	[li 
		" First frame to start input in main game: 530. Input will be ignored on 531 and then work seemingly fine from 532 onwards. One extra frame of input, essentially.
		$LF
	]li
]ul
[h3 id=CanvasMainGame 
	" Canvas / Main Game
	$LF
]h3
[ul 
	[li 
		" Your canvas size is 248x168.
		$LF
	]li
]ul
[ul 
	[li 
		" The top pane can be swapped in reverse order using the right mouse button. (This lets you go backwards just one step to reach stamps from the start.)
		$LF
	]li
]ul
[ul 
	[li 
		" For distances greater than 1 (in either axis) while holding the mouse button, positions in between the start and end points won't be drawn. You can utilize this to jump gaps in art without lifting the mouse button (which easily saves at least 8 frames any time you can pull it off).
		$LF
	]li
]ul
[ul 
	[li 
		" You can flood fill patterns! Doing so simply tiles them across the area you're trying to flood, with boundaries determined by the flood fill itself.
		$LF
	]li
]ul
[ul 
	[li 
		" Going from inside a pane, you can reach further towards the inside of the screen and still activate things on the pane than if you try the same thing from outside a pane. The game seems to have a certain "most recent context" awareness.
		$LF
	]li
]ul
[ul 
	[li 
		" The necessary delay after a seven frame click of the bottom right button (swapping the bottom pane) appears to be at least 12 empty frames before the next input, as opposed to just one.
		$LF
	]li
]ul
[ul 
	[li 
		" The first frame input that matters again after starting a floodfill (if you don't cancel it) is the last frame the brush is oriented straight vertically.
		$LF
	]li
]ul
[h3 id=SongEditor 
	" Song Editor
	$LF
]h3
[ul 
	[li 
		" Going from the main canvas to the Song Editor, if you did a seven frame click on the song editor button (main canvas screen) and the last frame holding left button is 575, the first frame your input will be read again (now inside the song editor) is 701 ... that's 126 franes later.
		$LF
	]li
]ul
[ul 
	[li 
		" Going from the Song Editor to the Main Canvas, if you did a seven frame click on the exit button (Song Editor screen) and the last frame holding left button is 1346, the first frame your input will be read again (now inside the main canvas screen) is 1505 ... that's 159 franes later.
		$LF
	]li
]ul
[ul 
	[li 
		" A single frame click is actually enough to place notes (apparently), but due to the lag frames, you don't gain any time here over a seven-frame click. Bummer, that. Can still minimize your input somewhat.
		$LF
	]li
]ul
[ul 
	[li 
		" Regarding the scroll scrollbar - a click inside the bar itself is worth the same as clicking the equivalent arrow 7 times.
		$LF
	]li
]ul
[ul 
	[li 
		" The end marker seems to have different collision locations from the instruments for some odd reason.
		$LF
	]li
]ul
[ul 
	[li 
		" Adjustments to tempo can have clicks every other frame.
		$LF
	]li
]ul
[ul 
	[li 
		" Only supports the key of C Major
		$LF
	]li
]ul
[ul 
	[li 
		" Only Treble clef, ranging from the second G above middle C down to the B below middle C.
		$LF
	]li
]ul
[ul 
	[li 
		" No sharps, no flats
		$LF
	]li
]ul
[ul 
	[li 
		" Only time signatures are 4/4 and 3/4, but you can fake multiples of it somewhat by adjusting your tempo.
		$LF
	]li
]ul
[ul 
	[li 
		" Notes can only be placed on the beat.
		$LF
	]li
]ul
[ul 
	[li 
		" Notes cannot be sustained.
		$LF
	]li
]ul
[ul 
	[li 
		" Only one voice per pitch can be played at a time.
		$LF
	]li
]ul
[ul 
	[li 
		" Only three voices can be played at a time.
		$LF
	]li
]ul
[h3 id=SpecialStampCreator 
	" Special Stamp Creator
	$LF
]h3
[ul 
	[li 
		" If you used a seven frame click to open the special stamp creator from the main canvas screen, then by the time you release the click it's already loaded and reading input again.
		$LF
	]li
]ul
[ul 
	[li 
		" Going from the Special Stamp Creator to the Main Canvas, if you did a seven frame click on the exit button (Special Stamp Creator screen) and the last frame holding left button is 6695, the first frame your input will be read again (now inside the main canvas screen) is 6744 ... that's 49 franes later.
		$LF
	]li
]ul
[ul 
	[li 
		" The area for a stamp is 16x16 pixels.
		$LF
	]li
]ul
[ul 
	[li 
		" There are 15 slots available for use by the player to save/load stamps from.
		$LF
	]li
]ul
[ul 
	[li 
		" When you click "Save" or "Load" in the Special Stamp creator, it sets your cursor's Y to 16 and leaves your X alone.
		$LF
	]li
]ul
[ul 
	[li 
		" Clicking "Save" can be a single frame click, but it doesn't seem to be very reliable for timing input afterwards. Likewise, clicking a cell to save can be a single frame click, but isn't reliable for input timing afterwards. (Likely the same is true of "Load".)
		$LF
	]li
]ul
[ul 
	[li 
		" The "sign" for "Save" and the "sign" for "Load" are both clickable. This makes the collision space far higher and to the left than it would be otherwise.
		$LF
	]li
]ul
[ul 
	[li 
		" Clicking "Clear" requires 15 frames before you can start drawing again, although you can start moving sooner at least.
		$LF
	]li
]ul
[h3 id=AnimationLand 
	" Animation Land
	$LF
]h3
[ul 
	[li 
		" Opening it, fastest input leaves 3 blank frames after seven frame click.
		$LF
	]li
]ul
[ul 
	[li 
		" Exiting it, fastest input leaves 26 blank frames after seven frame click.
		$LF
	]li
]ul
[ul 
	[li 
		" Going into step 3, after you click it to load, you have some frames of input. Seven frame click + 1 frame delay and we're left with... apparently 40 frames that it's still taking mouse input, which should be enough to at least position the mouse for inside step 3, no matter what you want to do. After that, it's the first frame after the lag block, so it's easier to just see visually than count.
		$LF
	]li
]ul
[ul 
	[li 
		" Also, while in step 3, you can move the mouse while the lights are out.
		$LF
	]li
]ul
[ul 
	[li 
		" Exiting step 3, after 7 frame click, first read input is... 10074... 10270... 196 frames later.
		$LF
	]li
]ul
[h3 id=WatchFile 
	" Watch File
	$LF
]h3
[div class=p 
	"Coordinate standard should be Screen X and Y, and that standard is used in this document.
	$LF
]div
[pre 
	"SystemID SNES
	$LF
	"0004DC	w	s	0	WRAM	Cursor Screen X
	$LF
	"0004DE	w	s	0	WRAM	Cursor Screen Y
	$LF
	"0	S	_	1		
	$LF
	"000226	b	u	0	WRAM	Cursor Canvas X
	$LF
	"000227	b	u	0	WRAM	Cursor Canvas Y
	$LF
	"0	S	_	1		
	$LF
	"0000A9	b	h	0	WRAM	Something to do with Instrument?
	$LF
	"000E8D	b	h	0	WRAM	Actual selected instrument
	$LF
	"000EB5	b	h	0	WRAM	Something to do with instrument?
	$LF
	"0	S	_	1		
	$LF
	"00298C	b	u	0	WRAM	Special Stamp Editor Pixel 0, 0
	$LF
	"00298E	b	u	0	WRAM	Special Stamp Editor Pixel 1, 0
	$LF
	"0029AA	b	u	0	WRAM	Special Stamp Editor Pixel 15, 0
	$LF
	"0029CC	b	u	0	WRAM	Special Stamp Editor Pixel 0, 1
	$LF
	"002D6A	b	u	0	WRAM	Special Stamp Editor Pixel 15, 15
	$LF
	"0004D1	b	u	0	WRAM	Stamp Current Color?
	$LF
	"001124	b	u	0	WRAM	Stamp Current Color?
	$LF
]pre
[h3 id=PlotterCode 
	" Plotter Code
	$LF
]h3
[ul 
	[li 
		" The specific version of those files used in this TAS is here: 
		[a href=https://github.com/greysondn/mario-paint-plotter/tree/mpcad-2021 rel=noopener external nofollow 
			"https://github.com/greysondn/mario-paint-plotter/tree/mpcad-2021
		]a
		$LF
	]li
]ul
[ul 
	[li 
		" I'm not sure if I'll be providing support for this code longer term or not. I did chuck it into my github, however, so I guess it's there if I ever change anything or people want to poke around it. Hopefully I remember to set it to public on April 1. 
		[a href=https://github.com/greysondn/mario-paint-plotter rel=noopener external nofollow 
			"https://github.com/greysondn/mario-paint-plotter
		]a
		$LF
	]li
]ul
[ul 
	[li 
		" This is mostly self-documenting, although especially the REPL should be straightforward enough. Remember to check status before large or important operations and make sure it matches your ingame data. (The repl has a handwritten help command.)
		$LF
	]li
]ul
[ul 
	[li 
		" You may need an offset in several circumstances. It's advised to create a test image, check it against what you wanted in game, and set the offset accordingly.
		$LF
	]li
]ul
[ul 
	[li 
		" There are definitely bugs that I didn't have time to iron out. Many moves suffer from off-by-one errors; large moves suffer from missing a single frame.
		$LF
	]li
]ul
[ul 
	[li 
		" It is fairly apparently that faster routes exist. They are essentially a travelling salesman problem with a fixed start and end point in most cases. Solving those generally requires brute force.
		$LF
	]li
]ul
[h3 id=NotesSpecificToThisCategory 
	" Notes Specific to This "Category"
	$LF
]h3
[div class=p 
	"Which is to say, notes specific to doing Color-a-Dinosaur in Mario Paint.
	$LF
]div
[ul 
	[li 
		" Image 8 and Image 13 must be resized.
		$LF
	]li
]ul
[ul 
	[li 
		" The fanfare sheet music that I transcribed from the original game can be found here: 
		[a href=https://imgur.com/fiPeXJs rel=noopener external nofollow 
			"https://imgur.com/fiPeXJs
		]a
		$LF
	]li
]ul
[ul 
	[li 
		" After extensive work on this TAS that I feel qualifies me as a subjective (and perhaps only relative) expert on the topic, I've concluded that - contrary to Nach's judgement comment on submission #3543 - watching paint dry is actually more entertaining than Color-A-Dinosaur on the NES.
		$LF
	]li
]ul
[h3 id=RandomNotes 
	" Random Notes
	$LF
]h3
[div class=p 
	"AKA "I couldn't find any good way to categorize these"
	$LF
]div
[ul 
	[li 
		" Remember that what you see is slightly delayed; what matters is where the game thinks the cursor is, not necessarily where it's shown to be.
		$LF
	]li
]ul
[ul 
	[li 
		" I have placed a zip of my gimp image source files for the image preparations and examining hitboxes and other such "potentially useful" resources in my google drive. That's here: 
		[a href=https://drive.google.com/file/d/1kp1Ag3_okj-Ry8li2oxRJMrpS_89op73/view?usp=sharing rel=noopener external nofollow 
			"https://drive.google.com/file/d/1kp1Ag3_okj-Ry8li2oxRJMrpS_89op73/view?usp=sharing
		]a
		$LF
	]li
]ul
[ul 
	[li 
		" Regards that previous link, Gimp is a free and open source image editor. You can get it here: 
		[a href=https://www.gimp.org/ rel=noopener external nofollow 
			"https://www.gimp.org/
		]a
		$LF
	]li
]ul
[h2 id=AdvancementsOthersCouldMake 
	" Advancements Others Could Make
	$LF
]h2
[ul 
	[li 
		" I don't think this is the fastest the stamps and images can be drawn. The pathfinding algorithm I've used is set to just find the nearest valid target to color - not to route all the targets at once. This is a travelling salesman problem - and I've very little doubt, just on the sheer number of possible routes this provides, that I'm sub-optimal for a solution to the larger case every time I start drawing something here. (At some point, you have to accept it's good enough.)
		$LF
	]li
]ul
[ul 
	[li 
		" Even if one maintains the exact same coloring plans as I did, the routing there is trash. So definitely gains could be made there.
		$LF
	]li
]ul
[ul 
	[li 
		" It's clear the floodfill is at least filling space differently depending on where I click. Whether this translates to something that can actually be manipulated to save time remains to be seen; however, it should be investigated throughouhly.
		$LF
	]li
]ul
[ul 
	[li 
		" If we knew exactly when the game is going to ignore input - some RAM address or some checkable condition - we'd be able to route an entire run by providing only the inputs to a special LUA script and letting it put in the spaces for when the game ignores input. It's therefore EXTREMELY VALUABLE to identify when the game is ignoring input.
		$LF
	]li
]ul
[ul 
	[li 
		" The plotter script I wrote has errors that need fixed. It's like a little adorable broken chibi-robo just doing everything it can for me here, but I fear other people may not be so patient with its shortcomings.
		$LF
	]li
]ul
[ul 
	[li 
		" Many small oversights and missed opportunities likely exist in this TAS - for example, I went with reliability for clicking, but possibly faster clicking could be done. I let the script I wrote route drawing for me, but there are more optimal solutions (try routing some of the stamps better for a starter). Eventually time pressure made it all but impossible to route well at all. Things like this could definitely be improved upon.
		$LF
	]li
]ul
[ul 
	[li 
		" I don't expect us to ever get serious about this, but "just in case..." ... If we are remotely serious about this task - and while it's somewhat boring to watch, it does present very interesting optimization problems that have some application in the larger scheme of TASing - then we need to standardize what the run expectation actually is. I think that a good set of conditions is actually: input a jingle (which the community will have to agree on), input the single pixel stamp, the unique pattern templates into stamps from Color-A-Dinosaur, input the four necessary stamps to recreate Deign and Adelikat's works, draw & present & erase the 16 dinosaurs - with the exception of the Stegosaurus and the Pterodactyl, which must also be colored matching the old patterns with the relevant stamps. Doing so would end up demonstrating almost every task in the game and present the interesting routing problems of drawing all the dinosaurs and still provide ample time to stop the game and take over to do things on one's own, although it will not include beating Gnat Attack a tedious 16 times for all the trophies. (And note that my credits screen is omitted, although I do think some version of Lord Tom's dinosaur should be included somehow.)
		$LF
	]li
]ul
[h2 id=ItSTimeToGo 
	" It's time to go
	$LF
]h2
[h3 id=AuRevoir 
	" Au revoir
	$LF
]h3
[h4 id=ButYouMayShoutEncore 
	" But you may shout "Encore!"
	$LF
]h4
[div class=p 
	"That's all there is. There isn't
	$LF
]div
[div class=p 
	"any more.
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/Samsara 
		"Samsara
	]a
	":
	$LF
	[br 
	]br
	[img class=embed mw-100 src=https://i.gyazo.com/f2cfa3dd1324909437eaac8b7c89e6fb.png 
	]img
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/Samsara 
		"Samsara
	]a
	": pretend i wrote JUDGING in mario paint, i'm kinda in the middle of a claim spree right now and i can't slow down
	$LF
]div
[div class=p 
	[a class=intlink href=/Users/Profile/Samsara 
		"Samsara
	]a
	": The run was pretty well-received, however many (including the author) have pointed out noticeable mistakes in the input, alongside slow-ish pacing because of the gimmick (that not everyone understands in the first place). I think there's definitely room for a good Mario Paint playaround on the site, and most people seem to agree with that, so I'm rejecting this in favor of a possible new version coming in the future.
]div
