5
[ul 
	[li 
		" Arbitrary Code Execution
		$LF
	]li
	[li 
		" Major skip glitch
		$LF
	]li
	[li 
		" Uses a game restart sequence
		$LF
	]li
	[li 
		" Corrupts save data
		$LF
	]li
	[li 
		" Abuses opposite D-Pad presses (U+D/L+R)
		$LF
	]li
	[li 
		" Minor luck manipulation
		$LF
	]li
	[li 
		" Genre: Strategy
		$LF
	]li
]ul
[div class=p 
	"I guess I've now made it a goal to achieve a save glitch win in as many Koei games as possible. 
	$LF
]div
[div class=p 
	"I use the same basic method in my L'Empereur TAS of a mid-frame reset to create a general pointing to controller input. However unlike L'Empereur, there is no single RAM address I can write to in order to trigger the ending. Instead, I perform rudimentary arbitrary code execution to jump to the ending by writing code to RAM.
	$LF
]div
[ul 
	[li 
		" Through testing I found Scenario 5 allowed for the fastest route to the save corruption. The game's initial RNG seed is determined when you first press start during the intro sequence (beginning w/ the Koei logo's appearance), so I tested multiple seeds to get to my turn the fastest.
		$LF
	]li
	[li 
		" Controller input is at 0x6E, and I already have a general (Fei Shi) w/ address 0x6B6E. So it's just a matter of saving the game, sending Fei Shi to another province & resetting mid-frame to create a general w/ address 0x006E.
		$LF
	]li
	[li 
		" Beforehand, I reassign soldiers to fix the checksum of the future corrupted save. Note that the game designates generals with no soldiers as 0xFF, so setting a general to exactly 0 soldiers actually INCREASES the checksum. Here I balanced it out exactly.
		$LF
	]li
]ul
[div class=p 
	"I went through trial and error of different methods of writing the code I need to the zero page but the method I came up with ended up being really simple. Like my last TAS, you instantiate entries in the general list by holding down the appropriate button combinations. Appointing a general as governor places them at the start of the linked general list. In order to write a specific value to the zero page, first you make a general w/ that value, appoint them General, then create a general representing the address and appoint them. This causes the previous general to be written to that address. There are some caveats:
	$LF
]div
[ul 
	[li 
		" The value you're writing needs to also represent a writable RAM address, otherwise the general list will get obliterated.
		$LF
	]li
	[li 
		" Sometimes when appointing a glitched general, the resulting text message will contain a name string so long that it overflows over crucial data, which can crash the game. (This didn't happen here)
		$LF
	]li
	[li 
		" Traversing some values when filling the general list will sometimes hit an infinite loop which can also crash the game.
		$LF
	]li
]ul
[div class=p 
	"By writing 0x6EA4 to 0x1F and 0x63DD to 0x22 I get the following code (in the Koei VM bytecode):
	$LF
]div
[ul 
	[li 
		" A4 6E 00 ; load PAD1/PAD2 input to left register
		$LF
	]li
	[li 
		" DD       ; call pointer in left register
		$LF
	]li
	[li 
		" 63 (this value is irrelevant, I just picked the first byte that didn't crash)
		$LF
	]li
]ul
[div class=p 
	"Now in order to actually run this code I need to clear the program counter for the virtual machine (0x06) so that the game starts executing values in the zero page. To do so I simplify instantiate an officer @ 0x06 and then dismiss them, which causes zero to be written to it (removal from linked list). The game then starts executing the "code" starting at 0x00, and eventually comes to the code we've written. At this point, by holding down the button combo for the ending function (0xE037), it gets called.
	$LF
]div
[div class=p 
	"NOTE: The game uses the name of the ruler of Province 1 as the winning ruler, since normally the game ending is only triggered when all provinces have a singular ruler. The name is glitched because Province 1 is unoccupied so it does a name lookup on an invalid ID.
	$LF
]div
[div class=p 
	"Future improvements are possible, there might exist a way to have sufficient code in the zero page to leverage the ending skip using only a single memory write in combination with values that are already there.
	$LF
]div
[div class=p 
	"In addition to this rudimentary ACE I've also written a full ACE bootstrap for a potential total-control TAS. The setup for it was around 10 minutes but using this new method I should be able to shave that down considerably. A simple demonstration of using it to draw custom graphics: 
	[a href=https://www.youtube.com/watch?v=EKCj2jXPqIU rel=noopener external nofollow 
		"https://www.youtube.com/watch?v=EKCj2jXPqIU
	]a
	$LF
]div
