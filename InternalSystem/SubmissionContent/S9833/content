6
[div class=p 
	"A TAS like no one has ever seen around here!
	$LF
]div
[div class=p 
	(youtube|v=iMpIsUHWtuE)
	$LF
]div
[h3 id=GameObjectives 
	[b 
		"Game Objectives
		$LF
	]b
]h3
[ul 
	[li 
		"Emulator used: BizHawk 2.6.3
		$LF
	]li
	[li 
		"Allow Left+Right / Up+Down
		$LF
	]li
	[li 
		"Core BSNES
		$LF
	]li
	[li 
		"Abuses programming errors
		$LF
	]li
	[li 
		"Crashes the game intentionally
		$LF
	]li
	[li 
		"Uses cheats
		$LF
	]li
	[li 
		"Uses external memory manipulation
		$LF
	]li
]ul
[h3 id=WhatSCheatfest 
	[b 
		"What's CHEATFEST?
		$LF
	]b
]h3
[div class=p 
	"Okay, let's get straight to the point. This TAS is an Ultimate Mortal Kombat 3 
	[b 
		"cheatfest
	]b
	". Okay, Igor, but what the hell is a 
	[b 
		"CHEATFEST
	]b
	"?
	$LF
]div
[div class=p 
	"You may have seen some of my GLITCHFESTs, especially 
	(__wikiLink|displaytext=this|href=/7452S)
	" one from Super Mario World. 
	[b 
		"Glitchfests
	]b
	" are basically "playarounds" focused on showing as many glitches as possible within a game, without external modifications to the game, code execution, cheats or anything like that. So, it's basically a "glitch party." In the case of a cheatfest, as the name suggests, it's a "cheat party".
	$LF
]div
[div class=p 
	"Cheatfest is my creation where the objective is to do funny things, glitches using cheats and manual modifications to the game's memory. Unlike the glitchfest that doesn't use cheats, the cheatfest uses them to achieve and do things that wouldn't be possible in a "normal" glitchfest TAS, not even with arbitrary code execution. The use of cheats and memory manipulation may be a bit controversial, but it's all for entertainment purposes. 
	$LF
]div
[div class=p 
	"This TAS is purely for entertainment and does not focus on time, much less on competing with other TASes. 
	$LF
]div
[h3 id=HowIsItDone 
	[b 
		"How is it done?
		$LF
	]b
]h3
[div class=p 
	"In the past, I would run cheatfests by manually altering the game's memory. I'd write down when all the changes, values, and addresses occurred, and then manually modify them while the movie was playing. However, about two years ago, a colleague of mine, 
	[a class=intlink href=/Users/Profile/BrunoValads 
		"BrunoValads
	]a
	", created a script for me that made everything easier. This script makes all the changes automatically, and the only thing I need to do is setup within the script.
	$LF
]div
[div class=p 
	"Basically, I put inside the script the memory address that I want to be changed, the value that I want to put in it, the place in memory where that address is (WRAM, APURAM, ROM etc.), the frame in which I want it to be changed and even if I want to freeze that address at a specific value until a certain frame. With all this set up, the script does everything on its own.
	$LF
]div
[h3 id=HowToRunTas 
	[b 
		"How to run TAS?
		$LF
	]b
]h3
[div class=p 
	"If this is accepted, here are the instructions for this movie to run perfectly:
	$LF
]div
[div class=p 
	"Note: the script unfortunately does not work properly on higher versions of BizHawk, so the same version of BizHawk is required, which in this case is 2.6.3.
	$LF
]div
[ul 
	[li 
		"Download 
		[a href=https://bin.smwcentral.net/u/26310/Lua.zip rel=noopener external nofollow 
			"this
		]a
		" file (this file contains a lua script .lua and a .txt file);
		$LF
	]li
	[li 
		"Extract the .lua file and the .txt file to any folder;
		$LF
	]li
	[li 
		"Open Ultimate Mortal Kombat 3 USA in BizHawk and play the movie;
		$LF
	]li
	[li 
		"Pause the movie, go to Tools ► Lua Console. Inside Lua Console, go to Script ► Open Script and open the .lua file you downloaded;
		$LF
	]li
	[li 
		"The script will open. On the script screen, click "Load Cheats" in the bottom left corner and open the .txt file you downloaded;
		$LF
	]li
	[li 
		"Wait for the file to load completely (it will take a few seconds) and then just unpause the movie and enjoy;
		$LF
	]li
]ul
[div class=p 
	"The .lua file is the script and the .txt file is the file that contains the cheats and modifications made during the movie. You will be able to see all the changes that are made to the memory in real time, on the emulator screen, in the lower left corner, while the movie runs.
	$LF
]div
[h3 id=MemoryModificationsGameAddresses 
	[b 
		"Memory Modifications/Game Addresses
		$LF
	]b
]h3
[div class=p 
	"Here are some of the most frequently changed addresses in TAS:
	$LF
]div
[table 
	[tbody 
		[tr 
			[th 
				"Adress
			]th
			[th 
				"Memory
			]th
			[th 
				"Description
			]th
			[td 
				"Bytes
			]td
		]tr
		[tr 
			[td 
				"$52C8
			]td
			[td 
				"WRAM
			]td
			[td 
				"Player 1 Character
			]td
			[td 
				"1
			]td
		]tr
		[tr 
			[td 
				"$52CA
			]td
			[td 
				"WRAM
			]td
			[td 
				"Player 2 Character
			]td
			[td 
				"1
			]td
		]tr
		[tr 
			[td 
				"$36D0
			]td
			[td 
				"WRAM
			]td
			[td 
				"Player 1 Character Profile
			]td
			[td 
				"1
			]td
		]tr
		[tr 
			[td 
				"$3894
			]td
			[td 
				"WRAM
			]td
			[td 
				"Player 2 Character Profile
			]td
			[td 
				"1
			]td
		]tr
		[tr 
			[td 
				"$3A7E
			]td
			[td 
				"WRAM
			]td
			[td 
				"Current Background 
			]td
			[td 
				"1
			]td
		]tr
		[tr 
			[td 
				"$3A82
			]td
			[td 
				"WRAM
			]td
			[td 
				"Current Music
			]td
			[td 
				"1
			]td
		]tr
		[tr 
			[td 
				"$1A0C
			]td
			[td 
				"WRAM
			]td
			[td 
				"In-Game Timer Loop (apparently)
			]td
			[td 
				"2
			]td
		]tr
		[tr 
			[td 
				"$3C30
			]td
			[td 
				"WRAM
			]td
			[td 
				"Kombat Kode
			]td
			[td 
				"1
			]td
		]tr
		[tr 
			[td 
				"$3C2E
			]td
			[td 
				"WRAM
			]td
			[td 
				"Kombat Kode (I don't know why two different addresses)
			]td
			[td 
				"1
			]td
		]tr
		[tr 
			[td 
				"$36CC
			]td
			[td 
				"WRAM
			]td
			[td 
				"Player 1 Movement
			]td
			[td 
				"1
			]td
		]tr
		[tr 
			[td 
				"$3890
			]td
			[td 
				"WRAM
			]td
			[td 
				"Player 2 Movement
			]td
			[td 
				"1
			]td
		]tr
		[tr 
			[td 
				"$36D4
			]td
			[td 
				"WRAM
			]td
			[td 
				"Player 1 Health
			]td
			[td 
				"1
			]td
		]tr
		[tr 
			[td 
				"$3898
			]td
			[td 
				"WRAM
			]td
			[td 
				"Player 2 Health
			]td
			[td 
				"1
			]td
		]tr
		[tr 
			[td 
				"$3B25
			]td
			[td 
				"WRAM
			]td
			[td 
				"Table of Certain Magics
			]td
			[td 
				"139
			]td
		]tr
		[tr 
			[td 
				"$100
			]td
			[td 
				"CGRAM
			]td
			[td 
				"Player 1 Palette
			]td
			[td 
				"32
			]td
		]tr
		[tr 
			[td 
				"$120
			]td
			[td 
				"CGRAM
			]td
			[td 
				"Player 2 Palette
			]td
			[td 
				"32
			]td
		]tr
		[tr 
			[td 
				"$x26*
			]td
			[td 
				"WRAM
			]td
			[td 
				"I'm not sure, but it has to do with the player's status and fatalities
			]td
			[td 
				"3
			]td
		]tr
		[tr 
			[td 
				"$x04*
			]td
			[td 
				"WRAM
			]td
			[td 
				"Player Speed
			]td
			[td 
				"1
			]td
		]tr
		[tr 
			[td 
				"$xA8*
			]td
			[td 
				"WRAM
			]td
			[td 
				"Player Combo
			]td
			[td 
				"1
			]td
		]tr
		[tr 
			[td 
				"$x78*
			]td
			[td 
				"WRAM
			]td
			[td 
				"Player Status
			]td
			[td 
				"1
			]td
		]tr
		[tr 
			[td 
				"$x2C*
			]td
			[td 
				"WRAM
			]td
			[td 
				"I don't know for sure, but it has to do with Shang Tsung's transformation
			]td
			[td 
				"1
			]td
		]tr
		[tr 
			[td 
				"$x7C*
			]td
			[td 
				"WRAM
			]td
			[td 
				"Player Magic Movement
			]td
			[td 
				"1
			]td
		]tr
		[tr 
			[td 
				"$x32*
			]td
			[td 
				"WRAM
			]td
			[td 
				"Menu Select Cooldown
			]td
			[td 
				"1
			]td
		]tr
	]tbody
]table
[div class=p 
	"I think these are the most important addresses to mention here. You can open the .txt file and look at it, as it contains all the addresses that have been changed. This information is not 100% correct, as I made this table based on my experience with these addresses and I don't even know how some of them actually work. 
	$LF
]div
[div class=p 
	"Addresses with an asterisk (*) in front mean they work in "slots". They are not fixed addresses and vary, as far as I noticed, between 1 and 11 (hex). In other words, if we take $xA8, for example, it varies for each player in each fight or round. So, in a given fight, the player may be using A8 in slot 04, so the address responsible would be $4A8, if it is slot 05, it would be $5A8, slot F, $FA8 and so on. This applies to all addresses in the table that have an asterisk and an "x." This "x" can vary, as I said, between 1 and 11, and the game randomly chooses which slot to use.
	$LF
]div
[h3 id=ExplainingTheTas 
	[b 
		"Explaining the TAS
		$LF
	]b
]h3
[div class=p 
	"Now I'm going to talk about what happened in the game, because you certainly won't understand almost anything by watching this TAS.
	$LF
]div
[h4 id=CharacterModifier 
	" Character Modifier
	$LF
]h4
[div class=p 
	"You'll see, hundreds of times, the player's character being changed mid-fight, and this is done at address $52C8, as shown in the table. The values range from 00 to 1B, with 0B being Sheeva (who doesn't actually exist), 1A being Motaro, and 1B being Shao Kahn. I won't list all the characters here because there are so many. Many glitches occurred in this TAS due to Sheeva. When $52C8 is set as OB in the middle of the fight, any movement, whether by player 1 or player 2, can crash the game or cause destruction, as you can see in the fight at 
	[a href=https://youtu.be/iMpIsUHWtuE?t=1460 rel=noopener external nofollow 
		"24:20
	]a
	". Other glitches can occur by setting $52C8 to values above 1B. You can see this at 
	[a href=https://youtu.be/iMpIsUHWtuE?t=96 rel=noopener external nofollow 
		"1:36
	]a
	" where $52C8 was set to 28.
	$LF
]div
[h4 id=InfiniteCombos 
	" Infinite Combos
	$LF
]h4
[div class=p 
	"Infinite combos were created with several approaches. 
	$LF
]div
[div class=p 
	"First, I'll explain the table in $3B25. When you cast a certain spell, depending on the spell, the game won't let you cast it twice in a row. This happens for three reasons: high combos, the game's timer or the other player status.
	$LF
]div
[ul 
	[li 
		[b 
			"High Combos
		]b
		": When you are doing a combo and the value in $xA8 is greater than 5, the game usually prevents the player from doing a certain spell until the combo is zeroed.
		$LF
	]li
	[li 
		[b 
			"Game's Timer
		]b
		": Address $1A0C is an address that loops infinitely between 00 and FF. The address next to it, $1A0D, adds 1 every time $1A0C completes a full loop. When you cast certain spells, with certain characters, the game records the values in $1A0C and $1A0D and writes these values to the table in $3B25, at the character's corresponding address. This prevents the player from casting the same spell until a certain amount of time has passed, according to the values written in the table in $3B25. I'm not sure how long this takes, but I think it's around 5 seconds.
		$LF
	]li
	[li 
		[b 
			"Player Status
		]b
		": The $x78 address is responsible, as far as I can tell, for the status the player is in. 03 is the "normal" status, 02 is lowered, and so on. When you do the Kabal spin, for example, if player 2 is stunned, the value 17 is written to $x78. In this case, Kabal will not be able to spin again until the value in $x78 returns to 03.
		$LF
	]li
]ul
[div class=p 
	"Okay, but then, how were the infinite combos made? 
	$LF
]div
[div class=p 
	"It's a combination of all of these. By freezing the combo address at 00 ($xA8) and freezing the other player's status at 03 ($x78), you can now perform infinite combos with Kabal and the robots, for example. By freezing the game timer ($1A0C and $1A0D) at any non-zero value, the addresses in the table $3B25 at 00, and the combo, you can perform infinite combos with all ninjas, and so on. It depends on the situation and the character. If you freeze everything: the timer, the table, the combo, and the player's status, you can perform infinite combos with virtually all characters. It's worth remembering that not all spells are on the table in $3B25, just some specific ones.
	$LF
]div
[div class=p 
	"Another address often used in combos is $x7C. If we freeze it at 01, it is possible to cast spells in all frames, without the player's movement time, as you can see in 
	[a href=https://youtu.be/iMpIsUHWtuE?t=254 rel=noopener external nofollow 
		"4:14
	]a
	" with Liu Kang. This address also makes it possible to cast spells at any time, whether in the middle of a combo, receiving an attack from another player, or even in the middle of another spell.
	$LF
]div
[div class=p 
	"The combos made with Shang Tsung are the combination of all this with the manipulation in $52C8.
	$LF
]div
[h4 id=Fatalities 
	" Fatalities
	$LF
]h4
[div class=p 
	"In some fights, you'll see that I do some fatalities in the middle of the fight, I do fatalities on top of other fatalities or bugged fatalities. See 
	[a href=https://youtu.be/iMpIsUHWtuE?t=994 rel=noopener external nofollow 
		"here
	]a
	" or 
	[a href=https://youtu.be/iMpIsUHWtuE?t=1200 rel=noopener external nofollow 
		"here
	]a
	".
	$LF
]div
[div class=p 
	"Mid-fight fatalities are performed at address $x26. These are 3 bytes, so $x26, $x27, and $x28. If these addresses are set to "1E 80 82", respectively, the character performs fatality 1, regardless of the distance to the other player, and this can be performed mid-fight. If the addresses are set to "10 80 82", the character performs fatality 2, in the same manner. There are certain sequences that do other things as well. The "19 82 82" sequence performs the Scorpion fatality, sending the other character to hell and burning them. The "11 80 82" sequence performs the Kung Lao fatality, in which he slashes the character with his hat. Both sequences can be performed with any character and can be performed mid-fight. There are other values that I won't mention here so as not to make it too long.
	$LF
]div
[div class=p 
	"However, there's a problem. When a fatality is performed in the middle of a fight, characters become frozen and unable to move. To solve this, the address $36CC (or $3890) is manipulated. By setting this address to 56, the player can move normally, even in the middle of a fatality. In fact, if this address is frozen at 56, you can perform movements (not spells) in every frame. This makes it possible to land strikes in the middle of grabs or spells that leave the player stunned. This was the address used to "escape" the freezing of some fatalities that I did in the middle of the fight.
	$LF
]div
[div class=p 
	"When doing a fatality with any character, be it fatality 1 or 2, if you change the character in the middle of the fatality in $52C8, very strange things can happen, as you can see in 
	[a href=https://youtu.be/iMpIsUHWtuE?t=149 rel=noopener external nofollow 
		"2:29
	]a
	" or in 
	[a href=https://youtu.be/iMpIsUHWtuE?t=419 rel=noopener external nofollow 
		"6:59
	]a
	".
	$LF
]div
[h4 id=Palette 
	" Palette
	$LF
]h4
[div class=p 
	"If you change $52C8 to another character, the game won't read the palette. For example, if you have Scorpion, value 12, and want to switch to Shang Tsung, which is value 0C, by setting 0C in $52C8, you'll have Shang Tsung in Scorpion's palette. To change this, you need to manually change the palette in the CGRAM or receive some magic, like Noob's cloud or Sub Zero's ice. This causes the game to update the palette. The "secret ninja" in 
	[a href=https://youtu.be/iMpIsUHWtuE?t=1566 rel=noopener external nofollow 
		"26:07
	]a
	" was created by manipulating the palette in CGRAM and the 
	[a href=https://youtu.be/iMpIsUHWtuE?t=1735 rel=noopener external nofollow 
		"red
	]a
	" Shang Tsung too!
	$LF
]div
[h4 id=SomeImportantDetails 
	" Some Important Details
	$LF
]h4
[div class=p 
	"I won't explain everything here because it would take five pages of explanation. You have complete freedom to see what's happening in the game at each point, following the instructions to play the movie at home. But here are a few more things:
	$LF
]div
[ul 
	[li 
		"The $x2C address is set to the character's value when Shang Tsung is transforming. So, for example, if I transform into Ermac, value 14, the $x2C is set to 14, and then the transformation occurs. By manipulating this value, you can transform into any character. This is how I transformed into Noob, Rain, Smoke Human, and even Shao Kahn.
		$LF
	]li
	[li 
		"Freezing the address $x04 at 00 gives the player hyper speed, as you can see in this 2 player fight at 
		[a href=https://youtu.be/iMpIsUHWtuE?t=2000 rel=noopener external nofollow 
			"33:20
		]a
		".
		$LF
	]li
	[li 
		"$3BE4 is the address responsible for triggering a fatality with one button and in all rounds. Setting it to 01 activates it. Because of this, you will see hundreds of fatalities in this TAS.
		$LF
	]li
	[li 
		"$x32 is responsible for the time in frames that you can change the character on the selection screen. If frozen at 0, it is possible to change in every frame, as you can see in 
		[a href=https://youtu.be/iMpIsUHWtuE?t=742 rel=noopener external nofollow 
			"12:22
		]a
		".
		$LF
	]li
	[li 
		"$3A7E can be manipulated to play fights in glitchy backgrounds, like in 
		[a href=https://youtu.be/iMpIsUHWtuE?t=528 rel=noopener external nofollow 
			"8:48
		]a
		". Values like 07 and 08 are bugged backgrounds. It's even possible to play on the character select screen, as you can see in the old cheatfest I did, 
		[a href=https://youtu.be/SVZyRYaCT7s?t=1871 rel=noopener external nofollow 
			"here
		]a
		".
		$LF
	]li
	[li 
		"Shang Tsung's fireball glitch was also heavily used in this TAS. Basically, if you release Shang Tsung's fireballs and immediately transform into any character, the game completely glitches, depending on the character he's transforming into. You can see an example 
		[a href=https://youtu.be/iMpIsUHWtuE?t=2346 rel=noopener external nofollow 
			"here
		]a
		". The game often crashes with this glitch. It's also possible to do this glitch without cheating by interrupting the fireball animation by punching Player 2.
		$LF
	]li
	[li 
		"The movie crash is different from the crash seen in my channel's video. I simply changed the crash to make it funnier for my subscribers. And I crashed the game because, for some reason, it was crashing on its own when I cast magic in previous fights. I think the memory was corrupted by Sheeva or something else I did. To avoid having to redo it, I decided to crash the game intentionally and start a new tower.
		$LF
	]li
	[li 
		"Address $3A82, responsible for the music, was changed quite a bit, including in the main menu, as you can see 
		[a href=https://youtu.be/iMpIsUHWtuE?t=1644 rel=noopener external nofollow 
			"here
		]a
		". And still talking about music; at some points, the music became bugged, as 
		[a href=https://youtu.be/iMpIsUHWtuE?t=1262 rel=noopener external nofollow 
			"here
		]a
		" and this was done by freezing some addresses in APURAM, the memory responsible for the game's sound. You can see these changes in APURAM in the .txt file itself.
		$LF
	]li
]ul
[div class=p 
	"I don't think I've forgotten any important information. In short, this is basically a playaround done with memory manipulation to generate extremely satisfying or funny results.
	$LF
]div
[h3 id=Thanks 
	[b 
		"Thanks
		$LF
	]b
]h3
[div class=p 
	"My sincere thanks to Denis, a colleague of mine who helped me discover several addresses in the game, including the addresses needed to make infinite combos.
	$LF
]div
[div class=p 
	"I hope you enjoy watching this :)
	$LF
]div
