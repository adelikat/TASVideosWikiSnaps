5
[div class=p 
	"This is a follow-up submission to 
	[a href=https://tasvideos.org/7017S rel=noopener external nofollow 
		"the one I made 2 years ago
	]a
	", but vastly improved, thanks to the discovery of a new glitch!
	$LF
]div
[div class=p 
	[b 
		"Objectives
	]b
	$LF
]div
[ul 
	[li 
		" Uses easiest difficulty
		$LF
	]li
	[li 
		" Uses time-saving glitches
		$LF
	]li
	[li 
		" Forgoes "warps"
		$LF
	]li
	[li 
		" Genre: Board
		$LF
	]li
]ul
[div class=p 
	[b 
		[a href=https://annarchive.com/files2/USCF%20Chess%20%28U%29.pdf rel=noopener external nofollow 
			"Click here for the Instructions Manual
		]a
	]b
	$LF
]div
[div class=p 
	[b 
		"OK, let's explain the big confusing glitch
	]b
	$LF
]div
[div class=p 
	"But first we need to discuss the three different playing modes. The "Enter" key on the left controller allows you to change the playing mode. These include Player vs Computer, Player vs Player, or Computer vs Computer. So why did we choose Player vs Computer in this TAS and not any of the others?
	$LF
]div
[ul 
	[li 
		" Computer vs Computer would be an extremely trivial and uninteresting TAS as it would just involve confirming this mode to end input as the CPU goes on to duke it out against itself.
		$LF
	]li
	[li 
		" Player vs Player would not make for an interesting TAS either (except maybe for a "playaround" setting), as one would obviously control both players to deliver a fool's mate and is neither a surprising nor novel result.
		$LF
	]li
	[li 
		" Player vs Computer is therefore the only mode that would make for an interesting or novel result, but what if there was a way we could break the game by forcing the computer to make the moves we want 
		[b 
			"without actually switching to Player vs Player mode?
		]b
		" This would be a novel way of doing so and is the basis for this TAS.
		$LF
	]li
]ul
[div class=p 
	"This is how we do it: When the "gong" sounds to signal the computer has decided on its move, even though the cursor is invisible, everything is actually very much tangible to the player, even the computer's pieces! This means we have the ability to override any computer move to something that benefits us! We must still make a legal move however, so we can't for instance hop our opponent's king over his pawns into the open or move a black piece when it is white's turn.
	$LF
]div
[div class=p 
	"Speaking of the black and white pieces, let's go on a tangent real quick and explain how we select whether we want to be black or white at the start of the game. The manual says the "8" key on the left controller does the following:
	$LF
]div
[blockquote 
	"In Player vs. Computer, press to switch colors with the computer or to have the computer make your next move
	$LF
]blockquote
[div class=p 
	"In other words, this is the key you press at the start of the game if you want to play as black instead of white. That is, if you wanted to play fairly. There's nothing stopping you from pressing "8" in the middle of the game to be white for some moves and black for others. If we just keep pressing the "8" key, we can effectively simulate Computer vs Computer mode.
	$LF
]div
[div class=p 
	"Now that we've explained the "8" key, let's go back to computer move overrides. If we override the computer's move, the game will assume it's the computer's move again for the next move but hey wait! Shouldn't it be my 
	[em 
		"real
	]em
	" move now? Unfortunately, a side effect of overriding the computer's move is that the player and computer colors get switched for the next turn. I don't want this to occur in my TAS as players aren't supposed to switch sides during a "fair" chess game. However, I can counteract this by strategically pressing the "8" after white's turn to maintain color continuity! Pay attention to the colors of the "P" and the "C" in the upper-left corner, which are black and white respectively. If you're playing a "fair game" of chess, these colors should never switch, except if and when you select black at the start of the game. I decided in the beginning of the game that I will control the black pieces and even though I press the "8" key several times during the TAS to counteract the side effects of overriding white's moves, the "P" is always black and the "C" is always white, so player-color continuity is maintained.
	$LF
]div
[div class=p 
	"One last thing I have to make sure of is that I also get the "good" checkmate. The checkmate fanfares can get mixed up as yet another side-effect of overriding computer moves. The "good" checkmate fanfare (cheers and applause) denotes the player has won the game. The "bad" checkmate fanfare (descending sound effect) denotes the computer has won. We end up getting the good checkmate after the computer attempts a rather... uh... bizarre king move.
	$LF
]div
[div class=p 
	[b 
		"So let's review the rules we've set for ourselves
	]b
	$LF
]div
[ul 
	[li 
		" We must stay in Player vs Computer mode.
		$LF
	]li
	[li 
		" We must maintain player-color continuity for the whole game. This means the colors of the "P" and "C" must be consistent after the first move.
		$LF
	]li
	[li 
		" We must get the "good" checkmate fanfare.
		$LF
	]li
]ul
[div class=p 
	[b 
		"Difficulty Choice and "Warps"
	]b
	$LF
]div
[div class=p 
	"The easiest difficulty (skill level 1) was chosen because there's literally no point in selecting a higher skill level as the 
	[em 
		"only
	]em
	" thing that would add in a glitched context is extra wait time. This is because I'm 
	[em 
		"effectively
	]em
	" the one orchestrating the computer's moves regardless.
	$LF
]div
[div class=p 
	"The lower-right side button is called the "Force Move" button, and it forces the computer to make whatever move it has so far deemed the best. While this will often cause the computer to move faster at the higher skill levels, it was not found to save time during this TAS, and was thus the reason I did not use it at all. Not pressing this button is what I mean by the "Forgoes Warps" objective as it's otherwise kinda like 
	[em 
		"warping
	]em
	" through the AI's decision tree.
	$LF
]div
[div class=p 
	"Now, if you hate the whole premise of this submission, you're in luck! The TAS I submitted alongside this one does not use glitches or warps, and plays at skill level 6, the hardest difficulty. In other words, it's actually a legit game of chess.
	$LF
]div
[div class=p 
	[b 
		"Routing
	]b
	$LF
]div
[div class=p 
	"The goal is not necessarily to checkmate in the least number of moves but to deliver the checkmate that makes the computer "think" the least. As yet an additional side effect of overriding computer moves, the computer must think before 
	[em 
		"every
	]em
	" move instead of just its own moves. However, it is not a big deal because the computer has no trouble deciding on moves for either black or white as all the positions encountered in this TAS are stupid simple. The game where we deliver Fool's Mate as black was found to have the shortest total think time and also happens to be the quickest checkmate by move count in all of chess.
	$LF
]div
[div class=p 
	"Even though think times are barely a concern in this TAS, we still have yet another trick up our sleeve, which involves pressing "8" on the 
	[em 
		"right
	]em
	" controller this time. Pressing "8" on the right controller twice will hide the clock displays. This frees up some additional RAM to be used for computer thinking and could reduce the total thinking time. Although it takes 9 extra frames to get the clocks to disappear, it resulted in a net gain somewhere between 4 and 13 frames (I don't know the exact number as I did multiple types of improvements simultaneously).
	$LF
]div
[div class=p 
	[b 
		"Game Summary
	]b
	$LF
]div
[table 
	[tbody 
		[tr 
			[th 
				"Move
			]th
			[th 
				"White
			]th
			[th 
				"Total White Time
			]th
			[th 
				"Black
			]th
			[th 
				"Total Black Time
			]th
		]tr
		[tr 
			[th 
				"1   
			]th
			[td 
				"f3    
			]td
			[td 
				"0:04             
			]td
			[td 
				"e5    
			]td
			[td 
				"0:04
				$LF
			]td
		]tr
		[tr 
			[th 
				"2   
			]th
			[td 
				"g4    
			]td
			[td 
				"0:09             
			]td
			[td 
				"Qh4#  
			]td
			[td 
				"0:08
				$LF
			]td
		]tr
		[tr 
			[th 
				"3   
			]th
			[td 
				"Ka5???? LOL
			]td
			[td 
				"            
			]td
			[td 
				"      
			]td
			[td 
				"                 
			]td
		]tr
	]tbody
]table
[div class=p 
	[b 
		"Piece Movements
	]b
	$LF
]div
[div class=p 
	"In addition to all the focus on think time minimization, there are also some speed strats going on with how we move pieces. A piece or square can be selected even if the cursor is on an infinitesimal portion of the square's right or bottom edge, or even the bottom-right corner. This gives an advantage to picking up pieces if they're moving down or to the right, and setting down pieces moving up or left.
	$LF
]div
[div class=p 
	"The "7" key on the left controller flips the board so black is now at the bottom of the screen or vice-versa. The cursor does not flip along with the board, which means when we make moves for both black and white pieces, we can just flip the board view and keep the cursor near the bottom side to save on cursor travel time.
	$LF
]div
[div class=p 
	"The cursor becomes active for the player's next turn the moment the "gong" sound effect plays (as explained earlier), even though it cannot be seen yet. This is why the cursor seems to always be in the perfect spot.
	$LF
]div
[div class=p 
	[b 
		"Suggested Screenshot
	]b
	" Frame 1336. Thanks to FractalFusion for the suggestion!
	$LF
]div
[div class=p 
	[img class=embed mw-100 src=https://i.imgur.com/OFk1pbul.jpeg 
	]img
	$LF
]div
[div class=p 
	[b 
		"Suggested Publication Notes
	]b
	$LF
]div
[div class=p 
	"Winslinator forces the computer into making the worst possible moves by abusing programming errors in an attempt to beat the computer player as fast as possible.
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/nymx 
		"nymx
	]a
	": Claiming for judging.
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/nymx 
		"nymx
	]a
	" I found this to be the most interesting submission of your 3 chess TASes. I was really entertained by the idea of the CPU's crazy decision to move its King, as if it had bishop power, with the added ability of a knight!
	$LF
	"Your work here does a great job exploiting glitches and satisfies the goal of "Fastest Completion". Excellent work!
	$LF
]div
[div class=p 
	"Thanks to 
	[a class=intlink href=/Users/Profile/ikuyo 
		"ikuyo
	]a
	" for your review.
	$LF
]div
[div class=p 
	"Accepting.
	$LF
]div
[hr 
]hr
[div class=p 
	[a class=intlink href=/Users/Profile/despoa 
		"despoa
	]a
	": Processing...
]div
