10
[p 
	"Our first submission here, we hope you will all enjoy it as much as we did while making it!
	$LF
]p
[p 
	"This TAS is a significant improvement to the 
	[a class=intlink href=/1307M 
		"2009 movie by Ryuto
	]a
	" due to game-changing discoveries: wall clipping and out-of-bounds goal zones.
	$LF
]p
[p 
	"This is a double submission. We were unsure whether to include the Training levels or not, so we will let the community decide. This is the version WITH the Training levels, the submission without them is available 
	[a class=intlink href=/6313S 
		"here
	]a
	".
	$LF
]p
[hr 
]hr
[pre 
	$LF
]pre
[p 
	(youtube|v=x_lio9zKfiU|w=480|h=320)
	$LF
]p
[p 
	[em 
		"Encode with OOB viewer: 
		[br 
		]br
		$LF
		"(The camera always follows the Helirin and the OOB elements are displayed)
	]em
	$LF
	(youtube|v=1npZIzDDqlY|w=480|h=320)
	$LF
]p
[div class=toc 
	[ul 
		[li 
			[a href=#heading-705 
				"About the game
				$LF
			]a
		]li
		[li 
			[a href=#heading-1068 
				"About the run
				$LF
			]a
		]li
		[li 
			[a href=#heading-1433 
				"The basics
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#heading-1449 
						"Objective of a level
						$LF
					]a
				]li
				[li 
					[a href=#heading-1873 
						"Position
						$LF
					]a
				]li
				[li 
					[a href=#heading-2407 
						"Speed under ”normal” behavior
						$LF
					]a
				]li
				[li 
					[a href=#heading-3219 
						"Collision
						$LF
					]a
				]li
				[li 
					[a href=#heading-3743 
						"Springs
						$LF
					]a
				]li
				[li 
					[a href=#heading-3916 
						"Moving objects
						$LF
					]a
				]li
				[li 
					[a href=#heading-4074 
						"Horns
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#heading-4247 
				"Glitches and tricks used
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#heading-4275 
						"Invulnerability frames
						$LF
					]a
				]li
				[li 
					[a href=#heading-4543 
						"Wall clipping
						$LF
					]a
				]li
				[li 
					[a href=#heading-5221 
						"Wall surfing
						$LF
					]a
				]li
				[li 
					[a href=#heading-5454 
						"Out-of-bounds stuff
						$LF
					]a
				]li
				[li 
					[a href=#heading-6069 
						"(No) restart trick
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#heading-6669 
				"Tools
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#heading-6680 
						"Memory watch
						$LF
					]a
				]li
				[li 
					[a href=#heading-8364 
						"TAStudio
						$LF
					]a
				]li
				[li 
					[a href=#heading-8602 
						"Maps
						$LF
					]a
				]li
				[li 
					[a href=#heading-8775 
						"Speed HUD
						$LF
					]a
				]li
				[li 
					[a href=#heading-9003 
						"OOB viewer
						$LF
					]a
				]li
				[li 
					[a href=#heading-9267 
						"KuruBot
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#heading-9583 
				"Technical details
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#heading-9604 
						"Game physics
						$LF
					]a
				]li
				[li 
					[a href=#heading-15578 
						"OOB stuff
						$LF
					]a
				]li
				[li 
					[a href=#heading-17457 
						"KuruBot
						$LF
					]a
				]li
				[li 
					[a href=#heading-21627 
						"(obsolete) Pixel and subpixel adjustment 
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#heading-23564 
				"Times per level
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#heading-23585 
						" Why not IGT?
						$LF
					]a
				]li
				[li 
					[a href=#heading-24084 
						" Table
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#heading-26447 
				"Closing
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#heading-26460 
						"mohoc’s personal comments
						$LF
					]a
				]li
				[li 
					[a href=#heading-36746 
						"E-Sh4rk’s personal comments
						$LF
					]a
				]li
			]ul
		]li
	]ul
]div
[h2 
	"About the game
	$LF
	[a id=heading-705 
	]a
]h2
[p 
	"Released in 2001 as one of the GBA launch titles, 
	[em 
		"Kuru Kuru Kururin
	]em
	" is an unusual game that is a mix of racing/puzzle genres. The player controls a slowly spinning stick called the Helirin, and must maneuver it through a series of mazes. The player controls the direction and speed of movement but not the Helirin's constant rotation.
	$LF
]p
[h2 
	"About the run
	$LF
	[a id=heading-1068 
	]a
]h2
[ul 
	[li 
		"Emulator used: Bizhawk 2.3.1, mGBA core
		$LF
	]li
	[li 
		"Aims for fastest real-time
		$LF
	]li
	[li 
		"Takes damage to save time
		$LF
	]li
	[li 
		"Heavy glitch abuse
		$LF
	]li
	[li 
		"Genre: Puzzle
		$LF
	]li
	[li 
		"Genre: Racing
		$LF
	]li
]ul
[p 
	"The goal is to reach the credits as fast as possible. In other words, we must complete the thirty “main” levels of the game while saving the bird trapped in the third level of each world.
	$LF
]p
[h2 
	"The basics
	$LF
	[a id=heading-1433 
	]a
]h2
[h3 
	"Objective of a level
	$LF
	[a id=heading-1449 
	]a
]h3
[p 
	"Reach the goal zone (=yellow zone).
	$LF
]p
[p 
	"When you hit a wall, you loose a heart. If you loose all your three hearts, the Helirin breaks and you must restart the level from the beginning. In some levels there are heart zones on your way that heal you.
	$LF
]p
[p 
	"Sometimes there is a collectible item in the level, which is either a cosmetic bonus or a bird. Only birds are necessary to reach the credits.
	$LF
]p
[h3 
	"Position
	$LF
	[a id=heading-1873 
	]a
]h3
[p 
	"Position is given by a triple (X,Y,R) with X,Y the coordinates and R the angle of the Helirin.
	$LF
]p
[ul 
	[li 
		"X and Y are 32-bit values. Both can be interpreted as a triplet (pixel,subpixel,subsubpixel) with the pixel in the range [-32768..32767] and both subpixel and subsubpixel in the range [0..255]. Subsubpixels are rarely relevant, so we will mostly be working with the couple (pixel,subpixel).
		$LF
	]li
	[li 
		"R is a 16-bit value in the range [0..65535]. 0 and 32768 are vertical (32768 is 180°).
		$LF
	]li
]ul
[p 
	"Axes:
	$LF
]p
[pre 
	" ― — > X
	$LF
	"|
	$LF
	"|
	$LF
	"v
	$LF
	"Y
	$LF
]pre
[h3 
	"Speed under ”normal” behavior
	$LF
	[a id=heading-2407 
	]a
]h3
[p 
	"X/Y speed depends on how many A/B buttons are held. The more buttons you hold, the faster you go.
	$LF
]p
[p 
	"The table below gives examples of a horizontal input and a diagonal input. Speed values are in (pixel,subpixel) format.
	$LF
]p
[table 
	[tbody 
		[tr 
			[th 
				"Direction
			]th
			[th 
				" #A/B held 
			]th
			[th 
				" X speed 
			]th
			[th 
				" Y speed 
			]th
			[th 
				" Norm 
			]th
		]tr
		[tr 
			[td 
				" Right     
			]td
			[td 
				"          0 
			]td
			[td 
				"   +1,128 
			]td
			[td 
				"        0 
			]td
			[td 
				" 1,128 
			]td
		]tr
		[tr 
			[td 
				" Right     
			]td
			[td 
				"          1 
			]td
			[td 
				"    +2,64 
			]td
			[td 
				"        0 
			]td
			[td 
				"  2,64 
			]td
		]tr
		[tr 
			[td 
				" Right     
			]td
			[td 
				"          2 
			]td
			[td 
				"     +3,0 
			]td
			[td 
				"        0 
			]td
			[td 
				"   3,0 
			]td
		]tr
		[tr 
			[td 
				" Down-right
			]td
			[td 
				"          0 
			]td
			[td 
				"  +1,15.5 
			]td
			[td 
				"  +1,15.5 
			]td
			[td 
				" 1,128 
			]td
		]tr
		[tr 
			[td 
				" Down-right
			]td
			[td 
				"          1 
			]td
			[td 
				"+1,151.25 
			]td
			[td 
				"+1,151.25 
			]td
			[td 
				"  2,64 
			]td
		]tr
		[tr 
			[td 
				" Down-right
			]td
			[td 
				"          2 
			]td
			[td 
				"    +2,31 
			]td
			[td 
				"    +2,31 
			]td
			[td 
				"   3,0 
			]td
		]tr
	]tbody
]table
[p 
	"Holding buttons makes you respectively 1.5x and 2x faster.
	$LF
]p
[p 
	"Rotation is at a constant +/-182 rate, which is about 1°/frame. + is clockwise.
	$LF
]p
[h3 
	"Collision
	$LF
	[a id=heading-3219 
	]a
]h3
[p 
	"When you hit a wall, you get pushed back. It has an impact on all three parameters:
	$LF
]p
[ul 
	[li 
		"you get an X/Y bump speed that decreases with time (it takes them about 30 to 40 frames to get back to zero).
		$LF
	]li
	[li 
		"your rotation speed is set to +/-1024 and gradually gets back to its initial value (it takes about 15 frames). When collision lasts two or more consecutive frames, rotation speed switches back and forth between +1024 and -1024, which could result in your rotation being sped up instead of being pushed back.
		$LF
	]li
]ul
[h3 
	"Springs
	$LF
	[a id=heading-3743 
	]a
]h3
[p 
	"Some levels include blue springs. They are the only way to switch between clockwise and counterclockwise motion. They can also be used to speed up rotation.
	$LF
]p
[h3 
	"Moving objects
	$LF
	[a id=heading-3916 
	]a
]h3
[p 
	"Some levels include cylinders and spiked balls. They hurt. Their movement is cyclic and fixed: if you hit them, they will not deflect.
	$LF
]p
[h3 
	"Horns
	$LF
	[a id=heading-4074 
	]a
]h3
[p 
	"The best feature of the game. While in a level, press L or R to have fun. Holding A/B while pressing L or R gives other sound effects for a grand total of six.
	$LF
]p
[h2 
	"Glitches and tricks used
	$LF
	[a id=heading-4247 
	]a
]h2
[h3 
	"Invulnerability frames
	$LF
	[a id=heading-4275 
	]a
]h3
[p 
	"Whenever you take damage, the game gives you 20 frames of invulnerabilty. This allows you to hit a wall multiple times and only loose one heart, which is especially useful to set up rotation and to perform wall “surfing” (detailed below).
	$LF
]p
[h3 
	"Wall clipping
	$LF
	[a id=heading-4543 
	]a
]h3
[p 
	"When colling with a wall, the game does not behave in the same way depending on which part of the Helirin is colliding. In particular if it is the center, then the game will only rely on your last input and push you in the oppposite direction. But simply going towards the wall would not work, as the game would push you in the opposite direction. So, in order to get the center into the wall, we typically use the bump speed from an earlier collision. This allows then to not make any input while still moving towards the wall. A tiny flaw in the game physics with huge consequences! 
	$LF
]p
[p 
	"Also a proof that walls are inefficient to prevent border crossings.
	$LF
]p
[h3 
	"Wall surfing
	$LF
	[a id=heading-5221 
	]a
]h3
[p 
	"Once the center of the Helirin is in a wall, as the game only takes into account yout last input and push you the other way, pressing inputs parallel to the wall makes you travel along the wall at very high speed.
	$LF
]p
[h3 
	"Out-of-bounds stuff
	$LF
	[a id=heading-5454 
	]a
]h3
[p 
	"Because of the way collisions are computed (see section “Technical details”), some objects are 
	[em 
		"physically
	]em
	" replicated: even though they are not visible, you can interact with them.
	$LF
]p
[ul 
	[li 
		"Replicated: walls and starting/heart/goal zones
		$LF
	]li
	[li 
		"Not replicated: birds, moving objects, springs, and cosmetic bonuses
		$LF
	]li
]ul
[p 
	"Replicated goal zones are especially interesting. Some of them are closer to the starting zone than the regular goal zone. This has been a major dicovery since they have been used in about half of the levels. See section “Times per level” for a recap of where they have been used.
	$LF
]p
[h3 
	"(No) restart trick
	$LF
	[a id=heading-6069 
	]a
]h3
[p 
	"The 
	[a class=intlink href=/1307M 
		"2009 movie by Ryuto
	]a
	" restarted the game after completing the third level of each world. These levels induced an additional cutscene because of saving a bird, which was skipped by restarting the game (saving 68 frames each time). Doing this after any other level would loose 24 frames instead.
	$LF
]p
[p 
	"However, it looked like this was only made possible because of using emulator VBA-rr 19.3, which skipped the Game Boy introduction. As Bizhawk 2.3.1 does not skip it by default and soft resetting is not a thing in this game, we did not include this trick in our movie.
	$LF
]p
[h2 
	"Tools
	$LF
	[a id=heading-6669 
	]a
]h2
[h3 
	"Memory watch
	$LF
	[a id=heading-6680 
	]a
]h3
[p 
	"A .wch file is available 
	[a class=extlink href=https://github.com/E-Sh4rk/KururinTAS rel=nofollow 
		"here
	]a
	".
	$LF
]p
[table 
	[tbody 
		[tr 
			[th 
				" Name          
			]th
			[th 
				" Address (IWRAM)
			]th
			[th 
				" Size   
			]th
			[th 
				" Description 
			]th
		]tr
		[tr 
			[td 
				" X / Y           
			]td
			[td 
				" 0x4544 / 0x4548 
			]td
			[td 
				" 32 bits 
			]td
			[td 
				" Position of the center of the Helirin. If you only look at the 16 most significant bits, you get the position in pixels. 
			]td
		]tr
		[tr 
			[td 
				" XB / YB         
			]td
			[td 
				" 0x454C / 0x4550 
			]td
			[td 
				" 32 bits 
			]td
			[td 
				" Bump speed. A bump speed is applied when the Helirin hits a wall, then it decreases gradually. 
			]td
		]tr
		[tr 
			[td 
				" XS / YS         
			]td
			[td 
				" 0x4554 / 0x4558 
			]td
			[td 
				" 32 bits 
			]td
			[td 
				" Input speed. It only depends on the direction pressed at the previous frame. 
			]td
		]tr
		[tr 
			[td 
				" Angle           
			]td
			[td 
				" 0x4572          
			]td
			[td 
				" 16 bits 
			]td
			[td 
				" Angle of the helirin. 0 and 32768 are vertical. 2⸢⸢16⸣⸣ = 65536 corresponds to 360°. For instance: (90 / 360) * 2⸢⸢16⸣⸣ = 16384 is 90°. 
			]td
		]tr
		[tr 
			[td 
				" Angle Rate      
			]td
			[td 
				" 0x4574          
			]td
			[td 
				" 16 bits 
			]td
			[td 
				" Rotation speed. It is 182 or -182 by default, but it momentarily changes when the Helirin hits something. 
			]td
		]tr
		[tr 
			[td 
				" Default Rate    
			]td
			[td 
				" 0x4576          
			]td
			[td 
				" 16 bits 
			]td
			[td 
				" 182 when the Helirin rotates clockwise, and -182 when it rotates counter-clockwise. Can change when hitting a spring. 
			]td
		]tr
		[tr 
			[td 
				" Invulnerability 
			]td
			[td 
				" 0x4585          
			]td
			[td 
				" 8 bits  
			]td
			[td 
				" Number of invulnerability frames left. Grows to 20 when the Helirin looses a heart, then decreases by 1 every frame until 0. This value is decremented before being used, so having it to 1 is equivalent to having it to 0. 
			]td
		]tr
		[tr 
			[td 
				" MapW and MapH   
			]td
			[td 
				" 0x313C / 0x313E 
			]td
			[td 
				" 16 bits 
			]td
			[td 
				" Size of the map in a number of tiles. A tile is 8x8 px so multiplying these numbers by 8 gives the size of the map in pixels. 
			]td
		]tr
		[tr 
			[td 
				" Collision Mask  
			]td
			[td 
				" 0x45D4          
			]td
			[td 
				" 32 bits 
			]td
			[td 
				" Indicates which parts of the Helirin are in collision with a wall. 
			]td
		]tr
	]tbody
]table
[h3 
	"TAStudio
	$LF
	[a id=heading-8364 
	]a
]h3
[p 
	"As this game does not have any known desync or lag issue, progress was nonlinear and we just had to glue the segments together at the end. This has made TAStudio a very efficient and comfortable interface to work with.
	$LF
]p
[h3 
	"Maps
	$LF
	[a id=heading-8602 
	]a
]h3
[p 
	"The maps of the thirty “main” Adventure Mode levels (from Grasslands 1 to Ghost Castle 3) are available on 
	[a class=extlink href=https://www.vgmaps.com/Atlas/GBA/index.htm#K rel=nofollow 
		"VGMaps
	]a
	".
	$LF
]p
[h3 
	"Speed HUD
	$LF
	[a id=heading-8775 
	]a
]h3
[p 
	"Lua script written by ThunderAxe31. Displays X/Y position, speed and bump speed. Available 
	[a class=intlink href=/Userfiles/Info/49530161300647551 
		"here
	]a
	".
	$LF
]p
[p 
	[em 
		"Speed HUD v1.2 in Ghost Castle 3
	]em
	$LF
]p
[p 
	[img class=embed src=https://i.imgur.com/316X5ys.png 
	]img
	$LF
]p
[h3 
	"OOB viewer
	$LF
	[a id=heading-9003 
	]a
]h3
[p 
	"Lua script created by ThunderAxe31, then improved in conjoint work with E-Sh4rk. Available on 
	[a class=extlink href=https://github.com/E-Sh4rk/KururinTAS/tree/master/OoB%20Viewer rel=nofollow 
		"Github
	]a
	".
	$LF
]p
[p 
	[em 
		"OOB viewer v1.5 in Machine Land 3
	]em
	$LF
]p
[p 
	[img class=embed src=https://i.imgur.com/6H6xp7r.png 
	]img
	$LF
]p
[h3 
	"KuruBot
	$LF
	[a id=heading-9267 
	]a
]h3
[p 
	"Bot designed by E-Sh4rk. Efficient and customizable tool to help finding new strategies in Kuru Kuru Kururin’s levels (more details in the “Technical details” section). Available on 
	[a class=extlink href=https://github.com/E-Sh4rk/KururinTAS/tree/master/KuruBot rel=nofollow 
		"Github
	]a
	".
	$LF
]p
[p 
	[a class=extlink href=https://youtu.be/GmkBdvF6ZxM rel=nofollow 
		"Example video
	]a
	".
	$LF
]p
[h2 
	"Technical details
	$LF
	[a id=heading-9583 
	]a
]h2
[h3 
	"Game physics
	$LF
	[a id=heading-9604 
	]a
]h3
[p 
	"Before we give an overview of what the game performs every frame, we need to develop a couple notions.
	$LF
]p
[hr 
]hr
[p 
	[em 
		"Collision mask
	]em
	" 
	$LF
]p
[p 
	"Even though the Helirin is 63 pixels long, only 17 points are checked for collision. These points, which we call 
	[em 
		"collision points
	]em
	", are marked as “O” below. (O) is the center, which is also a collision point.
	$LF
]p
[pre 
	"    O⁃⁃O⁃⁃⁃O⁃⁃⁃O⁃⁃⁃O⁃⁃⁃O⁃⁃⁃O⁃⁃⁃O⁃⁃⁃(O)⁃⁃⁃O⁃⁃⁃O⁃⁃⁃O⁃⁃⁃O⁃⁃⁃O⁃⁃⁃O⁃⁃⁃O⁃⁃O
	$LF
]pre
[p 
	"In order to keep track of which points are in collision, the game uses a 
	[em 
		"collision mask
	]em
	". The collision mask is a 32-bit value that must be read in binary: each bit tells if a certain point is in collision with something. If we number collision points in the following way:
	$LF
]p
[pre 
	$LF
	"16⁃⁃14⁃⁃⁃12⁃⁃⁃10⁃⁃⁃8⁃⁃⁃6⁃⁃⁃4⁃⁃⁃2⁃⁃⁃(0)⁃⁃⁃1⁃⁃⁃3⁃⁃⁃5⁃⁃⁃7⁃⁃⁃9⁃⁃⁃11⁃⁃⁃13⁃⁃15
	$LF
	$LF
]pre
[p 
	"then (with 0 being the least significant bit): bit n°i is 1 when point i is in collision with a wall.
	$LF
]p
[p 
	"(Note that the bits 17 to 31 are not used.)
	$LF
]p
[hr 
]hr
[p 
	[em 
		"Collision detection & Map
	]em
	" 
	$LF
]p
[p 
	"To detect if a point is in collision with a wall, the game uses a map of 8x8 tiles.
	$LF
	"This map is stored at the beginning of the EWRAM (0x02000000). The two first 16-bit words contain the width and height of the map, and then (at address 0x02000004) there is a matrix describing the map (as a sequence of 16-bit tile identifiers).
	$LF
]p
[pre 
	$LF
]pre
[p 
	"Thus when the game must determine the tile behind a certain point, it reads the 16-bit identifier at the following address:
	$LF
]p
[pre 
	$LF
	" 0x02000004 + 2*(y_tile % map_height)*map_width + 2*(x_tile % map_width)
	$LF
]pre
[p 
	"with:
	$LF
]p
[ul 
	[li 
		[em 
			"map_width
		]em
		" and 
		[em 
			"map_height
		]em
		" the dimensions of the map. They are respectively available at address `0x02000000` and `0x02000002`.
		$LF
	]li
	[li 
		[em 
			"x_tile
		]em
		" the x-coordinate of the point in a number of tiles. A tile being 8x8 pixels, it is computed this way: 
		[em 
			"x_tile
		]em
		" = (
		[em 
			"x
		]em
		" >> 16)/8, with 
		[em 
			"x
		]em
		" the 32-bit X-coordinate of the point (the ">> 16" operation is to discard the subpixel and subsubpixel parts and only keep the pixel part).
		$LF
		[ul 
			[li 
				"Similarly: 
				[em 
					"y_tile
				]em
				" = (
				[em 
					"y
				]em
				" >> 16)/8.
				$LF
			]li
		]ul
	]li
]ul
[p 
	"Note that the game only keeps track of the coordinates of the center. To compute the coordinates of the other collision points, the game uses the angle value R and a precomputed table of cosinus/sinus values.
	$LF
]p
[hr 
]hr
[p 
	[em 
		"Speed
	]em
	$LF
]p
[p 
	"Speed can be decomposed in the following way:
	$LF
]p
[ul 
	[li 
		[em 
			"Rotation speed
		]em
		":
		$LF
		[ul 
			[li 
				"constant +/-182 under normal conditions, temporarily changed to (+/-)1024 when hitting a wall,  then returns to its initial value by steps of 91 per frame.
				$LF
			]li
		]ul
		"X/Y speed:
		$LF
		[ul 
			[li 
				" 
				[em 
					"Input speed:
				]em
				" based on the input. The norm is 3, 2.25 or 1.5px/frame depending on the number of A/B buttons that are held. It changes instantly (no inertia, instant acceleration). If applying this speed would make the Helirin hit a wall, then it is canceled (so the player has no control when the Helirin hits a wall).
				$LF
			]li
			[li 
				" 
				[em 
					"Bump speed:
				]em
				" applied when the Helirin hits a wall. The norm is 2px/frame. It takes the same direction as the vector starting from the collision point to the center of the Helirin. It is then multiplied by 3/4 each frame until reaching 0. If both sides of the Helirin are in collision at the same time, then no bump speed is applied (which sounds reasonable since we cannot determine in which direction to apply it).
				$LF
			]li
			[li 
				" 
				[em 
					"Wall speed:
				]em
				" only applied when the center of the Helirin hits a wall. The norm is 4px/frame. It is applied in the opposite direction of the current input. It shares the same two variables as the bump speed. It was probably introduced to avoid wall clips, but it actually had the opposite effect, allowing the 
				[em 
					"wall surfing
				]em
				" trick.
				$LF
			]li
		]ul
	]li
]ul
[p 
	"The theoretical max X/Y speed is 9px/frame. However in practice bump speed and wall speed are hardly ever triggered at the same time and in the same direction, so the highest speed value that can be obtained consistently is actually 7px/frame (with wall surfing).
	$LF
]p
[hr 
]hr
[p 
	"Here is now an overview of what is performed at each frame:
	$LF
]p
[ol 
	[li 
		"If not zero, then the bump speed variable is multiplied by 3/4. If different from the current default rotation speed (+ or -182), then the rotation speed gets closer to it by 91. If not zero, then the invulnerability variable is decreased by 1.
		$LF
	]li
	[li 
		"The position of the Helirin is updated by applying input speed, bump speed and rotation speed.
		$LF
	]li
	[li 
		"If the center of the Helirin is in a goal zone, then the level is completed. If it is in a healing zone, then all hearts are restored (and the Helirin is marked safe for the rest of the frame).
		$LF
	]li
	[li 
		"The collision mask is computed. The collisions with the springs, birds and bonuses are also computed but they will not be detailled here.
		$LF
	]li
	[li 
		"If there is collision with a wall/moving object and if the invulnerability variable is zero, then the Helirin looses a heart and the invulnerability variable is set to 20. If there is no heart left, then the level is failed. This step is not performed if the Helirin is in a healing zone.
		$LF
	]li
	[li 
		"If there is a collision with a wall (in other words, if the collision mask is not zero), then the input speed that was applied at step 2 is reverted and the rotation speed is set to +1024 (if it was negative before) or -1024 (if it was positive before). If only one side of the Helirin is in collision, then the corresponding bump speed is computed and assigned to the bump speed variables, and this bump speed is immediatly applied to the Helirin.
		$LF
	]li
	[li 
		"If at least one of the physical points 0, 1 or 2 is in collision with a wall, and if a direction is pressed, then the corresponding wall speed is computed and assigned to the bump speed variables, and this wall speed is immediatly applied to the Helirin.
		$LF
	]li
]ol
[p 
	"For a more precise description, you can refer to the 
	[a class=extlink href=https://github.com/E-Sh4rk/KururinTAS/blob/master/KuruBot/KuruBot/KuruBot/Physics.cs rel=nofollow 
		"implementation of the KuruBot
	]a
	".
	$LF
]p
[p 
	"Note that we have 
	[b 
		"not
	]b
	" considered moving objects (we had no issue with them, so we were lazy :p). But as long as moving objects are not in the way, we have encountered no counterexample yet.
	$LF
]p
[h3 
	"OOB stuff
	$LF
	[a id=heading-15578 
	]a
]h3
[p 
	"Recall how collisions were checked in memory (subsection 
	[em 
		"Collision detection & Map
	]em
	"):
	$LF
]p
[pre 
	" 0x02000004 + 2*(y_tile % map_height)*map_width + 2*(x_tile % map_width)
	$LF
]pre
[p 
	"Collisions were computed modulo the dimensions of the map, which means that some objects are 
	[em 
		"physically
	]em
	" replicated: even though they are not visible, you can interact with them. In particular:
	$LF
]p
[ul 
	[li 
		"Replicated: walls and starting/heart/goal zones
		$LF
	]li
	[li 
		"Not replicated: birds, moving objects, springs, and cosmetic bonuses
		$LF
	]li
]ul
[p 
	"However, the way walls and zones are replicated is very different as you can see in these examples:
	$LF
]p
[p 
	[em 
		"Grasslands 1 physical map
	]em
	$LF
]p
[p 
	[img class=embed src=https://i.imgur.com/6PSNrid.png 
	]img
	" 
	$LF
]p
[p 
	[em 
		"Machine Land 1 physical map
	]em
	$LF
]p
[p 
	[img class=embed src=https://i.imgur.com/zbckmhU.png 
	]img
	$LF
]p
[p 
	"Here is an explanation:
	$LF
]p
[ul 
	[li 
		"When computing collisions with 
		[em 
			"walls
		]em
		", the game considers the X/Y coordinates of the Helirin to be 
		[em 
			"unsigned
		]em
		". It results in an overflow at the left and at the top of the map. When the width of the map is not a power of 2, the x-coordinate overflow will change the result of the modulo. This explains the shift of the walls in Machine Land 1.
		$LF
	]li
	[li 
		"When computing collisions with 
		[em 
			"starting/healing/ending zones
		]em
		", the game considers the X/Y coordinates of the Helirin to be 
		[em 
			"signed
		]em
		". Thus there is no overflow at the left nor at the top 
		[b 
			"BUT
		]b
		" as “y_tile % map_height” is negative in the top OOB duplicate (yeah, the C modulus is weird), this gives an address outside the matrix that is storing the tiles. This explains why there is no starting/healing/ending zone in the top OOB duplicate. The slight vertical shift of these zones in the left OOB duplicate can also be explained this way. (This slight shift is especially interesting as it allows to reach an OOB goal zone without loosing an additional heart. See example 
		[a class=extlink href=https://www.youtube.com/watch?v=x_lio9zKfiU&t=4m28s rel=nofollow 
			"in Star Land 3
		]a
		").
		$LF
	]li
]ul
[h3 
	"KuruBot
	$LF
	[a id=heading-17457 
	]a
]h3
[p 
	"Here is a legitimate question: why would anyone bother to recode the game physics when there is an emulator available? Well, simulating through Bizhawk would not be very efficient, as search speed is bounded by emulator speed. But we do not need most of what the emulator is computing (sound, graphics), all we need to know is the update on speed and position. Thus re-implementing the physics allows to keep computations at their minimum and thus explore dozens of thousands of states per second. This is KuruBot’s reason for existence.
	$LF
]p
[p 
	"But is it enough? Let’s get a rough estimate of the size of the search space:
	$LF
]p
[ul 
	[li 
		"X and Y are 32-bit values but not every pixel will actually be visited, so let’s say 24 bits each.
		$LF
	]li
	[li 
		"Both “bump speed” 32-bit variables (one for X, one for Y) are key to get wall clips so they have to be considered. Let's say about half of the bits would actually be relevant (16 bits each).
		$LF
	]li
	[li 
		"Any angle could be useful a priori, so 16 bits.
		$LF
	]li
	[li 
		"Rotation speed ranges between -1024 and +1024 by steps of 91, so it takes about 2048 / 91  ≈ 23 different values, say 4 bits as a lower bound.
		$LF
	]li
	[li 
		"The couple (#hearts, invulnerability count) can take 3*20=60 different values, but let’s say only about half of them would be relevant (5 bits).
		$LF
	]li
]ul
[p 
	"This would result in about 2^105 ≈ 10^31 different states! Thus unfortunately there is 
	[b 
		"no way
	]b
	" to get 
	[b 
		"exact
	]b
	" solutions, even by keeping computations to their minimum. 
	$LF
]p
[p 
	"But this is not the end of the journey. This just means that we have to renounce to reach perfection and instead try to find clever ways to reduce state space with minimal impact on optimality. To do so, we had two main ideas:
	$LF
]p
[ul 
	[li 
		"reduce precision on every variable (X/Y position and speed, rotation and rotation speed). For instance X is a 32-bit value but if two states only differ by less than 1/64 px, then there is very little chance that this would make a difference (even for wall clips, where bump speed is typically about 1/10 px/frame). Thus a state could be ignored by the bot if an  
		[em 
			"almost similar
		]em
		" state has already been visited. We could also adapt the precision depending on the situation. For instance we could set a small precision by default and gradually increase precision around walls, as wall clips need precision.
		$LF
	]li
	[li 
		"use a custom A* as our shortest path finding algorithm. A* relies on a cost map to guide the search. So if we have a good guess on what an optimized path should look like, then we can prioritize the search on the corresponding area. For instance if we wanted to perform a tricky wall clip, we could set a high value on walls in order to prioritize the search on them.
		$LF
	]li
]ul
[p 
	"KuruBot implements all these ideas. It was written in C# and the game physics described above was implemented. The parameters for the cost map of A* and the reduction rates are gathered in a configuration file. Some examples of configuration files are given in the
	[a class=extlink href=https://github.com/E-Sh4rk/KururinTAS/releases rel=nofollow 
		"releases
	]a
	".
	$LF
]p
[p 
	"KuruBot being operational, our work was not over. We as TASers still had to tune the parameters, find the right balance between precision and time complexity, decide for a global path, break it into small segments and only use KuruBot on these smaller segments. Here is a typical situation when using KuruBot:
	$LF
]p
[pre 
	"- 
	[em 
		"Me:
	]em
	" Please KuruBot, try to go from this position to the ending zone.
	$LF
	"- 
	[em 
		"KuruBot:
	]em
	" *10 GB of RAM and 5min later* ...
	$LF
	"- 
	[em 
		"Me:
	]em
	" KuruBot, abort. Try to reach this little area instead. And please keep 2 hearts! It will be useful later.
	$LF
	"- 
	[em 
		"KuruBot:
	]em
	" *3 sec later* Done.
	$LF
	"- 
	[em 
		"Me:
	]em
	" Now, please go from this new position to the ending zone by clipping through the wall.
	$LF
	"- 
	[em 
		"KuruBot:
	]em
	" *3 sec later* Done.
	$LF
	"- 
	[em 
		"Me:
	]em
	" Thank you, KuruBot. You are so smart. I love you. I mean, really. We can do so much together!
	$LF
	"- 
	[em 
		"KuruBot:
	]em
	" ...
	$LF
]pre
[p 
	"What has worked best from our experience:
	$LF
]p
[ul 
	[li 
		"low default precision with increased precision around walls
		$LF
	]li
	[li 
		"heuristic flooding-based cost map with additional reward on walls
		$LF
	]li
	[li 
		"have at most one wall clip per segment
		$LF
	]li
]ul
[p 
	"Note that KuruBot could also be used for other purposes than fastest completion, like damageless levels.
	$LF
]p
[h3 
	"(obsolete) Pixel and subpixel adjustment 
	$LF
	[a id=heading-21627 
	]a
]h3
[p 
	"Before the “KuruBot era”, getting wall clips required precise setups, as bump speeds were rarely above a few dozen subpixels when getting close to walls. As input speed is always greater than 1px/frame whatever inputs you do, it could be difficult to reach a precise range of positions. But it turns out that with help from diagonal inputs, it is possible to adjust precisely the Helirin position within a few frames. 
	$LF
]p
[p 
	"Below are some examples. They were used several times in the 
	[a class=intlink href=/Userfiles/Info/54086380840886059 
		"v0 movie
	]a
	". You may recognize some of them if you take a closer look at the inputs done right before some of the wall clips (for example in Grasslands 3 at frame 1778). Who knows, they might become useful again someday!
	$LF
]p
[pre 
	"******************************************
	$LF
	"Notation:
	$LF
	"-- X(pixel,subpixel)
	$LF
	"-- "R2": R = direction in {U,L,D,R,UL,UR,DL,DR}
	$LF
	"         2 = speed in {0,1,2} (=number of held buttons in {A,B})
	$LF
	"******************************************
	$LF
	"Methods to change X pixel with minor impact on X subpixel:
	$LF
	"DL2+UL2 [-4, 62]
	$LF
	"R1      [+2, 64]
	$LF
	"R2      [+3,  0]
	$LF
	"=> [+1,  2] using 4 frames
	$LF
	$LF
	"Note: with reverse moves: [-1,  2] using 4 frames
	$LF
	"Note: there is a similar method for Y
	$LF
	"*
	$LF
	"DR2+UR2 [+4, 62]
	$LF
	"L1      [-2, 64]
	$LF
	"=> [+1,254] using 3 frames
	$LF
	$LF
	"Note: it can be reversed + similar method for Y
	$LF
	"******************************************
	$LF
	"Methods to adjust X subpixel:
	$LF
	"DL0+UL0 [-2,31]
	$LF
	"R1      [+2,64]
	$LF
	"=> 
	"[+0, 33]
	" using 3 frames
	$LF
	"*
	$LF
	"DR1+UR1 [+3,46]
	$LF
	"L2      [-3, 0]
	$LF
	"=> 
	"[+0, 46]
	" using 3 frames
	$LF
	"*
	$LF
	"DL2+UL2 [-4, 62]
	$LF
	"2*R1    [+4,128]
	$LF
	"=> 
	"[+0, 66]
	" using 4 frames
	$LF
	"*
	$LF
	"DL2+UL2 |
	"[-4, 62]
	"]
	$LF
	"DR1+UR1 [+3, 46]
	$LF
	"R0      [+1,128]
	$LF
	"=> 
	"[+0,112]
	" using 5 frames
	$LF
	"*
	$LF
	"DR0+UR0 [+2, 31]
	$LF
	"L0      [-1,128]
	$LF
	"=> [+0,159] using 3 frames
	$LF
	$LF
	"Note: they can be reversed + similar methods for Y
	$LF
]pre
[h2 
	"Times per level
	$LF
	[a id=heading-23564 
	]a
]h2
[h3 
	" Why not IGT?
	$LF
	[a id=heading-23585 
	]a
]h3
[p 
	"Although the game gives an in-game time per level, we decided to go for real-time. The main reason is that the game gives a 3s penalty every time you take damage, while the main tricks that we used required to take damage. These 3s penalties are consistent with the game objective to go for damageless levels, which is rewarded by a star on the map. However this would make for a very different TAS. IGT is also weird because it only starts when you leave the starting zone.
	$LF
]p
[h3 
	" Table
	$LF
	[a id=heading-24084 
	]a
]h3
[ul 
	[li 
		"”Strategy” indicates whether the regular goal zone or an out-of-bounds one was reached.
		$LF
	]li
	[li 
		"TAS starts at Helirin control and ends at IGT stop (= when Kururin looks happy).
		$LF
	]li
	[li 
		"”Matt’s TAS” refers to the 
		[a class=extlink href=https://www.youtube.com/watch?v=DXB5DTYUei4 rel=nofollow 
			"2015 “cheat bot” partial run by Matt Shepcar
		]a
		". Neither all levels were done nor all birds were saved, so we only referenced the times that were comparable.
		$LF
	]li
	[li 
		"”Ryuto’s TAS” refers to the 
		[a class=intlink href=/1307M 
			"2009 movie by Ryuto
		]a
		".
		$LF
	]li
]ul
[table 
	[tbody 
		[tr 
			[th 
				"Level name
			]th
			[th 
				"Author
			]th
			[th 
				"Strategy
			]th
			[th 
				"TAS
			]th
			[th 
				"Matt’s TAS
			]th
			[th 
				"Ryuto’s TAS
			]th
		]tr
		[tr 
			[td 
				"Training 1    
			]td
			[td 
				"E-Sh4rk
			]td
			[td 
				"regular
			]td
			[td 
				" 1.27
			]td
			[td 
				" 1.42
			]td
			[td 
				" /   
			]td
		]tr
		[tr 
			[td 
				"Training 2    
			]td
			[td 
				"E-Sh4rk
			]td
			[td 
				"regular
			]td
			[td 
				" 1.57
			]td
			[td 
				" 1.62
			]td
			[td 
				" /   
			]td
		]tr
		[tr 
			[td 
				"Training 3    
			]td
			[td 
				"E-Sh4rk
			]td
			[td 
				"regular
			]td
			[td 
				" 2.28
			]td
			[td 
				" 2.28
			]td
			[td 
				" /   
			]td
		]tr
		[tr 
			[td 
				"Training 4    
			]td
			[td 
				"E-Sh4rk
			]td
			[td 
				"regular
			]td
			[td 
				" 1.30
			]td
			[td 
				" 1.80
			]td
			[td 
				" /   
			]td
		]tr
		[tr 
			[td 
				"Training 5    
			]td
			[td 
				"E-Sh4rk
			]td
			[td 
				"regular
			]td
			[td 
				" 2.00
			]td
			[td 
				" 2.00
			]td
			[td 
				" /   
			]td
		]tr
		[tr 
			[td 
				"Grasslands 1  
			]td
			[td 
				"E-Sh4rk
			]td
			[td 
				"regular
			]td
			[td 
				" 1.90
			]td
			[td 
				" 2.48
			]td
			[td 
				" 5.87
			]td
		]tr
		[tr 
			[td 
				"Grasslands 2  
			]td
			[td 
				"E-Sh4rk
			]td
			[td 
				"OOB    
			]td
			[td 
				" 1.80
			]td
			[td 
				" 6.05
			]td
			[td 
				"10.72
			]td
		]tr
		[tr 
			[td 
				"Grasslands 3  
			]td
			[td 
				"E-Sh4rk
			]td
			[td 
				"regular
			]td
			[td 
				" 6.68
			]td
			[td 
				" /   
			]td
			[td 
				"11.40
			]td
		]tr
		[tr 
			[td 
				"Ocean 1       
			]td
			[td 
				"mohoc  
			]td
			[td 
				"OOB    
			]td
			[td 
				" 1.40
			]td
			[td 
				" 4.58
			]td
			[td 
				" 5.35
			]td
		]tr
		[tr 
			[td 
				"Ocean 2       
			]td
			[td 
				"mohoc  
			]td
			[td 
				"regular
			]td
			[td 
				" 2.60
			]td
			[td 
				" 2.72
			]td
			[td 
				" 8.93
			]td
		]tr
		[tr 
			[td 
				"Ocean 3       
			]td
			[td 
				"mohoc  
			]td
			[td 
				"regular
			]td
			[td 
				" 6.33
			]td
			[td 
				" /   
			]td
			[td 
				"15.75
			]td
		]tr
		[tr 
			[td 
				"Jungle 1      
			]td
			[td 
				"mohoc  
			]td
			[td 
				"OOB    
			]td
			[td 
				" 2.67
			]td
			[td 
				" 4.88
			]td
			[td 
				"10.55
			]td
		]tr
		[tr 
			[td 
				"Jungle 2      
			]td
			[td 
				"mohoc  
			]td
			[td 
				"OOB    
			]td
			[td 
				" 1.67
			]td
			[td 
				"10.75
			]td
			[td 
				"10.33
			]td
		]tr
		[tr 
			[td 
				"Jungle 3      
			]td
			[td 
				"mohoc  
			]td
			[td 
				"regular
			]td
			[td 
				" 3.20
			]td
			[td 
				" /   
			]td
			[td 
				"14.22
			]td
		]tr
		[tr 
			[td 
				"Cake Land 1   
			]td
			[td 
				"mohoc  
			]td
			[td 
				"OOB    
			]td
			[td 
				" 1.88
			]td
			[td 
				" 4.00
			]td
			[td 
				"12.70
			]td
		]tr
		[tr 
			[td 
				"Cake Land 2   
			]td
			[td 
				"mohoc  
			]td
			[td 
				"regular
			]td
			[td 
				" 2.80
			]td
			[td 
				" 3.40
			]td
			[td 
				"25.93
			]td
		]tr
		[tr 
			[td 
				"Cake Land 3   
			]td
			[td 
				"mohoc  
			]td
			[td 
				"regular
			]td
			[td 
				" 9.40
			]td
			[td 
				" /   
			]td
			[td 
				"19.90
			]td
		]tr
		[tr 
			[td 
				"Cave 1        
			]td
			[td 
				"mohoc  
			]td
			[td 
				"regular
			]td
			[td 
				" 0.70
			]td
			[td 
				" 1.03
			]td
			[td 
				" 8.67
			]td
		]tr
		[tr 
			[td 
				"Cave 2        
			]td
			[td 
				"mohoc  
			]td
			[td 
				"OOB    
			]td
			[td 
				" 5.13
			]td
			[td 
				" 6.80
			]td
			[td 
				"16.03
			]td
		]tr
		[tr 
			[td 
				"Cave 3        
			]td
			[td 
				"E-Sh4rk
			]td
			[td 
				"OOB    
			]td
			[td 
				" 3.95
			]td
			[td 
				" 6.02
			]td
			[td 
				"15.30
			]td
		]tr
		[tr 
			[td 
				"Cloud Land 1  
			]td
			[td 
				"mohoc  
			]td
			[td 
				"OOB    
			]td
			[td 
				" 3.82
			]td
			[td 
				" 5.17
			]td
			[td 
				" 6.97
			]td
		]tr
		[tr 
			[td 
				"Cloud Land 2  
			]td
			[td 
				"mohoc  
			]td
			[td 
				"OOB    
			]td
			[td 
				" 2.98
			]td
			[td 
				" 4.90
			]td
			[td 
				" 7.97
			]td
		]tr
		[tr 
			[td 
				"Cloud Land 3  
			]td
			[td 
				"mohoc  
			]td
			[td 
				"regular
			]td
			[td 
				" 7.08
			]td
			[td 
				" /   
			]td
			[td 
				"10.07
			]td
		]tr
		[tr 
			[td 
				"Star Land 1   
			]td
			[td 
				"E-Sh4rk
			]td
			[td 
				"regular
			]td
			[td 
				" 2,48
			]td
			[td 
				" 2.72
			]td
			[td 
				" 3.87
			]td
		]tr
		[tr 
			[td 
				"Star Land 2   
			]td
			[td 
				"mohoc  
			]td
			[td 
				"OOB    
			]td
			[td 
				" 2.23
			]td
			[td 
				" 2.95
			]td
			[td 
				" 3.20
			]td
		]tr
		[tr 
			[td 
				"Star Land 3   
			]td
			[td 
				"mohoc  
			]td
			[td 
				"OOB    
			]td
			[td 
				" 5.97
			]td
			[td 
				" /   
			]td
			[td 
				"11.62
			]td
		]tr
		[tr 
			[td 
				"Ice Land 1    
			]td
			[td 
				"E-Sh4rk
			]td
			[td 
				"regular
			]td
			[td 
				" 3.63
			]td
			[td 
				" 3.73
			]td
			[td 
				" 6.27
			]td
		]tr
		[tr 
			[td 
				"Ice Land 2    
			]td
			[td 
				"mohoc  
			]td
			[td 
				"regular
			]td
			[td 
				" 0.92
			]td
			[td 
				" 1.93
			]td
			[td 
				" 8.32
			]td
		]tr
		[tr 
			[td 
				"Ice Land 3    
			]td
			[td 
				"mohoc  
			]td
			[td 
				"OOB    
			]td
			[td 
				" 4.78
			]td
			[td 
				" /   
			]td
			[td 
				"27.95
			]td
		]tr
		[tr 
			[td 
				"Machine Land 1
			]td
			[td 
				"mohoc  
			]td
			[td 
				"OOB    
			]td
			[td 
				" 3.10
			]td
			[td 
				" 5.55
			]td
			[td 
				" 8.30
			]td
		]tr
		[tr 
			[td 
				"Machine Land 2
			]td
			[td 
				"mohoc  
			]td
			[td 
				"OOB    
			]td
			[td 
				" 2.58
			]td
			[td 
				"17.53
			]td
			[td 
				"18.35
			]td
		]tr
		[tr 
			[td 
				"Machine Land 3
			]td
			[td 
				"mohoc  
			]td
			[td 
				"regular
			]td
			[td 
				"13.77
			]td
			[td 
				" /   
			]td
			[td 
				"29.03
			]td
		]tr
		[tr 
			[td 
				"Ghost Castle 1
			]td
			[td 
				"mohoc  
			]td
			[td 
				"OOB    
			]td
			[td 
				" 3.12
			]td
			[td 
				" /   
			]td
			[td 
				"20.97
			]td
		]tr
		[tr 
			[td 
				"Ghost Castle 2
			]td
			[td 
				"mohoc  
			]td
			[td 
				"regular
			]td
			[td 
				" 1.65
			]td
			[td 
				" /   
			]td
			[td 
				"41.15
			]td
		]tr
		[tr 
			[td 
				"Ghost Castle 3
			]td
			[td 
				"mohoc  
			]td
			[td 
				"regular
			]td
			[td 
				" 8.80
			]td
			[td 
				" /   
			]td
			[td 
				"28.13
			]td
		]tr
	]tbody
]table
[h2 
	"Closing
	$LF
	[a id=heading-26447 
	]a
]h2
[h3 
	"mohoc’s personal comments
	$LF
	[a id=heading-26460 
	]a
]h3
[p 
	"So now is my time to bore you with my life and the story behind this TAS.
	$LF
]p
[p 
	"Let’s start with... the beginning. I started speedrunning this game in January 2017 as a part of the 4th season of 
	[a class=extlink href=https://www.ultimedecathlon.com/en rel=nofollow 
		"Ultime Decathlon
	]a
	" where you must learn and master ten speedgames within five months. This event sometimes proposes some lesser known games, which was the case of Kuru Kuru Kururin. This game was a crowd’s favorite and I was no exception. After Ultime Decathlon sesason 4 was over I have kept running the game, competing against 
	[a class=extlink href=https://www.twitch.tv/callumbal rel=nofollow 
		"callumbal
	]a
	" for the WR (Guess who won? Callumbal of course haha). WR had dropped like crazy thanks to UD4, going from 14:53 in November 2016 to 12:46 in April 2017.
	$LF
]p
[p 
	"Afer a long pause, I went back to the game in May 2018. As I found by myself 
	[a class=extlink href=https://www.youtube.com/watch?v=KtcK-9HoyH0&t=10m14s rel=nofollow 
		"a way to get out-of-bounds
	]a
	", I was messing around with it. OOBs were not new to this  game. They were mentioned in the 
	[a class=extlink href=https://davidwonn.kontek.net/ rel=nofollow 
		"David Wonn's Unique Video Game Glitches
	]a
	" website (last updated in 2006), plus there were this 
	[a class=extlink href=https://www.youtube.com/watch?v=IcrAMkQ7x5M rel=nofollow 
		"2008 video by mugg1991
	]a
	" changing the size of the Helirin to clip through the wall, and this 
	[a class=extlink href=https://www.youtube.com/watch?v=6l2JvxwQ9PU rel=nofollow 
		"2016 video by Fernwright
	]a
	" that used the same method as mine. But I had found no mention of invisible walls, and this was what intrigued me the most back then. There were so many invisible walls that were placed weirdly everywhere, and I had the secret hope to find some OOB goal zones as well. Which I did by complete luck in Machine Land 3 on May 27th! Unfortunately I was not recording at that moment, but here is a 
	[a class=extlink href=https://www.youtube.com/watch?v=VP3ph7CmLzk&t=2m08s rel=nofollow 
		"live reaction
	]a
	" when I discovered an OOB heart zone in Cave 2 the same day shortly after. It was just unbelievable. As I had no prior experience in TASing, I seeked help in TASVideos’ 
	[a class=intlink href=/Forum/P/470129 
		"forums
	]a
	" and discord server. ThunderAxe31 reached me out. He quickly wrote a speed HUD script and a partial OOB viewer (true dedication here, finding the wall tiles’ IDs one by one was probably not fun). This helped me to conceive two speedrunning strats, one 
	[a class=extlink href=https://www.youtube.com/watch?v=kknQReELk40&t=9m15s rel=nofollow 
		"in Machine Land 2
	]a
	" and one 
	[a class=extlink href=https://www.youtube.com/watch?v=KtcK-9HoyH0&t=10m14s rel=nofollow 
		"in Machine Land 3
	]a
	" which saved 11s and 3s respectively. Both are done in the 
	[a class=extlink href=https://www.youtube.com/watch?v=Jw-mBWI5Yi0 rel=nofollow 
		"current WR
	]a
	" in 11:55 by callumbal. But as I was primarly an RTA speedrunner back then, I did not to make a TAS out of this.
	$LF
]p
[p 
	"A few months passed. In July 2018 I went to ESA and I performed a live 
	[a class=extlink href=https://www.youtube.com/watch?v=h5rPkh58wro rel=nofollow 
		"Any% run
	]a
	" which included the Machine Land 3 OOB strat. But things got very interesting in late August 2018. ThunderAxe31 reached me out again with the intent to make a new Kururin TAS. Even though I had no experience in TASing, I was willing to help him as much as I could. And this was when I found the 
	[a class=extlink href=https://www.youtube.com/watch?v=DXB5DTYUei4 rel=nofollow 
		"2015 “cheat bot” partial run by Matt Shepcar
	]a
	". It was mindblowing. You could apparently clip through any wall! How had no one noticed this video for three years? But our excitement quickly felt down as we realized that there was no input file available. We tried to contact the author of the video on Youtube, with no success. So there was no way to replicate the wall clips other than watching this 144p 30fps video and guess the inputs that were done. Which ThunderAxe31 managed to do for the first level: 
	[a class=intlink href=/Userfiles/Info/49439186419057236 
		"Training 1
	]a
	". However we knew that there was no way to replicate everything, it would have taken too much time for too little reward. We had a few theories about how wall clipping worked, but no consistent setup. We knew that it was promising and that we could combine it with the OOB goal zones, but we were at a dead end at that moment. Anyway I had to go back to school and ThunderAxe31 was busy with work, so the project was put on hold.
	$LF
]p
[p 
	"Nothing new happened until December 2018. As Christmas holidays were taking place, everyone had more spare time. I was chatting with ViGadeomes on Twitch and since he had no project at that moment, he proposed to teach me the basics of TASing, which I accepted. That was it, I was finally getting into the wonderful and mysterious world of TASing! After a quick tutorial about finding memory addresses and after getting familiar with TAStudio’s interface, I was ready to work. Basically I spent my whole holidays on Kururin from getting up at 10am to going to bed at 2am. And it really paid off. I was able to replicate 
	[a class=intlink href=/Userfiles/Info/52172978644903455 
		"the beginning of Ice Land 3
	]a
	" in Matt Shepcar’s partial run and adapt it to other levels: 
	[a class=intlink href=/Userfiles/Info/52177347080337677 
		"Grasslands 3
	]a
	", then 
	[a class=intlink href=/Userfiles/Info/52177554086850103 
		"Grasslands 1
	]a
	". This method only worked when rotating clockwise, so I quickly worked on an “early wall clip” method for counterclockwise motion by replicating the 
	[a class=intlink href=/Userfiles/Info/52177977673438241 
		"beginning of Matt Shpecar’s Cake Land 2
	]a
	". So it was possible to go out-of-bounds early in any level! And I quickly put these discoveries to good use. Combining them with OOB goals allowed to beat Matt in several levels: 
	[a class=intlink href=/Userfiles/Info/52177778535894963 
		"Grasslands 2
	]a
	", 
	[a class=intlink href=/Userfiles/Info/52237265785563966 
		"Ghost Castle 2
	]a
	", 
	[a class=intlink href=/Userfiles/Info/52269565877650126 
		"Cave 3
	]a
	", 
	[a class=intlink href=/Userfiles/Info/52269660021613854 
		"Cloud Land 2
	]a
	", 
	[a class=intlink href=/Userfiles/Info/52269764288546723 
		"Machine Land 1
	]a
	", 
	[a class=intlink href=/Userfiles/Info/52269947472336163 
		"Ghost Castle 1
	]a
	" and some others. I made a 
	[a class=extlink href=https://www.dropbox.com/s/ptzmw5f573btdvh/levels_done_with_oob_goal_zones.zip?dl=0 rel=nofollow 
		"Dropbox folder
	]a
	" to gather everything but that was quickly getting overwhelming. So the best solution was to use 
	[a class=extlink href=https://github.com/mohoc/KuruTAS rel=nofollow 
		"Github
	]a
	". Meanwhile, ThunderAxe31 was working on a consistent setup for diagonal wall clips, with little success.
	$LF
]p
[p 
	"Coming back from Christmas vacation, I told my buddy E-Sh4rk about the Kururin project and he got interested. He had no prior experience in TASing either but I knew that he had a a strong background in programming. Matt Shepcar wrote an (incomplete) 
	[a class=extlink href=https://medium.com/message/building-a-cheat-bot-f848f199e76b rel=nofollow 
		"article
	]a
	" that described how he managed to make his partial run (especially the disassembly part). With this knowledge E-Sh4rk worked with ThunderAxe31 on improving the look and accuracy of the OOB viewer. He also tried to contact Matt Shepcar, this time to his business address. In the meantime I was finishing all the levels that were faster with OOB goal zones (about fifteen of them). Then something amazing happened: Matt responded to E-Sh4rk! After some discussion he accepted to give us his previous work: his bot and many input files. He also gave some advice on the game physics and building a bot for Kururin in the 
	[a class=intlink href=/Forum/P/479876 
		"forum
	]a
	". Actually E-Sh4rk had already been working on a bot project at that time, so it just confirmed what he had figured out by himself. But with the inputs of the missing levels, it was now possible to conceive a first complete run. It was this run: 
	[a class=intlink href=/Userfiles/Info/52647444906124211 
		"Any% Normal v1
	]a
	" on January 18th.
	$LF
]p
[p 
	"Now let’s clarify what categories I am talking about. The TAS community usually defines “Any%” as reaching the credits, which means doing some detours to save the birds in this game. However the 
	[a class=extlink href=https://www.speedrun.com/kuru_kuru_kururin rel=nofollow 
		"speedrunning community
	]a
	" of the game defined “Any%” as doing the thirty main levels as fast possible while calling it “Best Ending” when you save the brids and reach the credits. So my speedrunning background explains how I named my encodes, and I was indeed mentioning the “speedrunning” Any% in the previous paragraph. At the time I was not aware of the TASVideos rule witch states that the TAS has to reach a clear ending, plus I was more inclined to make something comparable to the main speedrunning category. Thankfully two thirds of the levels were identical to both categories: only the third level of every world had to be redone in order to save the bird. So we were far from getting back to zero when we started the “Best Ending” TAS.
	$LF
]p
[p 
	"But something huge was about to happen. I knew that E-Sh4rk was working on his own bot project and I was very confident that he could make something efficient. So while he was coding his bot little by little, I made nonoptimal WIPs of the third level of each world, mainly to get a first “Best Ending” version done and see how far we had already improved the current TAS publication in 10:22 by Ryuto. This took the rest of January and most of February (yeah, the third levels were longer and harder since the birds had to be saved, so it took me some time). As I was working on the last one (Cake Land 3), that was it. KuruBot was operational. We tried it in Grasslands 1 and Cake Land 3, with great success! Before we went further, we decided to keep a 
	[a class=intlink href=/Userfiles/Info/54086380840886059 
		"v0 version
	]a
	" which was the state of the art at the time in order to keep track of which time improvement was Kurubot about to bring.The time was 6:06.33 (without Training, which takes about 45s), which was already very promising.
	$LF
]p
[p 
	"We finally spent three weeks from late February to the middle of March improving every level in the run. Literally every level. We found great configurations to get any desired wall clip done by KuruBot, so this was a very pleasing process. We still had to redo some levels several times because finding the optimal route was not always too straightforward. But we finally made it. We ended up with a much cleaner TAS with no blatant waiting time, which is a little miracle in this game where rotation could be really constraining at times. The final time was 6:18.03. By no means we believed that this was a perfect time, but we were both happy with the result and the journey.
	$LF
]p
[p 
	"As my final word, I really want to thank ThunderAxe31 for everything. Even though he was not an author strictly speaking because he did not directly contribute to the TAS itself, he has been a significant actor in this project since the very beginning. Again, thank you very much :).
	$LF
]p
[h3 
	"E-Sh4rk’s personal comments
	$LF
	[a id=heading-36746 
	]a
]h3
[p 
	"I would like to thank:
	$LF
]p
[ul 
	[li 
		"Mohoc for introducing me to the wonderful world of (tool-assisted) speedrunning. Mohoc talks 
		[em 
			"a lot
		]em
		" about speedruns. If speedrunning was a socially accepted discussion topic, Mohoc would be a very charismatic person. He also has a panini machine, and that's another very good reason to like him.
		$LF
	]li
]ul
[ul 
	[li 
		"Matt Shepcar for clearing the way. He was the first to make a bot for Kururin and to publish a partial TAS with wall clips. He even wrote an inspiring 
		[a class=extlink href=https://medium.com/message/building-a-cheat-bot-f848f199e76b rel=nofollow 
			"article
		]a
		" about it. Since he did not publish his bot, I decided to implement a new one by myself. It was quite challenging for me: it was the first time I had to use a disassembler. In the end, one could say that I only am a poor imitator, without any madness... *sigh * But no matter what, it was a lot of fun to do :D 
		$LF
	]li
]ul
[ul 
	[li 
		"ThunderAxe31 for his help, his ideas and his epic username. He designed the first version of the OOB viewer and also the last one. I just made some improvements in between. If the OoB Viewer was a sandwich, ThunderAxe31 would be the bread, and I would be the cheese.
		$LF
	]li
]ul
[ul 
	[li 
		"Jean Goubault-Larrecq for teaching me Assembly in the middle of an obscure course about semantics and Scott topology. Barely out of the shadows, Assembly was standing out of nowhere.
		$LF
	]li
]ul
[hr 
]hr
[p 
	[a class=intlink href=/Users/Profile/Memory 
		"Memory
	]a
	": Claiming for judgment
	$LF
]p
[p 
	[a class=intlink href=/Users/Profile/Memory 
		"Memory
	]a
	": Replacing file with 642 frame improvement
	$LF
]p
[p 
	[a class=intlink href=/Users/Profile/Memory 
		"Memory
	]a
	": Optimization of this submission seemed extremely good.
	$LF
]p
[p 
	"It was personally very amusing to see the collision abused so heavily to either move through levels quickly or take out of bounds shortcuts. The audience appeared to mostly agree though there was some disappointment as to how intended gameplay more or less vanished. It was noted however, that a full-completion run of sorts would be damageless and would feature much more of the intended gameplay.
	$LF
]p
[p 
	"Like the previous publication these submissions aim to beat the game as quickly as possible, collecting the 10 birds needed to get an actual ending screen and aiming for real time.
	$LF
]p
[p 
	"However this submission includes the training levels whereas 
	(__wikiLink|/6313S|6313S)
	" does not. There was some disagreement on whether or not to include them. Gathering opinions, I found that there could not be another viable branch in which the training levels are done with the tricks shown here. Most feedback against the training levels assumed they could be placed in another such branch and could not weigh as heavily in my decision. Ultimately I feel that the training levels add a good introduction to the tricks that are used throughout the run and do not take much time, and so I feel that their inclusion is ultimately worthy.
	$LF
]p
[p 
	"However, this submission was labeled "any% w/ training" by the authors and since we do not use any% labels, it would be best to simply have this be labeless and qualify the training levels as a Speed/Entertainment tradeoff (Publisher please take note of this).
	$LF
]p
[p 
	"Accepting to Moons as an improvement to 
	(__wikiLink|/1307M|1307M)
	".
	$LF
]p
[p 
	[a class=intlink href=/Users/Profile/Fsvgm777 
		"fsvgm777
	]a
	": Processing.
]p
