2
[div class=toc 
	[ul 
		[li 
			[a href=#heading-7004 
				" Game speed
				$LF
			]a
		]li
		[li 
			[a href=#heading-7005 
				" Emulator settings and boot
				$LF
			]a
		]li
		[li 
			[a href=#heading-7006 
				" Between stages
				$LF
			]a
		]li
		[li 
			[a href=#heading-7007 
				" Boss order
				$LF
			]a
		]li
		[li 
			[a href=#heading-7008 
				" Mechanics
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#heading-7009 
						" Shooting
						$LF
					]a
				]li
				[li 
					[a href=#heading-7010 
						" Physics
						$LF
					]a
				]li
				[li 
					[a href=#heading-7011 
						" Sub-tile alignment
						$LF
					]a
				]li
				[li 
					[a href=#heading-7012 
						" Vertical camera recentering delay
						$LF
					]a
				]li
				[li 
					[a href=#heading-7013 
						" Horizontal camera recentering delay
						$LF
					]a
				]li
				[li 
					[a href=#heading-7014 
						" Item drops
						$LF
					]a
				]li
				[li 
					[a href=#heading-7015 
						" Weapon select screen
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#heading-7016 
				" Volt skip
				$LF
			]a
		]li
		[li 
			[a href=#heading-7017 
				" Weapons
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#heading-7018 
						" Damage chart
						$LF
					]a
				]li
				[li 
					[a href=#heading-7019 
						" Nuclear Detonator
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#heading-7020 
				" Enemy AI
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#heading-7021 
						" RNG
						$LF
					]a
				]li
				[li 
					[a href=#heading-7022 
						" Data structures
						$LF
					]a
				]li
				[li 
					[a href=#heading-7023 
						" Guard dog
						$LF
					]a
				]li
				[li 
					[a href=#heading-7024 
						" Sewer Rat
						$LF
					]a
				]li
				[li 
					[a href=#heading-7025 
						" Volt Man
						$LF
					]a
				]li
				[li 
					[a href=#heading-7026 
						" Dyna Man
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#heading-7027 
				" Underexplored glitches
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#heading-7028 
						" Lack of collision with Force Field
						$LF
					]a
				]li
				[li 
					[a href=#heading-7029 
						" Death warp
						$LF
					]a
				]li
				[li 
					[a href=#heading-7030 
						" Trigger tile reentrancy
						$LF
					]a
				]li
				[li 
					[a href=#heading-7031 
						" Wall clip
						$LF
					]a
				]li
				[li 
					[a href=#heading-7032 
						" Out of bounds
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#heading-7033 
				" Maps
				$LF
			]a
		]li
		[li 
			[a href=#heading-7034 
				" Memory addresses
				$LF
			]a
		]li
		[li 
			[a href=#heading-7035 
				" Resources
				$LF
			]a
		]li
	]ul
]div
[h2 
	" Game speed
	$LF
	[a id=heading-7004 
	]a
]h2
[p 
	"Mega Man is one of those games that just 
	[a href=/forum/p/473252#473252 
		"runs too fast
	]a
	".
	$LF
	"It technically 
	[em 
		"is
	]em
	" screen refresh–limited,
	$LF
	"but its "natural" speed of one frame per refresh is too fast to be humanly playable.
	$LF
	[a href=/forum/p/480224#480224 
		"Ilari explained it
	]a
	": "There are games that fail to sensibly limit themselves, and altough the effective framerate saturates at some point, that saturation point is unplayably fast."
	$LF
	"A faster CPU setting would reduces load times, but not increase the speed of gameplay.
	$LF
]p
[p 
	"To produce an encode that runs slower and is more pleasant to watch,
	$LF
	"without messing up the sound effects too much,
	$LF
	"you can use the "soundhack" script under 
	(__wikiLink|GameResources/DOS/MegaMan#Resources|Resources)
	".
	$LF
]p
[h2 
	" Emulator settings and boot
	$LF
	[a id=heading-7005 
	]a
]h2
[p 
	"In the 
	(__wikiLink|EmulatorResources/JPC#AssemblingTheVirtualSystem|JPC-RR assembly window)
	",
	$LF
	"put the Mega Man image on Hdd and FreeDOS on fda.
	$LF
	"Clear the "Modules" box—this game doesn't need need sound card, FPU, MIDI.
	$LF
]p
[p 
	"At the prompt
	$LF
]p
[pre 
	"Press F8 to trace or F5 to skip FDCONFIG.SYS/AUTOEXEC.BAT
	$LF
]pre
[p 
	"press F8 to run fdconfig.sys, then answer 
	[em 
		"n
	]em
	" to all of the prompts.
	$LF
]p
[pre 
	"dos=high[Y,n]?n
	$LF
	"lastdrive=z[Y,n]?n
	$LF
	"buffers=20[Y,n]?n
	$LF
	"files=40[Y,n]?n
	$LF
	"device=himem.exe[Y,n]?n
	$LF
	"shell=cmd80x86.com command.com /K autoexec.bat[Y,n]?n
	$LF
	"A:\>\autoexec.bat [Yes=ENTER, No=ESC] ? n
	$LF
]pre
[p 
	"For some reason, running fdconfig.sys and declining all the options shortens load times between stages.
	$LF
	"More info: 
	[a href=/forum/p/479329#479329 
		"/forum/p/479329#479329
	]a
	", 
	[a href=/forum/p/478684#478684 
		"/forum/p/478684#478684
	]a
	".
	$LF
]p
[p 
	"The setup menu (where you choose VGA and disable the joystick)
	$LF
	"is not frame-oriented, unlike the game itself.
	$LF
	"It's just a loop that polls a global variable that is set by the keyboard interrupt handler.
	$LF
	"This means that you can provide inputs much faster than one per frame—but you have to go slow enough that the loop notices one of your inputs before you provide the next one.
	$LF
	"The setupmenu.lua script under 
	(__wikiLink|GameResources/DOS/MegaMan#Resources|Resources)
	" can automatically optimize this menu.
	$LF
]p
[h2 
	" Between stages
	$LF
	[a id=heading-7006 
	]a
]h2
[p 
	"You can press and release Space right after finishing the setup menu.
	$LF
	"You don't have to wait for the title screen to appear.
	$LF
]p
[p 
	"The stage select screen recognizes inputs when you 
	[em 
		"release
	]em
	" a key.
	$LF
	"So if you want to select Sonic Man, you should press Left and Enter
	$LF
	[em 
		"before
	]em
	" the stage select appears, then release at the earliest moment at which the game recognizes the input.
	$LF
	"This is not necessarily on a frame boundary, so you need to use sub-frame inputs.
	$LF
	"Find the earliest frame at which the input is recognized, then load a savestate
	$LF
	"and go back to one frame earlier.
	$LF
	"Try pressing/releasing the Up key 9 times before releasing Left and Enter.
	$LF
	"If it works, try again with pressing/releasing Up 8 times, and so on.
	$LF
	"Each press/release of Up takes about 1/10th of a frame—this
	$LF
	"is an easy way push inputs later in a frame, if they are not recognized at the beginning of a frame.
	$LF
]p
[p 
	"The same rule applies at the beginning of each stage.
	$LF
	"It may appear that you can start moving 1 frame before the stage appears onscreen.
	$LF
	"But usually you can start moving 1.
	[em 
		"x
	]em
	" frames before the stage appears,
	$LF
	"by using sub-frame inputs in the frame prior.
	$LF
]p
[p 
	"Sub-frame inputs don't seem to help at the "weapon get" screen.
	$LF
]p
[p 
	"After defeating a Robot Master, jumping to collect the card key
	$LF
	"will shorten the animation of it falling to you.
	$LF
]p
[h2 
	" Boss order
	$LF
	[a id=heading-7007 
	]a
]h2
[p 
	"The 
	(__wikiLink|GameResources/DOS/MegaMan#VoltSkip|Volt skip)
	" requires an E Tank from
	$LF
	"Sonic Man's stage, so Sonic must come before Volt.
	$LF
	"Therefore the only orders worth considering are:
	$LF
]p
[ul 
	[li 
		" Sonic, Volt, Dyna
		$LF
	]li
	[li 
		" Sonic, Dyna, Volt
		$LF
	]li
	[li 
		" Dyna, Sonic, Volt
		$LF
	]li
]ul
[p 
	"Current runs use SVD. SDV seems strictly inferior to SVD,
	$LF
	"because Dyna Man's stage benefits from the Force Field
	$LF
	"but Volt Man's stage doesn't benefit from the Nuclear Detonator.
	$LF
	"DSV is worth considering: the Dyna stage and boss fight would be slower,
	$LF
	"but the Sonic boss fight would be faster.
	$LF
]p
[h2 
	" Mechanics
	$LF
	[a id=heading-7008 
	]a
]h2
[h3 
	" Shooting
	$LF
	[a id=heading-7009 
	]a
]h3
[p 
	"Press and release Space in the same frame in order to shoot every frame.
	$LF
]p
[h3 
	" Physics
	$LF
	[a id=heading-7010 
	]a
]h3
[p 
	"Mega Man accelerates horizontally at 2 pixels/frame/frame
	$LF
	"up to a maximum speed of 8 pixels/frame.
	$LF
	"Releasing an arrow key, or pressing the opposite direction,
	$LF
	"sets your horizontal speed to 0 immediately (instant deceleration).
	$LF
]p
[p 
	"In most places, vertical acceleration due to gravity is 3 pixels/frame/frame.
	$LF
	"Mega Man stops accelerating when he reaches a speed of 15 pixels/frame downwards.
	$LF
	"When jumping down a ledge, it's usually best to jump
	$LF
	"as early and as high as possible,
	$LF
	"so that you're already falling down at maximum speed when you reach the ledge.
	$LF
]p
[p 
	"Mega Man's apparent position lags 1 frame behind his actual position
	$LF
	"(use the HUD script under 
	(__wikiLink|GameResources/DOS/MegaMan#Resources|Resources)
	" to see this).
	$LF
	"When landing from a jump, you can jump again
	$LF
	"as soon as Mega Man's within-tile 
	[em 
		"y
	]em
	" position is 3;
	$LF
	"e.g. a 
	[em 
		"y
	]em
	" position of 819 is 51 3/16 when expressed in terms of tiles.
	$LF
	"If you do it right, Mega Man will jump again
	$LF
	"without ever entering his running animation.
	$LF
	"This matters, for example, on backwards conveyors,
	$LF
	"which slow you down as long as you are on the ground.
	$LF
]p
[p 
	[img alt=An animation of Mega Man jumping forward over a backwards conveyor, comparing the earliest possible jumps with jumps that are 1 frame slower. class=embed src=https://www.bamsoftware.com/computers/tasvideos/mmdos-conveyor-jump.gif 
	]img
	$LF
]p
[p 
	"Some tiles are programmed to push Mega Man horizontally.
	$LF
	"Solid pusher tiles (conveyor belts) only push while you are standing on them;
	$LF
	"passable pusher tiles (like underwater in Sonic Man's stage)
	$LF
	"push as you pass through them.
	$LF
	"On either side of every conveyor there are single passable tiles
	$LF
	"that push in the same direction as the conveyor.
	$LF
	"Examples are highlighted in the screenshot below.
	$LF
	"Avoid touching these tiles when they push backwards.
	$LF
]p
[p 
	[img alt=A screenshot of a conveyor belt, with the non-solid tiles at either end highlighted with arrows to show that they push in the same direction as the conveyor. class=embed src=https://www.bamsoftware.com/computers/tasvideos/mmdos-conveyor-extension.png 
	]img
	$LF
]p
[p 
	"Some places have lower gravitational acceleration than 3 pixels/frame/frame,
	$LF
	"for instance underwater in Sonic Man's stage.
	$LF
	"Whenever gravity is 
	[a class=extlink href=https://tcrf.net/Mega_Man_(DOS)#Gravity rel=nofollow 
		"zero or negative
	]a
	",
	$LF
	"you can affect Mega Man's vertical speed by pressing the Up and Down keys.
	$LF
	"This is only useful in one place: the vertical fan shaft in Sonic Man's stage.
	$LF
	"Hold the Up key to accelerate to maximum speed 1 frame faster.
	$LF
]p
[h3 
	" Sub-tile alignment
	$LF
	[a id=heading-7011 
	]a
]h3
[p 
	"Tiles are 16 pixels wide.
	$LF
	"Because Mega Man accelerates in units of 2 pixels,
	$LF
	"This means that under normal circumstances, if you have even pixel alignment, it will stay even;
	$LF
	"and if you have odd alignment, it will stay odd.
	$LF
	"The only way to change your alignment is to run into a wall
	$LF
	"(going left makes the alignment even; going right makes it odd)
	$LF
	"or grab a ladder (makes it even).
	$LF
]p
[p 
	"Having the right sub-tile alignment may allow you to,
	$LF
	"for example,
	$LF
	"start accelerating horizontally 1 frame earlier when exiting a vertical shaft.
	$LF
	"Changing your 
	[em 
		"x
	]em
	" position by any amount other than 8 pixels
	$LF
	"requires slowing down, so it's only worth doing when you are otherwise
	$LF
	"stopped from making immediate progress.
	$LF
]p
[p 
	"To adjust your position by:
	$LF
]p
[ul 
	[li 
		" 2 pixels: press Right, release Right, frame advance.
		$LF
	]li
	[li 
		" 4 pixels: press Right, release Right, frame advance, frame advance, press Right, release Right, frame advance.
		$LF
	]li
	[li 
		" 6 pixels: press Right, frame advance, frame advance, release Right, frame advance.
		$LF
	]li
	[li 
		" 8 pixels: just keep running; this is Mega Man's running speed.
		$LF
	]li
]ul
[h3 
	" Vertical camera recentering delay
	$LF
	[a id=heading-7012 
	]a
]h3
[p 
	"Whenever Mega Man lands a jump from a lower to a higher platform,
	$LF
	"he freezes in place while the camera recenters on him vertically.
	$LF
	"It doesn't happen when jumping downward.
	$LF
	"The following animation stabilizes the camera
	$LF
	"to show the freezing effect.
	$LF
	"The only difference between the two examples is that
	$LF
	"the top one avoids low-to-high jumps as much as possible.
	$LF
]p
[p 
	[img alt=An animation of Mega Man jumping across platforms, demonstrating how he freezes in place whenever the camera recenters itself. class=embed src=https://www.bamsoftware.com/computers/tasvideos/mmdos-lava-jump.gif 
	]img
	$LF
]p
[p 
	"Vertical camera recentering delay
	$LF
	"also affects the tops of ladders.
	$LF
	"You can diminish the delay by jumping at the top of the ladder,
	$LF
	"which partially scrolls the camera up,
	$LF
	"leaving it less distance to move when you touch the ground again.
	$LF
	"it doesn't help unless Mega Man has a certain amount of headroom.
	$LF
]p
[p 
	[img alt=A split-screen animation comparing Mega Man jumping at the top of a ladder, and not jumping. The jumping one is a tile and a half faster. class=embed src=https://www.bamsoftware.com/computers/tasvideos/mmdos-ladder-jump.gif 
	]img
	$LF
]p
[h3 
	" Horizontal camera recentering delay
	$LF
	[a id=heading-7013 
	]a
]h3
[p 
	"The only time horizontal camera recentering delay matters
	$LF
	"is after each of the Robot Master refights in Wily's stage.
	$LF
	"At the moment the camera starts moving, you want to be:
	$LF
]p
[ul 
	[li 
		" on the half of the screen nearest the exit gate
		$LF
	]li
	[li 
		" moving at full speed
		$LF
	]li
	[li 
		" with sub-tile alignment of 0 or 8
		$LF
	]li
]ul
[p 
	"If you have bad alignment, the camera will take an extra frame to recenter itself. More info: 
	[a href=/forum/p/478286#478286 
		"/forum/p/478286#478286
	]a
	".
	$LF
]p
[h3 
	" Item drops
	$LF
	[a id=heading-7014 
	]a
]h3
[p 
	"An item drop iterates the 
	(__wikiLink|GameResources/DOS/MegaMan#RNG|RNG)
	" once and chooses the item based on the most significant byte:
	$LF
]p
[table 
	[tbody 
		[tr 
			[td 
				"0 ≤ 
				[em 
					"x
				]em
				" < 4 
			]td
			[td 
				"1-up 
			]td
		]tr
		[tr 
			[td 
				"4 ≤ 
				[em 
					"x
				]em
				" < 24 
			]td
			[td 
				"large health 
			]td
		]tr
		[tr 
			[td 
				"24 ≤ 
				[em 
					"x
				]em
				" < 48 
			]td
			[td 
				"large weapon energy 
			]td
		]tr
		[tr 
			[td 
				"48 ≤ 
				[em 
					"x
				]em
				" < 88 
			]td
			[td 
				"small health 
			]td
		]tr
		[tr 
			[td 
				"88 ≤ 
				[em 
					"x
				]em
				" < 128 
			]td
			[td 
				"small weapon energy 
			]td
		]tr
		[tr 
			[td 
				"128 ≤ 
				[em 
					"x
				]em
				" < 256 
			]td
			[td 
				"nothing 
			]td
		]tr
	]tbody
]table
[h3 
	" Weapon select screen
	$LF
	[a id=heading-7015 
	]a
]h3
[p 
	"You can switch weapons without losing time.
	$LF
	"To switch to Sonic Wave, for example:
	$LF
	"press S, press Esc, frame advance; release S, release Esc, frame advance.
	$LF
	"Mega Man will continue moving at full speed during both of these frames.
	$LF
]p
[h2 
	" Volt skip
	$LF
	[a id=heading-7016 
	]a
]h2
[p 
	"You can skip most of Volt Man's stage
	$LF
	"using the E Tank from Sonic Man's stage
	$LF
	"to heal past a death barrier.
	$LF
	"Take damage from a spark while facing right,
	$LF
	"so that you stagger backwards into the wall.
	$LF
	"Press Escape on the frame before you lose all your health.
	$LF
	"On the next frame the weapon select menu will be open and you will have zero health.
	$LF
	"Use an E Tank and then select a weapon to close the weapon select menu.
	$LF
]p
[p 
	[img alt=A screenshot of Mega Man falling toward the death barrier in Volt Man's stage, with the death tiles highlighted. class=embed src=https://www.bamsoftware.com/computers/tasvideos/mmdos-voltman-death-barrier.png 
	]img
	$LF
]p
[p 
	"The same trick would work to pass a death barrier in Dyna Man's stage,
	$LF
	"but you would have to farm a second E Tank and
	$LF
	[a href=/forum/p/479471#479471 
		"it's not quite worth it
	]a
	".
	$LF
]p
[h2 
	" Weapons
	$LF
	[a id=heading-7017 
	]a
]h2
[h3 
	" Damage chart
	$LF
	[a id=heading-7018 
	]a
]h3
[table 
	[tbody 
		[tr 
			[th 
				"Enemy 
			]th
			[th 
				"HP 
			]th
			[th 
				"P 
			]th
			[th 
				"S 
			]th
			[th 
				"V 
			]th
			[th 
				"D 
			]th
		]tr
		[tr 
			[td 
				"Guard dog 
			]td
			[td 
				" 8
			]td
			[td 
				" 1
			]td
			[td 
				" 1
			]td
			[td 
				" 1
			]td
			[td 
				" 1
			]td
		]tr
		[tr 
			[td 
				"Sewer Rat 
			]td
			[td 
				" 2
			]td
			[td 
				" 1
			]td
			[td 
				" 0
			]td
			[td 
				" ∞
			]td
			[td 
				" ∞
			]td
		]tr
		[tr 
			[td 
				"Sonic Man 
			]td
			[td 
				"32
			]td
			[td 
				" 1
			]td
			[td 
				" 0
			]td
			[td 
				" 2
			]td
			[td 
				"16
			]td
		]tr
		[tr 
			[td 
				"Volt Man  
			]td
			[td 
				"32
			]td
			[td 
				" 1
			]td
			[td 
				" 6
			]td
			[td 
				" 0
			]td
			[td 
				" 2
			]td
		]tr
		[tr 
			[td 
				"Dyna Man  
			]td
			[td 
				"32
			]td
			[td 
				" 2
			]td
			[td 
				" 1
			]td
			[td 
				" 6
			]td
			[td 
				" 0
			]td
		]tr
		[tr 
			[td 
				"Crorq     
			]td
			[td 
				"32
			]td
			[td 
				" 1
			]td
			[td 
				" 6
			]td
			[td 
				" 2
			]td
			[td 
				" 4
			]td
		]tr
		[tr 
			[td 
				"Wily      
			]td
			[td 
				"32
			]td
			[td 
				" 1
			]td
			[td 
				" 2
			]td
			[td 
				" 8
			]td
			[td 
				" 4
			]td
		]tr
	]tbody
]table
[h3 
	" Nuclear Detonator
	$LF
	[a id=heading-7019 
	]a
]h3
[p 
	"When you shoot the Nuclear Detonator, it starts a 
	[tt 
		"weapon_counter
	]tt
	" timer.
	$LF
	"After 16 frames, you can manually detonate it.
	$LF
	"After 96 frames, it will detonate automatically.
	$LF
]p
[h2 
	" Enemy AI
	$LF
	[a id=heading-7020 
	]a
]h2
[h3 
	" RNG
	$LF
	[a id=heading-7021 
	]a
]h3
[p 
	"The random number generator is duplicated for each stage,
	$LF
	"a copy of it appearing in each .bin file.
	$LF
	"It is the same algorithm everywhere (a linear congruential generator),
	$LF
	"but with a different seed in each stage.
	$LF
]p
[pre 
	"uint16_t rng() {
	$LF
	"    static uint16_t rng_state = RNG_SEED;
	$LF
	"    rng_state = rng_state * 0xe51d + 0x3619;
	$LF
	"    return rng_state;
	$LF
	"}
	$LF
]pre
[table 
	[tbody 
		[tr 
			[th 
				"stage 
			]th
			[th 
				" seed
			]th
		]tr
		[tr 
			[td 
				"SECUR 
			]td
			[td 
				" 0x7536
			]td
		]tr
		[tr 
			[td 
				"SONIC 
			]td
			[td 
				" 0x5f27
			]td
		]tr
		[tr 
			[td 
				"VOLT  
			]td
			[td 
				" 0x3a05
			]td
		]tr
		[tr 
			[td 
				"DYNA  
			]td
			[td 
				" 0x9d86
			]td
		]tr
		[tr 
			[td 
				"WILEY 
			]td
			[td 
				" 0xd975
			]td
		]tr
	]tbody
]table
[p 
	"The fixed RNG per stage is convenient for TASing.
	$LF
	"It means that RNG from earlier stages does not carry over into later stages;
	$LF
	"the RNG is always in a known state at the beginning of a stage.
	$LF
	"When the game samples from the RNG,
	$LF
	"it tends to use the high-order bits,
	$LF
	"perhaps as mitigation against the weaknesses of a linear congruential generator.
	$LF
]p
[p 
	"The RNG iterates at least once per frame.
	$LF
	"Enemy AI, item drops, and other random events may iterate it more.
	$LF
]p
[h3 
	" Data structures
	$LF
	[a id=heading-7022 
	]a
]h3
[p 
	"Enemies, pickups, and other objects use a common 28-byte data structure.
	$LF
	"Each stage (.bin file) contains an array of these data structures,
	$LF
	"with one element for each thing that can appear in the stage.
	$LF
	"Fields may have different meanings for different types of enemies.
	$LF
]p
[pre 
	"struct actor {
	$LF
	"/*  +0 */   uint16_t    x_pos;
	$LF
	"/*  +2 */   uint16_t    y_pos;
	$LF
	"/*  +4 */   struct frm *current_frm;   // pointer to current bitmap and hitbox
	$LF
	"/*  +6 */   uint8_t     hp;
	$LF
	"    // damage_amount is how much Mega Man is damaged by contact.
	$LF
	"    // If the actor is a pickup, damage_amount instead indicates what kind:
	$LF
	"    // 1 = 1-up, 2 = E Tank, 3 = large health, 4 = small health, 5 = big weapon, other = small weapon
	$LF
	"/*  +7 */   uint8_t     damage_amount;
	$LF
	"/*  +8 */   uint8_t     unknown_0; // ???
	$LF
	"/*  +9 */   uint8_t     flags;     // (flags&0x80)!=0 => spawned/active
	$LF
	"    // The next 4 fields define a bounding box which the enemy will stay inside of.
	$LF
	"/* +10 */   uint16_t    x_max;
	$LF
	"/* +12 */   uint16_t    x_min;
	$LF
	"/* +14 */   uint16_t    y_min;
	$LF
	"/* +16 */   uint16_t    y_max;
	$LF
	"/* +18 */   uint8_t     counter_0; // Used for animation, and for timing the death explosion.
	$LF
	"/* +19 */   uint8_t     counter_1; // Sewer Rats use this counter while walking.
	$LF
	"/* +20 */   uint8_t     counter_2; // Sewer Rats use this counter while standing.
	$LF
	"/* +21 */   int8_t      facing;    // negative = facing left; otherwise facing right
	$LF
	"/* +22 */   uint16_t    unknown_1; // ???
	$LF
	"    // Volt Man and Dyna Man use extra_0 and extra_0 to store horizontal and vertical speed.
	$LF
	"/* +24 */   int16_t     extra_0;
	$LF
	"/* +26 */   int16_t     extra_1;
	$LF
	"};
	$LF
]pre
[p 
	"The 18-byte data structure that 
	[tt 
		"current_frm
	]tt
	" points to contains the actor's current bitmap,
	$LF
	"and also hitbox dimensions.
	$LF
]p
[pre 
	"struct frm {
	$LF
	"/*  +0 */   int16_t box_left;   // <= 0
	$LF
	"/*  +2 */   int16_t box_right;  // >= 0
	$LF
	"/*  +4 */   int16_t box_top;    // <= 0
	$LF
	"/*  +6 */   int16_t box_bottom; // >= 0
	$LF
	"/*  +8 */   int16_t unknown_0;  // ???
	$LF
	"/* +10 */   int16_t unknown_1;  // ???
	$LF
	"/* +12 */   int16_t unknown_2;  // ???
	$LF
	"/* +14 */   int16_t unknown_3;  // ???
	$LF
	"/* +16 */   int16_t unknown_4;  // ???
	$LF
	"};
	$LF
]pre
[h3 
	" Guard dog
	$LF
	[a id=heading-7023 
	]a
]h3
[p 
	"The guard dog's AI subroutine starts at offset 0x56c in SECUR.BIN.
	$LF
]p
[p 
	"The guard dog in the intro stage is unlike other enemies
	$LF
	"in that it can only be damaged once per frame.
	$LF
]p
[h3 
	" Sewer Rat
	$LF
	[a id=heading-7024 
	]a
]h3
[p 
	"The Sewer Rat AI subroutine starts at offset 0x1912 in SONIC.BIN.
	$LF
]p
[pre 
	"static uint8_t global_flag_7de;
	$LF
	$LF
	"void ai_rat(struct actor *rat)
	$LF
	"{
	$LF
	"    if (
	[em 
	]em
	"(rat->flags & 0x80) == 0)
	$LF
	"        // Ignore if not currently spawned.
	$LF
	"        return;
	$LF
	"    }
	$LF
	"    blit(rat, rat->current_frm);
	$LF
	"    // A global flag at BIN_AREA+0x7de, referred to in many AI
	$LF
	"    // subroutines.
	$LF
	"    if (
	[em 
	]em
	"(global_flag_7de & 0x80) != 0)
	$LF
	"        return;
	$LF
	"    if (rat->hp == 0) {
	$LF
	"        // Rat is dead, now playing explosion animation. The animation
	$LF
	"        // lasts for 5 frames, but there are only 3 bitmaps.
	$LF
	"        // counter_0 == 5: O
	$LF
	"        // counter_0 == 4: o
	$LF
	"        // counter_0 == 3: o
	$LF
	"        // counter_0 == 2: o
	$LF
	"        // counter_0 == 1: .
	$LF
	"        // counter_0 == 0: done
	$LF
	"        rat->counter_0--;
	$LF
	"        if (rat->counter_0 != 0) {
	$LF
	"            // Death animation is finished.
	$LF
	"            unspawn_actor_and_drop_item(rat); // Unsets rat->flags & 0x80
	$LF
	"        } else if (rat->counter_0 == 3 || rat->counter_0 == 0) {
	$LF
	"            // Advance explosion animation.
	$LF
	"            rat->current_frm--;
	$LF
	"        }
	$LF
	"    } else {
	$LF
	"        // Rat is alive. counter_1 is the walk counter; counter_2 is the
	$LF
	"        // stand counter.
	$LF
	"        int16_t x_vel = 0;
	$LF
	"        if (rat->current_frm == FRM_RAT_STANDING && --rat->counter_2 != 0) {
	$LF
	"            // Rat is in standing state. Roll a random walk counter for
	$LF
	"            // when we transition to walking state. NB: the counter is
	$LF
	"            // re-rolled every frame while standing, but only the final
	$LF
	"            // one before transitioning to walking matters.
	$LF
	"            uint16_t r = rng();
	$LF
	"            rat->counter_1 = (
	[em 
	]em
	"(
	[em 
	]em
	"(r << 4) | (r >> 12)
	[em 
	]em
	") & 0x1f) + 32; // rand(32, 64)
	$LF
	"        } else {
	$LF
	"            // Rat is in walking state.
	$LF
	"            rat->counter_1--;
	$LF
	"            if (rat->counter_1 != 0) {
	$LF
	"                // Still walking.
	$LF
	"                x_vel = 4;
	$LF
	"                if (rat->counter_1 % 2 == 0)
	$LF
	"                    rat->current_frm = FRM_RAT_WALKING_EVEN;
	$LF
	"                else
	$LF
	"                    rat->current_frm = FRM_RAT_WALKING_ODD;
	$LF
	"            } else {
	$LF
	"                // Done walking. Roll a random stand counter.
	$LF
	"                rat->counter_2 = (rng() >> 13) & 0x07 + 8; // rand(8, 16)
	$LF
	"                rat->current_frm = FRM_RAT_STANDING;
	$LF
	"            }
	$LF
	"        }
	$LF
	$LF
	"        // Reverse velocity if facing left.
	$LF
	"        if (rat->facing < 0) {
	$LF
	"            x_vel = -x_vel;
	$LF
	"        }
	$LF
	"        if (check_collision(rat, x_vel)) {
	$LF
	"            // Will the rat hit something?
	$LF
	"            rat->facing = ~rat->facing;
	$LF
	"        }
	$LF
	"        rat->x_pos += x_vel;
	$LF
	"        // Keep within this rat's boundary.
	$LF
	"        if (rat->x_pos > rat->x_max)
	$LF
	"            rat->facing = -1;
	$LF
	"        else if (rat->x_pos < rat->x_min)
	$LF
	"            rat->facing = 0;
	$LF
	$LF
	"        // Now check for collision with player bullets.
	$LF
	"        // check_player_shot_collision returns the number of bullets
	$LF
	"        // that hit the rat on this frame.
	$LF
	"        uint8_t num_hits = check_player_shot_collision(rat);
	$LF
	"        uint8_t i;
	$LF
	"        for (i = 0; i < num_hits; i++) {
	$LF
	"            if (current_weapon == WEAPON_P) {
	$LF
	"                rat->hp--;
	$LF
	"            }
	$LF
	"            if (rat->hp <= 0
	$LF
	"                || current_weapon == WEAPON_V
	$LF
	"                || current_weapon == WEAPON_D) {
	$LF
	"                rat->hp = 0;
	$LF
	"                // Initialize death animation.
	$LF
	"                rat->current_frm = FRM_DEATH_BUBBLE_LARGE;
	$LF
	"                rat->counter_0 = 5;
	$LF
	"                break;
	$LF
	"            }
	$LF
	"        }
	$LF
	"    }
	$LF
	"}
	$LF
]pre
[h3 
	" Volt Man
	$LF
	[a id=heading-7025 
	]a
]h3
[p 
	"Volt Man's AI subrouting starts at offset 0x2204 in VOLT.BIN,
	$LF
	"or offset 0x235b in WILEY.BIN.
	$LF
]p
[p 
	"Volt Man's initial jump is random.
	$LF
	"The 
	[em 
		"x
	]em
	" speed is random in {−4, −6} (or {+4, +6} in the Wily-stage refight).
	$LF
	"The 
	[em 
		"y
	]em
	" speed is random in {−14, −16}.
	$LF
	"The 
	[em 
		"x
	]em
	" speed doesn't matter, but the smaller jump is 2 frames faster.
	$LF
]p
[h3 
	" Dyna Man
	$LF
	[a id=heading-7026 
	]a
]h3
[p 
	"Dyna Man's AI subrouting starts at offset 0x1fdb in DYNA.BIN,
	$LF
	"or offset 0x2a1a in WILEY.BIN.
	$LF
]p
[p 
	"Dyna Man's initial jump is random.
	$LF
	"The 
	[em 
		"x
	]em
	" speed is random in {−4, −5, −6, −7}.
	$LF
	"The 
	[em 
		"y
	]em
	" speed is random in {−7, −9, −11, −13}.
	$LF
	"Ideally, you want him to jump towards you as fast as possible
	$LF
	"(so he gets close enough to use the Force Field on him),
	$LF
	"and low enough that he remains in reach of Mega Man's jump.
	$LF
]p
[h2 
	" Underexplored glitches
	$LF
	[a id=heading-7027 
	]a
]h2
[h3 
	" Lack of collision with Force Field
	$LF
	[a id=heading-7028 
	]a
]h3
[p 
	"Sometimes, in the corridor before Volt Man in Wily's stage,
	$LF
	"the Force Field will pass through enemies rather than destroying them.
	$LF
	"It's not known why this happens or under what circumstances,
	$LF
	"except that it has something to do with having used the Nuclear Detonator.
	$LF
	"You can see it in Lizstar's AGDQ 2019 run:
	$LF
]p
[ul 
	[li 
		" https://www.youtube.com/watch?v=tbs6PEgXEJg&t=665s
		$LF
	]li
]ul
[h3 
	" Death warp
	$LF
	[a id=heading-7029 
	]a
]h3
[p 
	"Trigger tiles are special map tiles that do something when Mega Man passes over them,
	$LF
	"for example spawning the enemies for the next room or activating a checkpoint.
	$LF
	"You can see the trigger tiles with the 
	(__wikiLink|GameResources/DOS/MegaMan#Resources|HUD script)
	$LF
	"or in the annotated 
	(__wikiLink|GameResources/DOS/MegaMan#Maps|Maps)
	".
	$LF
	"A minor death warp is possible with a least one checkpoint,
	$LF
	"where the checkpoint is located a tiny bit farther ahead in the stage.
	$LF
]p
[p 
	[img alt=An animation of Mega Man entering the bat cave in Sonic Man's stage, dying with F10, and respawning a few tiles down and to the left of where he was. class=embed src=https://www.bamsoftware.com/computers/tasvideos/mmdos-sonicman-death-warp.gif 
	]img
	$LF
]p
[h3 
	" Trigger tile reentrancy
	$LF
	[a id=heading-7030 
	]a
]h3
[p 
	"I found a bug having to do with activating a trigger tile twice.
	$LF
	"After the fan shaft in Sonic Man's stage,
	$LF
	"there is a trigger tile in the downward tube at coordinates (79, 15)
	$LF
	"that spawns the Sewer Rat and makes the wall blasters start shooting.
	$LF
	"The 
	(__wikiLink|GameResources/DOS/MegaMan#SewerRat|Sewer Rat AI)
	" is supposed to work like this:
	$LF
	"walk for 
	[tt 
		"rand(32, 64)
	]tt
	" frames, stand for 
	[tt 
		"rand(8, 16)
	]tt
	" frames, repeat.
	$LF
	"If you jump straight down into the room (touching the trigger tile only once),
	$LF
	"that is the behavior you'll see.
	$LF
	"But if you walk off the edge at an angle (touching the trigger tile twice),
	$LF
	"you'll instead see the rat walk for about 256 frames before starting
	$LF
	"its normal cycle.
	$LF
	"It happens because the rat gets reinitialized after it has already started its AI cycle,
	$LF
	"and an integer underflow occurs.
	$LF
	"Abusing the glitch doesn't help here,
	$LF
	"because you want the rat to stand anyway
	$LF
	"so it's easier to damage-boost past it.
	$LF
	"But possibly there are other such bugs in other places.
	$LF
]p
[p 
	"The trigger tile callback in question starts at offset 0x9f5 in SONIC.BIN.
	$LF
	"The portion having to do with the Sewer Rat is:
	$LF
]p
[pre 
	"rat->flags |= 0x80; // spawn
	$LF
	"rat->hp = 2;
	$LF
	"rat->damage_amount = 6;
	$LF
	"rat->current_frm = FRM_RAT_WALKING_EVEN;
	$LF
	"rat->x_pos = 0x3f8; // tile position 63 8/16
	$LF
	"rat->y_pos = 0x1db; // tile position 29 11/16
	$LF
	"rat->x_min = 0x3e8; // tile position 62 8/16
	$LF
	"rat->x_max = 0x4a0; // tile position 82 8/16
	$LF
]pre
[p 
	"The first time Mega Man hits the trigger tile,
	$LF
	"the rat is in the walking state with 
	[tt 
		"counter_1
	]tt
	" = 0.
	$LF
	"The first call to the 
	(__wikiLink|GameResources/DOS/MegaMan#SewerRat|Sewer Rat AI)
	$LF
	"underflows 
	[tt 
		"counter_1
	]tt
	" = 255 and transitions to the standing state.
	$LF
	"But then if Mega Man hits the trigger tile a second time,
	$LF
	"it forces the rat back into the walking state,
	$LF
	"but without resetting 
	[tt 
		"counter_1
	]tt
	".
	$LF
	"So now the rat will walk for 255 frames.
	$LF
]p
[h3 
	" Wall clip
	$LF
	[a id=heading-7031 
	]a
]h3
[p 
	"While climbing a ladder, hold Right and J (jump).
	$LF
	"At the top of the ladder, release Up, and you'll clip one tile into the solid wall on the right.
	$LF
	"It doesn't work going left.
	$LF
]p
[p 
	[img alt=An animation of Mega Man reaching the top of the long ladder in Dyna Man's stage, and clipping into the solid tile on the right. class=embed src=https://www.bamsoftware.com/computers/tasvideos/mmdos-ladder-clip.gif 
	]img
	$LF
]p
[h3 
	" Out of bounds
	$LF
	[a id=heading-7032 
	]a
]h3
[p 
	"After traversing the death barrier in Volt Man's stage,
	$LF
	"if you go left rather than right
	$LF
	"you'll end up out of bounds,
	$LF
	"off the left edge of the stage.
	$LF
	"There are some invisible solid platforms there.
	$LF
]p
[p 
	[img alt=An animation of Mega Man traversing the death barrier in Volt Man's stage using the E Tank trick, and moving left to stand atop the pole at the left of the stage. class=embed src=https://www.bamsoftware.com/computers/tasvideos/mmdos-voltman-1etank-skip.gif 
	]img
	$LF
]p
[h2 
	" Maps
	$LF
	[a id=heading-7033 
	]a
]h2
[ul 
	[li 
		" 
		[a class=extlink href=https://www.bamsoftware.com/computers/tasvideos/mmdos-secur.map.16.png? rel=nofollow 
			"SECUR
		]a
		" (
		[a class=extlink href=https://www.bamsoftware.com/computers/tasvideos/mmdos-secur.map-annotated.16.png? rel=nofollow 
			"annotated
		]a
		")
		$LF
	]li
	[li 
		" 
		[a class=extlink href=https://www.bamsoftware.com/computers/tasvideos/mmdos-sonic.map.16.png? rel=nofollow 
			"SONIC
		]a
		" (
		[a class=extlink href=https://www.bamsoftware.com/computers/tasvideos/mmdos-sonic.map-annotated.16.png? rel=nofollow 
			"annotated
		]a
		")
		$LF
	]li
	[li 
		" 
		[a class=extlink href=https://www.bamsoftware.com/computers/tasvideos/mmdos-volt.map.16.png? rel=nofollow 
			"VOLT
		]a
		" (
		[a class=extlink href=https://www.bamsoftware.com/computers/tasvideos/mmdos-volt.map-annotated.16.png? rel=nofollow 
			"annotated
		]a
		")
		$LF
	]li
	[li 
		" 
		[a class=extlink href=https://www.bamsoftware.com/computers/tasvideos/mmdos-dyna.map.16.png? rel=nofollow 
			"DYNA
		]a
		" (
		[a class=extlink href=https://www.bamsoftware.com/computers/tasvideos/mmdos-dyna.map-annotated.16.png? rel=nofollow 
			"annotated
		]a
		")
		$LF
	]li
	[li 
		" 
		[a class=extlink href=https://www.bamsoftware.com/computers/tasvideos/mmdos-wiley.map.16.png? rel=nofollow 
			"WILEY
		]a
		" (
		[a class=extlink href=https://www.bamsoftware.com/computers/tasvideos/mmdos-wiley.map-annotated.16.png? rel=nofollow 
			"annotated
		]a
		")
		$LF
	]li
]ul
[p 
	"Static maps don't tell the whole story.
	$LF
	"For example, in Sonic Man's stage,
	$LF
	"if you use the Nuclear Detonator to break into the large secret chamber,
	$LF
	"the game will build a wall inside it,
	$LF
	"preventing you from going all the way through.
	$LF
]p
[p 
	"Annotations (see map/main.go under 
	(__wikiLink|GameResources/DOS/MegaMan#Resources|Resources)
	" for details about flags):
	$LF
]p
[ul 
	[li 
		" center gray: tile ID
		$LF
	]li
	[li 
		" upper-left magenta: Flags0: animation/destructibility
		$LF
	]li
	[li 
		" upper-right yellow: Flags1: solidity, 0x80=trigger, 0x40=masked, 0x01=climbable
		$LF
	]li
	[li 
		" lower-left red: Flags2: contact damage
		$LF
	]li
	[li 
		" lower-right cyan: Flags3: physics, upper nibble is horizontal push, lower nibble is vertical gravity
		$LF
	]li
]ul
[h2 
	" Memory addresses
	$LF
	[a id=heading-7034 
	]a
]h2
[p 
	"Base memory addresses differ depending on whether you
	$LF
	"have loaded HIMEM during boot.
	$LF
	"As far as we can tell, it's faster 
	[em 
		"not
	]em
	" to load HIMEM.
	$LF
]p
[p 
	"Without HIMEM:
	$LF
]p
[table 
	[tbody 
		[tr 
			[td 
				[tt 
					"SEG_000
				]tt
				"  
			]td
			[td 
				" 0x2f970
			]td
		]tr
		[tr 
			[td 
				[tt 
					"MAP_AREA
				]tt
				" 
			]td
			[td 
				" 0x3859e
			]td
		]tr
		[tr 
			[td 
				[tt 
					"BIN_AREA
				]tt
				" 
			]td
			[td 
				" 0x5f870
			]td
		]tr
	]tbody
]table
[p 
	"With HIMEM:
	$LF
]p
[table 
	[tbody 
		[tr 
			[td 
				[tt 
					"SEG_000
				]tt
				"  
			]td
			[td 
				" 0x5380
			]td
		]tr
		[tr 
			[td 
				[tt 
					"MAP_AREA
				]tt
				" 
			]td
			[td 
				" 0xdfae
			]td
		]tr
		[tr 
			[td 
				[tt 
					"BIN_AREA
				]tt
				" 
			]td
			[td 
				" 0x35280
			]td
		]tr
	]tbody
]table
[table 
	[tbody 
		[tr 
			[td 
				[tt 
					"camera_x
				]tt
				" 
			]td
			[td 
				" word 
				[tt 
					"SEG_000
				]tt
				" + 0x8c04
			]td
		]tr
		[tr 
			[td 
				[tt 
					"camera_y
				]tt
				" 
			]td
			[td 
				" word 
				[tt 
					"SEG_000
				]tt
				" + 0x8c0a
			]td
		]tr
		[tr 
			[td 
				[tt 
					"camera_target_x
				]tt
				" 
			]td
			[td 
				" word 
				[tt 
					"SEG_000
				]tt
				" + 0x8c16
			]td
		]tr
		[tr 
			[td 
				[tt 
					"camera_target_y
				]tt
				" 
			]td
			[td 
				" word 
				[tt 
					"SEG_000
				]tt
				" + 0x8c1c
			]td
		]tr
		[tr 
			[td 
				[tt 
					"megaman_x
				]tt
				" 
			]td
			[td 
				" word 
				[tt 
					"SEG_000
				]tt
				" + 0x10db7
			]td
		]tr
		[tr 
			[td 
				[tt 
					"megaman_y
				]tt
				" 
			]td
			[td 
				" word 
				[tt 
					"SEG_000
				]tt
				" + 0x10db9
			]td
		]tr
		[tr 
			[td 
				[tt 
					"megaman_frm
				]tt
				" (current bitmap)
			]td
			[td 
				" ptr 
				[tt 
					"SEG_000
				]tt
				" + 0x10dbb
			]td
		]tr
		[tr 
			[td 
				[tt 
					"megaman_hp
				]tt
				" 
			]td
			[td 
				" byte 
				[tt 
					"SEG_000
				]tt
				" + 0x10dbd
			]td
		]tr
		[tr 
			[td 
				[tt 
					"megaman_x_vel
				]tt
				" 
			]td
			[td 
				" word 
				[tt 
					"SEG_000
				]tt
				" + 0x10dcf
			]td
		]tr
		[tr 
			[td 
				[tt 
					"megaman_y_vel
				]tt
				" 
			]td
			[td 
				" word 
				[tt 
					"SEG_000
				]tt
				" + 0x10dd1
			]td
		]tr
		[tr 
			[td 
				[tt 
					"player_shot_1.x
				]tt
				" 
			]td
			[td 
				" word 
				[tt 
					"SEG_000
				]tt
				" + 0x10dd3
			]td
		]tr
		[tr 
			[td 
				[tt 
					"player_shot_1.y
				]tt
				" 
			]td
			[td 
				" word 
				[tt 
					"SEG_000
				]tt
				" + 0x10dd5
			]td
		]tr
		[tr 
			[td 
				[tt 
					"player_shot_2.x
				]tt
				" 
			]td
			[td 
				" word 
				[tt 
					"SEG_000
				]tt
				" + 0x10def
			]td
		]tr
		[tr 
			[td 
				[tt 
					"player_shot_2.y
				]tt
				" 
			]td
			[td 
				" word 
				[tt 
					"SEG_000
				]tt
				" + 0x10df1
			]td
		]tr
		[tr 
			[td 
				[tt 
					"player_shot_3.x
				]tt
				" 
			]td
			[td 
				" word 
				[tt 
					"SEG_000
				]tt
				" + 0x10e0b
			]td
		]tr
		[tr 
			[td 
				[tt 
					"player_shot_3.y
				]tt
				" 
			]td
			[td 
				" word 
				[tt 
					"SEG_000
				]tt
				" + 0x10e0d
			]td
		]tr
		[tr 
			[td 
				[tt 
					"weapon_counter
				]tt
				" (used for Nuclear Detonator timer) 
			]td
			[td 
				" byte 
				[tt 
					"SEG_000
				]tt
				" + 0x10de7
			]td
		]tr
		[tr 
			[td 
				[tt 
					"explosion_counter
				]tt
				" 
			]td
			[td 
				" byte 
				[tt 
					"SEG_000
				]tt
				" + 0x10f15
			]td
		]tr
		[tr 
			[td 
				[tt 
					"num_lives
				]tt
				" 
			]td
			[td 
				" byte 
				[tt 
					"SEG_000
				]tt
				" + 0x115b1
			]td
		]tr
		[tr 
			[td 
				[tt 
					"num_etanks
				]tt
				" 
			]td
			[td 
				" byte 
				[tt 
					"SEG_000
				]tt
				" + 0x115b2
			]td
		]tr
		[tr 
			[td 
				[tt 
					"stages_finished
				]tt
				" 0x40=SECUR 0x01=SONIC 0x02=VOLT 0x04=DYNA 
			]td
			[td 
				" byte 
				[tt 
					"SEG_000
				]tt
				" + 0x115b3
			]td
		]tr
		[tr 
			[td 
				[tt 
					"current_weapon
				]tt
				" 0=P 1=S 2=V 3=D 
			]td
			[td 
				" byte 
				[tt 
					"SEG_000
				]tt
				" + 0x115b5
			]td
		]tr
		[tr 
			[td 
				[tt 
					"weapon_energy_S
				]tt
				" 
			]td
			[td 
				" byte 
				[tt 
					"SEG_000
				]tt
				" + 0x115b7
			]td
		]tr
		[tr 
			[td 
				[tt 
					"weapon_energy_V
				]tt
				" 
			]td
			[td 
				" byte 
				[tt 
					"SEG_000
				]tt
				" + 0x115b8
			]td
		]tr
		[tr 
			[td 
				[tt 
					"weapon_energy_D
				]tt
				" 
			]td
			[td 
				" byte 
				[tt 
					"SEG_000
				]tt
				" + 0x115b9
			]td
		]tr
		[tr 
			[td 
				[tt 
					"setup_menu_settings
				]tt
				" 
			]td
			[td 
				" byte 
				[tt 
					"SEG_000
				]tt
				" + 0x18b90
			]td
		]tr
	]tbody
]table
[p 
	[tt 
		"setup_menu_settings
	]tt
	" bit 0x08 is a global invincibility flag.
	$LF
	"It can be convenient to set that bit when you're trying something out
	$LF
	"without wanting to worry about damage.
	$LF
]p
[table 
	[tbody 
		[tr 
			[td 
				[tt 
					"stage_width
				]tt
				" 
			]td
			[td 
				" word 
				[tt 
					"MAP_AREA
				]tt
				" + 0x0
			]td
		]tr
		[tr 
			[td 
				[tt 
					"stage_height
				]tt
				" 
			]td
			[td 
				" word 
				[tt 
					"MAP_AREA
				]tt
				" + 0x4
			]td
		]tr
	]tbody
]table
[p 
	"The per-stage variables are relative to 
	[tt 
		"BIN_AREA
	]tt
	" and vary across stages.
	$LF
]p
[table 
	[tbody 
		[tr 
			[th 
				"variable 
			]th
			[th 
				" 
			]th
			[th 
				"SECUR 
			]th
			[th 
				"SONIC 
			]th
			[th 
				"VOLT 
			]th
			[th 
				"DYNA 
			]th
			[th 
				"WILEY 
			]th
		]tr
		[tr 
			[td 
				[tt 
					"rng_state
				]tt
				" 
			]td
			[td 
				"word 
				[tt 
					"BIN_AREA
				]tt
				" +
			]td
			[td 
				"0x2fc 
			]td
			[td 
				"0x7d5 
			]td
			[td 
				"0xbf4 
			]td
			[td 
				"0xb01 
			]td
			[td 
				"0xb00 
			]td
		]tr
		[tr 
			[td 
				[tt 
					"ACTORS
				]tt
				" array 
			]td
			[td 
				[tt 
					"BIN_AREA
				]tt
				" +
			]td
			[td 
				"0x1ac 
			]td
			[td 
				"0x2ba 
			]td
			[td 
				"0x340 
			]td
			[td 
				"0x3a4 
			]td
			[td 
				"0x4a0 
			]td
		]tr
		[tr 
			[td 
				"SONIC 1st wall HP 
			]td
			[td 
				"byte 
				[tt 
					"BIN_AREA
				]tt
				" +
			]td
			[td 
				"N/A 
			]td
			[td 
				"0x793 
			]td
			[td 
				"N/A 
			]td
			[td 
				"N/A 
			]td
			[td 
				"N/A 
			]td
		]tr
		[tr 
			[td 
				"SONIC 2nd wall HP 
			]td
			[td 
				"byte 
				[tt 
					"BIN_AREA
				]tt
				" +
			]td
			[td 
				"N/A 
			]td
			[td 
				"0x799 
			]td
			[td 
				"N/A 
			]td
			[td 
				"N/A 
			]td
			[td 
				"N/A 
			]td
		]tr
	]tbody
]table
[p 
	"Some of the notable actors in each stage:
	$LF
]p
[table 
	[tbody 
		[tr 
			[td 
				"SECUR guard dog 
			]td
			[td 
				[tt 
					"ACTORS[10]
				]tt
				" 
			]td
		]tr
		[tr 
			[td 
				"VOLT Volt Man 
			]td
			[td 
				[tt 
					"ACTORS[40]
				]tt
				" 
			]td
		]tr
		[tr 
			[td 
				"DYNA Dyna Man 
			]td
			[td 
				[tt 
					"ACTORS[60]
				]tt
				" 
			]td
		]tr
		[tr 
			[td 
				"WILEY Volt Man 
			]td
			[td 
				[tt 
					"ACTORS[24]
				]tt
				" 
			]td
		]tr
		[tr 
			[td 
				"WILEY Dyna Man 
			]td
			[td 
				[tt 
					"ACTORS[47]
				]tt
				" 
			]td
		]tr
	]tbody
]table
[h2 
	" Resources
	$LF
	[a id=heading-7035 
	]a
]h2
[p 
	"Unorganized resources and reverse engineering tools,
	$LF
	"including a HUD script and an automatic optimization script.
	$LF
]p
[pre 
	"git clone https://www.bamsoftware.com/git/megamanpc.git
	$LF
]pre
