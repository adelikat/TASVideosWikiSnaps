70
[h2 id=Introduction 
	" Introduction
	$LF
]h2
[p 
	"The purpose of this page is to document all known 
	[b 
		"Mechanics, Tricks, and Glitches
	]b
	" that are present within Super Mario 64 for the Nintendo 64.
	$LF
]p
[dl 
	[dt 
		"Mechanics
	]dt
	[dd 
		"How Super Mario 64 operates. For example, this includes knowledge of Mario's movement and how it works.
		$LF
		[dt 
			"Tricks
		]dt
		[dd 
			"Actions that 
			[b 
				"DO NOT
			]b
			" abuse mechanics to obtain a certain goal.
			$LF
			[dt 
				"Glitches
			]dt
			[dd 
				"Actions that 
				[b 
					"DO
				]b
				" abuse mechanics to obtain a certain goal.
				$LF
			]dd
		]dd
	]dd
]dl
[p 
	"For the sake of differing opinions, these definitions only apply to this webpage. Surely, you or someone else may have a different opinion on these definitions.
	$LF
]p
[hr 
]hr
[p 
	"For now (January, 2019), this TASVideos Game Resources page will be the host of mostly general knowledge of Mechanics, Tricks and Glitches that are present within both Tool-Assisted and Non-Tool-Assisted Speedruns/Superplays of Super Mario 64. 
	$LF
]p
[p 
	"However, dedicated Super Mario 64 experts, speedrunners, and TASers have all contributed to hosting another website called Ukikipedia, which hosts 
	[b 
		"all
	]b
	" Super Mario 64 knowledge. 
	$LF
]p
[p 
	"Visit Ukikipedia Here:
	$LF
	"https://ukikipedia.net/wiki/Main_Page
	$LF
]p
[p 
	"Many mechanics, tricks, and glitches are incredibly difficult to reproduce in real time, so utilizing an 
	[a class=intlink href=/EmulatorResources 
		"Emulator
	]a
	" with tools such as 
	[a class=intlink href=/EmulatorResources/RamWatch 
		"RAM Watchers
	]a
	", 
	[a class=intlink href=/EmulatorResources/Using#ChangingTheSpeed 
		"Slowdowns
	]a
	", 
	[a class=intlink href=/EmulatorResources/Using#FrameAdvance 
		"Frame Advancing
	]a
	", and 
	[a class=intlink href=/EmulatorResources/Using#UsingSavestates 
		"Savestates
	]a
	" is necessary in order to perform them.
	$LF
]p
[p 
	"Thanks to the skilled developers within the Super Mario 64 Community, there are current efforts being invested into developing a RAM Watching Program specifically designed for Super Mario 64 called 
	[a class=extlink href=https://ukikipedia.net/wiki/STROOP rel=nofollow 
		"STROOP
	]a
	" (
	[b 
		"S
	]b
	"uper Mario 64 
	[b 
		"T
	]b
	"echnical 
	[b 
		"R
	]b
	"untime 
	[b 
		"O
	]b
	"bserver and 
	[b 
		"O
	]b
	"bject 
	[b 
		"P
	]b
	"rocessor)
	$LF
]p
[p 
	"Visit the 
	[a class=extlink href=https://github.com/SM64-TAS-ABC/STROOP rel=nofollow 
		"Official STROOP GitHub Page
	]a
	" for releases, and other information.
	$LF
]p
[hr 
]hr
[h2 id=GameMechanics 
	" Game Mechanics
	$LF
]h2
[h3 id=Movement 
	" Movement
	$LF
]h3
[p 
	"Check out the 
	[a class=extlink href=https://cdn02.nintendo-europe.com/media/downloads/games_8/emanuals/nintendo_8/Manual_Nintendo64_SuperMario64_EN.pdf rel=nofollow 
		"Official Nintendo Manual
	]a
	" for learning all of Mario's original movement names. (Starts at Page 5.)
	$LF
]p
[p 
	"Within most of the SM64 Speedrunning & TAS Community, we will refer to some of Mario's movement with different names. Here is the list where they are shown in (Manual Definition | Community Definition) format:
	$LF
]p
[dl 
	[dt 
		"Side-Step
	]dt
	[dd 
		" Hugging The Wall
		$LF
		[dt 
			"Break-Stroke
		]dt
		[dd 
			" Fast Swimming / Optimal Swimming
			$LF
			[dt 
				"Flutter-Kick
			]dt
			[dd 
				" Slow Swimming
				$LF
				[dt 
					"Regular Jump
				]dt
				[dd 
					" Single Jump
					$LF
					[dt 
						"Continuous Jump
					]dt
					[dd 
						" Double Jump
						$LF
						[dt 
							"Side Somersault
						]dt
						[dd 
							" Sideflip
							$LF
							[dt 
								"Backwards Somersault
							]dt
							[dd 
								" Backflip
								$LF
								[dt 
									"Swing or Climb
								]dt
								[dd 
									" Ledge Grab
									$LF
									[dt 
										"Slide Attack
									]dt
									[dd 
										" Dive
										$LF
										[dt 
											"Trip
										]dt
										[dd 
											" Breakdance
											$LF
										]dd
									]dd
								]dd
							]dd
						]dd
					]dd
				]dd
			]dd
		]dd
	]dd
]dl
[p 
	[b 
		"Extra Community Definitions:
	]b
	$LF
]p
[dl 
	[dt 
		"Action
	]dt
	[dd 
		" A single movement that Mario performs. (Action can be synonymous with Movement, or State.)
		$LF
		[dt 
			"Animation
		]dt
		[dd 
			" The animation during a single movement that Mario performs.
			$LF
			[dt 
				"General Horizontal Movement / Normal Horizontal Movement
			]dt
			[dd 
				" All forward movement (while in mid-air). Excludes Long Jumps. (General Horizontal Movement is subcategorized into: General Forward Movement, and General Backward Movement)
				$LF
				[dt 
					"Grounded
				]dt
				[dd 
					" The act of Mario being on any Floor. (See 
					[em 
						"Geometry
					]em
					" Section Below for Floors.)
					$LF
					[dt 
						"Roll/Rollout
					]dt
					[dd 
						" Landing (Rolling) immediately after having been in sliding/diving animation. 
						$LF
						[dt 
							"Dive Roll
						]dt
						[dd 
							" An immediate dive then roll.
							$LF
							[dt 
								"Bonk
							]dt
							[dd 
								" When Mario crashes into walls, or objects.
								$LF
								[dt 
									"Butt Slide
								]dt
								[dd 
									" Mario's Sliding animation where his butt is on the ground/slope.
									$LF
									[dt 
										"Lava Boost / Lava Burn
									]dt
									[dd 
										" Getting burned by lava.
										$LF
										[dt 
											"Fire Boost
										]dt
										[dd 
											" The mini jump that occurs after being burned by fire.
											$LF
											[dt 
												"Fire Burn / Burn / On Fire
											]dt
											[dd 
												" The running action that follows a fire boost. 
												$LF
												[dt 
													"Nisflip
												]dt
												[dd 
													" An unnecessary Sideflip + Dive.
													$LF
												]dd
											]dd
										]dd
									]dd
								]dd
							]dd
						]dd
					]dd
				]dd
			]dd
		]dd
	]dd
]dl
[p 
	[em 
		"To-Do: Add more definitions. Lots more.
	]em
	$LF
]p
[h3 id=Units 
	" Units
	$LF
]h3
[p 
	"Units in Super Mario 64 refer to Coordinates within the 3D space. Please refer to Pannenkoek2012's detailed video explanation (below) on that subject:
	$LF
]p
[p 
	(youtube|v=3lADTcTkAvk|w=320|h=240|hidelink)
	$LF
]p
[h3 id=Speed(orVelocity) 
	" Speed (or Velocity)
	$LF
]h3
[p 
	"Speed in Super Mario 64 refers to the number of Units that Mario will move in 1 Frame. (For reference, Super Mario 64 is a 30 Frame-Per-Second Game. Therefore, 1 Frame is equivalent to 1/30th of a Second.)
	$LF
]p
[p 
	"Speed is both measured Horizontally, and Vertically. In certain circumstances, the distance (units) Mario moves isn't necessarily equivalent to his speed. For a visual explanation on that subject, visit Pannenkoek2012's detailed video explanation below 
	[b 
		"(timestamped)
	]b
	":
	$LF
]p
[p 
	(youtube|v=kpk2tdsPh0A|start=812|w=320|h=240|hidelink)
	$LF
]p
[h4 id=HowSpeedWorks: 
	" How Speed Works:
	$LF
]h4
[p 
	"All of Mario's Horizontal Movements (on both the X & Z Axes; Forwards, Backwards, & Sideways Movement) are handled separately, but are not independent. The magnitude of an input on the joystick directly correlates to the effect of all his horizontal movements. For example, tilting the joystick forwards at its maximum magnitude (while Mario is also facing forwards) allows Mario to accelerate forwards as fast as possible. In this same scenario, holding the joystick to the left or right at its maximum magnitude (while Mario is also still facing forwards) allows Mario to accelerate Sideways as fast as possible. Although Horizontal Speed Acceleration and Deceleration are directly proportional to the amount of Joystick Tilting being performed, there are exceptions. Examples include: Bonks, Canceling Ledge Grabs, Being Shot out of a Cannon, Getting Hit/Thrown, Wind, etc. 
	$LF
]p
[p 
	"Most of Mario's Vertical Movements (on the Y Axis) are completely independent from joystick movement. (The only exceptions are Swimming and Flying.) There are predetermined values of acceleration and deceleration, both of which depend on the action that's performed. For certain actions, Vertical Speed is directly proportional to the amount of Horizontal Speed that Mario obtains.
	$LF
]p
[p 
	"The difference between Horizontal Speed and Vertical Speed depend on whether Mario is Grounded or not. Regardless of how it may seem, Vertical Speed is only active when Mario is not Grounded. 
	$LF
]p
[p 
	[b 
		"Example - Horizontal Speed vs. Vertical Speed:
	]b
	$LF
	"Let's have Mario slide down an extremely steep slope. His vertical position drastically changes compared to his horizontal position, so surely he must have a large amount of negative vertical speed, right? Wrong. If Mario were to never leave the slope, regardless of his vertical movement, he will only have Horizontal Speed, albeit very little speed.
	$LF
]p
[p 
	[b 
		"Factors that Affect Speed:
	]b
	$LF
]p
[ul 
	[li 
		" Floor (Surface/Ground) Type: Non-Slippery Floors, Slippery Floors, Water, Lava, Ice (Regular, Burning), Sand (Regular, Sand Pit, Sinking Sand, Quicksand), etc.
		$LF
	]li
	[li 
		" Floor Steepness
		$LF
	]li
	[li 
		" Special Caps: Wing Cap (Flying), Metal Cap (Falling, Walking)
		$LF
	]li
	[li 
		" Swimming: Slow, Fast, Shell, Holding Object
		$LF
	]li
	[li 
		" Holding Object: Small Object, Big Object
		$LF
	]li
	[li 
		" Predetermined Speeds for Certain Actions: Cannon Shots, Being Thrown, Wind, Knockback (Enemy, Bonk, Canceled Ledge Grab, Jumpkicking Wall), Etc.
		$LF
	]li
]ul
[p 
	[b 
		"The Mechanics of Speed:
	]b
	$LF
]p
[dl 
	[dt 
		"Speed Cap
	]dt
	[dd 
		" The minimum/maximum value of speed that Mario obtains when performing a certain action. There are Speed Caps for both Horizontal and Vertical Actions. Speed Caps can both be Positive or Negative.
		$LF
		[dt 
			"Acceleration/Deceleration Cap
		]dt
		[dd 
			" The minimum/maximum value of speed that Mario can accelerate/decelerate per frame when performing a certain action. Acceleration Caps are always positive. Deceleration Caps are always negative.
			$LF
			[dt 
				"Predetermined Initial Speed
			]dt
			[dd 
				" The predetermined initial value of speed that Mario's actions begin with. 
				$LF
			]dd
		]dd
	]dd
]dl
[p 
	[b 
		"Side Note: Speed Mechanics
	]b
	$LF
	"Certain Actions have 
	[em 
		"No Theoretical Limit
	]em
	" for the amount of Speed that can be obtained, which is discussed in the 
	[em 
		"Hyperspeed
	]em
	" section. 
	$LF
]p
[p 
	[b 
		"Example - Properties of a Speed Cap:
	]b
	$LF
	"This example features the Speed Cap for Crawling. 
	[a class=extlink href=https://imgur.com/a/ok0NcCT rel=nofollow 
		"Data of this can be viewed on this Imgur Post.
	]a
	" Initiation of crawling movement begins with 0 Speed, however, data of initiation is not shown on the graph. Mario's crawling speeds oscillate with a predetermined difference of ~1 Unit for each Sub-Cycle. Several Sub-Cycles are repeated until a value near the Speed Cap is reached. You can see Mario's average speed increases in a linear-like fashion per Cycle. Once a Cycle has been completed, a new Cycle will begin. Cycles are repeated until the Speed Cap of that action has been reached. For crawling, 1 Full Cycle is equivalent to 4 Cycles. This process will continue in the same manner indefinitely, unless the action changes, or is stopped.
	$LF
]p
[p 
	[b 
		"Two Types of Speed Caps:
	]b
	$LF
]p
[dl 
	[dt 
		"Absolute Speed Cap
	]dt
	[dd 
		" The absolute minimum/maximum value of speed that Mario obtains when performing a certain action. There are no conditions during this action that can exceed this value.
		$LF
		[dt 
			"Convergent Speed Cap
		]dt
		[dd 
			" The minimum/maximum value of speed that Mario's speed will converge to when performing an action.
			$LF
		]dd
	]dd
]dl
[p 
	[b 
		"Example - Two Types of Speed Caps:
	]b
	$LF
]p
[ul 
	[li 
		" 
		[b 
			"Absolute Speed Cap:
		]b
		" While holding A, when Mario lands in water from a falling state, he will water-plunge (landing in water) for a certain number of frames (the amount of frames depend on the type of falling state in which enters the water) and then he enters his slow swimming (flutter kick) state. (Entering his fast-swimming state is possible with correct timing of A presses.) If Mario has speeds >= 134 just before the first frame of water-plunging, ~1/4th of his original speed is retained. Water-pluging will cause his speed to decrease by 1 Unit per frame. After the water-pluging state is over, he enters his slow swimming state. No matter how much speed was retained, his speed is set to 27.5 Units. This is the Absolute Speed Cap for slow swimming. It's not possible to obtain any value higher than that. 
		$LF
	]li
	[li 
		" 
		[b 
			"Convergent Speed Cap:
		]b
		" This example continues from the Water-Pluging example above. Once Mario begins to swim slowly, his speed will also begin to decelerate. That's just how the mechanics of slow swimming work. His speed will decelerate from 27.5 Units to 12 Units. 12 Units is the Convergent Speed Cap for slow swimming. 
		$LF
	]li
]ul
[p 
	"Both 
	[b 
		"General Forward Movement & Long Jumping
	]b
	" are two examples of certain actions that have no theoretical limit for the amount of obtainable speed. For these actions, Mario will reach their Convergent Speed Caps respectively, and can 
	[b 
		"continue gaining speed
	]b
	" beyond them. (Remember: General Forward Movement refers to movement while Mario is in mid-air. If Mario was able to maintain his vertical position while in mid-air, he will continue gaining speed until 
	$LF
]p
[p 
	"In General Forward Movement & Long Jumping, the Maximum Acceleration Value Per Frame is 
	[b 
		"1.15 Units
	]b
	" prior to reaching the Convergent Speed Cap. Once the Speed Cap is reached, Mario's acceleration value changes from 
	[b 
		"1.15 Units
	]b
	" to 
	[b 
		"0.15 Units
	]b
	".
	$LF
]p
[p 
	[b 
		"Examples - All Possible Speed Caps:
	]b
	$LF
]p
[ul 
	[li 
		" Horizontal - Absolute Positive: 48 Units (Running Om Steep Slopes After Dive Rolling With Speeds >= 48)
		$LF
	]li
	[li 
		" Horizontal - Absolute Negative: -8 Units (Canceled Ledge Grab)
		$LF
	]li
	[li 
		" Horizontal - Convergent Positive: 32 Units (Running While On Fire)
		$LF
	]li
	[li 
		" Horizontal - Convergent Negative: -0.1 Units (Landing After Knockback From A Bonk)
		$LF
	]li
	[li 
		" Vertical - Absolute Positive: 65 Units (Triple Jump)
		$LF
	]li
	[li 
		" Vertical - Absolute Negative: -75 Units (Falling)
		$LF
	]li
	[li 
		" Vertical - Convergent Positive: N/A (Doesn't Exist)
		$LF
	]li
	[li 
		" Vertical - Convergent Negative: -75 Units (Falling)
		$LF
	]li
]ul
[p 
	[b 
		"Side Note - Absolute and Convergent Speed Caps for Vertical Velocity:
	]b
	$LF
	"Whenever Mario is not grounded, his vertical speed will naturally decelerate. This is done to mimic gravity within the game. Mario's Terminal Velocity for Falling is -75 Units. Falling is both an Absolute and Convergent Vertical Speed Cap. Mario will never fall faster than -75 Units Per Frame. This makes -75 Units an Absolute Vertical Speed Cap. If Mario was able to fall for an indefinite amount of time, and his initial vertical speed value was 0, his vertical speed would eventually converge to -75 Units. This makes -75 Units a Convergent Vertical Speed Cap. Gravity is also the reason behind there being no Convergent Vertical Positive Speed Cap. Mario will always decelerate when in mid-air, causing any positive vertical values of speed to decelerate into negative values.
	$LF
]p
[p 
	[em 
		"To-Do: List All Possible Speed Caps.
	]em
	$LF
	[em 
		"To-Do: List All Possible Acceleration Values.
	]em
	$LF
]p
[p 
	[b 
		"Predetermined Initial Speed:
	]b
	$LF
	"For nearly every action Mario has, there is an initial speed for them. There are actions that Mario can perform regardless if his speed is < 0, = 0, or > 0. There are actions that can even be performed beyond their Speed Cap. It's rather redundant to refer to every possible starting value of speed as an Initial Speed, therefore, the primary focus of Initial Speeds will be on Predetermined Initial Speeds. 
	$LF
]p
[p 
	[b 
		"Example - Predetermined Initial Speed:
	]b
	$LF
	"Mario's Predetermined Initial Speed for a Ground Pound is -50 Units. In other words, no matter the conditions, he will always start a Ground Pound with that speed. (Although he floats in the air for several frames, his speed becomes -50 Units on the frame after Z is pressed.) Predetermined Speeds cannot be manipulated.
	$LF
]p
[p 
	[em 
		"To-Do: List All Possible Predetermined Initial Speeds.
	]em
	$LF
]p
[h3 id=QuarterSteps(OrQuarterFrames) 
	" Quarter Steps (Or Quarter Frames)
	$LF
]h3
[p 
	"Mario's position is updated incrementally using his velocity (horizontal / vertical speed). These increments are called 
	[b 
		"Steps
	]b
	", and they behave differently when Mario:
	$LF
]p
[ul 
	[li 
		" Is on the 
		[b 
			"Ground
		]b
		$LF
	]li
	[li 
		" Is in the 
		[b 
			"Air
		]b
		$LF
	]li
	[li 
		" Is in 
		[b 
			"Water
		]b
		$LF
	]li
	[li 
		" Is 
		[b 
			"Hanging
		]b
		" or 
		[b 
			"Climbing
		]b
		$LF
	]li
]ul
[p 
	"When on the Ground or in the Air, these Steps typically occur 
	[b 
		"4
	]b
	" times per frame, and are commonly referred to as Quarter Steps or Quarter Frames.
	$LF
]p
[p 
	"Steps are also responsible for detecting collision with surfaces, updating Mario's referenced surfaces, and updating Mario's water level. However, the only exception is that Quarter Steps don't detect Warps. 
	$LF
]p
[h3 id=Geometry 
	" Geometry
	$LF
]h3
[p 
	"Below are several videos that cover intricate topics of the game: Walls, Floors, Ceilings, and Hitboxes.
	$LF
]p
[p 
	"For Walls, Floors, and Ceiling knowledge, refer to Walls, Floors, & Ceilings (Parts 1 & 2) - (By UncommentatedPannen)
	$LF
]p
[p 
	"For Hitbox knowledge and visualization, refer to Walls, Floors, & Ceilings (Part 3) & Wall Hitboxes - (By UncommentatedPannen).
	$LF
]p
[p 
	"For Walls, Floors, and Ceiling knowledge within Parallel Universes, refer to Walls, Floors, and Ceilings in Parallel Universes - (By Timestoppa)
	$LF
]p
[p 
	[b 
		"Definitions:
	]b
	$LF
]p
[dl 
	[dt 
		"Hitbox
	]dt
	[dd 
		" An invisible shape commonly used in video games for real-time collision detection. It is often a rectangle or circle (in 2D games) or cuboid, cylinder, or sphere (in 3D) that is attached to and follows a point on an object.
		$LF
		[dt 
			"Hurtbox
		]dt
		[dd 
			" A specific type of Hitbox that give damage to Mario when he touches them. Many enemies in the game have Hurtboxes.
			$LF
		]dd
	]dd
]dl
[p 
	"For additional information on Hitboxes, visit the 
	[a class=extlink href=https://ukikipedia.net/wiki/Hitbox rel=nofollow 
		"Hitbox page
	]a
	" on Ukikipedia.
	$LF
]p
[h4 id=Walls,Floors,&Ceilings(Part1)-(ByUncommentatedPannen) 
	" Walls, Floors, & Ceilings (Part 1) - (By UncommentatedPannen)
	$LF
]h4
[p 
	(youtube|v=UnU7DJXiMAQ|w=320|h=240|hidelink)
	$LF
]p
[h4 id=Walls,Floors,&Ceilings(Part2)-(ByUncommentatedPannen) 
	" Walls, Floors, & Ceilings (Part 2) - (By UncommentatedPannen)
	$LF
]h4
[p 
	(youtube|v=f1kbABTyeo8|w=320|h=240|hidelink)
	$LF
]p
[h4 id=Walls,Floors,&Ceilings(Part3)-(ByUncommentatedPannen) 
	" Walls, Floors, & Ceilings (Part 3) - (By UncommentatedPannen)
	$LF
]h4
[p 
	(youtube|v=kRCjVLqjST4|w=320|h=240|hidelink)
	$LF
]p
[h4 id=WallHitboxes-(ByUncommentatedPannen) 
	" Wall Hitboxes - (By UncommentatedPannen)
	$LF
]h4
[p 
	(youtube|v=a9fUV7uA2_s|w=320|h=240|hidelink)
	$LF
]p
[h4 id=Walls,Floors,andCeilingsinParallelUniverses-(ByTimestoppa) 
	" Walls, Floors, and Ceilings in Parallel Universes - (By Timestoppa)
	$LF
]h4
[p 
	(youtube|v=av42uJ-04A4|w=320|h=240|hidelink)
	$LF
]p
[h3 id=Objects 
	" Objects
	$LF
]h3
[p 
	"Objects are entities in the game that are not a part of the Course/Level Geometry. 
	$LF
]p
[p 
	"Most objects either interact with Mario and/or move in some way, act as stationary platforms or simply exist for aesthetic purposes. 
	$LF
]p
[p 
	"The maximum number of objects in a course is 
	[b 
		"240
	]b
	".
	$LF
]p
[p 
	"For additional information on Objects, refer to the 
	[a class=extlink href=https://ukikipedia.net/wiki/Object rel=nofollow 
		"Object page
	]a
	" on Ukikipedia.
	$LF
]p
[hr 
]hr
[h2 id=Glitches 
	" Glitches
	$LF
]h2
[h3 id=Hyperspeed 
	" Hyperspeed
	$LF
]h3
[p 
	"Hyperspeed is the nickname coined to abnormally large amounts of forward or negative speed. 
	$LF
]p
[p 
	"Hyperspeed is the result of a minor oversight by the game's programmers/developers: There is no reasonable limit on Mario's speed when it becomes positive or negative. If you continue to gain speed for long enough, Mario's speed, stored as a Float value, will eventually reach (-)229399772256808620000000000000000000000, then tick over to (-)1.#INF, where it will then stop increasing/decreasing.
	$LF
]p
[p 
	"As a result, Hyperspeed has spawned many renowned glitches within the game. The most well-known glitch is the BLJ.
	$LF
]p
[h3 id=BLJ(BackwardsLongJump) 
	" BLJ (Backwards Long Jump)
	$LF
]h3
[p 
	"See also: 
	[a class=intlink href=/GameResources/N64/SuperMario64/ListofBLJLocations 
		"List of BLJ Locations
	]a
	$LF
]p
[p 
	"The BLJ has puzzled many gamers and glitch finders ever since its discovery. It can be used in various ways. 
	$LF
	"BLJs can be done on certain slopes, stairways, and obstacles. To perform a BLJ, do a long jump with Mario facing away from the obstacle/stairway/slope but move backwards towards it (by holding the joystick in the opposite direction). Mario will collide with the obstacle/stairway/slope, leaving him on the ground and enabling him to backwards long jump again. Mario's speed becomes negative at this point, and BLJing repeatedly causes a negative speed increase of approximately 45-50% of Mario's currently stored speed at that time.Once the desired speed is reached, simply stop BLJing and Mario will zoom off backwards at an incredibly high speed. 
	$LF
]p
[p 
	"The key aspect of BLJs is Mario's capability of retaining negative speed temporarily. Eventually, the speed will increase back to 0, however there are a few frames within a BLJ in which his speed doesn't deplete instantly. These frames allow for repeated BLJs, thus increasing his speed.
	$LF
]p
[p 
	"You can use BLJs to:
	$LF
]p
[ul 
	[li 
		"Gain enough speed to pass through doors, such as:
		$LF
		[ul 
			[li 
				"Star doors
				$LF
			]li
			[li 
				"Doors requiring a key (although the room behind it might not load)
				$LF
			]li
		]ul
		"Zip backwards on the ground at very high speeds (if obstacles are avoided)
		$LF
	]li
	[li 
		"Jump over incredibly large gaps (since when over the air, Mario will have the same BLJ jumping physics but with the massive speed still present)
		$LF
	]li
	[li 
		"Pass through some loading zones, like the water wall needed to enter Dire Dire Docks
		$LF
	]li
	[li 
		"Pass through some types of walls (like the iron gates in Bob-omb Battlefield.)
		$LF
	]li
]ul
[h4 id=TypesofBLJs 
	" Types of BLJs
	$LF
]h4
[p 
	"While all BLJs work by the same principal, there are many different methods of performing them. There are numerous places where a BLJ can be performed throughout the game (virtually every level contains at least one), and it is unlikely that all such locations have been discovered.
	$LF
]p
[h4 id=StairBLJ 
	" Stair BLJ
	$LF
]h4
[p 
	"Stair BLJs were the first kind of BLJs to be discovered. A Stair BLJ consists of long jumping backwards onto stairs, which are basically tiny floors, which Mario can run directly over. BLJing on stairs works similar to Elevator BLJs because they both consist of Mario's jumps being interrupted allowing for more jumps to be performed, however the timing must be precise. 
	$LF
]p
[p 
	"Here's how they work: With a precisely timed BLJ, Mario's vertical position snaps to the next highest stair, ultimately reducing Mario's vertical speed to 0 (allowing him to repeatedly BLJ on the ground). When this occurs, his negative horizontal speed is temporarily stored, allowing him to repeat the process which results in a greater amount of negative speed.
	$LF
]p
[p 
	(youtube|v=7ppAz6W30fI|w=320|h=240|hidelink)
	$LF
]p
[h4 id=SlopeBLJ 
	" Slope BLJ  
	$LF
]h4
[p 
	"Slope BLJs are backwards long jumps on steep slopes. To find slopes with this property, locate slopes that permit Mario to stand perfectly still on them. He will not slide off of them.
	$LF
]p
[p 
	"Here's how it works: When BLJing on a steep slope, Mario's jump is interrupted by the steep ground. With no negative horizontal velocity, Mario's long jumps behave just like the developers intended. However, on steeper slopes, with a negative horizontal velocity, and with ground located behind Mario, the game has no choice but to force Mario's position backwards along with an increased vertical position. This process is repeatable, allowing for Slope BLJs to be performed.
	$LF
]p
[p 
	"A common Slope to BLJ on would be the slopes on the Castle Roof or the tan-colored slopes located by the cannon in the castle grounds.
	$LF
]p
[p 
	(youtube|v=A1HXoJvIfPo|w=320|h=240|hidelink)
	$LF
]p
[h4 id=ElevatorBLJ 
	" Elevator BLJ  
	$LF
]h4
[p 
	"Elevator BLJs are performed on elevators, but not every elevator permits an elevator BLJ! 
	$LF
]p
[p 
	"Here's how they work: BLJs are possible on rising elevators because an elevator's vertical velocity allows them to catch up to Mario as soon as he leaves the ground from a BLJ. This interrups the first jump and allows him to jump again, thus repeating the process of a BLJ. 
	$LF
]p
[p 
	"The elevators in Hazy Maze Cave and Bob-omb Battlefield are good places to practice. Elevators that's move in a horizontal fashion, such as the ones located in the volcano of Lethal Lava Land do not have the properties to initiate Elevator BLJs because their vertical velocity isn't fast enough.
	$LF
]p
[p 
	(youtube|v=mt9qu2R0Wao|w=320|h=240|hidelink)
	$LF
]p
[h4 id=LowCeilingBLJ 
	" Low Ceiling BLJ  
	$LF
]h4
[p 
	"These are probably the trickiest locations to find because some of them are invisible or are just plain easy to overlook.  However, walls above a floor can also act like ceilings. These walls don't necessarily have to be parallel with the ground in order for a Low Ceiling BLJ to be performed.
	$LF
]p
[p 
	"These types of BLJs demonstrate Mario's mechanics to their most basic properties. Mario has the capability of temporarily storing negative speed after a BLJ, and the speed can be increased with repeated BLJs.
	$LF
]p
[p 
	"The most common Low Ceiling BLJ is the one presented within the video (located in the Jolly Roger Bay room). It is literally a low ceiling. Either one of the Lobby BLJs in the main room of the castle are also Low Ceiling BLJs, but they utilize Invisible Wall Hitboxes which act as Low Ceilings.
	$LF
]p
[p 
	(youtube|v=_pBLMMzhsQY|w=320|h=240|hidelink)
	$LF
]p
[h4 id=SideBLJ 
	" Side BLJ  
	$LF
]h4
[p 
	"Side BLJs are very similar to stair BLJs, since both utilize the vertical position snapping mechanic in the game (mentioned earlier in Stair BLJs). A Side BLJ essentially consists of Mario repeatedly BLJing onto and off of a floor. 
	$LF
]p
[p 
	"Here's how it works: When Mario BLJs parallel to the stairs, Mario's vertical position snaps to the next highest stair (when the right angle is utilized). This also requires Mario's facing angle to be slightly askew with respect to the stairs, so that when he BLJs onto the next highest stair, his facing angle & negative speed allow him to drop back down to the original stair with which the Side BLJ was initiated with. As mentioned earlier, when Mario BLJs and snaps onto the next highest stair, his negative speed is temporarily stored, allowing him to repeat the process which results in a greater amount of negative speed.
	$LF
]p
[p 
	"Side BLJs can be performed on most stairs (due to some stairs having the appearance of stairs but are actually steep slopes) and on flat platforms which Mario can run directly over.
	$LF
]p
[p 
	(youtube|v=a0I1q9mnVAk|w=320|h=240|hidelink)
	$LF
]p
[h4 id=PauseBLJ 
	" Pause BLJ  
	$LF
]h4
[p 
	"Pause BLJing allows Mario to BLJ 30 times per in-game-second instead of 15. (SM64 is a 30 Frame-Per-Second Game) While BLJing, do the following sequence:
	$LF
]p
[ol 
	[li 
		"First Frame: (Start) + (Z) + (A)
		$LF
	]li
	[li 
		"Second Frame: 
		$LF
	]li
	[li 
		"Third Frame: (Start)
		$LF
	]li
	[li 
		"Fourth Frame: 
		$LF
	]li
	[li 
		"Fifth Frame: (Start) + (Z) + (A)
		$LF
	]li
	[li 
		"And so on! 
		$LF
	]li
]ol
[p 
	"Basically, the Start Menu acts like a frame buffer which allows more inputs to be performed within the game timer. These rules apply for BLJing as well. However, this only works on slopes, stairs, and elevators. It does not work with Side BLJs or (some) Low Ceiling BLJs.
	$LF
]p
[p 
	(youtube|v=V7Osa4wTWag|w=320|h=240|hidelink)
	$LF
]p
[h4 id=BLJto"Walk"onSlopes 
	" BLJ to "Walk" on Slopes
	$LF
]h4
[p 
	"Basically, get into close up Mario camera and BLJ somewhere. While in the process of running, press C^. This will cause Mario to go in the direction his back is facing until he hits a "wall" or runs out of speed. This enables Mario to do strange things such as flying up random slopes as long as a "wall" or super steep slope doesn't get in the way. This trick might be useful for improving some stars, and will be a great freerun trick.
	$LF
]p
[p 
	(youtube|v=BIuHBbsdO5k|w=320|h=240|hidelink)
	$LF
]p
[h3 id=Grinding 
	" Grinding
	$LF
]h3
[p 
	"Grinding is when Mario repeatedly falls off and continually catches a ledge, which leads to him being able to repeatedly dive along an edge or double jump. This can be both the fastest way for Mario to climb up some slopes, and occasionally a method of accessing normally inaccessible areas, such as the deserted city area in Wet Dry World while holding Chuckya. In order to do this Mario needs to be at a slight angle, preferably inwards facing the ledge; if he faces too far outwards, he may dive or jump off and not catch the ledge. He needs to land on the surface and be moving towards a seam; this will cause a collision detection where Mario can jump or dive again.
	$LF
]p
[p 
	(youtube|v=nOptWs2a_LA|w=320|h=240|hidelink)
	$LF
]p
[h3 id=WindHyperspeedGlitch 
	" Wind Hyperspeed Glitch
	$LF
]h3
[p 
	"This glitch works in THI and TTM. It requires a few minutes to get enough speed, so it isn't useful. To do this glitch, just get Mario stuck under a slope with the wind pushing him up.
	$LF
]p
[p 
	(youtube|v=KV_7EMIMdyE|w=320|h=240|hidelink)
	$LF
]p
[h3 id=Dustframes 
	" Dust frames
	$LF
]h3
[p 
	"Dust frames are present when you don't execute a dive on the first frame possible. It considerably slows down Mario. When doing optimized dives, you shouldn't see any dust; to do so, press "A" or "B" on the first frame possible when hitting the ground; Mario will recover as soon as possible, without leaving dust.
	$LF
]p
[h3 id=MIPS(TheRabbit) 
	" MIPS (The Rabbit)
	$LF
]h3
[p 
	"Though now an obsolete trick, MIPS was once necessary in any low% run. MIPS is a rabbit who appears in the basement once Mario collects 15 (and later, 50) stars; usually, Mario grabs him, takes his star, then goes on with the rest of the game. The rabbit was not meant to go anywhere outside the "green" part of the basement: Mario could not open a door and carry MIPS at the same time. However, a glitch was discovered that allowed Mario to merge MIPS with any "normal sized" door. This would put MIPS on both sides of the door, and Mario could jump out and grab him from the "wrong" side. When used with the entry to the part of the basement with the 30 star door, MIPS could actually be taken right up to that place. A second, similar glitch allowed Mario to get through the 30 star door: as Mario walked up to the side of the door using MIPS, letting him go while pressing Z gave Mario a sort of push, which put him on the other side of the door (an alternative, harder, and slower method was to let go of MIPS just before the door, and jump between it and the door, which would also push Mario through). This discovery led to the completion of the game with only 16 stars.
	$LF
]p
[p 
	(youtube|v=QnPpOQS7kCI|w=320|h=240|hidelink)
	$LF
]p
[h3 id=HSWK(HyperSpeedWallKicks) 
	" HSWK (Hyper Speed Wall Kicks)
	$LF
]h3
[p 
	"This trick is similar to BLJing, but instead of abusing Mario's unlimited negative speed, it utilizes another oversight by the game's programmers; unlimited forward speed via wall kicks. By wall kicking over and over again on the first frame possible, Mario gains speed. Repeatedly wall kicking for long periods of time can get you enough forward speed to pass through walls, star doors, and even the endless stairs!
	$LF
]p
[p 
	(youtube|v=Vlh0CA_aBwQ|w=320|h=240|hidelink)
	$LF
]p
[h3 id=ParallelUniverses 
	" Parallel Universes
	$LF
]h3
[p 
	"The ability to enter the moat door underwater comes from a glitch that has long been known, but poorly understood. Many players have noticed that by BLJing in certain spots, such as on an elevator, it's possible to get strange behavior to occur. On console, the game typically freezes, but on emulators and even Nintendo Virtual Console, Mario can warp to a weird invisible area. This behavior is often confused with Mario going out of bounds, but that's actually not the case. It turns out that in addition to the collision map present in the level, there are also an infinite number of invisible copies of the collision map spaced out in a 2D grid, extending to infinity. These copies, which we've been calling Parallel Universes (PUs), contain the exact same layout of floor and ceiling collision triangles as in the real map, but most everything else is missing. In addition to being invisible, there are no walls, no water, and most loaded objects are gone as well. Some things are still present however, like paintings in the castle.
	$LF
]p
[p 
	"The missing water is especially significant here, because the water is what prevents Mario from opening the moat door in the first place. Now, it's not enough to simply go to a PU, because even though the moat is empty, the door isn't there either. Instead, the empty moat allows Mario to approach the door in the real map simply by running into it. The problem with doing this in the real map is that the water prevents Mario from getting low enough to do this. There is only 1 frame to open the door underwater before he enters a swimming state, and landing from the air prevents him from opening a door for 3 frames due to dust, so he HAS to run into the door. The empty moat in PU allows us to do just that, but it's not a trivial task.
	$LF
]p
[p 
	"In order to access PUs and control Mario's position within them, it's important that Mario's speed is an integer multiple of 2^18, or 1 QPU (2^18 is equivalent to a point 4 PUs away, so we refer to it as 1 quadruple parallel universe -> QPU). Unfortunately, this speed can't be quickly obtained in the castle grounds becasue there's no good BLJ spot. There is another trick named hyperspeed walking that we're almost certain works, but it takes far too long to be useful in a speedrun. Instead, we make use of an obscure glitch in the Vanish Cap Under the Moat course. When Mario falls through the death barrier at the bottom of VCUtM, he spawns in water at the base of the waterfall in castle grounds. This is important because it preserves Mario's speed, which can be restored by pressing Z when exiting water (common SM64 TAS trick). Since VCUtM has elevators, we can build the necessary speed there, and use it outside of the castle! Getting a speed that works for both VCUtM and Castle Grounds was very tricky, however I'm not going to go into too much detail about that here.
	$LF
]p
[p 
	"Although going to PU has been known to pretty much always crash on console, we figured out a way to prevent it (Shoutout to Kyman for confirming this on console)! Simply switching R Camera to Fixed Camera Mode and holding R before going to PU is enough to prevent the crash. Because of this (and another glitch that will be revealed soon), we anticipate some significant improvements in multiple categories. Although the only proven way at this time to enter VCUtM with the moat raised is with hyperspeed flying (which requires 10 stars for the wing cap), we're working on a faster 0-star method that will hopefully make this strat viable for an updated 0 stars TAS. Even without this, a sub 5 0 star times is possible due to 
	[a class=extlink href=https://youtu.be/3GBTKKQJS6M rel=nofollow 
		"BitFS
	]a
	"!
	$LF
]p
[p 
	"Finally, for those who want to know why the PUs exist at all, it comes down to an integer overflow glitch. Even though Mario's position coordinates are floating point decimal numbers, not integers, the game's code typecasts them to signed short (16-bit) integers for the floor and ceiling collision calculations. Short ints have a limited value range: they can be as low as -32768 and no higher than 32767. So if a number goes outside of this range it will "overflow" back to the other end of the range. For example, if Mario's X coordinate was 40000.0, when converted to a short int it would become -25536, as being larger than 32767 causes it to wrap around to the negative side. So for the purposes of the floor and ceiling collision calcs, adding or subtracting an integer multiple of 2^16 to a position coordinate has no effect!
	$LF
]p
