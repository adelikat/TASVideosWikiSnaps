111
[div class=p 
	"The purpose of this page is to document information relevant to TASing for the SNES Super Mario World game.
	$LF
]div
[div class=p 
	"Because of the nature of this site, the focus here is on tricks that are nearly difficult to play in real play, but are useful in the making of tool-assisted speedruns. For some of the tricks, the 
	[a class=intlink href=/Glossary 
		"frame advance
	]a
	" feature in an emulator is required, and it's highly recommended using the 
	[a class=intlink href=/GameResources/SNES/SuperMarioWorld#UtilityLuaScripts 
		"utility script
	]a
	" to see positions, speeds, timers, etc.
	$LF
]div
[div class=p 
	"There are some tricks explained in a deep level of detail on 
	[a class=extlink href=http://smw-tas.blogspot.co.uk/ rel=nofollow 
		"Amaraticando's blog
	]a
	", with some explanations in Brazilian Portuguese. There are also blog posts by 
	[a class=extlink href=http://ism140.blog.shinobi.jp/Category/4/ rel=nofollow 
		"ISM
	]a
	" and 
	[a class=extlink href=http://shikipariko.blog.shinobi.jp/ rel=nofollow 
		"shikipaRiKo
	]a
	" regarding game mechanics and glitches, although they are in Japanese. Lastly, there's a 
	[a class=intlink href=/Forum/T/1571 
		"discussion thread here
	]a
	" with useful discoveries since 2004.
	$LF
]div
[div class=toc 
	[ul 
		[li 
			[a href=#Explanationoftermstobeusedonthispage 
				" Explanation of terms to be used on this page
				$LF
			]a
		]li
		[li 
			[a href=#Running/Sprinting 
				" Running / Sprinting
				$LF
			]a
			[ul 
				[li 
					[a href=#Explanationofoscillatingspeeds 
						" Explanation of oscillating speeds
						$LF
					]a
				]li
				[li 
					[a href=#Hoppingglitch 
						" Hopping glitch
						$LF
					]a
				]li
				[li 
					[a href=#6/5 
						" 6/5
						$LF
					]a
				]li
				[li 
					[a href=#CornerBoost 
						" Corner Boost
						$LF
					]a
				]li
				[li 
					[a href=#-1Trick 
						" -1 Trick
						$LF
					]a
				]li
				[li 
					[a href=#RopeBoost 
						" Rope Boost
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#Flying 
				" Flying
				$LF
			]a
			[ul 
				[li 
					[a href=#Oscillatingflightspeed 
						" Oscillating flight speed
						$LF
					]a
				]li
				[li 
					[a href=#Fastair-catching 
						" Fast air-catching
						$LF
					]a
				]li
				[li 
					[a href=#Keepingflightafterexitingapipe/enteringadoor 
						" Keeping flight after exiting a pipe / entering a door
						$LF
					]a
				]li
				[li 
					[a href=#Gainextraheightduringtakeoff 
						" Gain extra height during takeoff
						$LF
					]a
				]li
				[li 
					[a href=#Turnaroundwhileflying 
						" Turn around while flying
						$LF
					]a
				]li
				[li 
					[a href=#Controlflightspeedduringflight 
						" Control flight speed during flight
						$LF
					]a
				]li
				[li 
					[a href=#Divingquickly 
						" Diving quickly
						$LF
					]a
				]li
				[li 
					[a href=#Divingquicklywithoutslowdown 
						" Diving quickly without slowdown
						$LF
					]a
				]li
				[li 
					[a href=#RiseCancel 
						" Rise Cancel 
						$LF
					]a
				]li
				[li 
					[a href=#PerpetualAirCatch 
						" Perpetual Air Catch
						$LF
					]a
				]li
				[li 
					[a href=#Spinjumpflying 
						" Spin jump flying
						$LF
					]a
				]li
				[li 
					[a href=#Verticalscrolling 
						" Vertical scrolling
						$LF
					]a
				]li
				[li 
					[a href=#Flystucktotheceiling 
						" Fly stuck to the ceiling
						$LF
					]a
				]li
				[li 
					[a href=#Flyinginvincibility 
						" Flying invincibility
						$LF
					]a
				]li
				[li 
					[a href=#Flywithanitem 
						" Fly with an item
						$LF
					]a
				]li
				[li 
					[a href=#Releaseanitemandremainflying 
						" Release an item and remain flying
						$LF
					]a
				]li
				[li 
					[a href=#Catchlessair 
						" Catch less air
						$LF
					]a
				]li
				[li 
					[a href=#Keepingflightafterclimbing 
						" Keeping flight after climbing
						$LF
					]a
				]li
				[li 
					[a href=#Jumporflythroughinclines 
						" Jump or fly through inclines
						$LF
					]a
				]li
				[li 
					[a href=#Fastclimbing 
						" Fast climbing
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#Movementinwater 
				" Movement in water
				$LF
			]a
			[ul 
				[li 
					[a href=#1/1Swimming 
						" 1/1 Swimming
						$LF
					]a
				]li
				[li 
					[a href=#CornerBoost 
						" Corner Boost
						$LF
					]a
				]li
				[li 
					[a href=#Floatingthroughupwardslopes 
						" Floating through upward slopes
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#Yoshi 
				" Yoshi
				$LF
			]a
			[ul 
				[li 
					[a href=#DoubleYoshi 
						" Double Yoshi
						$LF
					]a
				]li
				[li 
					[a href=#EatCancel 
						" Eat Cancel
						$LF
					]a
				]li
				[li 
					[a href=#ItemSwap 
						" Item Swap
						$LF
					]a
					[ul 
						[li 
							[a href=#Variant#1:GoalPointSwap 
								" Variant #1: Goal Point Swap
								$LF
							]a
						]li
						[li 
							[a href=#Variant#2:YoshiLicksNothing 
								" Variant #2: Yoshi Licks Nothing
								$LF
							]a
						]li
						[li 
							[a href=#Variant#3:YoshiSacrifice 
								" Variant #3: Yoshi Sacrifice
								$LF
							]a
						]li
					]ul
				]li
				[li 
					[a href=#NullSprites 
						" Null Sprites
						$LF
					]a
				]li
				[li 
					[a href=#StunnedSprites 
						" Stunned Sprites
						$LF
					]a
					[ul 
						[li 
							[a href=#Stunning"unstunnable"sprites 
								" Stunning "unstunnable" sprites
								$LF
							]a
						]li
					]ul
				]li
				[li 
					[a href=#HoldingItemsonYoshi 
						" Holding Items on Yoshi
						$LF
					]a
				]li
				[li 
					[a href=#Yoshiflight 
						" Yoshi flight
						$LF
					]a
				]li
				[li 
					[a href=#SpringboardjumpingabusewithYoshi[2] 
						" Springboard jumping abuse with Yoshi
						[sup 
							"[
							"2
							"]
						]sup
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#Goingthroughsolidobjects 
				" Going through solid objects
				$LF
			]a
			[ul 
				[li 
					[a href=#LateralClip 
						" Lateral Clip
						$LF
					]a
				]li
				[li 
					[a href=#Passingthroughsolidyellowblocks(Smashola) 
						" Passing through solid yellow blocks (Smashola)
						$LF
					]a
				]li
				[li 
					[a href=#Passthroughfloors 
						" Pass through floors
						$LF
					]a
				]li
				[li 
					[a href=#Fasterfloatingspeed 
						" Faster floating speed
						$LF
					]a
				]li
				[li 
					[a href=#SurviveunderneathSmashers 
						" Survive underneath Smashers
						$LF
					]a
				]li
				[li 
					[a href=#CornerClip 
						" Corner Clip
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#Itemabuse 
				" Item abuse
				$LF
			]a
			[ul 
				[li 
					[a href=#JumpoffaP-Switch 
						" Jump off a P-Switch
						$LF
					]a
				]li
				[li 
					[a href=#LandonamidairP-switch 
						" Land on a midair P-switch
						$LF
					]a
				]li
				[li 
					[a href=#Springboardclippingabuse 
						" Springboard clipping abuse
						$LF
					]a
				]li
				[li 
					[a href=#Keyjumping 
						" Keyjumping 
						$LF
					]a
				]li
				[li 
					[a href=#Usingakeytoentermid-airpipes 
						" Using a key to enter mid-air pipes
						$LF
					]a
				]li
				[li 
					[a href=#Usingakeytopassthroughinvisiblecoinblocks 
						" Using a key to pass through invisible coin blocks
						$LF
					]a
				]li
				[li 
					[a href=#Hitablockwhilemovingdownwards 
						" Hit a block while moving downwards
						$LF
					]a
				]li
				[li 
					[a href=#Duplicatingblocks 
						" Duplicating blocks
						$LF
					]a
					[ul 
						[li 
							[a href=#Duplicationawayfromblocks 
								" Duplication away from blocks
								$LF
							]a
						]li
						[li 
							[a href=#Duplicatingablockontheground 
								" Duplicating a block on the ground
								$LF
							]a
						]li
						[li 
							[a href=#Newitemsfromoldblocks 
								" New items from old blocks
								$LF
							]a
						]li
						[li 
							[a href=#Duplicatingintoadragoncoin 
								" Duplicating into a dragon coin
								$LF
							]a
						]li
					]ul
				]li
			]ul
		]li
		[li 
			[a href=#Otherstuff 
				" Other stuff
				$LF
			]a
			[ul 
				[li 
					[a href=#PlatformBoost 
						" Platform Boost
						$LF
					]a
				]li
				[li 
					[a href=#Walljumping 
						" Walljumping
						$LF
					]a
				]li
				[li 
					[a href=#Enteringpipeswithoutground 
						" Entering pipes without ground
						$LF
					]a
				]li
				[li 
					[a href=#Fadeoutlag 
						" Fadeout lag
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#Utilityluascripts 
				" Utility lua scripts
				$LF
			]a
		]li
		[li 
			[a href=#Memoryaddresses 
				" Memory addresses
				$LF
			]a
		]li
		[li 
			[a href=#Footnotes 
				" Footnotes
				$LF
			]a
		]li
	]ul
]div
[div class= 
	[ul class=nav nav-tabs role=tablist 
		[li class=nav-item 
			[a class=active nav-link data-toggle=tab href=#tabs-997-0 
				"Movies
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-997-1 
				"TODO
			]a
		]li
	]ul
	[div class=tab-content 
		[div class=tab-pane active id=tabs-997-0 
			[div class=p 
				"To see these tricks used, you can watch any
				$LF
				"of these movies:
				$LF
			]div
			[ul 
				[li 
					" 
					(__wikiLink|/3019M|3019M)
					[br 
					]br
					$LF
				]li
				[li 
					" 
					(__wikiLink|/2926M|2926M)
					[br 
					]br
					$LF
				]li
				[li 
					" 
					(__wikiLink|/2307M|2307M)
					[br 
					]br
					$LF
				]li
				[li 
					" 
					(__wikiLink|/1868M|1868M)
					[br 
					]br
					$LF
				]li
				[li 
					" 
					(__wikiLink|/2784M|2784M)
					[br 
					]br
					$LF
				]li
				[li 
					" 
					(__wikiLink|/2639M|2639M)
					[br 
					]br
					$LF
				]li
				[li 
					" 
					(__wikiLink|/2967M|2967M)
					[br 
					]br
					$LF
				]li
				[li 
					" 
					(__wikiLink|/2317M|2317M)
					[br 
					]br
					$LF
				]li
			]ul
		]div
		[div class=tab-pane fade id=tabs-997-1 
			[div class=p 
				"Add:
				$LF
			]div
			[ul 
				[li 
					" A lot more tricks
					$LF
				]li
				[li 
					" Some simple SMV demonstrations of these tricks
					$LF
				]li
				[li 
					" Some more/updated animated GIFs
					$LF
				]li
			]ul
		]div
	]div
]div
[h2 id=Explanationoftermstobeusedonthispage 
	" Explanation of terms to be used on this page
	$LF
]h2
[ul 
	[li 
		" ← and → will be used for "left" and "right" on the directional pad.
		$LF
	]li
	[li 
		" All explanations on this page assume Mario is facing to the right. (→)
		$LF
	]li
	[li 
		" All explanations assume the Y button to be used for all purposes, at all times unless both X and Y need to be pressed.
		$LF
	]li
]ul
[dl 
	[dt 
		" Walking speed
	]dt
	[dd 
		" Mario's speed when holding →.
		$LF
		[dt 
			" Running speed
		]dt
		[dd 
			" Mario's speed when first holding → together with Y.
			$LF
			[dt 
				" Sprinting speed
			]dt
			[dd 
				" Mario's speed when holding → together with Y while the P-meter is is full.
				$LF
				[dt 
					" Flying speed
				]dt
				[dd 
					" Mario's top speed when flying with a cape.
					$LF
					[dt 
						" P-meter
					]dt
					[dd 
						" The value in 
						[a class=intlink href=/GameResources/SNES/SuperMarioWorld#MemoryAddresses 
							"$7E13E4
						]a
						" that increases as Mario runs. Once this reaches its 112 peak, Mario begins to sprint.
						$LF
						[dt 
							" Pixel
						]dt
						[dd 
							" One graphical "block" on the screen.  Used to determine Mario's position on screen.
							$LF
							[dt 
								" Subpixel
							]dt
							[dd 
								" A smaller unit of measure used in internal game calculations for a more precise measuring system. In this game, subpixels are measured in sixteenths of a pixel.
								$LF
							]dd
						]dd
					]dd
				]dd
			]dd
		]dd
	]dd
]dl
[hr 
]hr
[h2 id=Running/Sprinting 
	" Running / Sprinting
	$LF
]h2
[h3 id=Explanationofoscillatingspeeds 
	" Explanation of oscillating speeds
	$LF
]h3
[div class=p 
	"The algorithm for Mario's sprinting speed does not actually give him a constant speed.  Instead, his speed varies between five different values (48, 47, 48, 47, 49).  Releasing → will stop this oscillation on whatever speed Mario is traveling that frame.  By releasing → on the right frame while in mid-air, this oscillation will stop on a speed faster than Mario runs on average.  This trick is fully utilized with 
	[a class=intlink href=/GameResources/SNES/SuperMarioWorld#HoppingGlitch 
		"continuous jumping
	]a
	", as detailed below.
	$LF
]div
[div class=p 
	"Mario's running speed also oscillates (36, 35, 36, 35, 37).  So even in situations where there isn't enough space to run to sprinting speed, this technique can still be used to gain a bit of ground.
	$LF
]div
[h3 id=Hoppingglitch 
	" Hopping glitch
	$LF
]h3
[div class=p 
	"When traveling forward in mid-air after either (1) releasing → in mid-air as detailed above, or (2) releasing Y when flying, Mario will travel forward at his current speed until he touches the ground (if → is not pressed again), at which point he begins to slow down.  However, by jumping on the first frame allowed after touching the ground, Mario does not lose any speed.  Using this technique, jumping over and over through a level can be faster than running, or can allow traveling at flight speeds through terrain that may not be able to be flown through without stopping or slowing down.
	$LF
]div
[div class=p 
	"Other ways to quickly get up to speed in order to take advantage of this glitch include sliding, hitting an enemy that changes Mario's velocity, and entering a pipe cannon.
	$LF
]div
[h3 id=6/5 
	" 6/5
	$LF
]h3
[div class=p 
	"A way to gain some of the advantage of oscillating speeds without losing a full running meter is known as 6/5.  Since 
	[a class=intlink href=/GameResources/SNES/SuperMarioWorld#HoppingGlitch 
		"sprinting speed oscillates
	]a
	" every five frames, the trick is to jump, and while in the air, release → on the maximum speed for the maximum number of frames allowed so that pressing → together with Y for five frames will oscillate the speed back to the fastest value, refill the running meter to full, and consider the overall speed. 
	$LF
]div
[div class=p 
	"The pattern to fully optimize forward speed in mid-air while keeping a full P-meter is to release → for six frames, then press → together with Y for five frames, and repeat.  It was previously (erroneously) thought that eight frames of releasing was the most optimal way to improve forward speed (and thus, the trick was called "8/5"), but the speed of the frames when recharging the P-meter was not considered in this analysis.  Looking at average speeds, the 6/5 wins out.
	$LF
]div
[div class=p 
	[b 
		"Average speed using 6/5
	]b
	": (49 * 6 + (49 + 48 + 47 + 48 + 47) ) / 11 = 48.45454...
	[br 
	]br
	$LF
	[b 
		"Average speed using 8/5
	]b
	": (49 * 8 + (49 + 48 + 47 + 46 + 47) ) / 13 = 48.38462...
	$LF
]div
[div class=p 
	"Thus, when in the air, releasing → on the fastest speed for six frames, then holding → together with Y for five frames allows for the most optimal (though very slight) boost compared to running normally.  The pattern can be done multiple times before touching the ground, depending on the height of the jump.  The only requirement is that every frame that releases → has Mario in the air, so jumps must be timed correctly to allow this.
	$LF
]div
[h3 id=CornerBoost 
	" Corner Boost
	$LF
]h3
[div class=p 
	"There is a 5 pixels distance between Mario's 'hand' hibox, and Mario's head hitbox. So, in every block, there is a space 5 pixels long in which Mario's head can't touch the block, but Mario's 'side' can. If during Mario's run he stays in this area for 2 frames, it is possible to perform a corner boost. It happens when Mario jumps against the bottom left corner of the block which a Y speed of at least 50 (or 58 if Mario is big, and 57 if Mario is flying). It pushes Mario 1 pixels forward, which is about 1/3 of a frame if Mario has sprinting speed. Sometimes, it is worth losing some subpixels before reaching the block, to adequate Mario's position to the corner boost.
	$LF
]div
[h3 id=-1Trick 
	" -1 Trick
	$LF
]h3
[div class=p 
	"When accelerating from a stop, Mario's speed increases in this sequence: 0 1 3 4 6 7 9 and continues. If you go the opposite direction first by pressing ← for 1 frame, Mario's speed increases in this sequence instead: 0 -2 3 5 6 8 9 and continues. This is because Mario decelerates faster than he accelerates, so the "extra" deceleration pushes Mario forward a little bit. This method sometimes saves a frame but 
	[em 
		"does not
	]em
	" work in slippery levels.
	$LF
]div
[h3 id=RopeBoost 
	" Rope Boost
	$LF
]h3
[div class=p 
	"When going past a rope mechanism, such as those found in Cheese Bridge Area or Way Cool, pressing ↑ for one frame gives Mario a horizontal boost without actually grabbing onto the rope.  The amount of boost given depends on when Mario grabs the rope, but generally it's best to grab the rope as early as possible.  Mario can also jump off of these ropes, but jumping too early can negate the boosting effect. This trick can be combined with other circumstances to 
	[a class=intlink href=/Forum/P/464958#464958 
		"prevent spawning a sprite
	]a
	".
	$LF
]div
[hr 
]hr
[h2 id=Flying 
	" Flying
	$LF
]h2
[h3 id=Oscillatingflightspeed 
	" Oscillating flight speed
	$LF
]h3
[div class=p 
	"When flying, pressing → accelerates Mario. However, once top speed is reached, the speed begins to oscillate, repeating its cycle of (51, 50, 49, 48, 47) every 5 frames. If → is released when this value is at its highest, Mario keeps that speed instead.
	$LF
]div
[h3 id=Fastair-catching 
	" Fast air-catching
	$LF
]h3
[div class=p 
	"When flying, pressing ← for one frame, releasing it for one frame, and pressing it again on the third frame will catch air faster than the normal 11 frames required when holding ← continuously.
	$LF
]div
[h3 id=Keepingflightafterexitingapipe/enteringadoor 
	" Keeping flight after exiting a pipe / entering a door
	$LF
]h3
[div class=p 
	"When Mario makes a jump while sprinting, the game sets the takeoff meter to 80, and decrements it by 1 each frame until it returns to zero. When this value is positive, a few things react differently.  First off, the screen will scroll up to follow Mario.  Secondly, if Mario is caped, he will be able to ascend until this value reaches zero, at which point he will catch air and start flying.
	$LF
]div
[div class=p 
	"Since this value decrements at this fixed speed, it's possible to land immediately after taking off, jumping again without running to speed, and still catch air.  This happens because the value is not reset when Mario lands on solid ground, and during the second jump, the value is still positive.
	$LF
]div
[div class=p 
	"A useful application of this is possible due to the fact that this value does not decrement between rooms that are connected by pipes or doors. In this way, Mario can begin flying at the end of one room, enter a pipe or door, and simply jump in the next room to enter flight mode, as long as Mario's vertical speed reaches a non negative value before the takeoff meter hits 1.
	$LF
]div
[h3 id=Gainextraheightduringtakeoff 
	" Gain extra height during takeoff
	$LF
]h3
[div class=p 
	"Normally, liftoff should be kept as short as possible, because the sooner the liftoff phase ends, the sooner Mario can reach his top flying speed of 51. However, sometimes even higher heights are desired near takeoff.
	$LF
]div
[div class=p 
	"To accomplish this, release Y after reaching top speed at the beginning of flight, and start holding Y again a bit later, during the fall. Because the takeoff meter is still above zero, Mario will re-gain flight, and depending on how far he's fallen, will gain quite a bit of height without any horizontal slowdown. This can also be used to avoid obstacles in Mario's flight path just after liftoff.
	$LF
]div
[h3 id=Turnaroundwhileflying 
	" Turn around while flying
	$LF
]h3
[div class=p 
	"The X and Y buttons have the same function in this game.  One must be held to remain flying, so pressing the other will cause Mario to spin.  Sometimes the spin will not turn Mario around, but by varying the frame Mario spins on, this can be manipulated.  Also, while spinning, you can control Mario's speed with ← and →. Keep in mind that Mario can only catch air if he is moving in the direction that he is facing.
	$LF
]div
[h3 id=Controlflightspeedduringflight 
	" Control flight speed during flight
	$LF
]h3
[div class=p 
	"When flying, pressing ← and B will slow Mario down without changing his animation.  Press B repeatedly to slow Mario down more.
	$LF
]div
[h3 id=Divingquickly 
	" Diving quickly
	$LF
]h3
[div class=p 
	"When flying, putting Mario into diving animation will increase the amount of air he can catch.  A way to take advantage of the added height without having to waste time diving is to press → every other frame.  After five presses of forward, Mario will be in swoop animation very quickly, and can lift off very high.  Also, you will still have fast flying because → was pressed for 5 frames, which cycles the speed back to its original value.  The only speed loss will be the few frames that Mario's speed oscillated due to pressing →.
	$LF
]div
[h3 id=Divingquicklywithoutslowdown 
	" Diving quickly without slowdown
	$LF
]h3
[div class=p 
	[b 
		"This trick only works when Mario is flying and facing left
	]b
	". Normally when diving, each frame that forward is pressed will affect Mario's horizontal speed. However, when flying to the left, pressing ← and → simultaneously will behave just like pressing ← only, except that horizontal speed is not affected.  When traveling to the left, this means Mario can get into a dive animation without losing any speed.  When traveling to the right (but facing left), Mario can enter a left-facing dive animation while still traveling to the right, which sets the next air-catch to be higher.
	$LF
]div
[h3 id=RiseCancel 
	" Rise Cancel 
	$LF
]h3
[div class=p 
	"When flying, making Mario face the opposite direction will not allow him to catch air. By abusing the cape-spin, we can regain Mario's potential to catch air by facing the opposite direction during a rise. For example, assume Mario is flying to the right. After a dive, perform a cape-spin in such a way that Mario faces to the left. If you catch air during this spin, he will rise anywhere from a tiny amount to a large amount depending on when you pressed the input to catch air. Afterwards, Mario will be able to catch air again either by spinning during the rise, or just retaining the potential to catch air. Mario's direction, 7E0076, is most useful to watch here.
	$LF
]div
[h3 id=PerpetualAirCatch 
	" Perpetual Air Catch
	$LF
]h3
[div class=p 
	"Another way to cancel a rise is to make Mario's x velocity non-positive (or positive when facing to the left). Let's assume Mario is facing to the right. During the rise, pressing ← and B on alternate frames will cause him to lose momentum quickly. With good timing, he can catch air but regain the potential to catch air again soon after by making his momentum positive. This can be repeated indefinitely by gaining air, cancelling it, gaining etc. repeatedly using good timing. This is useful for such circumstances as when we want to gain lots of air very quickly, such as after the door in Donut Ghost House (normal exit). A good demonstration of this is in 
	[a class=extlink href=http://www.youtube.com/watch?v=gPUVnQcR81o rel=nofollow 
		"gocha's demo
	]a
	".
	$LF
]div
[h3 id=Spinjumpflying 
	" Spin jump flying
	$LF
]h3
[div class=p 
	"By using the A button to start flight instead of B, Mario will spin-jump very high, following the physics of initial flight while holding an item or riding Yoshi.  An advantage of this is that Mario is still running full speed after landing.  A disadvantage is that this technique is not horizontally faster than running.  
	[a class=intlink href=/GameResources/SNES/SuperMarioWorld#6%205 
		"6/5
	]a
	" can be done while using this technique to move faster horizontally.
	$LF
]div
[div class=p 
	"Mario can get boosts in mid-air several times if A is released and pressed again after he begins to drop.
	$LF
]div
[h3 id=Verticalscrolling 
	" Vertical scrolling
	$LF
]h3
[div class=p 
	"When Mario is flying (after takeoff), the screen will not follow him upwards if he continues to catch air.  This normally is not too much of a problem, but there also is a limit to how high Mario can go above the screen.  There are three ways to get the screen to begin scrolling upwards:
	$LF
]div
[ul 
	[li 
		" Touch the ground for more than 1 frame
		$LF
	]li
	[li 
		" Snag the wall (but do not 
		[a class=intlink href=/GameResources/SNES/SuperMarioWorld#Walljumping 
			"walljump
		]a
		")
		$LF
	]li
	[li 
		" Grab onto a 
		[a class=intlink href=/GameResources/SNES/SuperMarioWorld#RopeBoost 
			"rope
		]a
		"/vine/fence 
		$LF
	]li
]ul
[div class=p 
	"The last technique has the advantage of 
	[a class=intlink href=/GameResources/SNES/SuperMarioWorld#KeepingFlightAfterClimbing 
		"keeping flight after jumping off
	]a
	".
	$LF
]div
[h3 id=Flystucktotheceiling 
	" Fly stuck to the ceiling
	$LF
]h3
[div class=p 
	"If Mario can catch air very close to the ceiling, continue holding ← and Mario will stick to the ceiling, flying along it as long as the environment allows.  This can only happen by either bouncing off an enemy to the ceiling, or by a lower ceiling that Mario can approach from above.
	$LF
]div
[h3 id=Flyinginvincibility 
	" Flying invincibility
	$LF
]h3
[div class=p 
	"Whenever Mario gets hit while flying, he loses his flying state and is invincible for a short time (shorter than normal hit-invincibility).  At this point, flying speed can be kept by immediately starting the 
	[a class=intlink href=/GameResources/SNES/SuperMarioWorld#HoppingGlitch 
		"hopping glitch
	]a
	".  If flying again is required, Mario will have to run back up to sprinting speed. 
	$LF
]div
[h3 id=Flywithanitem 
	" Fly with an item
	$LF
]h3
[div class=p 
	"While flying, guide Mario into an item that can be carried, and he will automatically grab it.  Although he'll no longer have the flying animation, flying physics are still maintained.
	$LF
]div
[div class=p 
	"This technique can be extended to spinning while in mid-air to hit a Koopa with Mario's cape, and grabbing the resulting shell in mid-air without losing speed.
	$LF
]div
[h3 id=Releaseanitemandremainflying 
	" Release an item and remain flying
	$LF
]h3
[div class=p 
	"Releasing Y while carrying an item will drop it or kick it, depending on the object.  Releasing Y during flight will normally cause Mario to stop flying, but there are certain points of flight that are safe to drop an item by releasing Y for one frame and also remain flying afterwards.  Examples include the first few frames after catching air, and the very top height of an air-catch, as the animation frame changes.
	$LF
]div
[h3 id=Catchlessair 
	" Catch less air
	$LF
]h3
[div class=p 
	"By pressing X around the same frame that Mario catches air, the height of the arc will be substantially less.  This can be useful in very specific circumstances, for example, when flying through a very small area.  The exact frame of pressing X can vary depending upon unknown factors.
	$LF
]div
[h3 id=Keepingflightafterclimbing 
	" Keeping flight after climbing
	$LF
]h3
[div class=p 
	"When flying by a vine, chain, or fence, press ↑ to grab it.  Hold Y when jumping off the object to continue flying.  The direction you face after jumping off the vine is manipulatable by jumping off at different frames.
	$LF
]div
[h3 id=Jumporflythroughinclines 
	" Jump or fly through inclines
	$LF
]h3
[div class=p 
	[img class=embedright src=http://media.tasvideos.org/smbtricks/smw_stairfly.gif 
	]img
	$LF
	"Stairs and other 45-degree inclines are a one way platform at an angle. The game decides if Mario should land on it based only on his vertical speed. So, if Mario runs into the stairs while moving upwards, the game will determine that he is passing through them in the correct direction. This can be done without a cape by running and spin-jumping at the right time. With a cape, it can be done by flying through at a more shallow angle than the stairs.
	$LF
]div
[h3 id=Fastclimbing 
	" Fast climbing
	$LF
]h3
[div class=p 
	"Pressing ↑ and B together every other frame will climb vines and chains at the same speed as the initial ascent of flight.  The drawback is that the screen does not begin following Mario.  This can be circumvented by landing on solid ground for more than one frame while above the screen - then the game will scroll upward until it catches up to him, and he can continuously climb above it quickly.
	$LF
]div
[hr 
]hr
[h2 id=Movementinwater 
	" Movement in water
	$LF
]h2
[h3 id=1/1Swimming 
	" 1/1 Swimming
	$LF
]h3
[div class=p 
	"Even Mario's swimming speed oscillates - between 15 and 17 (or 31 and 33 if carrying an item underwater).  This can be abused by pressing back and forth when reaching the highest oscillation point.  This way, swimming speed can be improved from (15 + 15 + 16 + 16 + 17) / 5 = 15.8 subpixels per frame, to (15 + 17) / 2 = 16 subpixels per frame.  The technique works similarly when swimming with an item.
	$LF
]div
[h3 id=CornerBoost 
	" Corner Boost
	$LF
]h3
[div class=p 
	"When swimming underneath a square corner, swimming upward against it can push Mario forward, reaching a destination 2 frames sooner (per boost).  This trick does not apply when carrying an item underwater, but it can be done simultaneously with 
	[a class=intlink href=/GameResources/SNES/SuperMarioWorld#1%201Swimming 
		"1/1 swimming
	]a
	".
	$LF
]div
[h3 id=Floatingthroughupwardslopes 
	" Floating through upward slopes
	$LF
]h3
[div class=p 
	"By holding an item and floating up at an angle shallower than the angle of the slope, it can be passed through in the same way as an 
	[a class=intlink href=/GameResources/SNES/SuperMarioWorld#JumpOrFlyThroughInclines 
		"incline above water
	]a
	".
	$LF
]div
[div class=p 
	"This can also be done without an item; however, it requires greater precision, and can only be done on every 16-pixel "block" boundary of the slope.
	$LF
]div
[hr 
]hr
[h2 id=Yoshi 
	" Yoshi
	$LF
]h2
[div class=p 
	"The amount of glitches involving Yoshi is so vast, that a seperate section seems more appropriate. When riding Yoshi, the gameplay changes dramatically too.
	$LF
]div
[h3 id=DoubleYoshi 
	" Double Yoshi
	$LF
]h3
[div class=p 
	"Normally, two Yoshis cannot be anywhere in the level at the same time. However, if their eggs are spawned at the same time, the game skips the check to see if there is an already spawned Yoshi. However, one Yoshi (the one that spawned first) will be invisible. Riding an invisible Yoshi has some advantages:
	$LF
]div
[ul 
	[li 
		" If we jump off of him, we will jump from his 
		[em 
			"original
		]em
		" position. This can be used to pass through solid objects.
		$LF
	]li
	[li 
		" If the normal Yoshi despawns with an item in his mouth, the invisible Yoshi will become visible holding a null sprite. More on this soon.
		$LF
	]li
	[li 
		" If the normal Yoshi despawns, the invisible Yoshi will appear one tile below where Mario is standing, so we can fall through the ground.
		$LF
	]li
]ul
[div class=p 
	"The exact mechanics of multiple Yoshis are explained in a deeper level in this video by nathanisbored: https://www.youtube.com/watch?v=UGJ6-CcPDHg
	$LF
]div
[h3 id=EatCancel 
	" Eat Cancel
	$LF
]h3
[div class=p 
	"If Yoshi has a sprite on his tongue and receives damage while doing it, the sprite will move to where it was on his tongue when he got hit. This gives the sprite weird properties, such as losing vertical interaction with ground and being unable to harm the player.
	$LF
]div
[div class=p 
	"In the case of berries, we can eat-cancel them without taking a hit by timing a turn as it hits his tongue or by licking other sprite one frame after licking the berry.
	$LF
]div
[h3 id=ItemSwap 
	" Item Swap
	$LF
]h3
[div class=p 
	"It is strongly advised to use the 
	[a class=intlink href=/GameResources/SNES/SuperMarioWorld#UtilityLuaScripts 
		"utility script
	]a
	" to assist in performing this bug.
	$LF
]div
[div class=p 
	"SMW allows for 12 sprites to be on screen at any time. Traditionally, we call these the first and second 
	[b 
		"divisions
	]b
	". Division one is sprite slot #00 to slot #09. The second division is therefore #10 and #11.
	$LF
]div
[div class=p 
	"Typically, with a few exceptions, sprites in SMW are spawned in descending order into the first division. So the first sprite spawned will go into #09, the next into #08. Once these despawn, their slots are freed, and sprites will 'compete' for the highest slot. The only time slots are not freed are with permanant sprites, such as P-Switches, Keys, etc. In the first division, no sprites will replace others with the exception of the goal point. Note: Some level options will have the first division as low as 6 or so sprites. One such example is Yoshi's Island 1. Be careful when trying to fill sprite slots; if in doubt, check the Sprite Header settings in Lunar Magic.
	$LF
]div
[div class=p 
	"The second division is reserved only for berries, sprites coming out of the reserve item box, or items out of blocks. If this division is full, sprites will go into the first division if there is free slots. If there is not, they will begin to replace sprites top-down.
	$LF
]div
[div class=p 
	"I have briefly mentioned two ways to swap sprites, but this has no benefit at all until Yoshi is introduced. If you observe a sprite being swapped, all that happens is that the original vanishes. If the original is on Yoshi's tongue, the new sprite will zip to Yoshi's tongue too. 
	[small 
		"todo: explain why.
	]small
	$LF
]div
[h4 id=Variant#1:GoalPointSwap 
	" Variant #1: Goal Point Swap
	$LF
]h4
[div class=p 
	"Because of the nature of the goal point, as mentioned before, it will replace sprites in the first division if there no free slots. Thus, we only have to fill slots #00 - #09 with permanent sprites (or, have the sprites all on screen at once: very difficult) and take a sprite with us near the goal. In the case of Yoshi's Island 2, we can 
	[a class=intlink href=/GameResources/SNES/SuperMarioWorld#EatCancel 
		"eat-cancel
	]a
	" berries turning them into sprites while taking a shell with us. If Yoshi licks the shell as the goal point spawns, the goal point will warp to Yoshi's tongue. With luck, Mario will hit the goal as opposed to Yoshi swallowing it. Similarly, we can also item swap sprites that take the second division when they replace each other.
	$LF
]div
[h4 id=Variant#2:YoshiLicksNothing 
	" Variant #2: Yoshi Licks Nothing
	$LF
]h4
[div class=p 
	"Sometimes, the item on Yoshi's tongue can despawn, leaving Yoshi having nothing on it. Then, a sprite taking that slot will zip to Yoshi's tongue. This can be done in the following ways:
	$LF
]div
[ol 
	[li 
		" Sprite collected by Mario: If Yoshi holds a sprite coin or a power-up on his tongue and it is collected by Mario, Yoshi will temporarily hold nothing.
		$LF
	]li
	[li 
		" 
		[em 
			"Double-eating
		]em
		": Timing Yoshi's tongue when passing a coin sprite or power-up means we can collect the sprite, but Yoshi will have it in a 'nulled' state on his tongue. If a sprite takes that slot, it will zip to Yoshi's tongue. Incidentally, if we do not spawn a new sprite in that slot, we get the coin or power-up twice. This method has the advantage of being much faster. In the case of powerups we must only fill the second division. In the case of sprite coins, they are already in the first.
		$LF
	]li
	[li 
		" Licking a naked koopa as it enters a shell: The naked koopa sprite is despawned when it enters a shell, allowing Yoshi to have nothing in his tongue if he licks it right before.
		$LF
	]li
	[li 
		" Licking a throw block as it is destroyed: The throw block sprite disappears immediately when it is destroyed, allowing Yoshi to have nothing in his tongue if he licks it right before.
		$LF
	]li
	[li 
		" Despawning  sprite in Yoshi's tongue: If a sprite goes below the death line while it is on Yoshi's tongue, it will despawn, and Yoshi stays with nothing in his tongue. If we don't perform the item swap, the item reappears on Yoshi's mouth, but it also states as 'despawned', which means it will respawn if you go back to its spawn point. So, it is possible to duplicate itens with this technique.
		$LF
	]li
	[li 
		" Eating a sprite as Yoshi dies in Lava: If Yoshi is sinking in Lava with his tongue spit out, he won't retract it. So, you will have time to kill whatever sprite is on Yoshi's tongue, and an item swap will occur after another sprite takes that slot, as long as Yoshi hasn't despanwed yet.
		$LF
	]li
]ol
[h4 id=Variant#3:YoshiSacrifice 
	" Variant #3: Yoshi Sacrifice
	$LF
]h4
[div class=p 
	"Due to Yoshi's properties, if he despawns and a new sprite takes his slot the frame after, the item will zip to underneath or near Mario. The easiest way to do this is to drop Yoshi into a pit as a new sprite spawns. This will only work with certain sprites.
	$LF
	"If a new room is loaded, Mario recovers Yoshi. It might have a different color (such as gray or golden) and its graphics can also be glitchy.
	$LF
]div
[div class=p 
	"This glitch has multiple interesting consequences and variants which are explained in this video by nathanisbored: https://www.youtube.com/watch?v=2fLOZrQzDnQ
	$LF
]div
[h3 id=NullSprites 
	" Null Sprites
	$LF
]h3
[div class=p 
	"Sometimes, there are circumstances where Yoshi will have a null sprite in his mouth (literally nothing), but is still referenced by the sprite table as ID #FF. It is difficult to word but Yoshi will have 
	[em 
		"nothing
	]em
	" in his mouth but still have 
	[em 
		"something
	]em
	", because ths swallow timer is reset. This can be performed two ways:
	$LF
]div
[ol 
	[li 
		" As mentioned before, if we spawn two Yoshis and despawn the first one with an item in its mouth, the new one will become visible with a null sprite.
		$LF
	]li
	[li 
		" Double tongue method. Yoshi can stick out his tongue twice, and a sprite caught on the first lick will then be nullified when he sticks out his tongue the second time. This can be performed in two ways. Firstly, by using Double Yoshi glitch and despawning the first Yoshi with an item in its mouth. Secondly, by sticking out Yoshi's tongue when Mario collects a powerup, a Yoshi egg hatches, or during a room transition.
		$LF
	]li
]ol
[div class=p 
	"When spitting out a null sprite, it has some strange effects and advantages:
	$LF
]div
[ul 
	[li 
		" Whatever sprite is in ID #3 will be have the bits "Being eaten" set and "Interaction with Objects" cleared. Thus, the sprite #3 will be able to pass through ground, walls and ceilings, and will lose interaction with other sprites. This can be useful in the case of Yoshi or Springboard; if we land on them as they pass through the ground, Mario will move with them.
		$LF
	]li
	[li 
		" Whatever sprite is in ID #1 will have all of its bits cleared (with the exception of bit 0, depending on Yoshi facing direction). This can cause weird effects such as infinitely usable P-Switches, or burnable sprites that normally aren't.
		$LF
	]li
]ul
[div class=p 
	[small 
		"todo: spitting out on platforms...
	]small
	$LF
]div
[h3 id=StunnedSprites 
	" Stunned Sprites
	$LF
]h3
[div class=p 
	"A sprite has a few states it can be in. See 
	[a class=extlink href=http://www.smwiki.net/wiki/RAM_Address/$7E:14C8 rel=nofollow 
		"SMWiki
	]a
	". One of these sprite states is a "stunned" state. Normally, this is the state the game uses for the sprites Mario can carry. For example, a green shell and a green koopa are the same sprite, but in different states: the koopa is in the normal routine, and the shell, in the stunned state. Same for goombas, and bob-ombs. Sprites that Mario can always carry, such as keys and P-witches, are always in the stunned state, and get glitchy if you make them to enter in the normal routine. 
	$LF
]div
[div class=p 
	"There is an important timer called 'stun timer', which is used by different sprites for different purposes. It's called this way because koopas use this timer to spawn naked koopas. When you jump on a koopa or hit it with the cape, not only it goes to the stunned state (turns into a shell), but it also sets the stun timer to some value (a small value in the first case, and a big value in the second). This timer decreases in 1 every other frame. When it reaches 0, the naked koopa is spawned from the shell. Normally, it only happens with koopas, but the developers coded that every time a sprite is in the stunned state, and its stun timer reaches 0, another sprite is spawned from it. The stun timer is used for many other purposes, for example, for a stomped sprite to disappear. So, if an item can be held on Yoshi's mouth and is stompable, and we eat it at the same time Yoshi stomps it, Yoshi will be able to drop back the item in the stunned state, but it will also have its stun timer set to a non zero value, and decreasing every other frame. When it hits 0, a sprite will be spawned from it. This allows one to spawn infinite naked koopas from a non-red shell. In the case of P-Switch, we can spawn fish.
	$LF
]div
[h4 id=Stunning"unstunnable"sprites 
	" Stunning "unstunnable" sprites
	$LF
]h4
[div class=p 
	"Some sprites aren't meant to be stunned and thus have no stun routine. We can force a sprite into its stunned state via double-tongue glitch. In this circumstance three steps must be followed:
	$LF
]div
[ol 
	[li 
		" Perform double-tongue glitch.
		$LF
	]li
	[li 
		" On the first lick, catch a sprite that remains in Yoshi's mouth: a koopa/shell, P-Switch, key or springboard.
		$LF
	]li
	[li 
		" On the second lick, catch a sprite you wish to be stunned and 
		[a class=intlink href=/GameResources/SNES/SuperMarioWorld#EatCancel 
			"take damage while it is on Yoshi's tongue
		]a
		", so that Yoshi doesn't swallow it. Then, Yoshi's mouth will be full, and despite the second sprite doesn't seem to be in his mouth, the game actually considers it is. It can be dropped out of Yoshi's mouth, even if it isn't meant to stay there, and if it's stun timer is non zero when that happens, it will overflow the SpriteKoopasSpawn table and spawn some sprite. The sprite it will spawn depends only of what sprite you stunned.
		$LF
	]li
]ol
[div class=p 
	"The stun timer of a sprite can be set to a non zero value in various ways. One way is stomp on it. The dust/cloud it leaves behind uses the stun timer to determine how long to display the effect. Some sprites use the timer for other things, such as when they first spawn, or for an action to take. For example, the goal point uses the timer to determine when to change direction.
	$LF
]div
[div class=p 
	"We can get very weird effects with this glitch. The most useful cases are:
	$LF
]div
[ol 
	[li 
		" Naked Blue Sliding Koopa: When stunned, will spawn a Koopa Kid. This Koopa Kid, when killed, will end the level.
		$LF
	]li
	[li 
		" Pokey: When stunned, will spawn a Goal Point. To get the goal point we must go to X Position between 0 and 15 and Y Position = 0.
		$LF
	]li
	[li 
		" Dino Rhino: When stunned, will spawn a keyhole. A Dino Torch will cause the game to crash, however.
		$LF
	]li
	[li 
		" Fish that moves horizontally and Para-bomb: When stunned, these sprites will spawn a Reznor. If Reznor spawns into slot 7, the level can be finished: the following RAM memory addresses values - $7E:1520, $7E:1521, $7E:1522 and $7E:1523 - must sum up to 4. Each sprite use these addresses in a different way, many of them for 'vertical directions'. The 4 cited addresses are used by sprites between slots 4 and 7. 
		$LF
	]li
	[li 
		" Diggin' Chuck: When stunned, will spawn a Clappin' Chuck. It's known as the 'orb chuck', as if you get Yoshi to eat this chuck via item swap as Fire Mario, you will get an orb in the item box.
		$LF
	]li
]ol
[div class=p 
	"There are other useful sprites to stun. For example, a boo creates a Koopa Kid, and an eerie creates a keyhole. You can't benefit from this in the original Super Mario World because Yoshi can't enter ghost houses, but in some ROM hacks, he can. Also, some sprite, when stunned, will create some sprite from this list: for example, stunning the rock of a Diggin' Chuck provides a sliding blue koopa, which provides the Koopa Kid. So, sometimes a double stun or even a triple stun can be useful. There are too many 'patches' to put them all here, but you can see what each sprite provides, when stunned, in this table on Pastebin: http://pastebin.com/cyS0DVh2
	$LF
]div
[h3 id=HoldingItemsonYoshi 
	" Holding Items on Yoshi
	$LF
]h3
[div class=p 
	"If an item is in a slot lower than Yoshi, it is possible to hold it while riding Yoshi. This is performed by landing on him at the same time an item is grabbed. If you perform a double grab in the frame you mount Yoshi, then you will carry 2 items while riding him. Since there's no limit of springboards Mario can carry, you can carry many of them on Yoshi too. They also exclusively don't need to be in a lower slot than Yoshi. 
	$LF
]div
[h3 id=Yoshiflight 
	" Yoshi flight
	$LF
]h3
[div class=p 
	"Normally, flying while riding Yoshi is the same as flying while holding an item - just a long jump, and the same oscillating speeds as sprinting. However, it is possible to trick the game into applying regular flight physics while riding Yoshi.  Whenever Mario lands on Yoshi during flight, Yoshi flight is started.  However, in most cases, Yoshi touches the ground a couple frames later.  If air is caught immediately after landing, or something else keeps Yoshi from touching the ground, the flight can continue.
	$LF
]div
[div class=p 
	"One problem is that although pressing ← will catch air, it will also turn Yoshi and Mario around.  In order to take advantage of the flight like normal, 
	[a class=intlink href=/GameResources/SNES/SuperMarioWorld#FastAirCatching 
		"fast air-catching
	]a
	" must be used, followed by turning back around.  You can even get a 
	[a class=intlink href=/GameResources/SNES/SuperMarioWorld#DivingQuicklyWithoutSlowdown 
		"dive
	]a
	" (without the animation) to catch a large amount of air by using ← and → simultaneously, while facing left.
	$LF
]div
[div class=p 
	"Ways to initiate Yoshi flight:
	$LF
]div
[ul 
	[li 
		" Fly onto Yoshi while maintaining a rise.
		$LF
	]li
	[li 
		" While flying under a ceiling on Yoshi, dismount in mid-air
		$LF
	]li
	[li 
		" Fly onto Yoshi and an enemy or shell at the same time
		$LF
	]li
	[li 
		" Fly onto Yoshi while he is placed on the very edge of a platform
		$LF
	]li
	[li 
		" Fly onto Yoshi while he is placed on a purple triangle
		[a id=r1 
		]a
		[sup 
			"[
			[a href=#1 
				"1
			]a
			"]
		]sup
		" (the kind that let you run up the wall)
		$LF
	]li
]ul
[h3 id=SpringboardjumpingabusewithYoshi[2] 
	" Springboard jumping abuse with Yoshi
	[a id=r2 
	]a
	[sup 
		"[
		[a href=#2 
			"2
		]a
		"]
	]sup
	$LF
]h3
[div class=p 
	"If Yoshi licks a springboard on the same frame he steps on it, he will soar upwards very fast, ignoring most boundaries.  The speed and duration of takeoff can be tweaked with the ↑ and B buttons. Normally, this is done either in the first or in the last frame that Yoshi's tongue is out of Yoshi's mouth. However, it's possible to get extra height by performing this when it's in the second or second last frame, which requires much more precision and some horizontal speed.
	$LF
]div
[hr 
]hr
[h2 id=Goingthroughsolidobjects 
	" Going through solid objects
	$LF
]h2
[h3 id=LateralClip 
	" Lateral Clip
	$LF
]h3
[div class=p 
	"Mario's hitbox with blocks is not a rectangle. Instead, it is made of small dots of interaction. If Mario is big and riding Yoshi, the distance between the dot that corresponds to Mario's shoulder and the dot that corresponds to Mario's leg is slightly bigger then the size of a block. Thus, as there are no other dots between his legs and shoulder, with a precise Y position manipulation, it is possible to go through a block horizontally. This boosts Mario forward a bit.
	$LF
]div
[h3 id=Passingthroughsolidyellowblocks(Smashola) 
	" Passing through solid yellow blocks (Smashola)
	$LF
]h3
[div class=p 
	[img class=embedright src=http://media.tasvideos.org/smbtricks/smw_smashola.gif 
	]img
	$LF
	"This is a strange glitch that lets Mario move very rapidly downwards though the solid yellow blocks that spin.  When his cape hits the blocks at his side, they begin to spin.  However, the game only allows 4 spinning blocks at once in memory, so when a fifth block is caused to start spinning, it immediately stops the first. By placing Mario over the block that stops, the game will start to push him downwards at a very fast rate.  The glitch can continue itself in a domino-effect.  As Mario moves downwards, he's still spinning, which causes new blocks to start spinning, which stops others, and the glitch continues.
	$LF
]div
[div class=p 
	"While doing this glitch, Mario is considered overlapping with the blocks, so in addition to moving down quickly, he will move to the left slowly as well.  Also, if Mario goes too far below the screen, he can die.
	$LF
]div
[h3 id=Passthroughfloors 
	" Pass through floors
	$LF
]h3
[div class=p 
	"In very specific instances, ducking in a space that is too small for full-size Mario and spin-jumping can push Mario through the floor.  See Valley of Bowser 2 for an example of this.
	$LF
]div
[h3 id=Fasterfloatingspeed 
	" Faster floating speed
	$LF
]h3
[div class=p 
	"Pressing ← and → simultaneously while Mario has a P-Balloon or is riding a Lakitu cloud will send him to the right oscillating at speeds much faster than the normal speed of travel for these objects (52, 51, 50, ..., 38, 37, 36).
	$LF
]div
[div class=p 
	"This form of travel will partially ignore many barriers, and so it can be used to go through some solid objects.
	$LF
]div
[div class=p 
	"In a cloud, Mario can jump out at any time, so a speed of 52 can be achieved and kept using the 
	[a class=intlink href=/GameResources/SNES/SuperMarioWorld#HoppingGlitch 
		"hopping glitch
	]a
	".
	$LF
]div
[h3 id=SurviveunderneathSmashers 
	" Survive underneath Smashers
	$LF
]h3
[div class=p 
	"In some castles, it's possible to be crushed by a Layer 3 Smasher (sprite $89) and not take damage.  As the Smasher lowers onto Mario, alternate between pressing A and B every frame, and Mario will be in a constant state of jumping without being hit.
	$LF
]div
[h3 id=CornerClip 
	" Corner Clip
	$LF
]h3
[div class=p 
	""Corner Clip" refers to moving through solid ground, which can only be done when ground meets at a corner (either a convex or concave corner; the former is described here). This bug requires an X speed of at least 49 and a Y speed of at least 33. 
	$LF
]div
[div class=p 
	"A speed of 49 means Mario's subpixel moves his position like 0.00 -> 3.10 -> 6.20 -> 9.30, because 49 speed just means 49 subpixels per frame. Under these conditions a corner clip is not possible because to pass through the ground, a 4 pixel change is required. Eventually, this cycle reaches 36.e0 -> 39.f0 -> 
	[b 
		"43.00
	]b
	". The subpixel wraps around, increasing Mario's position by 
	[b 
		"4
	]b
	" pixels.
	$LF
]div
[div class=p 
	"One way to set this up is to stand against the left side of the block (assuming we will be flying to the right), and noting down Mario's x-position. So, we'll say a block is at x-position 42. This means Mario's x position must move such as (with a speed of 49):
	$LF
]div
[div class=p 
	"38.d0 -> 41.e0 -> 44.f0 -> 
	[b 
		"48.00
	]b
	$LF
]div
[div class=p 
	"Mario moves two pixels inside the block (44.f0) then is boosted 4 pixels further (48.00). Knowing this, we need only to adjust the x speed/position of Mario as he approaches the corner, in such a way that his speed follows this pattern, and then adjust y position too, until the bug succeeds. This bug has the advantage of, not only allowing access to places much faster, but also boosting Mario some pixels while he is inside the block. Typically, a corner clip on a single block will save anything up to 3 pixels or so.
	$LF
]div
[div class=p 
	"In the above example, if Mario moves faster than 49 speed then the 44.f0 can take on other subpixel values. At a speed of 51, this part can be either 44.d0, 44.e0 or 44.f0, because the next frame will increase subpixel by 3 (51 subpixels/frame = 3 pixels 3 subpixels).
	$LF
	"Because of how 'pressure' works in this game (when inside a block, Mario is pushed to the left), corner clips to the right can not be consecutive. If there are two horizontal blocks in a row, they cannot both be passed. This is not the case when travelling to the left (see 
	[a class=extlink href=https://www.youtube.com/watch?v=hboxJ_z-P7E&t=5m1s rel=nofollow 
		"Donut Secret House of the current "warps" TAS
	]a
	").
	$LF
]div
[hr 
]hr
[h2 id=Itemabuse 
	" Item abuse
	$LF
]h2
[h3 id=JumpoffaP-Switch 
	" Jump off a P-Switch
	$LF
]h3
[div class=p 
	[img class=embedright src=http://media.tasvideos.org/smbtricks/smw_pswitch.gif 
	]img
	$LF
	"By jumping at the exact frame Mario lands on a P-Switch, it can be used as a platform to jump off.  Note that the Y button cannot be held on this frame - otherwise, Mario will just pick up the P-Switch again.  Because of that, either the P-meter must be recharged after landing, or the jump should be followed by the 
	[a class=intlink href=/GameResources/SNES/SuperMarioWorld#HoppingGlitch 
		"hopping glitch
	]a
	".
	$LF
]div
[h3 id=LandonamidairP-switch 
	" Land on a midair P-switch
	$LF
]h3
[div class=p 
	"When dropping a P-switch, it will travel with the same horizontal speed that Mario does. To land on it, Mario must slow down a bit before releasing it, and then, regain the lost speed to catch up. The best way to do this is by dropping the P-switch at a low point of Mario's 
	[a class=intlink href=/GameResources/SNES/SuperMarioWorld#ExplanationOfOscillatingSpeeds 
		"oscillating sprinting speed
	]a
	", and then using the high point of the oscillation to catch up to it in mid-air.
	$LF
]div
[div class=p 
	"Note: When dropping the P-Switch, it must be dropped, not 
	[em 
		"kicked
	]em
	". This is done by not holding → when releasing Y.
	$LF
]div
[h3 id=Springboardclippingabuse 
	" Springboard clipping abuse
	$LF
]h3
[div class=p 
	"When Mario jumps on a springboard to compress it, the game ignores most kill triggers, including walls.  In addition to this, Mario will remain "stuck" to the spring while it is compressing.  With these properties, Mario can go through solid objects
	[a id=r3 
	]a
	[sup 
		"[
		[a href=#3 
			"3
		]a
		"]
	]sup
	" by throwing a springboard in the air, and jumping on it as it falls past a corner.
	$LF
]div
[h3 id=Keyjumping 
	" Keyjumping 
	$LF
]h3
[div class=p 
	[img class=embedright src=http://media.tasvideos.org/smbtricks/smw_keyjump.gif 
	]img
	$LF
	"The key is a unique object - it can be stood on, and it cannot be destroyed. Because of these two properties, it can be jumped off of, and also carried with in the same jump. When near a wall, this process can be repeated:
	$LF
]div
[ol 
	[li 
		" Jump with the key.
		$LF
	]li
	[li 
		" Drop the key near the peak of the jump (but not at the very peak).
		$LF
	]li
	[li 
		" Land on the key in mid-air (without holding Y).
		$LF
	]li
	[li 
		" Jump off of the key, and start holding Y on the same frame.
		$LF
	]li
	[li 
		" You will now have jumped in mid-air and be holding the key.  Repeat.
		$LF
	]li
]ol
[div class=p 
	"By this process, walls can be scaled and jumping can pretty much go anywhere, as long as a key is handy.  Note that if the key has too much downward momentum, it can be jumped off of, but not carried at the same time.
	$LF
]div
[h3 id=Usingakeytoentermid-airpipes 
	" Using a key to enter mid-air pipes
	$LF
]h3
[div class=p 
	"The key can be used as a temporary platform to fool the game into thinking that there is ground near the pipe, and enter it in mid-air.  It's also possible to bring the key with you through the pipe by holding Y on the frame before heading into the pipe.
	$LF
]div
[h3 id=Usingakeytopassthroughinvisiblecoinblocks 
	" Using a key to pass through invisible coin blocks
	$LF
]h3
[div class=p 
	"By standing on the key as it bounces, the height can lift Mario up far enough to jump above invisible coin blocks that would otherwise appear when jumped from the ground.
	$LF
]div
[h3 id=Hitablockwhilemovingdownwards 
	" Hit a block while moving downwards
	$LF
]h3
[div class=p 
	"If Mario passes though the corner of a block enough, the game will think he is far enough inside of it that it gets hit.
	$LF
]div
[h3 id=Duplicatingblocks 
	" Duplicating blocks
	$LF
]h3
[div class=p 
	"By throwing a carriable enemy or an item at a block while close to it, we can duplicate a block to the side, upwards, or upwards-diagonally. For this to occur, the projectile must have an x velocity of 0, a y velocity of at least 97 and it must go into the block at least 7 pixels from the bottom. The direction in which the item is forced out of the block determines how the block will be duplicated; if the item goes into the block by 15-16 pixels from the bottom, the block is duplicated upwards. If the item goes into the block by 7-10 pixels from the side, then the block is duplicated to sideways; if both conditions are met, the block will be duplicated upwards diagonally.
	$LF
]div
[h4 id=Duplicationawayfromblocks 
	" Duplication away from blocks
	$LF
]h4
[div class=p 
	"When we cannot get close to a block, certain conditions allow us to duplicate a block to the side by throwing an item upwards. After throwing up an item, its y velocity moves in the sequence: -112 -109 -106 -103 -100 -97 -94, so there remains only 7 frames in which it can go into the block by 7 pixels after it gets thrown. The following table shows when you should throw up an item to get block duplication; distance means “how far an item is from the block”, and subpixel “subpixel of the item”. Note that an item follows mario while he is holding it, and also that after he releases it there is a 1-frame delay on the item's following mario.
	$LF
]div
[table 
	[tbody 
		[tr 
			[th 
				"Distance
			]th
			[td 
				"0
			]td
			[td 
				"7
			]td
			[td 
				"13
			]td
			[td 
				"14
			]td
			[td 
				"20
			]td
			[td 
				"26
			]td
			[td 
				"27
			]td
			[td 
				"33
				$LF
			]td
		]tr
		[tr 
			[th 
				"Subpixel
			]th
			[td 
				"00-F0
			]td
			[td 
				"00-C0
			]td
			[td 
				"D0-F0
			]td
			[td 
				"00-60
			]td
			[td 
				"70-D0
			]td
			[td 
				"E0-F0
			]td
			[td 
				"00-10
			]td
			[td 
				"20
				$LF
			]td
		]tr
	]tbody
]table
[h4 id=Duplicatingablockontheground 
	" Duplicating a block on the ground
	$LF
]h4
[div class=p 
	"Occasionally, a block desired to be duplicated is on the floor. Such situations do not allow for an item to be thrown upwards to duplicate it. In this circumstance, we can duplicate a turn block by dropping an item while it stops turning, in such a way so it bounces off the ground inside the block. See 
	[a class=extlink href=http://dehacked.2y.net/microstorage.php/info/266580473/smw-dupblock.smv rel=nofollow 
		"ISM's Demo
	]a
	".
	$LF
]div
[h4 id=Newitemsfromoldblocks 
	" New items from old blocks
	$LF
]h4
[div class=p 
	"The game differentiates certain items by the block's horizontal position in the level.  For example, blue P-switches and gray P-switches are actually the same object in the game, but determined by an odd/even horizontal position of the question block which contains it.  Thus, by duplicating a block to the side with a p-switch inside, it will give a P-switch of the other color.
	$LF
]div
[div class=p 
	"An interesting item-group abused by this trick is the group which contains keys, p-balloons, and yoshi wings.  See Super Demo World's Crystal Star World level in the short run for an example of this.
	$LF
]div
[div class=p 
	"Yoshi Wings ↔ P-Balloon ↔ Shell ↔ Key ↔ Yoshi Wings
	$LF
]div
[h4 id=Duplicatingintoadragoncoin 
	" Duplicating into a dragon coin
	$LF
]h4
[div class=p 
	"If the block duplication glitch is used over half of a dragon coin and Mario collects the remaining half of the dragon coin afterward, the part of the coin the block was duplicated on will become a key/wings/balloon/shell block.
	$LF
]div
[div class=p 
	"This happens because of how the block IDs were set up in the coding of the game (see the "Direct MAP16 Access" pages in Lunar Magic). Dragon coins are set up to change to tile 25 (essentially a block of nothingness) of whatever page the tiles are on. Because the bottom half becomes a tile on MAP16 page 0x1 rather than 0x0 when you duplicate into it, it turns into tile 125 instead, which happens to be the key/wings/balloon/shell block.
	$LF
]div
[hr 
]hr
[h2 id=Otherstuff 
	" Other stuff
	$LF
]h2
[h3 id=PlatformBoost 
	" Platform Boost
	$LF
]h3
[div class=p 
	"Horizontal boosts can be achieved from line guided and hammer bros' platforms, such as the ones found in Donut Plains 3, Donut Plains 4, Star World 4 and Gnarly.  Hopping onto the platform will boost Mario to the left or right a bit. The amount of distance boosted depends on the amount of pixels covered by the platform in the frame Mario touches it.
	$LF
	"If Mario is 6/5ing and runs thought the whole platform, he will be boosted much more, since all the displacement of the platform will be converted as a boost to Mario. Which this method, Mario can also get boosts in the rotating platforms in Yoshi's Island 3.
	$LF
]div
[h3 id=Walljumping 
	" Walljumping
	$LF
]h3
[div class=p 
	"Walljumping happens when Mario jumps towards a wall, and his foot catches the wall, stops his falling speed, and allows him to jump again in mid-air.  In order to pull off a walljump, Mario needs at least a speed of 33 going toward a wall, and must run into the wall at exactly a block boundary (every 16 pixels).  If Mario "catches" the wall, then conditions are good for a walljump - simply press jump a couple frames before he snags it.
	$LF
]div
[div class=p 
	"The wall catch happens when Mario moves 3 pixels inside the wall (it's the same principle of the corner clip, but it requires a 3 pixels displacement instead of 4). If you RAM watch Mario's position, you will see that most of the times in which a wall catch happens he moves only 2 pixels inside the wall. That happens because the wall immediately pushes Mario out in 1 pixel, but the wall jump is still possible in this condition.
	$LF
]div
[h3 id=Enteringpipeswithoutground 
	" Entering pipes without ground
	$LF
]h3
[div class=p 
	"By "catching" the wall at the right spot, the same way the wall is caught when performing a 
	[a class=intlink href=/GameResources/SNES/SuperMarioWorld#Walljumping 
		"walljump
	]a
	", the game treats that state as Mario standing on solid ground.  If this is done near a pipe that can be entered, but doesn't normally have ground below it (the higher pipe in Gnarly, for example), the pipe can be entered in mid-air.
	$LF
]div
[h3 id=Fadeoutlag 
	" Fadeout lag
	$LF
]h3
[div class=p 
	"There are three different kinds of fadeout.  The first is after completing a normal level, when the black circle closes around Mario.  The amount of lag here is based on Camera's Y position, the frame the circle starts closing, Mario's score, life count and coin count. The higher the sum of the digits of the score is, the bigger is the amount of lag.  By poking zero into the 2-byte RAM address 7E0F34, the score will be zero, and the lag given is the best that the particular exit can get. For the life and coin count, only the digit of the tens mater. The bigger they are, the bigger is the amount of lag.
	$LF
	"The way Camera's Y position interferes in lag is still not well known.
	$LF
]div
[div class=p 
	"The second is after completing a boss level.  This is not score dependent and can't be controlled or minimized, except for delaying the frame the boss is killed.
	$LF
]div
[div class=p 
	"The third is a secret exit.  This depends on some things: Mario's score, coin and life count; camera's position (especially Y position), the sprites on-screen (especially the ones around the edge of the keyhole at its largest position), Mario's position, Mario's 'state' (if he is jumping or not, ducking or not, etc. Jumping can slightly increase lag, spin jumping or cape spinning can significantly increase lag, and ducking can slightly decrease lag, except if it creates little 'smokes' in the ground.
	$LF
]div
[hr 
]hr
[h2 id=Utilityluascripts 
	" Utility lua scripts
	$LF
]h2
[div class=p 
	"A 
	[a class=intlink href=/LuaScripting 
		"Lua utility script
	]a
	" displays useful info such as velocity, position and P-meter on screen, can show the hitbox area of the player and enemies, allows more advanced cheats, and other tools that are useful to investigate the game. You will definitely need a lua script if you want to make a TAS of Super Mario World or one of its hacks. There are scripts available for all the allowed emulators of TASVideos:
	$LF
]div
[table 
	[tbody 
		[tr 
			[th 
				"Script
			]th
			[th 
				"Emulator
			]th
			[th 
				"Description
			]th
			[th 
				"Author
			]th
		]tr
		[tr 
			[td 
				[a class=extlink href=https://github.com/rodamaral/smw-tas rel=nofollow 
					"smw-tas
				]a
			]td
			[td 
				"lsnes and Snes9x
			]td
			[td 
				"Many options, some cheats and predictors. Shows info about many types of objects and has many kinds of hitboxes. It's the most complete lua script, and the recommended version for TASing.
			]td
			[td 
				"Amaraticando
			]td
		]tr
		[tr 
			[td 
				[a class=extlink href=https://github.com/brunovalads/smw-stuff/blob/master/SMW-BizHawk.lua rel=nofollow 
					"SMW-BizHawk
				]a
			]td
			[td 
				"BizHawk
			]td
			[td 
				[a class=extlink href=https://github.com/rodamaral/smw-tas rel=nofollow 
					"smw-tas
				]a
				" version for BizHawk, so has almost the same features. Suitable for TASing and research. - 
				[a class=extlink href=https://github.com/brunovalads/smw-stuff/blob/master/README.md rel=nofollow 
					"More info
				]a
			]td
			[td 
				"BrunoValads and Amaraticando
			]td
		]tr
		[tr 
			[td 
				[a class=extlink href=https://github.com/brunovalads/smw-stuff/blob/master/SMW-Utils-Script-Snes9x.lua rel=nofollow 
					"SMWUtils
				]a
			]td
			[td 
				"Snes9x
			]td
			[td 
				"Displays info about the player, sprites, item box and timers. Has various cheats. It's an incremented version of 
				[a class=extlink href=https://github.com/gocha/gocha-tas-legacy/blob/master/Scripts/SMWUtils.lua rel=nofollow 
					"gocha's script
				]a
				".
			]td
			[td 
				"gocha, Mister and BrunoValads
			]td
		]tr
		[tr 
			[td 
				[a class=extlink href=http://bin.smwcentral.net/u/18906/smwplayer_display.lua rel=nofollow 
					"SWMPlayer_display
				]a
			]td
			[td 
				"Snes9x
			]td
			[td 
				"Similar to SMWUtils, with different displacement of info. Has walljump predictor.
			]td
			[td 
				"ShadowDragon121
			]td
		]tr
		[tr 
			[td 
				[a class=extlink href=http://pastebin.com/raw/DgVn8cEA rel=nofollow 
					"SMW Atlas
				]a
			]td
			[td 
				"lsnes
			]td
			[td 
				"Displays offscreen objects to make an 
				[a class=extlink href=https://www.youtube.com/watch?v=4ieh4TtbvDc rel=nofollow 
					"atlas-encode
				]a
				". You might need to increase the amount of RAM that can be used by Lua for this.
			]td
			[td 
				"Masterjun
			]td
		]tr
	]tbody
]table
[hr 
]hr
[h2 id=Memoryaddresses 
	" Memory addresses
	$LF
]h2
[div class=p 
	"This is a list with the most useful Super Mario World memory addresses. You can find the whole RAM map on 
	[a class=extlink href=https://www.smwcentral.net/?p=nmap&m=smwram rel=nofollow 
		"SMWCentral
	]a
	".
	$LF
]div
[table 
	[tbody 
		[tr 
			[th 
				"Address
			]th
			[th 
				"Description
				$LF
			]th
		]tr
		[tr 
			[td 
				"7E007B (1-byte signed)
			]td
			[td 
				"Player x speed, in subpixels/frame
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E007D (1-byte signed)
			]td
			[td 
				"Player y speed, in subpixels/frame
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E0094 (2-byte)
			]td
			[td 
				"Player x position (pixel)
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E13DA (1-byte)
			]td
			[td 
				"Player x sub-pixel
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E0096 (2-byte)
			]td
			[td 
				"Player y position (pixel)
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E13DC (1-byte)
			]td
			[td 
				"Player y sub-pixel
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E13E4 (1-byte)
			]td
			[td 
				"P-meter
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E149F (1-byte)
			]td
			[td 
				"Takeoff Meter
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E1462 (2-byte)
			]td
			[td 
				"Camera x position
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E1464 (2-byte)
			]td
			[td 
				"Camera y position
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E0076 (1-byte)
			]td
			[td 
				"Player direction
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E0019 (1-byte)
			]td
			[td 
				"Powerup status
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E0077 (1-byte)
			]td
			[td 
				"Player blocked status
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E0100 (1-byte)
			]td
			[td 
				"Game mode (possible values 
				[a class=extlink href=http://old.smwiki.net/wiki/RAM_Address/$7E:0100 rel=nofollow 
					"here
				]a
				")
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E0013 (1-byte)
			]td
			[td 
				"Frame counter
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E0014 (1-byte)
			]td
			[td 
				"Effective frame counter
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E148D (2-byte)
			]td
			[td 
				"RNG
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E14C8 (12-byte)
			]td
			[td 
				"Sprite status table (possible values 
				[a class=extlink href=http://old.smwiki.net/wiki/RAM_Address/$7E:14C8 rel=nofollow 
					"here
				]a
				")
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E009E (12-byte)
			]td
			[td 
				"Sprite ID table (possible values 
				[a class=extlink href=https://smwspeedruns.com/index.php/Sprites rel=nofollow 
					"here
				]a
				")
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E14E0 (12-byte)
			]td
			[td 
				"Sprite x position table, high byte
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E00E4 (12-byte)
			]td
			[td 
				"Sprite x position table, low byte
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E14F8 (12-byte)
			]td
			[td 
				"Sprite x sub-pixel table
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E14D4 (12-byte)
			]td
			[td 
				"Sprite y position table, high byte
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E00D8 (12-byte)
			]td
			[td 
				"Sprite y position table, low byte
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E14EC (12-byte)
			]td
			[td 
				"Sprite y sub-pixel table
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E00B6 (12-byte)
			]td
			[td 
				"Sprite x speed table, in subpixels/frame
				$LF
			]td
		]tr
		[tr 
			[td 
				"7E00AA (12-byte)
			]td
			[td 
				"Sprite y speed table, in subpixels/frame
				$LF
			]td
		]tr
	]tbody
]table
[hr 
]hr
[h2 id=Footnotes 
	" Footnotes
	$LF
]h2
[div class=p 
	"[
	[a id=1 
	]a
	[a href=#r1 
		"1
	]a
	"]
	": 
	[a class=intlink href=/Users/Profile/skamastaG 
		"skamastaG
	]a
	" says these look like watermelons.
	[br 
	]br
	$LF
	"[
	[a id=2 
	]a
	[a href=#r2 
		"2
	]a
	"]
	": This trick can also be referred to as "Dinosoar" (Dino-soar, hyphen optional).  It's a play on words. - 
	[a class=intlink href=/Users/Profile/JXQ 
		"JXQ
	]a
	[br 
	]br
	$LF
	"[
	[a id=3 
	]a
	[a href=#r3 
		"3
	]a
	"]
	": "Objects" refers to sprite-objects - blocks that sprites can go through, but Mario cannot, such as a message box.
	[br 
	]br
	$LF
]div
