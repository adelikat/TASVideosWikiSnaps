15
[div class= 
	[ul class=nav nav-tabs role=tablist 
		[li class=nav-item 
			[a class=active nav-link data-toggle=tab href=#tabs-17-0 
				"Memory map
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-17-1 
				"Lua
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-17-2 
				"Dumps
			]a
		]li
	]ul
	[div class=tab-content 
		[div class=tab-pane active id=tabs-17-0 
			[p 
				"RAM
				$LF
			]p
			[pre 
				"$ffa172 - camera x  
				$LF
				"$ffa174 - camera y
				$LF
				"$ffa1d4 - RNG
				$LF
				"$fffc2a - config pointer. loads events for puppy love
				$LF
				"$fffc9a - reserved config pointer
				$LF
				"$fffc7b - puppy toss position. 0 causes 3 bounces, 2 causes 1 bounce.
				$LF
				"$fffc87 - puppy counter
				$LF
				"$fffc88+offset - speeds for puppies, offset = puppy counter
				$LF
			]pre
			[p 
				"ROM 
				$LF
			]p
			[pre 
				"$25d482 - puppy speed table
				$LF
				"$275fea-$277b79 - approximate limits of puppy config table
				$LF
				$LF
			]pre
		]div
		[div class=tab-pane fade id=tabs-17-1 
			[pre 
				[code class=language-lua 
					$LF
					"gui.register(function()
					$LF
					"	camx = memory.readword(0xffa172)
					$LF
					"	camy = memory.readword(0xffa174)
					$LF
					"	
					$LF
					"	Objects()
					$LF
					"	Bounce()
					$LF
					"end)
					$LF
					$LF
					"function Objects()
					$LF
					"	local base0 = 0xffa2ea
					$LF
					"	for i=0,0x23 do
					$LF
					"		local base = base0+i*0x6e
					$LF
					"		local id = memory.readbyte(base)
					$LF
					"		if id>0 and id~=0x82 then
					$LF
					"			local hp = memory.readbytesigned(base+1)
					$LF
					"			local x = memory.readword(base+2)-4096-camx
					$LF
					"			local y = memory.readword(base+4)-4096-camy
					$LF
					"			--local x = Clamp(x,0,310)
					$LF
					"			--local y = Clamp(y,0,214)
					$LF
					"			local dx = memory.readwordsigned(base+0x18)
					$LF
					"			local dy = memory.readwordsigned(base+0x1a)
					$LF
					"			local hitboxbase = memory.readlong(base+0x14)
					$LF
					"			local x1 = memory.readbyte(hitboxbase+2)
					$LF
					"			local x2 = memory.readbyte(hitboxbase+4)
					$LF
					"			local y1 = memory.readbyte(hitboxbase+3)
					$LF
					"			local y2 = memory.readbyte(hitboxbase+5)
					$LF
					"			--PostRngRoll(base,x,y)
					$LF
					"			if x1>0 and x2>0 and y1>0 and y2>0 then
					$LF
					"				local of = 124
					$LF
					"				x1 = x1+x-of
					$LF
					"				x2 = x2+x-of
					$LF
					"				y1 = y1+y-of
					$LF
					"				y2 = y2+y-of
					$LF
					"				gui.box(x1,y1,x2,y2,0,"green")
					$LF
					"			end
					$LF
					"			if hp>0 then
					$LF
					"				gui.text(x,y-2,hp,"green")
					$LF
					"			end
					$LF
					"		end
					$LF
					"	end
					$LF
					"end
					$LF
					$LF
					"function Bounce()
					$LF
					"	if memory.readbyte(0xffa515)==0x60
					$LF
					"	then offset = 8
					$LF
					"	else offset = 0 end
					$LF
					"	local counter = memory.readbyte(0xfffc87)
					$LF
					"	local a0 = 0xfffc88
					$LF
					"	local d0 = SHIFT(memory.readbyte(a0+counter),-5)+offset
					$LF
					"	local a3 = 0x25d482
					$LF
					"	local vel = memory.readword(a3+d0)
					$LF
					"	local bounce = 0
					$LF
					"	if     vel == 0x200 then bounce = 3
					$LF
					"	elseif vel == 0x3e0 then bounce = 1
					$LF
					"	else                     bounce = 2
					$LF
					"	end
					$LF
					"	gui.text(0,0,string.format("next bounce: %d",bounce))
					$LF
					"end
					$LF
					$LF
					"function Dump()
					$LF
					"	for p=0x275fea,0x277b79 do
					$LF
					"		local a = memory.readbyte(p)
					$LF
					"		if a==0x62 then
					$LF
					"			table.insert(bombs,string.format("%X",p))
					$LF
					"		elseif a==8 then
					$LF
					"			table.insert(goback,string.format("%X",p))
					$LF
					"		elseif a==3 then
					$LF
					"			table.insert(goforth,string.format("%X",p))
					$LF
					"		end
					$LF
					"	end
					$LF
					"	print("bombs:")
					$LF
					"	print(bombs)
					$LF
					"	print("")
					$LF
					"	print("goback:")
					$LF
					"	print(goback)
					$LF
					"	print("")
					$LF
					"	print("goforth:")
					$LF
					"	print(goforth)
					$LF
					"	print("")
					$LF
					"end
					$LF
					$LF
				]code
			]pre
		]div
		[div class=tab-pane fade id=tabs-17-2 
			[p 
				"Config table addresses that contain given objects.
				[br 
				]br
				$LF
				"Generated by function Dump().
				$LF
			]p
			[p 
				[b 
					"Bombs
				]b
				$LF
			]p
			[p 
				"276037, 276065, 2760B9, 276109, 276142, 276164, 276168, 27616C, 276170, 276174, 276178, 27617C, 276182, 2765DE, 276637, 276679, 2766F9, 276783, 276F85, 276FDD, 277040, 277086, 2770CA, 27715F
				$LF
			]p
			[p 
				[b 
					"GoBack
				]b
				$LF
			]p
			[p 
				"27605E, 276060, 2760A8, 2760AA, 2760AC, 2760EB, 2760ED, 2760EF, 27612F, 276131, 276133, 276135, 2765A1, 2765A3, 2765B4, 2765F9, 2765FB, 2765FD, 276616, 276618, 276652, 276654, 276656, 276658, 27669A, 27669C, 27669E, 2766D3, 276720, 276722, 276724, 276726, 276799, 2767BB, 2767DD, 2767ED, 2767FF, 276821, 276F1B, 276F59, 276F5B, 276F9E, 276FA0, 276FA2, 276FA4, 277005, 277032, 277034, 277061, 277063, 277065, 27707A, 2770A9, 2770AB, 2770AD, 2770BE, 2770D9, 2770FB, 27711D, 27713F, 277161
				$LF
			]p
			[p 
				[b 
					"GoForth
				]b
				$LF
			]p
			[p 
				"2760BE, 2761B3, 2761D9, 2761E3, 276203, 276211, 276266, 276275, 27629D, 2762AB, 2762BB, 2762DF, 276313, 27633D, 276363, 276394, 2763A6, 276402, 276416, 27644A, 27646C, 276494, 2764A3, 2764DB, 2764E9, 276545, 276559, 27658D, 27667E, 27684F, 27685E, 27686C, 2768A1, 2768B9, 276903, 276940, 276956, 276980, 2769B6, 2769C8, 2769E2, 276A0C, 276A4A, 276A83, 276A98, 276AA6, 276AD7, 276B07, 276B39, 276B6D, 276B9F, 276BD8, 276BED, 276C01, 276C39, 276C51, 276C83, 276CB7, 276CFC, 276D39, 276D4E, 276D68, 276D98, 276DB4, 276DE6, 276E17, 276E59, 276E94, 276ECB, 277045, 2771C0, 27720C, 277238, 277281, 2772C0, 277314, 27735D, 27736B, 2773B8, 277410, 27743C, 277485, 2774BE, 27750E, 277556, 277566, 2775B3, 277613, 27763F, 277688, 2776C1, 277711, 27775A, 27776E, 2777BB, 27781B, 277847, 277890, 2778C9, 277919, 277961, 277973, 2779C0, 277A20, 277A4C, 277A95, 277ACE, 277B1E, 277B69
				$LF
			]p
		]div
	]div
]div
[h4 
	" Puppy Love spawns
	$LF
]h4
[p 
	"Actions are read consecutively from config tables, 30-32 spawn objects whose toss position is decided by the second digit, and type is read from the next byte.
	$LF
]p
[p 
	"Sometimes config pointer will jump back or forth, using reserved config pointer, and offset figured out from RNG. By manipulating the RNG you must be able to affect end pointer values.
	$LF
]p
[pre 
	"64 - force Psyclow up
	$LF
	"63 - force him down
	$LF
	"30-32 - do the spawn
	$LF
	"62 - bomb
	$LF
	"68 - globe
	$LF
	"70 - puppy
	$LF
	"03 - jump forth through config table
	$LF
	"08 - jump back through config table
	$LF
	"7a - end of batch, wait how player handles the objects
	$LF
	"2b,2d,0 - just skip
	$LF
]pre
[h4 
	" Randomness
	$LF
]h4
[p 
	"New RNG value only depends on the old one, so the only way to manipulate it is to force more or less of its calls.
	$LF
]p
[p 
	"It is called twice per object bounce (to figure out the sound and the flips), once or twice in a while by Peter (to do animation), a ton of times per Psycrow explosion feathers (13 times per frame), a bunch of times by letters of the new round.
	$LF
]p
[p 
	"So by dropping different puppies at different times you can skip some of these, resulting in RNG difference. Note that Psycrow freezes if scrolled a bit left, while Peter never stops poking the RNG, so it's also possible to delay puppy tosses and affect RNG differently.
	$LF
]p
[pre 
	"26:C2CE  48 E7  MOVEM.L {d0-a7}[70 00],-(SP)     
	$LF
	"26:C2D2  52 47  ADDQ.W  #1,D7                    
	$LF
	"26:C2D4  22 39  MOVE.L  ($00FFA1D4),D1           
	$LF
	"26:C2DA  24 01  MOVE.L  D1,D2                    
	$LF
	"26:C2DC  5E 82  ADDQ.L  #7,D2                    
	$LF
	"26:C2DE  D2 81  ADD.L   D1,D1                    
	$LF
	"26:C2E0  D2 81  ADD.L   D1,D1                    
	$LF
	"26:C2E2  26 01  MOVE.L  D1,D3                    
	$LF
	"26:C2E4  D2 81  ADD.L   D1,D1                    
	$LF
	"26:C2E6  D2 82  ADD.L   D2,D1                    
	$LF
	"26:C2E8  D2 83  ADD.L   D3,D1                    
	$LF
	"26:C2EA  23 C1  MOVE.L  D1,($00FFA1D4)           
	$LF
	"26:C2F0  24 01  MOVE.L  D1,D2                    
	$LF
	"26:C2F2  48 42  SWAP.W  D2                       
	$LF
	"26:C2F4  B5 41  EOR.W   D2,D1                    
	$LF
	"26:C2F6  CE C1  MULU.W  D1,D7                    
	$LF
	"26:C2F8  48 47  SWAP.W  D7                       
	$LF
	"26:C2FA  4C DF  MOVEM.L (SP)+,{a7-d0}[00 0e]     
	$LF
	"26:C2FE  4E 75  RTS                              
]pre
