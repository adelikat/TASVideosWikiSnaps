26
[div class=toc 
	[ul 
		[li 
			[a href=#heading-307 
				"Sonic 1
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#heading-317 
						"RAM Values
						$LF
					]a
				]li
				[li 
					[a href=#heading-843 
						"Notes
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#heading-850 
								" Position
								$LF
							]a
						]li
						[li 
							[a href=#heading-2613 
								" Sprites
								$LF
							]a
						]li
						[li 
							[a href=#heading-3109 
								" Event Triggers
								$LF
							]a
						]li
						[li 
							[a href=#heading-3638 
								" Jumping
								$LF
							]a
						]li
						[li 
							[a href=#heading-4877 
								" Gravity
								$LF
							]a
						]li
						[li 
							[a href=#heading-4994 
								" Rolling
								$LF
							]a
						]li
						[li 
							[a href=#heading-5605 
								" Sprite Ejection
								$LF
							]a
						]li
						[li 
							[a href=#heading-7390 
								" Terrain Ejection
								$LF
							]a
						]li
						[li 
							[a href=#heading-8205 
								" Ducking
								$LF
							]a
						]li
						[li 
							[a href=#heading-8374 
								" Slope
								$LF
							]a
						]li
						[li 
							[a href=#heading-8817 
								" Terrain Collision
								$LF
							]a
						]li
						[li 
							[a href=#heading-8984 
								" "Corner"ing
								$LF
							]a
						]li
						[li 
							[a href=#heading-9726 
								" Lag
								$LF
							]a
						]li
					]ul
				]li
				[li 
					[a href=#heading-10765 
						"Tricks
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#heading-10773 
								" Start faster
								$LF
							]a
						]li
						[li 
							[a href=#heading-11213 
								" Loop jumping
								$LF
							]a
						]li
						[li 
							[a href=#heading-11923 
								" Loop breaking
								$LF
							]a
						]li
					]ul
				]li
			]ul
		]li
		[li 
			[a href=#heading-12260 
				"Sonic 2
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#heading-12270 
						"RAM Values
						$LF
					]a
				]li
				[li 
					[a href=#heading-13113 
						"Notes
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#heading-13120 
								" Ducking
								$LF
							]a
						]li
						[li 
							[a href=#heading-13450 
								" Spindashing
								$LF
							]a
						]li
						[li 
							[a href=#heading-14130 
								" Lag
								$LF
							]a
						]li
					]ul
				]li
				[li 
					[a href=#heading-14455 
						"Tricks
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#heading-14463 
								" Spindash through solid objects (but not terrain)
								$LF
							]a
						]li
					]ul
				]li
			]ul
		]li
		[li 
			[a href=#heading-14967 
				"Sonic 3 & Knuckles
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#heading-14988 
						"RAM Values
						$LF
					]a
				]li
				[li 
					[a href=#heading-16473 
						"Notes
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#heading-16480 
								" Double-Jump Actions
								$LF
							]a
						]li
					]ul
				]li
				[li 
					[a href=#heading-16977 
						"Tricks
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#heading-16985 
								" Crumbling Platforms
								$LF
							]a
						]li
						[li 
							[a href=#heading-17590 
								" Hydrocity Slides
								$LF
							]a
						]li
						[li 
							[a href=#heading-18351 
								" Signpost Monitors
								$LF
							]a
						]li
						[li 
							[a href=#heading-18596 
								" Scroll Glitch
								$LF
							]a
						]li
						[li 
							[a href=#heading-19104 
								" Level Wrapping Glitch
								$LF
							]a
						]li
						[li 
							[a href=#heading-19977 
								" Camera Based Teleportation
								$LF
							]a
						]li
					]ul
				]li
				[li 
					[a href=#heading-20677 
						"Character stats
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#heading-20694 
								" Sonic
								$LF
							]a
						]li
						[li 
							[a href=#heading-24872 
								" Tails
								$LF
							]a
						]li
						[li 
							[a href=#heading-28444 
								" Knuckles
								$LF
							]a
						]li
					]ul
				]li
			]ul
		]li
	]ul
]div
[p 
	[b 
		"Note: Although the physics engine was largely unchanged between all of the 16-bit Sonic games, there is no guarantee that any specific values listed for one game will apply to any other.
	]b
	[br 
	]br
	$LF
	[b 
		"Note: However, unless otherwise stated, the engine notes for one game apply to all later games.
	]b
	$LF
]p
[h2 
	"Sonic 1
	$LF
	[a id=heading-307 
	]a
]h2
[h3 
	"RAM Values
	$LF
	[a id=heading-317 
	]a
]h3
[dl 
	[dt 
		"X Velocity
	]dt
	[dd 
		"word @ FFD010
		$LF
		[dt 
			"Y Velocity
		]dt
		[dd 
			"word @ FFD012
			$LF
			[dt 
				"Speed Value (on ground)
			]dt
			[dd 
				"word @ FFD014 (signed)
				$LF
				[dt 
					"X Pixel Position
				]dt
				[dd 
					"word @ FFD008 (unsigned)
					$LF
					[dt 
						"X Subpixel Position
					]dt
					[dd 
						"byte @ FFD00A (unsigned)
						$LF
						[dt 
							"Y Pixel Position
						]dt
						[dd 
							"word @ FFD00C (unsigned)
							$LF
							[dt 
								"Y Subpixel Position
							]dt
							[dd 
								"byte @ FFD00E (unsigned)
								$LF
								[dt 
									"Slope Gradient
								]dt
								[dd 
									"byte @ FFD026 (signed)
									$LF
									[dt 
										"Camera X Position
									]dt
									[dd 
										"dword @ FFF700 (also at F710, FDB8, F61A)
										$LF
										[dt 
											"Camera Y Position
										]dt
										[dd 
											"dword @ FFF704 (also at F714, F616)
											$LF
											[dt 
												"Timer frames
											]dt
											[dd 
												"byte @ FFFE25 (undisplayed portion of the in-game timer, 0 to 59)
												$LF
											]dd
										]dd
									]dd
								]dd
							]dd
						]dd
					]dd
				]dd
			]dd
		]dd
	]dd
]dl
[h3 
	"Notes
	$LF
	[a id=heading-843 
	]a
]h3
[h4 
	" Position
	$LF
	[a id=heading-850 
	]a
]h4
[p 
	"The game stores X and Y subpixel positions, each with a range of 256. Subpixel positions are only used to determine changes in pixel position when speed is not an integer multiple of 256 (and collisions with landscape?). Everything else, such as changes in velocity due to slope, the current angle of the slope, and collisions, are determined by pixel position. Of course, all of those things can be affected indirectly by the subpixel position because that affects the pixel position. The subpixel position is the sum of the character's speed across all previous frames in the current zone, mod 256. Unless directly monitored, this will appear as a source of random variation in the character's movement, and it will often do so regardless of being monitored because it is difficult to reach any specific subpixel position while continuing to accomplish anything in the game.
	$LF
]p
[p 
	"Because the game ignores subpixel position when determining collisions, pressing into a wall while apparently already stopped against it may in fact cause the character to accumulate speed for when the wall is cleared or removed, as well as moving slightly forward.
	$LF
]p
[p 
	"Pixel position is stored in a 2-byte variable, which can be overflowed or underflowed. Most levels have walls, or invisible barriers that don't allow the player to pass, or even reach, the 0 point on the x or y axis. However, if this can be overcome, by zipping (see terrain ejection) for instance, the player's position will immediately be set to 32767 along that axis, and the camera will begin scrolling to find the player.
	$LF
	"Subpixel position can also be overflowed or underflowed. Normally this results in the player moving 1 pixel, but when pressing against a wall, simply resets the subpixel position.
	$LF
]p
[h4 
	" Sprites
	$LF
	[a id=heading-2613 
	]a
]h4
[p 
	"Sprite-based objects (spikes, switches, moving platforms, breakable walls, certain event triggers, etc.) that are not within a certain range of the camera are not rendered and cannot interact with the character in any way. Some objects use the timer for their position and thus continue moving even when they don't exist. Different types of objects seem to have different loading distances. Rings and monitors have the largest loading distances, and enemies with AIs have the smallest.
	$LF
]p
[h4 
	" Event Triggers
	$LF
	[a id=heading-3109 
	]a
]h4
[p 
	"Some events, such as ones that load bosses, trigger based on the camera position, and not the player position. If these events cause the camera to lock, and the player is not on-screen at the time, the player will be teleported to the nearest horizontal edge of the locked camera zone. Other events are placed in the level and activate based on the character's position, such as loading new graphics while passing through a loop or changing the active layer so that the player can pass behind part of the level.
	$LF
]p
[h4 
	" Jumping
	$LF
	[a id=heading-3638 
	]a
]h4
[p 
	"Jumping is a function of vector addition. When a character jumps, a vector of their jump height is added to their current x & y velocities at a 90 degree angle to the slope they are currently standing on.
	$LF
	"During a jump, air drag occurs whenever the character has an (upward)
	$LF
	"y velocity between 0 and 1024 subpixels (0-4 pixels), and happens at a rate of 1/32nd the current horizontal velocity per frame. So, for instance if you have a horizontal speed of 3072 subpixels (12 pixels) per frame at the start of a jump, once you start to reach its peak, you'll lose 96 subpixels the first frame, 93 the second, 90 the third, and so on, until your vertical speed reaches 0, or your horizontal speed is below 32 subpixels per frame.
	$LF
	"Releasing the jump button when upward velocity is more than 1024 subpixels (3 & 5/32 pixels) per frame causes the upward velocity to drop to 968 subpixels per frame on the next frame. One frame's worth of airdrag will occur at the same time as the drop to 968 subpixels upward.
	$LF
	"Holding the jump button when upward velocity is less than 1024 subpixels per frame has no effect on the game.
	$LF
	"If the character was rolling before jumping, player control of left and right movement is disabled until landing.
	$LF
]p
[h4 
	" Gravity
	$LF
	[a id=heading-4877 
	]a
]h4
[p 
	"In free-fall, there is a constant downward acceleration of 56 subpixels (7/32 pixels) per frame per frame.
	$LF
]p
[h4 
	" Rolling
	$LF
	[a id=heading-4994 
	]a
]h4
[p 
	"Rolling is a form of movement which attacks nearby enemies, and can break through some walls, but causes the player to decelerate on a level surface.
	$LF
	"Rolling allows the player to gain speed faster on downhill slopes than running does; however, rolling caps the players x-velocity at 4096 subpixels (16 pixels) per frame. 
	$LF
	"Interestingly, when on ground, both deceleration and y-velocity are based on the player's speed variable, not velocity, and the player's speed variable continues to increase as normal on a downhill, even when the x velocity cap has been reached. Rolling does not cap y velocity.
	$LF
]p
[h4 
	" Sprite Ejection
	$LF
	[a id=heading-5605 
	]a
]h4
[p 
	"If a player character becomes partially lodged in a sprite in a manner that does not cause the player damage, or destroy the sprite, the game begins an ejection routine. This ejection routine works by checking the lower left corner of the player's hitbox against the left edge of the sprite's hitbox, the lower right corner of the player's hitbox against the right edge of the sprite's hitbox, and the bottom edge of the player's hitbox against both the top edge and the bottom edge of the sprite's hitbox.  If any of the points of the player's bounding box are close enough to the points checked on the sprite's hitbox, the player is ejected from the sprite in that direction. Up-down ejection takes priority over left-right ejection; however, the player must have some speed along the Y axis for up-down ejection to be tested. Ejection is accomplished by changing the relevant pixel position of the player so that the opposing edge of the player's hit-box is adjacent to the sprite, and reducing the player's speed and velocities to 0. IE: when the player is ejected to the left, the player will be positioned so that the right edge of his hitbox is directly touching the left edge of the sprite.
	$LF
	"Sprites are "hollow" -- only the edges can be collided with. If, after the first frame, the game cannot determine which direction to eject the player, the player can walk around inside the sprite until he is near enough an edge to be ejected. Note that if the sprite is adjacent to another sprite, the player will collide with the other sprite's bounding box before he can be ejected from the sprite he is currently in. If the sprite is adjacent to (but not partially inside) terrain, the player will be ejected from the sprite before he can collide with the terrain.
	$LF
]p
[h4 
	" Terrain Ejection
	$LF
	[a id=heading-7390 
	]a
]h4
[p 
	"If a player character becomes partially lodged in terrain, there are two separate ejection mechanisms. First, it runs the same set of tests as sprite-based ejection. If that test fails, it checks to see if the player is holding left or right, and, if the player is holding left or right, it gives the player a variable speed (based on distance from the edge of the terrain tile) between 16 and 32 pixels per frame, in the direction opposite the one they are holding. This ejection routine (commonly known as zipping) will not trigger if the player is falling. Certain terrain tiles are hollow, and will trap a player rather than eject them. Terrain tiles may block, or not block any given direction of movement. Some tiles, for instance, block movement right, left, or upward, but not downward. 
	$LF
]p
[h4 
	" Ducking
	$LF
	[a id=heading-8205 
	]a
]h4
[p 
	"Ducking is accomplished by holding down while standing still on the ground. Ducking causes the camera to pan downwards, and slightly decreases Sonic's hitbox.
	$LF
]p
[h4 
	" Slope
	$LF
	[a id=heading-8374 
	]a
]h4
[p 
	"Slope is stored as a 1 byte signed value (-128 ... 127). Negative slopes mean that the terrain rises to the right. Positive slopes mean that the terrain falls to the right. Players will lose speed traveling up any slope, and will be actively propelled downwards on slopes with absolute value of 16 or higher.
	$LF
	"Slope seems to come in multiples of 2, which would indicate 128, or fewer, slope gradations, but this has yet to be verified.
	$LF
]p
[h4 
	" Terrain Collision
	$LF
	[a id=heading-8817 
	]a
]h4
[p 
	"Terrain will only act solid if the player is moving toward it: IE: floors only obstruct downward movement, ceilings only obstruct upward movement.
	$LF
]p
[h4 
	" "Corner"ing
	$LF
	[a id=heading-8984 
	]a
]h4
[p 
	"To save time, the collision engine only checks collisions from the player's midpoint to the edge of the hitbox in the directions that the player is moving. Therfore, while moving upward in a jump, you can pass through objects as long as the midpoint of your hitbox is above the top edge of the object's hitbox, similarly, you can pass through objects moving downward if your midpoint is below the bottom edge of the object's hitbox, rightward if your midpoint is further right than the right edge of the object, and leftward if your midpoint is further left than the left edge of the object. This also works with terrain collision, and can be abused in certain circumstances to embed the lower part of your hitbox in the floor.
	$LF
]p
[h4 
	" Lag
	$LF
	[a id=heading-9726 
	]a
]h4
[p 
	"In this game, there are occasional frames of lag during graphics or CPU intensive operations. However, unlike most games, objects, including the player and the camera, will still move during lag frames (although Sonic 1 generally does not update the screen during lag frames), but any applicable changes to their speed or state will not be applied until the next frame, and certain changes will be discarded entirely. As a result, lag management is largely unnecessary in Sonic games, and in many cases, lag can even be beneficial to a speed runner, as the player may get an extra frame without any deceleration applied. However, input on a lag frame is completely ignored, which makes it detrimental when zipping, spindashing, or when a jump or double jump is necessary.
	$LF
]p
[p 
	"In Sonic 1, the music is handled by the 68000 processor, rather than the z80, so lag is much more prevalent here than in the sequels. However, the game always catches up from music related lag the next frame, so the additional lag is almost strictly visual.
	$LF
]p
[h3 
	"Tricks
	$LF
	[a id=heading-10765 
	]a
]h3
[h4 
	" Start faster
	$LF
	[a id=heading-10773 
	]a
]h4
[p 
	"When traveling at a speed of less than 128 subpixels per frame and braking, Sonic's speed is set to 128 subpixels per frame in the opposite direction. Holding left+right causes the game to think Sonic is traveling left at a speed of 0, and braking. This can shorten the process of acceleration from standstill by up to 10.75 frames (or 9.75 frames if accelerating leftward, as 1 frame of rightward motion is necessary first)
	$LF
]p
[h4 
	" Loop jumping
	$LF
	[a id=heading-11213 
	]a
]h4
[p 
	"Because the jump routine is a product of vector addition, jumping on the way up a loop (up-loop jumping) can result in a higher speed at the top of the loop than Sonic had at the bottom. Similarly, jumping on the way back down (down-loop jumping) can result in a higher speed than rolling normally would provide. Additionally, jumping from the curve at the bottom (out-loop jumping) can provide a much higher horizontal speed than Sonic would attain normally, but is generally only helpful if it does not cause Sonic to move upward at all.
	$LF
	"Also, even if the speed is not enhanced, loop jumping results in Sonic traversing the loop in a straighter path, and may shave frames off because of that.
	$LF
]p
[h4 
	" Loop breaking
	$LF
	[a id=heading-11923 
	]a
]h4
[p 
	"If a loop has very thin sides, it may be possible to skip the loop entirely by jumping at the loop with a very high speed. Even if this results in a lower speed compared to traveling through the loop, this trick is likely to save approximately 30 frames whenever it can be performed, due to reducing redundant motion.
	$LF
]p
[h2 
	"Sonic 2
	$LF
	[a id=heading-12260 
	]a
]h2
[h3 
	"RAM Values
	$LF
	[a id=heading-12270 
	]a
]h3
[dl 
	[dt 
		"P1 X Velocity
	]dt
	[dd 
		"word @ FFB010
		$LF
		[dt 
			"P1 Y Velocity
		]dt
		[dd 
			"word @ FFB012
			$LF
			[dt 
				"P1 Speed Value (on ground)
			]dt
			[dd 
				"word @ FFB014 (signed)
				$LF
				[dt 
					"P1 X Pixel Position
				]dt
				[dd 
					"word @ FFB008 (unsigned)
					$LF
					[dt 
						"P1 X Subpixel Position
					]dt
					[dd 
						"byte @ FFB00A (unsigned)
						$LF
						[dt 
							"P1 Y Pixel Position
						]dt
						[dd 
							"word @ FFB00C (unsigned)
							$LF
							[dt 
								"P1 Y Subpixel Position
							]dt
							[dd 
								"byte @ FFB00E (unsigned)
								$LF
								[dt 
									"P1 Slope Gradient
								]dt
								[dd 
									"byte @ FFB026 (signed)
									$LF
									[dt 
										"P2 X Velocity
									]dt
									[dd 
										"word @ FFB050
										$LF
										[dt 
											"P2 Y Velocity
										]dt
										[dd 
											"word @ FFB052
											$LF
											[dt 
												"P2 Speed Value (on ground)
											]dt
											[dd 
												"word @ FFB054 (signed)
												$LF
												[dt 
													"P2 X Pixel Position
												]dt
												[dd 
													"word @ FFB048 (unsigned)
													$LF
													[dt 
														"P2 X Subpixel Position
													]dt
													[dd 
														"byte @ FFB04A (unsigned)
														$LF
														[dt 
															"P2 Y Pixel Position
														]dt
														[dd 
															"word @ FFB04C (unsigned)
															$LF
															[dt 
																"P2 Y Subpixel Position
															]dt
															[dd 
																"byte @ FFB04E (unsigned)
																$LF
																[dt 
																	"P2 Slope Gradient
																]dt
																[dd 
																	"byte @ FFB066 (signed)
																	$LF
																	[dt 
																		"Camera X Position
																	]dt
																	[dd 
																		"dword @ FFEE00
																		$LF
																		[dt 
																			"Camera Y Position
																		]dt
																		[dd 
																			"dword @ FFEE04
																			$LF
																			[dt 
																				"Timer frames
																			]dt
																			[dd 
																				"byte @ FFFE25 (undisplayed portion of the in-game timer, 0 to 59)
																				$LF
																			]dd
																		]dd
																	]dd
																]dd
															]dd
														]dd
													]dd
												]dd
											]dd
										]dd
									]dd
								]dd
							]dd
						]dd
					]dd
				]dd
			]dd
		]dd
	]dd
]dl
[h3 
	"Notes
	$LF
	[a id=heading-13113 
	]a
]h3
[h4 
	" Ducking
	$LF
	[a id=heading-13120 
	]a
]h4
[p 
	"Ducking (not rolling) is the only way to perform a spindash.
	$LF
	"Ducking for a few seconds causes the camera to start scrolling downward.
	$LF
]p
[p 
	"Despite what you would normally expect, ducking does 
	[em 
		"not
	]em
	$LF
	"give the character a smaller hitbox whatsoever (although rolling does),
	$LF
	"which means that ducking to avoid damage is futile.
	$LF
]p
[h4 
	" Spindashing
	$LF
	[a id=heading-13450 
	]a
]h4
[p 
	"While holding a spindash, the character will not move relative to the surface
	$LF
	"he is on. Each press of A, B, or C while holding Down increases the speed that
	$LF
	"the character will reach upon releasing the spindash,
	$LF
	"the maximum occurring after only six presses.
	$LF
	"They may happen on consecutive frames (ABCABC).
	$LF
	"When a spindash is released, 1 frame worth of deceleration from rolling is applied before the first frame of movement.
	$LF
	"If the character somehow falls while holding a spindash, most likely because of
	$LF
	"starting a spindash on a crumbling platform or wheel switch, normal falling
	$LF
	"movement and controls take over until landing, at which point the spindash
	$LF
	"continues.
	$LF
]p
[h4 
	" Lag
	$LF
	[a id=heading-14130 
	]a
]h4
[p 
	"Sonic 2 generally updates the screen during lag frames. Sonic 2 also has much less lag than Sonic 1.
	$LF
	"In extreme cases, which are more likely to occur in a Sonic and Tails game, the game may lag normally (with 1-frame pauses as often as every other frame). The in-game timer does not increase during these lag frames.
	$LF
]p
[h3 
	"Tricks
	$LF
	[a id=heading-14455 
	]a
]h3
[h4 
	" Spindash through solid objects (but not terrain)
	$LF
	[a id=heading-14463 
	]a
]h4
[p 
	"Because of camera panning, and camera-based sprite loading, it is possible to pass through sprite based obstacles by running into them with sufficient speed from far enough away, and then immediately performing a 1 rev spindash, followed by a 2 rev spindash. Depending on the speed the character had before hitting the obstacle, it may be possible to perform a spindash of 3 or more revs -- in some rare cases, up to a full rev spindash is possible.
	$LF
]p
[h2 
	"Sonic 3 & Knuckles
	$LF
	[a id=heading-14967 
	]a
]h2
[h3 
	"RAM Values
	$LF
	[a id=heading-14988 
	]a
]h3
[dl 
	[dt 
		"P1 X Velocity
	]dt
	[dd 
		"word @ FFB018 (signed)
		$LF
		[dt 
			"P1 Y Velocity
		]dt
		[dd 
			"word @ FFB01A (signed)
			$LF
			[dt 
				"P1 Speed Value (on ground)
			]dt
			[dd 
				"word @ FFB01C (signed)
				$LF
				[dt 
					"P1 X Pixel Position
				]dt
				[dd 
					"word @ FFB010 (unsigned)
					$LF
					[dt 
						"P1 X Subpixel Position
					]dt
					[dd 
						"byte @ FFB012 (unsigned)
						$LF
						[dt 
							"P1 Y Pixel Position
						]dt
						[dd 
							"word @ FFB014 (unsigned)
							$LF
							[dt 
								"P1 Y Subpixel Position
							]dt
							[dd 
								"byte @ FFB016 (unsigned)
								$LF
								[dt 
									"P1 Slope Gradient
								]dt
								[dd 
									"byte @ FFB026 (signed)
									$LF
									[dt 
										"P1 Status
									]dt
									[dd 
										"byte @ FFB004 (known values: 0=not in level, 2=normal, 4=being damaged, 6=dying, 8=dead)
										$LF
										[dt 
											"P2 X Velocity
										]dt
										[dd 
											"word @ FFB062 (signed)
											$LF
											[dt 
												"P2 Y Velocity
											]dt
											[dd 
												"word @ FFB064 (signed)
												$LF
												[dt 
													"P2 Speed Value (on ground)
												]dt
												[dd 
													"word @ FFB066 (signed)
													$LF
													[dt 
														"P2 X Pixel Position
													]dt
													[dd 
														"word @ FFB05A (unsigned)
														$LF
														[dt 
															"P2 X Subpixel Position
														]dt
														[dd 
															"byte @ FFB05C (unsigned)
															$LF
															[dt 
																"P2 Y Pixel Position
															]dt
															[dd 
																"word @ FFB05E (unsigned)
																$LF
																[dt 
																	"P2 Y Subpixel Position
																]dt
																[dd 
																	"byte @ FFB060 (unsigned)
																	$LF
																	[dt 
																		"P2 Slope Gradient
																	]dt
																	[dd 
																		"byte @ FFB070 (signed)
																		$LF
																		[dt 
																			"P2 Status
																		]dt
																		[dd 
																			"byte @ FFB04E (known values: 0=not in level, 2=normal, 4=being damaged, 6=dying, 8=dead)
																			$LF
																			[dt 
																				"Camera X Position
																			]dt
																			[dd 
																				"3 bytes @ FFEE78 (also at EE80, A80C, A814)
																				$LF
																				[dt 
																					"Camera Y Position
																				]dt
																				[dd 
																					"3 bytes @ FFEE7C (also at EE84, A810, A818)
																					$LF
																					[dt 
																						"Camera Lock
																					]dt
																					[dd 
																						"byte @ FFEE0B (0 is normal. 1 means character camera modifiers and events such as boss fights will leave the camera alone, and is set when the main character dies)
																						$LF
																						[dt 
																							"Ring animation frame
																						]dt
																						[dd 
																							"byte @ FFFEB2
																							$LF
																							[dt 
																								"Selected character
																							]dt
																							[dd 
																								"byte @ FFFF0A (0 means Sonic+Tails, 1 means Sonic, 2 means Tails, 3 means Knuckles) (also at FF08 when in a level)
																								$LF
																								[dt 
																									"Timer frames
																								]dt
																								[dd 
																									"byte @ FFFE25 (undisplayed portion of the in-game timer, 0 to 59)
																									$LF
																								]dd
																							]dd
																						]dd
																					]dd
																				]dd
																			]dd
																		]dd
																	]dd
																]dd
															]dd
														]dd
													]dd
												]dd
											]dd
										]dd
									]dd
								]dd
							]dd
						]dd
					]dd
				]dd
			]dd
		]dd
	]dd
]dl
[h3 
	"Notes
	$LF
	[a id=heading-16473 
	]a
]h3
[h4 
	" Double-Jump Actions
	$LF
	[a id=heading-16480 
	]a
]h4
[p 
	"Double-jump actions are actions which are unique to each character, and can be performed by pressing a jump button in the air, when the player's upward velocity is less than 968 subpixels per frame and the player has not already performed the action since touching the ground.
	$LF
	"Performing a double-jump action allows the player to regain control after jumping from a roll, even if the character's double-jump action does nothing else (IE: super sonic).
	$LF
	[em 
		"More to be added
	]em
	$LF
]p
[h3 
	"Tricks
	$LF
	[a id=heading-16977 
	]a
]h3
[h4 
	" Crumbling Platforms
	$LF
	[a id=heading-16985 
	]a
]h4
[p 
	"The crumbling platforms in Angel Island can be passed through before they crumble by falling at them in a very specific way. Details are currently unknown, but it may be related to the game skipping a calculation during lag frames which gives a 1-frame window to pass below the collision area of the platform. Other platforms, such as the ones in Hydrocity, can be passed through simply by falling through them anywhere and at any point in time after they begin to crumble.
	$LF
	"The crumbling platforms in Lava Reef cannot be passed through until they have crumbled past a certain point.
	$LF
]p
[h4 
	" Hydrocity Slides
	$LF
	[a id=heading-17590 
	]a
]h4
[p 
	"The slides in Hydrocity 2 are normal sloped terrain, and can (therefore) be passed through whenever the character is moving at all upward. Also, some slides are on layer B (like the second part of loops) and won't be solid until you hit an invisible layer-swapping object (at which point, some slides that were solid before will cease to be). Additionally, because they have such a thin collision area, it is relatively easy to get enough velocity to pass through one in one frame, although in practice this is more difficult than it sounds, as you need to be moving about 16 pixels per frame downward, from a position above the slide, where 16 pixels will be below the slide. Obviously, the faster you can get moving, the easier it becomes.
	$LF
]p
[h4 
	" Signpost Monitors
	$LF
	[a id=heading-18351 
	]a
]h4
[p 
	"Turning off the foreground graphics (layer 3 in Gens) at the end of any Act 1 will reveal where the bonus monitors are that can be unearthed by a properly placed signpost, although it will not show what the monitors contain.
	$LF
]p
[h4 
	" Scroll Glitch
	$LF
	[a id=heading-18596 
	]a
]h4
[p 
	"On levels that wrap vertically (Marble Garden 1, Icecap 1, Sandopolis 2, Sky Sanctuary) jumping above the top of the screen will cause the camera to scroll downward until it reaches the main character again. This is easy to do by holding down until the screen scrolls as far down as it will go, then releasing down and jumping. Because, as noted in the "Sprites" section, sprites are loaded and unloaded based on camera position, this can allow for traveling through some types of obstacles.
	$LF
]p
[h4 
	" Level Wrapping Glitch
	$LF
	[a id=heading-19104 
	]a
]h4
[p 
	"Most levels have some means to prevent the player from walking off the left edge. But, on most levels, this can be bypassed by zipping past the left edge. When this happens, the player is then teleported to the far right edge of the currently loaded level data, and the camera begins to scroll right in a mad effort to catch up. While the camera is scrolling right, the player can move about, unaffected by sprites. If the player was unable to get off the left edge of the level within about 8 seconds of the act starting, the player will probably be transported far past the right-hand level boundary. However, if the player is somehow able to initiate a levelwrap immediately after the level loads, he can then teleport just about anywhere in the level at the same horizontal position -- levels load at a rate of about half a screenful per frame.
	$LF
]p
[h4 
	" Camera Based Teleportation
	$LF
	[a id=heading-19977 
	]a
]h4
[p 
	"Many events (cutscenes, boss battles, etc) are triggered based on camera position. Often these events will lock the camera within certain boundaries. When this happens, the player is locked within these boundaries as well. If the player was outside the boundaries, horizontally, he will be immediately transported to the edge nearest him. If the player was below the lower vertical boundary, he will die. If the player was above the upper vertical boundary, either he will remain at his height, and fall into the screen, or he will be teleported downward to be within the upper-edge of the camera, depending on the type of lock that has been set.
	$LF
]p
[p 
	[em 
		"More To be added
	]em
	$LF
]p
[h3 
	"Character stats
	$LF
	[a id=heading-20677 
	]a
]h3
[h4 
	" Sonic
	$LF
	[a id=heading-20694 
	]a
]h4
[p 
	[em 
		"Normal
	]em
	$LF
]p
[dl 
	[dt 
		"Jump Strength
	]dt
	[dd 
		"1664 subpixels (6.5 pixels) per frame
		$LF
		[dt 
			"Running Speed
		]dt
		[dd 
			"1536 subpixels (6 pixels) per frame
			$LF
			[dt 
				"Running Acceleration
			]dt
			[dd 
				"12 subpixels (3/64 pixels) per frame per frame
				$LF
				[dt 
					"Running Braking Rate (holding backward)
				]dt
				[dd 
					"128 subpixels (1/2 pixels) per frame per frame
					$LF
					[dt 
						"Running Deceleration (holding nothing)
					]dt
					[dd 
						" 12 subpixels (3/64 pixels) per frame per frame
						$LF
						[dt 
							"Running Deceleration (vertical, holding forward, movement above Running Speed)
						]dt
						[dd 
							" 32 subpixels (1/8 pixels) per frame per frame
							$LF
							[dt 
								"Running Deceleration (vertical, holding forward, at or below Running Speed)
							]dt
							[dd 
								" 20 subpixels (5/64 pixels) per frame per frame
								$LF
								[dt 
									"Max Spindash Speed
								]dt
								[dd 
									"3072 subpixels (12 pixels) per frame
									$LF
									[dt 
										"Rolling Deceleration
									]dt
									[dd 
										"6 subpixels (3/128 pixels) per frame per frame
										$LF
										[dt 
											"Rolling Braking rate
										]dt
										[dd 
											"32 subpixels per frame per frame + Rolling Deceleration
											$LF
											[dt 
												"Air Acceleration
											]dt
											[dd 
												"24 subpixels (3/32 pixels) per frame per frame
												$LF
												[dt 
													"Flame Dash Speed
												]dt
												[dd 
													"2048 subpixels (8 pixels) per frame
													$LF
													[dt 
														"Bubble Bounce Drop Speed
													]dt
													[dd 
														"2048 subpixels (8 pixels) per frame downward + Gravity.
														$LF
														[dt 
															"Bubble Bounce Bounce Strength
														]dt
														[dd 
															"2048 subpixels (8 pixels) per frame upward - Gravity.
															$LF
															[dt 
																"Lightning Jump Strength
															]dt
															[dd 
																" 1408 subpixels (5.5 pixels) per frame upward - Gravity.
																$LF
															]dd
														]dd
													]dd
												]dd
											]dd
										]dd
									]dd
								]dd
							]dd
						]dd
					]dd
				]dd
			]dd
		]dd
	]dd
]dl
[p 
	[b 
		"Ability Notes
	]b
	":
	$LF
]p
[ul 
	[li 
		"Sonic can use shield actions for his double-jump
		$LF
	]li
	[li 
		"With no shield, Sonic can generate an "insta-shield" which protects him from all damage for about a half-second
		$LF
	]li
	[li 
		"Flame Dash sets Sonic's x-speed to 2048 in the direction faced, and y-speed to 0
		$LF
	]li
	[li 
		"Bubble bounce sets Sonic's y-speed to 2048 downward, and x-speed to 0
		$LF
	]li
	[li 
		"Lightning jump does not affect Sonic's horizontal motion except for the standard speed loss when vertical speed is between 1024 and 0 upwards
		$LF
	]li
]ul
[p 
	[b 
		"Note
	]b
	": For the following status effects, values not noted are unchanged from normal.
	$LF
]p
[p 
	[em 
		"With Speed Shoes
	]em
	$LF
]p
[dl 
	[dt 
		"Double the following values
	]dt
	[dd 
		"Running Speed, Running Acceleration, Air Acceleration
		$LF
	]dd
]dl
[p 
	[b 
		"Note
	]b
	": Transforming (super/hyper) or entering water will instantly cancel any active speed shoes.
	$LF
]p
[p 
	[em 
		"When Underwater
	]em
	" 
	$LF
]p
[dl 
	[dt 
		"Halve the following values
	]dt
	[dd 
		"Gravity, Running Acceleration, Running Braking Rate, Running Deceleration, Air Acceleration, Rolling Deceleration, Bubble Bounce Bounce Strength
		$LF
		[dt 
			"Jump Strength
		]dt
		[dd 
			"896 subpixels (3.5 pixels) per frame
			$LF
		]dd
	]dd
]dl
[p 
	[em 
		"When Super
	]em
	$LF
]p
[dl 
	[dt 
		"Running Speed
	]dt
	[dd 
		"2560 subpixels (10 pixels) per frame
		$LF
		[dt 
			"Running Braking rate
		]dt
		[dd 
			"256 subpixels (1 pixel) per frame per frame
			$LF
			[dt 
				"Running Acceleration (vertical)
			]dt
			[dd 
				"16 subpixels (1/16 pixels) per frame per frame
				$LF
				[dt 
					"Running Deceleration (vertical, holding forward, movement above Running Speed)
				]dt
				[dd 
					"48 subpixels (3/16 pixels) per frame per frame
					$LF
					[dt 
						"Max Spindash Speed
					]dt
					[dd 
						"3840 subpixels (15 pixels) per frame
						$LF
						[dt 
							"Jump Strength
						]dt
						[dd 
							"2048 subpixels (8 pixels) per frame
							$LF
							[dt 
								"Quadruple the following values
							]dt
							[dd 
								"Running Acceleration, Air Acceleration
								$LF
							]dd
						]dd
					]dd
				]dd
			]dd
		]dd
	]dd
]dl
[p 
	[b 
		"Ability Notes
	]b
	":
	$LF
]p
[ul 
	[li 
		"Super Sonic has no double jump action, but can still regain control after a rolling jump by pressing jump again in mid-air
		$LF
	]li
	[li 
		"Super Sonic is invulnerable to attack
		$LF
	]li
	[li 
		"Super Sonic has a greatly reduced deceleration due to gravity when running up a sloped surface.
		$LF
	]li
	[li 
		"Super Sonic loses rings at a rate of 1 ring every 61 frames
		$LF
	]li
	[li 
		"Super Sonic reverts to standard Sonic when his ring count reaches 0
		$LF
	]li
]ul
[p 
	[em 
		"When Hyper
	]em
	[br 
	]br
	$LF
	[b 
		"Ability Notes
	]b
	":
	$LF
]p
[ul 
	[li 
		"Hyper Sonic has all the abilities and statistics of Super Sonic
		$LF
	]li
	[li 
		"Hyper Sonic can breathe underwater without a water shield or bubbles. Due to a coding bug in the game, Tails, if present, will also not drown for as long as Sonic is in hyper form.
		$LF
	]li
	[li 
		"Hyper Sonic's double jump action is a flash jump which provides a speed of 2048 in any direction (or combination of directions) held
		$LF
	]li
	[li 
		"Flash jump defaults to 2048 forward if no direction is pressed, or if both left and right are pressed simultaneously. If both up and down are pressed, flash jump sets speed vertical speed to 0.
		$LF
	]li
	[li 
		"Flash jump sets speed to 0 along "unused" axes.
		$LF
	]li
	[li 
		"Flash jump destroys all enemies onscreen, and will also enter active star rings, but does not damage bosses. Some types of obstacles (such as Carnival Night zone balloons) will also cause Hyper Sonic to bounce as if he had hit them directly.
		$LF
	]li
	[li 
		"Flash jump causes the camera to hold position momentarily, and a jump to the left or the right can bring hyper sonic off-camera
		$LF
	]li
]ul
[h4 
	" Tails
	$LF
	[a id=heading-24872 
	]a
]h4
[p 
	[em 
		"Normal
	]em
	$LF
]p
[dl 
	[dt 
		"Jump Strength
	]dt
	[dd 
		"1664 subpixels (6.5 pixels) per frame
		$LF
		[dt 
			"Running Speed
		]dt
		[dd 
			"1536 subpixels (6 pixels) per frame
			$LF
			[dt 
				"Running Acceleration
			]dt
			[dd 
				"12 subpixels (3/64 pixels) per frame per frame
				$LF
				[dt 
					"Running Braking Rate (holding backward)
				]dt
				[dd 
					"128 subpixels (1/2 pixels) per frame per frame
					$LF
					[dt 
						"Running Deceleration (holding nothing)
					]dt
					[dd 
						" 12 subpixels (3/64 pixels) per frame per frame
						$LF
						[dt 
							"Running Deceleration (vertical, holding forward, movement above Running Speed)
						]dt
						[dd 
							" 32 subpixels (1/8 pixels) per frame per frame
							$LF
							[dt 
								"Running Deceleration (vertical, holding forward, at or below Running Speed)
							]dt
							[dd 
								" 20 subpixels (5/64 pixels) per frame per frame
								$LF
								[dt 
									"Max Spindash Speed
								]dt
								[dd 
									"3072 subpixels (12 pixels) per frame
									$LF
									[dt 
										"Rolling Deceleration
									]dt
									[dd 
										"6 subpixels (3/128 pixels) per frame per frame
										$LF
										[dt 
											"Rolling Braking rate
										]dt
										[dd 
											"32 subpixels per frame per frame + Rolling Deceleration
											$LF
											[dt 
												"Air Acceleration
											]dt
											[dd 
												"24 subpixels (3/32 pixels) per frame per frame
												$LF
												[dt 
													"Flight Acceleration (vertical, unpowered)
												]dt
												[dd 
													"8 subpixels (1/32 pixels) per frame per frame downward.
													$LF
													[dt 
														"Flight Acceleration (vertical, powered)
													]dt
													[dd 
														"32 subpixels (1/8 pixels) per frame per frame upward for up to 30 frames after the jump button is pressed, and as long as vertical speed is either downward or between 0 and 256 subpixels (1 pixel) per frame upward.
														$LF
													]dd
												]dd
											]dd
										]dd
									]dd
								]dd
							]dd
						]dd
					]dd
				]dd
			]dd
		]dd
	]dd
]dl
[p 
	[b 
		"Ability Notes
	]b
	":
	$LF
]p
[ul 
	[li 
		"Tails can fly for his double jump
		$LF
	]li
	[li 
		"Flight does not modify Tails' horizontal speed except for the standard speed loss when vertical speed is between 1024 and 0 upwards
		$LF
	]li
	[li 
		"During flight, Tails' tails can knock away certain projectiles.
		$LF
	]li
	[li 
		"While flying, Tails can "boost" up by pressing the jump button if the vertical speed is either downward or between 0 and 256 subpixels (1 pixel) per frame upward. It is possible to get Tails to accelerate upward for up to 28 frames 
		[em 
			"after
		]em
		" Tails is supposed to get tired by boosting when there are 2 frames of flight left.
		$LF
	]li
	[li 
		"If Tails is flying above the top of screen limits, his vertical velocity is set to zero whenever something happens to make it negative. This can be used to avoid the standard horizontal speed loss from having vertical speed between 1024 and 0 upwards.
		$LF
	]li
	[li 
		"Tails can swim underwater. It is the same mechanism as flight, except that Tails cannot boost if he is carrying Sonic.
		$LF
	]li
]ul
[p 
	[b 
		"Note
	]b
	": For the following status effects, values not noted are unchanged from normal.
	$LF
]p
[p 
	[em 
		"With Speed Shoes
	]em
	$LF
]p
[dl 
	[dt 
		"Double the following values
	]dt
	[dd 
		"Running Speed, Running Acceleration, Air Acceleration
		$LF
	]dd
]dl
[p 
	[b 
		"Note
	]b
	": Transforming (super) or entering water will instantly cancel any active speed shoes.
	$LF
]p
[p 
	[em 
		"When Underwater
	]em
	" 
	$LF
]p
[dl 
	[dt 
		"Halve the following values
	]dt
	[dd 
		"Gravity, Running Acceleration, Running Braking Rate, Running Deceleration, Air Acceleration, Rolling Deceleration
		$LF
		[dt 
			"Jump Strength
		]dt
		[dd 
			"896 subpixels (3.5 pixels) per frame
			$LF
		]dd
	]dd
]dl
[p 
	[em 
		"When Super
	]em
	$LF
]p
[dl 
	[dt 
		"Running Speed
	]dt
	[dd 
		"2048 subpixels (8 pixels) per frame
		$LF
		[dt 
			"Running Braking rate
		]dt
		[dd 
			"192 subpixels (3/4 pixels) per frame per frame
			$LF
			[dt 
				"Running Deceleration (vertical, holding forward, at or below Running Speed)
			]dt
			[dd 
				" 8 subpixels (1/32 pixels) per frame per frame
				$LF
				[dt 
					"Max Spindash Speed
				]dt
				[dd 
					"3840 subpixels (15 pixels) per frame
					$LF
					[dt 
						"Double the following values
					]dt
					[dd 
						"Running Acceleration, Air Acceleration
						$LF
					]dd
				]dd
			]dd
		]dd
	]dd
]dl
[p 
	[b 
		"Ability Notes
	]b
	":
	$LF
]p
[ul 
	[li 
		"Super Tails has all abilities of Tails
		$LF
	]li
	[li 
		"Super Tails is invulnerable to attack
		$LF
	]li
	[li 
		"Super Tails has a greatly reduced deceleration due to gravity when running up a sloped surface.
		$LF
	]li
	[li 
		"Super Tails loses rings at a rate of 1 ring every 61 frames
		$LF
	]li
	[li 
		"Super Tails reverts to standard Tails when his ring count reaches 0
		$LF
	]li
	[li 
		"Super Tails is surrounded by four invulnerable flickies that actively attack nearby bosses and other badniks
		$LF
	]li
	[li 
		"Super Tails requires 7 super emeralds to obtain
		$LF
	]li
]ul
[h4 
	" Knuckles
	$LF
	[a id=heading-28444 
	]a
]h4
[p 
	[em 
		"Normal
	]em
	$LF
]p
[dl 
	[dt 
		"Jump Strength
	]dt
	[dd 
		"1536 subpixels (6 pixels) per frame
		$LF
		[dt 
			"Running Speed
		]dt
		[dd 
			"1536 subpixels (6 pixels) per frame
			$LF
			[dt 
				"Running Acceleration
			]dt
			[dd 
				"12 subpixels (3/64 pixels) per frame per frame
				$LF
				[dt 
					"Running Braking Rate (holding backward)
				]dt
				[dd 
					"128 subpixels (1/2 pixels) per frame per frame
					$LF
					[dt 
						"Running Deceleration (holding nothing)
					]dt
					[dd 
						" 12 subpixels (3/64 pixels) per frame per frame
						$LF
						[dt 
							"Running Deceleration (vertical, holding forward, movement above Running Speed)
						]dt
						[dd 
							" 32 subpixels (1/8 pixels) per frame per frame
							$LF
							[dt 
								"Running Deceleration (vertical, holding forward, at or below Running Speed)
							]dt
							[dd 
								" 20 subpixels (5/64 pixels) per frame per frame
								$LF
								[dt 
									"Max Spindash Speed
								]dt
								[dd 
									"3072 subpixels (12 pixels) per frame
									$LF
									[dt 
										"Rolling Deceleration
									]dt
									[dd 
										"6 subpixels (3/128 pixels) per frame per frame
										$LF
										[dt 
											"Rolling Braking rate
										]dt
										[dd 
											"32 subpixels per frame per frame + Rolling Deceleration
											$LF
											[dt 
												"Air Acceleration
											]dt
											[dd 
												"24 subpixels (3/32 pixels) per frame per frame
												$LF
												[dt 
													"Initial Glide Speed
												]dt
												[dd 
													"1024 subpixels (4 pixels) per frame
													$LF
													[dt 
														"Maximum Glide Speed
													]dt
													[dd 
														"6144 subpixels (24 pixels) per frame
														$LF
														[dt 
															"Gliding X Acceleration
														]dt
														[dd 
															"4 subpixels (1/64 pixels) per frame per frame
															$LF
															[dt 
																"Gliding Initial Downward Boost
															]dt
															[dd 
																"512 subpixels (2 pixels) per frame downward + Gravity, to a minimum of 56 subpixels (7/32 pixels) per frame downward.
																$LF
																[dt 
																	"Gliding stabilized fall speed
																]dt
																[dd 
																	" ~112 subpixels (7/16 pixels) per frame
																	$LF
																	[dt 
																		"Falling From Glide Initial X Speed
																	]dt
																	[dd 
																		" 256 + (Glide Speed + Gliding X Acceleration - 1024) / 4
																		$LF
																		[dt 
																			"Climbing rate
																		]dt
																		[dd 
																			" 1 pixel per frame
																			$LF
																			[dt 
																				"Walljump Initial Y Velocity
																			]dt
																			[dd 
																				"896 subpixels (3 & 1/2 pixels) per frame, upward
																				$LF
																				[dt 
																					"Walljump Initial X Velocity
																				]dt
																				[dd 
																					"1024 subpixels (4 pixels) per frame, away from the wall
																					$LF
																				]dd
																			]dd
																		]dd
																	]dd
																]dd
															]dd
														]dd
													]dd
												]dd
											]dd
										]dd
									]dd
								]dd
							]dd
						]dd
					]dd
				]dd
			]dd
		]dd
	]dd
]dl
[p 
	[b 
		"Ability Notes
	]b
	":
	$LF
]p
[ul 
	[li 
		"Knuckles can glide as his double jump action
		$LF
	]li
	[li 
		"Knuckles receives a small boost to his downward speed when he begins gliding, which then stabilizes
		$LF
	]li
	[li 
		"Knuckles will glide until the player stops holding the jump button, he glides into a wall he cannot stick to, he reaches the floor and slides to a halt, he takes damage, or he lands on a sprite-based platform
		$LF
	]li
	[li 
		"Maximum gliding speed is only attainable by gliding while something holds Knuckles in place for several seconds
		$LF
	]li
	[li 
		"Gliding has a maximum speed of 4 subpixels (1/64 pixels) per frame when vertical position is below 0
		$LF
	]li
	[li 
		"When Knuckles glides onto normal terrain, he begins sliding to a halt
		$LF
	]li
	[li 
		"If Knuckles slides off the edge of terrain before coming to a halt, he resumes gliding
		$LF
	]li
	[li 
		"Knuckles can glide up terrain at his x-velocity, immune to its slope, unless it is a "slide".
		$LF
	]li
	[li 
		"When Knuckles glides onto a sprite-based platform, he does not slide, but instead begins running immediately.
		$LF
	]li
	[li 
		"Knuckles will stick to most walls when he glides into them
		$LF
	]li
	[li 
		"Knuckles can climb walls once stuck to them
		$LF
	]li
	[li 
		"Knuckles can perform a small jump from a wall climb
		$LF
	]li
	[li 
		"Sticking to a wall resets Knuckles' horizontal subpixel position to a value specific to that wall, or at least to that wall's horizontal pixel position
		$LF
	]li
	[li 
		"Swinging onto a ledge or dropping from a wall without jumping resets Knuckles' vertical subpixel position to a value specific to that floor, or at least that floor's vertical pixel position.
		$LF
	]li
]ul
[p 
	[b 
		"Note
	]b
	": For the following status effects, values not noted are unchanged from normal.
	$LF
]p
[p 
	[em 
		"With Speed Shoes
	]em
	$LF
]p
[dl 
	[dt 
		"Double the following values
	]dt
	[dd 
		"Running Speed, Running Acceleration, Air Acceleration
		$LF
	]dd
]dl
[p 
	[b 
		"Note
	]b
	": Transforming (super/hyper) or entering water will instantly cancel any active speed shoes.
	$LF
]p
[p 
	[em 
		"When Underwater
	]em
	" 
	$LF
]p
[dl 
	[dt 
		"Halve the following values
	]dt
	[dd 
		"Gravity, Jump Strength, Running Acceleration, Running Braking Rate, Running Deceleration, Air Acceleration, Rolling Deceleration
		$LF
	]dd
]dl
[p 
	[em 
		"When Super
	]em
	$LF
]p
[dl 
	[dt 
		"Running Speed
	]dt
	[dd 
		"2048 subpixels (8 pixels) per frame
		$LF
		[dt 
			"Running Braking rate
		]dt
		[dd 
			"192 subpixels (3/4 pixels) per frame per frame
			$LF
			[dt 
				"Running Deceleration (vertical, holding forward, at or below Running Speed)
			]dt
			[dd 
				" 8 subpixels (1/32 pixels) per frame per frame
				$LF
				[dt 
					"Max Spindash Speed
				]dt
				[dd 
					"3840 subpixels (15 pixels) per frame
					$LF
					[dt 
						"Gliding X Acceleration
					]dt
					[dd 
						"12 subpixels (3/64 pixels) per frame per frame
						$LF
						[dt 
							"Double the following values
						]dt
						[dd 
							"Running Acceleration, Air Acceleration, Climbing Rate
							$LF
						]dd
					]dd
				]dd
			]dd
		]dd
	]dd
]dl
[p 
	[b 
		"Ability Notes
	]b
	":
	$LF
]p
[ul 
	[li 
		"Super Knuckles has all the abilities of Knuckles
		$LF
	]li
	[li 
		"Super Knuckles is invulnerable to attack
		$LF
	]li
	[li 
		"Super Knuckles has a greatly reduced deceleration due to gravity when running up a sloped surface... at a low speed.
		$LF
	]li
	[li 
		"Super Knuckles loses rings at a rate of 1 ring every 61 frames
		$LF
	]li
	[li 
		"Super Knuckles reverts to standard Knuckles when his ring count reaches 0
		$LF
	]li
]ul
[p 
	[em 
		"When Hyper
	]em
	[br 
	]br
	$LF
	[b 
		"Ability Notes
	]b
	":
	$LF
]p
[ul 
	[li 
		"Hyper Knuckles has all the abilities and statistics of Super Knuckles
		$LF
	]li
	[li 
		"Hyper Knuckles can breathe underwater without a water shield or bubbles
		$LF
	]li
	[li 
		"By gliding into a wall when either his horizontal or vertical velocity exceed a certain value, Hyper Knuckles can cause an earthquake which destroys all enemies within rendering range of the camera. This will also enter any active star rings for bonus stages within rendering range.
		$LF
	]li
]ul
