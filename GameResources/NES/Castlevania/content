23
[div class= 
	[ul class=nav nav-tabs role=tablist 
		[li class=nav-item 
			[a class=active nav-link data-toggle=tab href=#tabs-21-0 
				"Misc. tricks
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-21-1 
				"Enemies
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-21-2 
				"RAM addresses
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-21-3 
				"Random item drops algorithm
			]a
		]li
	]ul
	[div class=tab-content 
		[div class=tab-pane active id=tabs-21-0 
			[div class=p 
				[b 
					"Damage dealing tricks
				]b
				$LF
			]div
			[div class=p 
				[b 
					"Adding own damage into enemy damage
				]b
				$LF
			]div
			[div class=p 
				"Stub explanation: In some circumstances, taking damage at the
				$LF
				"same time an enemy takes damage may cause the own damage to be
				$LF
				"added to the enemy's damage, greatly increasing the rate at which
				$LF
				"the enemy approaches death.
				$LF
			]div
			[div class=p 
				(__wikiLink|/TODO|TODO)
				": Explain this trick.
				$LF
			]div
			[div class=p 
				[b 
					"Shortcut tricks
				]b
				$LF
			]div
			[div class=p 
				[b 
					"Bumping from enemies to reach upper platforms
				]b
				$LF
			]div
			[div class=p 
				"A brief description of what happens when Simon takes damage:
				$LF
			]div
			[div class=p 
				"When Simon takes damage, he is knocked up into the air and pushed either left or right of his previous position (assuming there is no ceiling immediately above him).  For example, if Simon suffers a blow from his left side, he will be knocked to the right of his former position, first rising up in the air and later falling back down towards the ground. The jump peaks at 14 Y coordinates higher than his original position.
				$LF
			]div
			[div class=p 
				[img class=embedright src=https://i.imgur.com/DD9jSWs.gif 
				]img
				$LF
				"Abusing this feature:
				$LF
			]div
			[div class=p 
				"The above holds true when Simon is already in the air.  Experienced players can use this to perform a double jump.  Here is an example: Simon jumps right.  While in the  air, Simon is hit by a monster on his left side.  Simon now launches to the right, first rising in the air followed by falling towards the ground.  This can be abused to reach platforms that are out of Simon's normal horizontal jumping range.  The first step is jumping towards a desired platform, hitting an enemy during the jump that causes Simon to get bumped further up and to the left or right.  In many of the Castlevania movies on this site, this trick is used with the bats in stage 2 in order to avoid the scene where Simon must fight or dodge the fishmen.
				$LF
			]div
			[div class=p 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				$LF
			]div
			[div class=p 
				[img class=embedright src=https://i.imgur.com/waN8Nyp.gif 
				]img
				$LF
			]div
			[div class=p 
				[br 
				]br
				$LF
			]div
			[div class=p 
				"This trick can also be used to ascend to platforms that are exactly 3 "blocks" above a lower platform (example: Stage 4 after climbing stairs, Stage 7 before climbing stairs, stage 12 before Frankenstein's monster, etc).  First, wait or manipulate an enemy to approach a desired platform 3 blocks above the current platform.  Second, time a jump so that Simon is partially inside the platform above him when damage is taken.  Simon's reaction to damage causes him to be launched high enough to pass through the horizontal threshold of the higher platform.  Once a certain height is gained, the game is programmed to push Simon up and through the higher platform instead of falling back down to the first platform.   With practice, this shortcut can be performed quite easily in real time.
				$LF
			]div
			[div class=p 
				(__wikiLink|/TODO|TODO)
				": Revise the current explanation of this trick (perhaps copy explanation from another tricks page).
				$LF
			]div
			[div class=p 
				[br 
				]br
				$LF
			]div
			[div class=p 
				[b 
					"Simon's speed and simple tricks to save time
				]b
				$LF
			]div
			[div class=p 
				[b 
					"Basic speed
				]b
				$LF
			]div
			[div class=p 
				"While walking, jumping or being knocked away by damage, Simon has the same horizontal speed: one pixel per frame. But when pushed by taking damage, you will lose time at the moment you are hit and after landing, so you'd better walk or jump, obviously. Using stairs is two times slower than walking or jumping, and it is better to jump off a platform than just letting Simon fall from it, which is also slower.
				$LF
			]div
			[div class=p 
				"An interesting note about moving platforms, found in levels such as 4, 5 and 10: when walking on them, their movement doesn't affect Simon's walking speed, even if they're moving in the opposite direction. In stage 10, you can't avoid waiting on some of these, and you'll notice that their movement speed is quite erratic.
				$LF
			]div
			[div class=p 
				[img class=embedright src=https://i.imgur.com/bJJy7kP.gif 
				]img
				$LF
				[b 
					"Landing from a high jump
				]b
				$LF
			]div
			[div class=p 
				"If a jump causes you to land too far below your starting point, Simon will crouch and be unable to move for a short time. If you use the whip during your jump, and time it so that the attack animation ends on the same frame that you touch the ground, you will regain control immediately.
				$LF
			]div
			[div class=p 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				$LF
			]div
		]div
		[div class=tab-pane fade id=tabs-21-1 
			[div class=p 
				[b 
					"Enemy behavior and how to manipulate them
				]b
				$LF
			]div
			[div class=p 
				[b 
					"Bat and medusa head
				]b
				$LF
				[img class=embedleft src=http://media.tasvideos.org/cvtricks/batandmedusahead.png 
				]img
				$LF
				[img class=embedright src=http://media.tasvideos.org/cvtricks/batheight.png 
				]img
				$LF
			]div
			[div class=p 
				"They can appear from the left or right edge of the screen, depending on the situation. Usually, Simon's orientation seems to be the main factor in which side they come from. You can have total control of the height at which they spawn, too: it depends entirely on Simon's own Y position.
				$LF
			]div
			[div class=p 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				$LF
				[img class=embedright src=http://media.tasvideos.org/cvtricks/batwalkorjump.gif 
				]img
				$LF
			]div
			[div class=p 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				$LF
				"Special case: bats hanging from walls.
				[br 
				]br
				$LF
				"Only found in stages 4 and 6, they wait for you to approach before attacking. The character must be at a close enough Y position to trigger them. It is really apparent at the very beginning of stage 4, where you can walk past the bat, under it, and climb upstairs without it noticing you. These hanging bats can be manipulated to a certain extent. The player may make a well timed jump to delay or provoke (in stage 6, for example) them.
				$LF
			]div
			[blockquote 
				"Note: these tricks tend to point at some kind of horizontal corridor with a fixed height in which the hanging bat can detect the player. Jumping to delay it would then mean going above this corridor to avoid being seen too soon, for example. This is just speculation based on observation.
				$LF
			]blockquote
			[div class=p 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				$LF
				[b 
					"Hunchback
				]b
				$LF
				[img class=embedleft src=https://i.imgur.com/q32TvIT.png 
				]img
				$LF
			]div
			[div class=p 
				"They only have two moves: a short jump and a high jump. The short jump is their fastest way of moving; Simon can't outrun them by just walking away. If you are being chased by hunchbacks, you might want them to perform their high jumps so they can't catch you, because this move is slower than your walking speed. But how can they be manipulated?
				$LF
			]div
			[div class=p 
				"Manipulating the hunchback:
				[br 
				]br
				$LF
				"It's one of the easiest enemies to control, if you know how it works. Simply put, they just check Simon's orientation at one specific frame to chose which kind of jump to do: they make a high jump if you look at them on the seventh frame after they land. Let's say that a hunchback is following you while you are walking and you want to continue your progression without losing time dealing with him, here is a step by step guide on how to make him do a high jump:
				$LF
			]div
			[ul 
				[li 
					"advance until the hunchback lands from his last jump
					$LF
				]li
				[li 
					"from this frame (when his feet are on the ground), walk away from it for 6 frames
					$LF
				]li
				[li 
					"now hold the opposite direction on the controller and advance one frame
					$LF
				]li
				[li 
					"resume walking, and it will do a high jump.
					$LF
				]li
			]ul
			[div class=p 
				[img class=embedleft src=https://i.imgur.com/gAUFx3o.png 
				]img
				$LF
			]div
			[div class=p 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				" 
				[br 
				]br
				$LF
			]div
			[div class=p 
				"Note that there is a limit to this trick. The hunchbacks can only be manipulated if they are close to you. When too far, they will always make small jumps. Be aware of the lag as well - don't count lag frames toward the six frames.
				$LF
			]div
			[div class=p 
				"There is an useful technique, derived from this one. If there are more than one hunchback after you, or if you want to travel long distances while being chased, you can reduce the number of frames lost by turning back each time you want to manipulate the enemy(ies). Just jump backwards right after turning back. You can even continue jumping repeatedly that way. Not a single frame will be wasted between jumps and Simon will face the hunchback(s) all the way to his destination.
				$LF
			]div
		]div
		[div class=tab-pane fade id=tabs-21-2 
			[div class=p 
				[b 
					"List of addresses
				]b
				$LF
			]div
			[div class=p 
				"See below for an individual explanation on each of them.
				$LF
			]div
			[table 
				[tbody 
					[tr 
						[th 
							"Address
						]th
						[th 
							"Description
						]th
					]tr
					[tr 
						[td 
							"0045
						]td
						[td 
							"Simon's HitPoints
						]td
					]tr
					[tr 
						[td 
							"01A9
						]td
						[td 
							"Boss HitPoints
						]td
					]tr
					[tr 
						[td 
							"058B
						]td
						[td 
							"Left mummy's HitPoints
						]td
					]tr
					[tr 
						[td 
							"058C
						]td
						[td 
							"Right mummy's HitPoints
						]td
					]tr
					[tr 
						[td 
							"0040
						]td
						[td 
							"Your x position in the level
						]td
					]tr
					[tr 
						[td 
							"0354
							[br 
							]br
							"or 003F
						]td
						[td 
							"Your y position
						]td
					]tr
					[tr 
						[td 
							"0568
						]td
						[td 
							"Whip timer
						]td
					]tr
					[tr 
						[td 
							"0488
						]td
						[td 
							"Jump timer
						]td
					]tr
					[tr 
						[td 
							"005B
						]td
						[td 
							"Invincibility timer (after taking damage)
						]td
					]tr
				]tbody
			]table
			[div class=p 
				[br 
				]br
				$LF
				[b 
					"HitPoints
				]b
				$LF
			]div
			[div class=p 
				"Self explanatory. It starts at 64 and the corresponding character or boss dies when it drops to 0.
				$LF
			]div
			[div class=p 
				"The two mummies share the "classic" boss HP meter (01A9) but they each have their own address which starts at 32.
				$LF
			]div
			[div class=p 
				[br 
				]br
				$LF
				[b 
					"x and y position
				]b
				$LF
			]div
			[div class=p 
				"They indicate where you are located in the level.
				$LF
			]div
			[div class=p 
				"There are two y addresses here. They are really similar, the only differnce is that the second one (003F) updates one frame sooner. The higher the value, the lower you are on the screen.
				$LF
			]div
			[div class=p 
				(__wikiLink|/TODO|TODO)
				": maybe only keep one of the two y addresses.
				$LF
			]div
			[div class=p 
				[br 
				]br
				$LF
				[b 
					"Timers
				]b
				$LF
			]div
			[div class=p 
				"These addresses are particularly useful to perform some tricks and make actions at a frame perfect precision. When you'll read a hint which looks like "do this at xx", it means that you have to do the action mentioned while using 
				[a class=intlink href=/Glossary#FrameAdvance 
					"frame advance
				]a
				" when the value is exactly "xx"; the game will actually take the button press into account a frame later.
				$LF
			]div
			[div class=p 
				"Here are the timers and what they can be used for.
				$LF
			]div
			[div class=p 
				[br 
				]br
				$LF
				"-The whip timer:
				$LF
			]div
			[div class=p 
				"When you attack with the whip, this value will count from 1 to 22; it basically covers all the frames of the attack animation. It is important because you can't do anything until the value hits 22, but when it does (it becomes exactly 22), you regain control: you can whip again, even in the air, or walk, jump, etc...
				$LF
			]div
			[div class=p 
				[em 
					"note: when you whip, the attack connects at 17
				]em
				$LF
			]div
			[div class=p 
				[br 
				]br
				$LF
				"-The jump timer:
				$LF
			]div
			[div class=p 
				"Like the whip timer, it starts to count whenever you jump, but it stops only when you land or do another action, like whipping or... Taking damage. Yes. It loses its usefulness in these cases.
				$LF
			]div
			[div class=p 
				"Here is how to use it.
				[br 
				]br
				$LF
				"Let's start with an example: you are on a flat surface and jump. When the timer hits 40 is the earliest frame where you can make another input, be it another jump right after landing, starting walking again, or anything else. Attacking is still possible anytime in a jump, though.
				$LF
			]div
			[div class=p 
				"Now, in the game, you won't always land at the same height from where you jumped. Here comes a list of values to look for depending of where you jump to; the first part is where you land, the number is the value of the timer at which you can enter your next input:
				$LF
			]div
			[ul 
				[li 
					"2 blocks higher: 29
					$LF
				]li
				[li 
					"1 block higher: 36
					$LF
				]li
				[li 
					"at the same height: 40
					$LF
				]li
				[li 
					"1 block lower: 42
					$LF
				]li
				[li 
					"2 blocks lower: 44
					$LF
				]li
				[li 
					"3 blocks lower: 46
					$LF
				]li
				[li 
					"4 blocks lower: 
					[em 
						"WARNING! Special case
					]em
					", you may want to whip at 27 (see 
					[b 
						"landing from a high jump
					]b
					" in the 
					[b 
						"Misc. tricks
					]b
					" tab)
					$LF
				]li
				[li 
					"6 blocks lower (it happens in stage 17), see above but whip at 31.
					$LF
				]li
			]ul
			[div class=p 
				"Note: be careful around moving platforms with this; particularly in the end of stage 4: if you jump from the blocks below the moving platform to reach the door, the timing is not the same for some reason.
				$LF
			]div
			[div class=p 
				[br 
				]br
				$LF
				"-The invincibility timer:
				$LF
			]div
			[div class=p 
				"This timer activates when you take damage, it keeps track of your invincibility frames. In fact it doesn't start before you touch the ground after a hit, but you are already invincible when being ejected by the blow. When damaged on stairs, it starts counting immediately, giving you less actual invulnerability time.
				$LF
			]div
			[div class=p 
				"This one counts down to 0, starting from 48, 
				[em 
					"and goes down by one unit every two frames
				]em
				". As soon as it reaches 0, Simon is vulnerable again. You have nearly 100 frames of invincibility at your disposal.
				$LF
			]div
		]div
		[div class=tab-pane fade id=tabs-21-3 
			[pre 
				[code class=language-sh 
					"var FrameCounter = byte at RAM[0x1A],
					$LF
					"    CurrentStage = byte at RAM[0x28],
					$LF
					"    SpecialItemCounter = byte at RAM[0x7B],
					$LF
					"    CurrentSpecialWeapon = byte at RAM[0x15B],
					$LF
					"    MultiplierSpawnCounter = byte at RAM[0x79],
					$LF
					"    SpecialWeaponOnScreen = byte at RAM[0x72],
					$LF
					"    WhipLength012 = RAM[0x70],
					$LF
					"    NumberOfHearts = RAM[0x71],
					$LF
					"    CurrentMultiplier = RAM[0x64],
					$LF
					"    CurrentRandomBonusId = RAM[0x6F]
					$LF
				]code
			]pre
			[pre 
				[code class=language-sh 
					"function SpawnItem_WhenEnemyDies: # Is at $1E09A:
					$LF
					"  var ai_type = this->ObjectAItype
					$LF
					"  
					$LF
					"  if((ai_type < 32 AND ai_type ≠ 11) OR (ai_type ≥ 40))
					$LF
					"  {
					$LF
					"    if((FrameCounter MOD 16) = 2)
					$LF
					"      return this->SpawnSpecialItem();
					$LF
					"  }
					$LF
					"  
					$LF
					"  if(ai_type = 10 OR ai_type = 19)
					$LF
					"  {
					$LF
					"    return this->BecomeBonusItem(4);  # unconditionally a large heart
					$LF
					"  }
					$LF
					$LF
					"  var default_item ≔ 0; # random bonus
					$LF
					"  
					$LF
					"  if(ai_type = 3 OR ai_type = 8 OR ai_type = 12 OR ai_type = 14 OR ai_type = 18)
					$LF
					"  {
					$LF
					"    default_item ≔ 4; # a large heart instead of random bonus
					$LF
					"    # (but it can still become a multiplier instead of large heart)
					$LF
					"  }
					$LF
					"  
					$LF
					"  if( (FrameCounter MOD 8) ≠ 0)
					$LF
					"    ai_type ≔ 0x30 # just disappears after a while, no bonus!
					$LF
					"  else
					$LF
					"    ai_type ≔ 0x31 # will become a bonus item.
					$LF
					"  
					$LF
					"  this->BecomeBonusItem(default_item, ai_type);
					$LF
				]code
			]pre
			[pre 
				[code class=language-sh 
					"function GetCurrentLevel:
					$LF
					"  return floor((CurrentStage - 1) / 3)
					$LF
				]code
			]pre
			[pre 
				[code class=language-sh 
					"function SpawnSpecialItem:
					$LF
					"  var special_table ≔ Array(0..5, 0..3)
					$LF
					"  {
					$LF
					"    {10,15,11,0},  # level 0(boss:bat):          rosary, watch, firebomb, <none>
					$LF
					"    {11,10,0,9},   # level 1(boss:medusa):       firebomb, rosary, <none>, boomerang
					$LF
					"    {10,10,14,0},  # level 2(boss:mummies):      rosary, rosary, amphora, <none>
					$LF
					"    {10,14,13,0},  # level 3(boss:frankenstein): rosary, amphora, axe, <none>
					$LF
					"    {0,15,14,8},   # level 4(boss:death):        <none>, watch, amphora, dagger
					$LF
					"    {9,15,10,0}    # level 5(boss:dracula):      boomerang, watch, rosary, <none>
					$LF
					"  }
					$LF
					$LF
					"  # Note: SpecialItemCounter is a global variable that is never ever referenced
					$LF
					"  # anywhere else but in this function. It is a 2-bit counter.
					$LF
					$LF
					"  do {
					$LF
					"    var special_item ≔ special_table[ GetCurrentLevel ] [ (++SpecialItemCounter) MOD 4 ];
					$LF
					"  } while(special_item = CurrentWeapon);
					$LF
					$LF
					"  this->BecomeBonusItem (special_item)
					$LF
				]code
			]pre
			[pre 
				[code class=language-sh 
					"function BecomeBonusItem(bonustype, ai_type = 0x31):
					$LF
					"  # This function does not really change the item yet.
					$LF
					"  # It only assigns the AI to be used by this object.
					$LF
					"  this->AItype     ≔ ai_type
					$LF
					"  this->BonusType  ≔ bonustype
					$LF
				]code
			]pre
			[pre 
				[code class=language-sh 
					"function BecomeActor(actorid):
					$LF
					"  # This function creates the actual object from the given id.
					$LF
					"  # implementation is omitted here, it is not relevant.
					$LF
				]code
			]pre
			[pre 
				[code class=language-sh 
					"var TranslateBonusIdToActorId = Array(0..15)
					$LF
					"  {0x0F,0x0E,0x05,0x0C,0x42,0x10,0x23,0x00,0x17,0x43,0x0A,0x44,0x2F,0x18,0x45,0x46};
					$LF
				]code
			]pre
			[pre 
				[code class=language-sh 
					"function RunObjectAI_30:
					$LF
					"  if(--this->ObjectMultiPurposeCounter) return;
					$LF
					"  this->AItype ≔ 0x32;
					$LF
				]code
			]pre
			[pre 
				[code class=language-sh 
					"function RunObjectAI_32:
					$LF
					"  this->StopExisting();
					$LF
				]code
			]pre
			[pre 
				[code class=language-sh 
					"function RunObjectAI_2F:
					$LF
					"  # Common AI code for bonus actors. Omitted here.
					$LF
				]code
			]pre
			[pre 
				[code class=language-sh 
					"function RunObjectAI_31:
					$LF
					"  if(--this->ObjectMultiPurposeCounter) return;
					$LF
					"  this->AItype ≔ 0x2F;
					$LF
					$LF
					"  switch(this->BonusType MOD 16)
					$LF
					"  {
					$LF
					"    default:
					$LF
					"      if(SpecialWeaponOnScreen OR (CurrentWeapon = this->BonusType))
					$LF
					"        return this->BecomeTinyRandomBonusA();
					$LF
					"      SpecialWeaponOnScreen ≔ 0xFF;
					$LF
					"      # fallthrough:
					$LF
					"    case 5: # beef
					$LF
					"    case 6: # red sphere
					$LF
					"    case 7: # unknown (ghost?)
					$LF
					"      # Keep this decision of "bonus type", and become the actual object.
					$LF
					"      return this->BecomeActor(TranslateBonusIdToActorId[this->BonusType]);
					$LF
					$LF
					"    case 1: # bonus sac
					$LF
					"      this->BecomeActor(0x0E); # become a sac
					$LF
					"      this->PaletteIndex ≔ this->BonusType SHR 4;
					$LF
					"      return;
					$LF
					"    
					$LF
					"    case 12: # multiplier
					$LF
					"      # Try becoming a multiplier
					$LF
					"      
					$LF
					"      MultiplierSpawnCounter ≔ 0;
					$LF
					"      var tmp ≔ CurrentMultiplier;
					$LF
					"      if(tmp < 2)
					$LF
					"      {
					$LF
					"        this->BonusType ≔ 12;
					$LF
					"        tmp ≔ tmp + BonusTypeToActorTypeTransTable[this->BonusType];
					$LF
					"        return this->BecomeActor(tmp);
					$LF
					"      }
					$LF
					"      # passthru
					$LF
					$LF
					"    case 0: # small heart or a sac of some value
					$LF
					"      return this->BecomeCompletelyRandomBonus();
					$LF
					"  }
					$LF
				]code
			]pre
			[pre 
				[code class=language-sh 
					"function BecomeCompletelyRandomBonus:
					$LF
					"  # It is unclear where MultiplierSpawnCounter is incremented.
					$LF
					"  # It happens at $E65D, but the circumstances in which that
					$LF
					"  # code is executed are not clear. It seems to occur whenever
					$LF
					"  # a special weapon delivers damage, though. In the case of
					$LF
					"  # the fire bomb, for enemies that are not immediately killed
					$LF
					"  # from damage, it can mean that the counter is incremented
					$LF
					"  # by ~50 times at once.
					$LF
					"  if(MultiplierSpawnCounter ≥ 10)
					$LF
					"  {
					$LF
					"    # Try becoming a multiplier
					$LF
					"    
					$LF
					"    MultiplierSpawnCounter = 0;
					$LF
					"    var tmp ≔ CurrentMultiplier;
					$LF
					"    if(tmp < 2)
					$LF
					"    {
					$LF
					"      this->BonusType ≔ 12;
					$LF
					"      tmp ≔ tmp + BonusTypeToActorTypeTransTable[this->BonusType];
					$LF
					"      return this->BecomeActor(tmp);
					$LF
					"    }
					$LF
					"  }
					$LF
					"  if(NOT SpecialWeaponOnScreen)
					$LF
					"  {
					$LF
					"    if(NumberOfHearts < 8)
					$LF
					"    {
					$LF
					"      if(NumberOfHearts ≥ 4 AND WhipLength012 < 1)
					$LF
					"        return this->BecomeWhipUpgrade();
					$LF
					"    }
					$LF
					"    else if(WhipLength012 < 2)
					$LF
					"      return this->BecomeWhipUpgrade();
					$LF
					"  }
					$LF
					"  return this->BecomeTinyRandomBonusA();
					$LF
				]code
			]pre
			[pre 
				[code class=language-sh 
					"function BecomeTinyRandomBonusA:
					$LF
					"  this->BonusType ≔ CurrentRandomBonusId MOD 2; # 0 = heart, 1 = sac
					$LF
					"  return this->BecomeActor(TranslateBonusIdToActorId[this->BonusType]);
					$LF
				]code
			]pre
			[pre 
				[code class=language-sh 
					"function BecomeWhipUpgrade:
					$LF
					"  SpecialWeaponOnScreen ≔ 0xFF;
					$LF
					"  this->BonusType ≔ 3; # whip upgrade
					$LF
					"  return this->BecomeActor(TranslateBonusIdToActorId[this->BonusType]);
					$LF
				]code
			]pre
			[pre 
				[code class=language-sh 
					"# This code is executed non-stop in the main-loop of the program.
					$LF
					"# Each time NMI resumes, it returns to this loop.
					$LF
					"# It is responsible for permutating the CurrentRandomBonusId variable.
					$LF
					"# If you want to influence the outcome of this loop before the next NMI,
					$LF
					"# you need to influence the number of CPU cycles spent in the previous NMI.
					$LF
					"function MainLoop:
					$LF
					"  var RandomTable ≔ Array(0..15)
					$LF
					"  {
					$LF
					"    0x33,0xBB,0x3F,0x80,
					$LF
					"    0x2E,0xA9,0x61,0x87,
					$LF
					"    0xAD,0xC3,0xB2,0xC8,
					$LF
					"    0x7C,0x25,0x48,0x7A
					$LF
					"  };
					$LF
					"  loop_forever:
					$LF
					"  {
					$LF
					"    var tmp ≔ (CurrentRandomBonusId OR FrameCounter) AND 15;
					$LF
					"    CurrentRandomBonusId ≔ RandomTable[tmp];
					$LF
					"  }
					$LF
				]code
			]pre
		]div
	]div
]div
