13
[h3 id=Positioning 
	" Positioning
	$LF
]h3
[div class=p 
	"Y subpixels roll "randomly" every frame, like in Duck Tales and Chip'n'Dale.
	$LF
]div
[h3 id=Randomness 
	" Randomness
	$LF
]h3
[div class=p 
	"Addresses 
	[tt 
		"$E4-$E7
	]tt
	" get RORed every gameplay frame, and sometimes additional small manipulations are done with either 
	[tt 
		"$E4-$E5
	]tt
	" or 
	[tt 
		"$E6-$E7
	]tt
	" whenever random even is about to occur (item drops from dying enemies, bosses actions).
	$LF
]div
[div class=p 
	"End values can be affected by killing enemies at different frames, by spawning enemies that roll RNG at different frames.
	$LF
]div
[h3 id=Bosses 
	" Bosses
	$LF
]h3
[div class=p 
	"Each boss has his own randomness (if any) and can't be manipulated during the fight. But they roll their RNG routines at fixed time relatively to boss room start, so by entering it at different frames one should be able to manipulate the pattern the boss will take during the whole fight.
	$LF
]div
[h4 id=TheLiquidator 
	" The Liquidator
	$LF
]h4
[div class=p 
	"He moves around the screen, then whenever he reaches position 0x40, 0x80, or 0xC0, he rolls RNGs 3 and 4, puts to Y register, reads from 
	[tt 
		"$9F6F
	]tt
	" + Y register what he should do: show up or resume swimming.
	$LF
]div
[h4 id=QuackerJack 
	" QuackerJack
	$LF
]h4
[div class=p 
	"Runs around a platform until you step on it, the next frame jumps up or down from it. If he is at the top, he will jump down, if at the bottom, he will jump up, but if he is in the middle, he rolls RNGs 1 and 2, puts to Y register, then reads from 
	[tt 
		"$9969
	]tt
	" + Y register for whether he should jump up or down.
	$LF
]div
[h4 id=Wolfduck 
	" Wolfduck
	$LF
]h4
[div class=p 
	"Is vulnerable only when the Moon is covered with a cloud, which travels by the rule: when the room fades in, the cloud is covering the Moon, and the timer ticks from 78 to 0 every frame, then the cloud starts moving left around the screen. When it reaches the Moon again, it counts down from 0xB4 to 0 and starts moving again.
	$LF
]div
[h4 id=Megavolt 
	" Megavolt
	$LF
]h4
[div class=p 
	"Jumps on a middle platform, rolls RNGs 3 and 4, puts result to Y register, reads from 
	[tt 
		"$AA69
	]tt
	" + Y register for whether he should jump up or stay on the platform. Then shoots from the platform he's on and walks off to cross the screen and jump on the other middle platform, to roll RNG once again.
	$LF
]div
[h4 id=Moliarty 
	" Moliarty
	$LF
]h4
[div class=p 
	"Starts fixing whichever machine gets broken. Walks around the platform until you touch it, then he throws a hammer in you and jumps away. His behavior doesn't really matter, since even with default gun he dies in one cycle.
	$LF
]div
[h4 id=Bushroot 
	" Bushroot
	$LF
]h4
[div class=p 
	"At certain moments, while jumping, 
	[tt 
		"$049F
	]tt
	" decrements from 7 to 0. If Bushroot is jumping when that address is 6, 4, or 2, he will roll RNGs 1 and 2, write the result to Y register, then read from 
	[tt 
		"$A83F
	]tt
	" for what he should do next.
	$LF
]div
[h4 id=Steelbeak 
	" Steelbeak
	$LF
]h4
[div class=p 
	"His behavior also doesn't matter, since bullets can reach him from the back after going through him.
	$LF
]div
[h3 id=Script 
	" Script
	$LF
]h3
[pre 
	"function getb(i,offset)
	$LF
	"	return memory.readbyte(i+offset)
	$LF
	"end
	$LF
	" function getw(i,offset)
	$LF
	"	return memory.readword(i+offset,i+offset+0x10)
	$LF
	"end
	$LF
	"function object(slot)
	$LF
	" 	a 	= 0x400 + slot
	$LF
	"	facing	= getb(a,0x000)
	$LF
	"	timer1 	= getb(a,0x010)
	$LF
	"	state	= getb(a,0x020)
	$LF
	"	timer2	= getb(a,0x030)		
	$LF
	"	yScr	= getb(a,0x040)
	$LF
	"	xScr	= getb(a,0x050)
	$LF
	"	ySub	= getb(a,0x060)
	$LF
	"	xSub	= getb(a,0x070)
	$LF
	"	timer3	= getb(a,0x080)
	$LF
	"	action	= getb(a,0x0d0)
	$LF
	"	xPos	= getw(a,0x0f0)
	$LF
	"	yPos	= getw(a,0x110)
	$LF
	"	xVelSub	= getb(a,0x130)
	$LF
	"	xVel	= getb(a,0x140)
	$LF
	"	yVelSub	= getb(a,0x150)/256
	$LF
	"	yVel	= memory.readbytesigned(a+0x160)
	$LF
	"	id	= getb(a,0x170)
	$LF
	"	if yVel >= 0
	$LF
	"	then ySpd = yVel + yVelSub
	$LF
	"	else ySpd = yVel - yVelSub
	$LF
	"	end
	$LF
	"	if action > 0 then
	$LF
	"		--gui.text(xScr,yScr,string.format("%X",state
	[em 
	]em
	")
	[em 
	]em
	[em 
	]em
	")
	[em 
	]em
	$LF
	"		gui.text( 1,1,string.format(
	$LF
	"			"X: %04d.%d\nY: %04d.%03d\nS: %.3f",
	$LF
	"			xPos,xSub/25.6,yPos,ySub,ySpd
	[em 
	]em
	")
	[em 
	]em
	[em 
	]em
	")
	[em 
	]em
	$LF
	"	end
	$LF
	"end
	$LF
	"function rng()
	$LF
	" 	rng1 = memory.readbyte(0xe4)
	$LF
	"	rng2 = memory.readbyte(0xe5)	
	$LF
	"	rng3 = memory.readbyte(0xe6)
	$LF
	"	rng4 = memory.readbyte(0xe7)
	$LF
	"	gui.text(10,10,string.format("%02X:%02X:%02X:%02X",rng1,rng2,rng3,rng4
	[em 
	]em
	")
	[em 
	]em
	[em 
	]em
	")
	[em 
	]em
	$LF
	"end
	$LF
	"function stuff()
	$LF
	"	xCam		= memory.readword(0xfc)
	$LF
	"	yCam		= memory.readword(0xfa)
	$LF
	"	bossInv		= memory.readbyte(0xed)
	$LF
	"	bossHP		= memory.readbyte(0xee)
	$LF
	"	bossSlot	= memory.readbyte(0xef)
	$LF
	"	bossX		= memory.readbyte(0x450+bossSlot)
	$LF
	"	bossY		= memory.readbyte(0x440+bossSlot)
	$LF
	"	if bossHP > 0 then
	$LF
	"		gui.text(bossX,bossY,string.format("%d\n%d",16-bossHP,bossInv
	[em 
	]em
	")
	[em 
	]em
	[em 
	]em
	")
	[em 
	]em
	$LF
	"	end
	$LF
	"	--rng()
	$LF
	"	object(0)
	$LF
	"	gui.text(xScr,yScr,memory.readbyte(0x50
	[em 
	]em
	")
	[em 
	]em
	[em 
	]em
	")
	[em 
	]em
	$LF
	"end
	$LF
	"emu.registerafter(stuff)
]pre
