24
[h4 
	" Positioning
	$LF
]h4
[p 
	"Every time you press B, 0x80 is subtracted from Y subpixel speed. Otherwise, it either is nullified (on the ground), or just increases by 8 (in midair) each frame. Max Y speed is 3.0.
	$LF
]p
[p 
	"Every frame you hold direction, X subpixel speed increases by 16. Limit is 2.00.
	$LF
]p
[h4 
	" Enemies
	$LF
]h4
[p 
	"They spawn with frame step of 46. Spawn slot depends on RNG which is rolled several times per frame while enemies or their eggs, or frag score is on-screen. So by picking eggs at different frames you can manipulate where the next enemy spawns.
	$LF
]p
[p 
	"However, in the first wave, they always spawn at the same spots: upper, upper and left slots.
	$LF
]p
[p 
	"Addresses $7C-$80 show which enemy occupies what spawn slot.
	$LF
]p
[h4 
	" Details
	$LF
]h4
[div class= 
	[ul class=nav nav-tabs role=tablist 
		[li class=nav-item 
			[a class=active nav-link data-toggle=tab href=#tabs-718-0 
				"RAM
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-718-1 
				"HUD Script
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-718-2 
				"RNG Roll
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-718-3 
				"Set spawn slot
			]a
		]li
	]ul
	[div class=tab-content 
		[div class=tab-pane active id=tabs-718-0 
			[p 
				(addresses|addrset=57)
				$LF
			]p
		]div
		[div class=tab-pane fade id=tabs-718-1 
			[pre 
				[code class=language-lua 
					$LF
					"-- NES Joust HUD
					$LF
					"-- feos, 2014
					$LF
					"function Joust()
					$LF
					"	local rng    = memory.readbyte(0x2E)
					$LF
					"	local x      = memory.readbyte(0x54)
					$LF
					"	local xSub   = memory.readbyte(0x56) / 32
					$LF
					"	local y      = memory.readbyte(0x58)
					$LF
					"	local ySub   = memory.readbyte(0x5A) / 32
					$LF
					"	local xSpeedOffset = memory.readbytesigned(0x4E)
					$LF
					"	local xSpeed = memory.readbytesigned(0xCF69+xSpeedOffset) + memory.readbyte(0xCFAB+xSpeedOffset)/256
					$LF
					"	local ySpeed = memory.readbytesigned(0x52) + memory.readbyte(0x50)/256
					$LF
					"	local s1     = memory.readbyte(0x7C+0)
					$LF
					"	local s2     = memory.readbyte(0x7C+1)
					$LF
					"	local s3     = memory.readbyte(0x7C+2)
					$LF
					"	local s4     = memory.readbyte(0x7C+3)
					$LF
					"	local s5     = memory.readbyte(0x7C+4)
					$LF
					"	local s6     = memory.readbyte(0x7C+5)
					$LF
					"	gui.text(  1,224,string.format("\nSlots: %d %d %d %d %d %d",s1,s2,s3,s4,s5,s6))
					$LF
					"	gui.text(110,224,string.format("\nRNG: %X",rng))
					$LF
					"	gui.text(124,202,string.format("X: %.2f\nY: %.2f",xSpeed,ySpeed))
					$LF
					"	gui.text(180,202,string.format("X: %3d.%d\nY: %3d.%d",x,xSub,y,ySub))
					$LF
					"	RNGcount = 0
					$LF
					"end
					$LF
					"emu.registerafter(Joust)
					$LF
					$LF
				]code
			]pre
		]div
		[div class=tab-pane fade id=tabs-718-2 
			[pre 
				[code class=language-snescom 
					$LF
					"$D440 LDY #$03
					$LF
					"$D442 ASL rng1
					$LF
					"$D444 ROL rng2
					$LF
					"$D446 ROL
					$LF
					"$D447 ROL
					$LF
					"$D448 EOR rng1
					$LF
					"$D44A ROL
					$LF
					"$D44B EOR rng1
					$LF
					"$D44D LSR
					$LF
					"$D44E LSR
					$LF
					"$D44F EOR #$FF
					$LF
					"$D451 AND #$01
					$LF
					"$D453 ORA rng1
					$LF
					"$D455 STA rng1
					$LF
					"$D457 DEY
					$LF
					"$D458 BPL $D442
					$LF
					"$D45A RTS 
					$LF
					$LF
				]code
			]pre
		]div
		[div class=tab-pane fade id=tabs-718-3 
			[pre 
				[code class=language-snescom 
					$LF
					"$EB2F JSR RNG Roll
					$LF
					"$EB32 LDA rng1
					$LF
					"$EB34 AND #$03
					$LF
					"$EB36 BNE $EB3C
					$LF
					"$EB38 LDY $0032
					$LF
					"$EB3A BEQ $EB2F
					$LF
					"$EB3C STA spawn slot,X
					$LF
					$LF
				]code
			]pre
		]div
	]div
]div
