38
[p 
	"This page is dedicated to NES Battletoads and NES Battletoads & Double Dragon. Both games do have identical tricks.
	$LF
]p
[div class=toc 
	[ul 
		[li 
			[ul 
				[li 
					[a href=#Runandchargeintheoppositedirection
 
						"Run and charge in the opposite direction
						$LF
					]a
				]li
				[li 
					[a href=#Run(andcharge)whilejumping.
 
						"Run(and charge) while jumping.
						$LF
					]a
				]li
				[li 
					[a href=#WalkPlaneChanging
 
						"Walk Plane Changing
						$LF
					]a
				]li
				[li 
					[a href=#Knockthetoadoffthejet
 
						"Knock the toad off the jet
						$LF
					]a
				]li
				[li 
					[a href=#Manipulatingattackanimation
 
						"Manipulating attack animation
						$LF
					]a
				]li
				[li 
					[a href=#Jumpingfromthevoid
 
						"Jumping from the void
						$LF
					]a
				]li
				[li 
					[a href=#Superhighjumponjetandsurfboard
 
						"Super high jump on jet and surfboard
						$LF
					]a
				]li
				[li 
					[a href=#Quickfinishinglevel10
 
						"Quick finishing level 10
						$LF
					]a
				]li
				[li 
					[a href=#Level10scrollingdownwith2players
 
						"Level 10 scrolling down with 2 players 
						$LF
					]a
				]li
				[li 
					[a href=#Duckingrunning
 
						"Ducking running
						$LF
					]a
				]li
				[li 
					[a href=#GothroughSpritewalls(notrealwalls)
 
						"Go through Sprite walls (not real walls)
						$LF
					]a
				]li
				[li 
					[a href=#Gothroughtheyellowspikeonlevel4
 
						"Go through the yellow spike on level 4
						$LF
					]a
				]li
				[li 
					[a href=#StartlevelJumpingorducking
 
						"Start level Jumping or ducking
						$LF
					]a
				]li
				[li 
					[a href=#Majorslowdownonlevel6-3
 
						"Major slowdown on level 6-3
						$LF
					]a
				]li
				[li 
					[a href=#HowwallsandFloorworkonlevelswithnoZ-depth(4,6,8,9and12)
 
						"How walls and Floor work on levels with no Z-depth (4,6,8,9 and 12)
						$LF
					]a
				]li
				[li 
					[a href=#Passthroughfloorinstage4.
 
						"Pass through floor in stage 4.
						$LF
					]a
				]li
				[li 
					[a href=#ChangingthelayoutofLevel3
 
						"Changing the layout of Level 3
						$LF
					]a
				]li
				[li 
					[a href=#GlitchstickinLevels4and9.
 
						"Glitch stick in Levels 4 and 9.
						$LF
					]a
				]li
				[li 
					[a href=#OutofBoundsglitchinLevel9
 
						"Out of Bounds glitch in Level 9
						$LF
					]a
				]li
				[li 
					[a href=#Doing15timesmoredamage
 
						"Doing 15 times more damage
						$LF
					]a
				]li
				[li 
					[a href=#Heavyweighchampion
 
						"Heavy weigh champion
						$LF
					]a
				]li
				[li 
					[a href=#Warps
 
						"Warps
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#WarptoLevel3
 
								" Warp to Level 3
								$LF
							]a
						]li
						[li 
							[a href=#WarptoLevel5
 
								" Warp to Level 5
								$LF
							]a
						]li
						[li 
							[a href=#WarptoLevel6
 
								" Warp to Level 6
								$LF
							]a
						]li
						[li 
							[a href=#WarptoLevel8
 
								" Warp to Level 8
								$LF
							]a
						]li
					]ul
				]li
				[li 
					[a href=#Memorycorruptingglitches
 
						"Memory corrupting glitches
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#Levelend
 
								" Level end
								$LF
							]a
						]li
						[li 
							[a href=#Gameend
 
								" Game end
								$LF
							]a
						]li
					]ul
				]li
			]ul
		]li
	]ul
]div
[h3 id=Runandchargeintheoppositedirection
 
	"Run and charge in the opposite direction
	$LF
]h3
[p 
	"While running, simultaneously press opposite direction and attack.
	$LF
]p
[h3 id=Run(andcharge)whilejumping.
 
	"Run(and charge) while jumping.
	$LF
]h3
[p 
	"For running while jumping, tap a direction, let go, then tap the same direction + jump and hold that direction.
	$LF
	"While in the air, you are considered running so you can charge.
	$LF
	"And when the toad lands, it continues running. This trick is very useful.
	$LF
]p
[h3 id=WalkPlaneChanging
 
	"Walk Plane Changing
	$LF
]h3
[p 
	"Done by holding left+right. Depending on the level, it generates different effects:
	$LF
]p
[ul 
	[li 
		"at levels 1,3,5,7,11 nothing happens
		$LF
	]li
	[li 
		"at level 2, if you hold up+down, the toad disappears and loses functionality, so its impossible to continue
		$LF
	]li
	[li 
		"at levels 4,6,8,9 and 12 the toad's drawing sprite moves up for as long as you hold it untill falling down again after some height. The "sprite for collision detection with other sprites" move together with it. The collision with the floor, walls and ceiling doesnt move, so the toad appears to be floating. This can be usefull to avoid other sprites or to force the screen to scroll up.
		$LF
	]li
]ul
[p 
	[img class=embedright src=/images/gameresources/battletoads/8-battletoadsjetsbug.png 
	]img
	$LF
]p
[h3 id=Knockthetoadoffthejet
 
	"Knock the toad off the jet
	$LF
]h3
[p 
	"When doing 2 players at level 3, it is possible to use a walking toad to hit a toad that is riding the jet. That will make the toad get off the jet, and the jet will stay on whatever position it was when knocked. It is possible by doing this to slowly move the jets to the right, advancing on the 3rd level on bare feet (very slow process).
	$LF
]p
[h3 id=Manipulatingattackanimation
 
	"Manipulating attack animation
	$LF
]h3
[p 
	"This is used for bosses fights to reduce time of these animations and to prevent bosses from flying around the screen. You hit at the first possible frame, and at the previous frame you try to add different buttons for the attacking player. If this doesn't help, use another pad on this frame too. This is direct input manipulation, so even if a character is in his own animation at the moment, random input will still take effect.
	$LF
]p
[h3 id=Jumpingfromthevoid
 
	"Jumping from the void
	$LF
]h3
[p 
	"When you are falling into a pit, the screen can kill you if it is not scrolling down. Whether you shall die is checked by your onscreen height. It isn't tracked derectly in RAM and is calculated this way: 
	[tt 
		"if depth pos (0x493) - midair height (0x475) > 255, then you die
	]tt
	". That means if your onscreen height = 255, you can press A and jump out of nowhere. But because your falling speed is not 1 pixel per frame, you may sometimes miss 255. Try different input to influence it.
	$LF
]p
[p 
	[a class=extlink href=http://code.google.com/p/feos-tas/source/browse/trunk/LUA/BattletoadsHitbox.lua#37 rel=nofollow 
		"HUD script
	]a
	", 
	[a class=extlink href=http://www.youtube.com/watch?v=9EEbQld_nSs rel=nofollow 
		"video demo
	]a
	".
	$LF
]p
[h3 id=Superhighjumponjetandsurfboard
 
	"Super high jump on jet and surfboard
	$LF
]h3
[p 
	"To do this, touch the jet or the surfboard while going up a running jump. Basically, run and jump right before hitting the vehicle. Doesn't work with level 7's airplane because it's not gravity based.
	$LF
]p
[h3 id=Quickfinishinglevel10
 
	"Quick finishing level 10
	$LF
]h3
[p 
	"It's possible to end level 10 quickly by finishing off any of the rats. To do this, the rat must be hard hit after the bomb is exploded, and then finished off with a Boot attack. The rat has infinite HP (or higher than was tested), and this is the only way to kill him. The rat seems to have a "boss" flag set to him. So if a boss is killed, the level ends.
	$LF
]p
[h3 id=Level10scrollingdownwith2players
 
	"Level 10 scrolling down with 2 players 
	$LF
]h3
[p 
	"If both toads go over the top of the screen on level 10, the screen starts to scroll down and will only stop if one of the toads somehow falls faster than the other. It will go past the bomb, however, and knocking off the bomb is needed or else the rat will do it. One way to do it is to have player 2 grabbing player 1 at start of the level and doing a jump, then throwing player 1 at the right moment at the bomb. Player 1 grabbing player 2 doesnt seem to work.
	$LF
]p
[h3 id=Duckingrunning
 
	"Ducking running
	$LF
]h3
[p 
	"Hold down and keep tapping forward
	$LF
]p
[h3 id=GothroughSpritewalls(notrealwalls)
 
	"Go through Sprite walls (not real walls)
	$LF
]h3
[p 
	"Must touch the wall and press forward direction every other frame. Must start on the correct position or the toad wont get through, he will be standing still. In this case, alternate the every other frame.
	$LF
]p
[h3 id=Gothroughtheyellowspikeonlevel4
 
	"Go through the yellow spike on level 4
	$LF
]h3
[p 
	"The way the game detects the collision to this pike (non hazardous, it just blocks) is actually way too simple. If the player is holding "DOWN" then its not a collision. If not, it is a collision. So it doesnt matter if you are ducking, as long as you hold down, the pike will ignore the toad.
	$LF
]p
[h3 id=StartlevelJumpingorducking
 
	"Start level Jumping or ducking
	$LF
]h3
[p 
	"Possible at the first frame of most of the levels, including the Dark Queen fight (level 13). Just start holding "A" or "DOWN" before the first frame of the level.
	$LF
]p
[p 
	[img class=embedleft src=/images/gameresources/battletoads/26-snakeslowdown.png 
	]img
	$LF
]p
[h3 id=Majorslowdownonlevel6-3
 
	"Major slowdown on level 6-3
	$LF
]h3
[p 
	"There is a section that can cause a big slowdown on level 6, 3rd section because of the snake bending in a such a way that by grabbing on it's side there's another part of it going behind, causing a difficult collision detection for the game to handle.
	$LF
]p
[h3 id=HowwallsandFloorworkonlevelswithnoZ-depth(4,6,8,9and12)
 
	"How walls and Floor work on levels with no Z-depth (4,6,8,9 and 12)
	$LF
]h3
[p 
	"The height or horizontal values are, apparently, what tells if the toad should be allowed to fall or get through. It's not a collision detection. This seems to be the case because it's not possible to go through it. It doesn't even budge while trying. So it must be some hard-coded way to say "dead-end" for that direction.
	$LF
]p
[h3 id=Passthroughfloorinstage4.
 
	"Pass through floor in stage 4.
	$LF
]h3
[p 
	"Must press left+right when on an ascending slope and release after some seconds. You'll start slidind down. It you start falling and press that while behind the background rock, you will be pushed right extremely fast and either fall out of it (if you get to the thin part of it) or die (if there are spikes on the same horizontal level with you loaded into RAM).
	$LF
]p
[p 
	(youtube|v=I-YxfNlR5vA|align=right|w=256|h=195|hidelink)
	$LF
]p
[h3 id=ChangingthelayoutofLevel3
 
	"Changing the layout of Level 3
	$LF
]h3
[ul 
	[li 
		"Theory: done by getting on a vehicle and dying before it activates the vehicle course.
		$LF
	]li
	[li 
		"Reason: when the toad dies without the vehicle, it restarts from the same screen. But when dying with the vehicle, the level restarts. Since it has died out of the vehicle course, it starts on the "walk" course, but with some of the vehicle course features activated. This has only been verified at level 3.
		$LF
	]li
	[li 
		"How to do: must have 2 players. one toad holds the screen, so the jet barelly appears. The second toad gets on it, then jumps at the hole on the left, dying. The level restarts, in auto scrolling. Each toad produces a separate effect, just change them over.
		$LF
	]li
	[li 
		"Various glitches appear, if toads die and act different ways. In some case, such glitch even can 
		[a class=intlink href=/Http://Www.youtube.com/Watch?v=tIFkUlOb_zk 
			"end the level
		]a
		".
		$LF
	]li
]ul
[h3 id=GlitchstickinLevels4and9.
 
	"Glitch stick in Levels 4 and 9.
	$LF
]h3
[p 
	"By some laggy action you can get a stick & become nearly invincible (except to death spikes). Also the graphics get screwed up. You can break checkpoints with this stick, but this means you don't activate them. But if you then activate some of them twice, the game continues normally.
	$LF
]p
[p 
	[a class=intlink href=/Http://Www.youtube.com/Playlist?list=PLD014B07A3C3FCEAC 
		"YouTube playlist
	]a
	" with several emulator movies & one console video.
	$LF
]p
[p 
	(youtube|align=right|v=FN3IGyfiUko|w=256|h=195|hidelink)
	$LF
]p
[h3 id=OutofBoundsglitchinLevel9
 
	"Out of Bounds glitch in Level 9
	$LF
]h3
[p 
	"Take your opponent on your hands & throw him just near the upper border of the tube. He will get out of it. But this outside area still has water and air places separated, just not visual. So you either fall back into the tube, or keep swimming out of it.
	$LF
]p
[p 
	"The other way to get off the tube is pressing left + right until the bottom of the tube loads off the memory and you can jump over its vertical borders. So, you can get 
	[a class=intlink href=/Http://Www.youtube.com/Watch?v=0jZGqhhiqjg 
		"both toads out of bounds
	]a
	".
	$LF
]p
[p 
	"However, you can't pass checkpoints, you have to activate each one to be able to finish the level.
	$LF
]p
[h3 id=Doing15timesmoredamage
 
	"Doing 15 times more damage
	$LF
]h3
[p 
	"Hit an enemy or another player until he's almost dying, and prepare the final hit on him, but miss him and hit the enemy that has full health. This last blow is quite powerfull. This doesn't work on bosses (a boss is any "enemy" that will end the level when defeated. This is not the case for Big Blarg).
	$LF
]p
[p 
	[img class=embedleft src=/images/gameresources/battletoads/29heavyweigh.png 
	]img
	$LF
]p
[h3 id=Heavyweighchampion
 
	"Heavy weigh champion
	$LF
]h3
[p 
	"It's possible to lift a toad while he's carrying something or someone.
	$LF
]p
[h3 id=Warps
 
	"Warps
	$LF
]h3
[h4 id=WarptoLevel3
 
	" Warp to Level 3
	$LF
]h4
[p 
	"When you begin the game, quickly headbutt the psyko pig on the left, then the one on the right, proceed to where the Walker appears, you should see a platform and a pulsating warp. Jump up there quickly!!!
	$LF
]p
[h4 id=WarptoLevel5
 
	" Warp to Level 5
	$LF
]h4
[p 
	"In Level 3 (The turbo tunnel) in the last section of the speed bike obstacle course (where the walls pass REALLY fast) slam headfirst into the 10th wall. That should be a warp. (The correct wall is on the bottom of the island BTW)
	$LF
]p
[h4 id=WarptoLevel6
 
	" Warp to Level 6
	$LF
]h4
[p 
	"In Level 4 (Ice Caverns) when you find the platform that falls when you stand on it, go down near the bottom, then jump repeatedly so it goes back up. There should be a warp formed at the top.
	$LF
]p
[h4 id=WarptoLevel8
 
	" Warp to Level 8
	$LF
]h4
[p 
	"In Level 6 (Karnaths Lair) in the 2nd Snake pit, climb on the first snake and run to the right all the way down when the snake reaches the heighest point of it's path (don't hit the spikes) there should be a warp on the other side. You must go over there quickly because the warp will disappear before the snake gets there.
	$LF
]p
[h3 id=Memorycorruptingglitches
 
	"Memory corrupting glitches
	$LF
]h3
[h4 id=Levelend
 
	" Level end
	$LF
]h4
[ol 
	[li 
		" The intended logic is to restart level 3 only if the race track checkpoint has been activated. When it has, config pointer (loading level objects from the ROM) gets written to $E5-$E6, and it's copied to $B7-$B8 when the toad dies. If one dies while on the bike, but not having activated the checkpoint, $B7-$B8 gets written with 0! Which means objects are loaded right from the start of RAM.
		$LF
	]li
	[li 
		" In the beginning of each level, several objects get loaded every time: toads load during lag frames, right after lag frame the game loads the restart point object, some enemies, one at a time, and that's it, config pointer won't change until you reach some new gameplay elements. So at the start of every level, it increments for a few times by the object descriptor length (11).
		$LF
	]li
	[li 
		" Since the initial config pointer value is now 0, it starts switching from $0B (that gets written right after initialization, during lag), and then it goes $16, $21, $2C, and $37.
		$LF
	]li
	[li 
		" It so happened that $15 and $16 are used for temporary controller values, used for registering the tap'n'hold pattern. The standard subroutine moves 1 bit at a time from the controller port to the corresponding zero page address, using carry flag and ROR/ROL, done 8 times.
		$LF
	]li
	[li 
		" A 
		[del 
			"bit
		]del
		" lot of luck, and we end up having config pointer telling the game to load an object specified by the second controller value, which is $7F.
		$LF
	]li
	[li 
		" The game starts looking for an empty object slot. The first 2 are busy with toads, the third one is a bike, the fourth is free. Object with ID=0x7F spawns, its job is to create explosions and end the level.
		$LF
	]li
]ol
[h4 id=Gameend
 
	" Game end
	$LF
]h4
[ol 
	[li 
		" After you break the config pointer like right above, you need to load an object with ID=0 and X=$C8.
		$LF
	]li
	[li 
		" Objects with ID=1 and ID=2 are players. They are tied to slots 0 and 1 (1 gets subtracted from the object type).
		$LF
	]li
	[li 
		" Zero object doesn't exist normally, in this case, such is treated like a player, like anything below 3. So to get a slot to spawn such an object, the game also subtracts 1 from 0. The result treated as a slot (or offset) is $FF.
		$LF
	]li
	[li 
		" The game checks if the object has any lives, which is normally $11 and $12. When $FF is used as an offset, the address to check lives against becomes $110. So it should contain a positive value for the glitch to work.
		$LF
	]li
	[li 
		" The config gets actually read, loading X=$C8 to what it believes to be the appropriate address for the low byte of the X coordinate, considering the slot. The base of the X position addresses is $3FD, so $FF is added to that, resulting in $C8 getting written to $4FC. That address is in fact responsible for something related to animation (Hit ID).
		$LF
	]li
	[li 
		" After wrong value is written as Hit ID, it gets processes by loading a pointer for that hit, whose animation doesn't exist. Irrelevant data generates a broken pointer $2207.
		$LF
	]li
	[li 
		" Animation gets read from there: $FE, $90, $18...
		$LF
	]li
	[li 
		" It tries to process the animation, doing $FE AND $1F => $1E. This is supposed to be pointing to animation code, but there are only $16 actual pointers there, so we get another overflow, loading $75BD from the ROM address $DB76.
		$LF
	]li
	[li 
		" The game does a jump to $75BD, ending up in open bus.
		$LF
	]li
	[li 
		" Due to how open bus works, the last value on the data bus repeats infinitely, producing opcodes out of nowhere, depending on what value was last read by the CPU. In this case it's $6F, which is an undocumented RRA opcode, that rotates one bit right in memory, then add memory to accumulator (with carry). Basically, nothing changes, and the PC is still in the open bus, it keeps rolling through.
		$LF
	]li
	[li 
		" When PC gets to $8000, there's a jump that brings us to the ending function:
		$LF
	]li
]ol
[pre 
	"$8000:6C 13 00  JMP ($0013) = $8045   A:06 X:45 Y:06 S:FA 
	$LF
	"$8045:4C 24 AC  JMP $AC24
	$LF
	"; Y register is the bank, each bank starts with a 3-byte jump table
	$LF
	"; $45 is the 23rd function in bank 6
	$LF
]pre
