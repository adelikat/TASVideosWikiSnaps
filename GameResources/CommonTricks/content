146
[p 
	(listlanguages)
	$LF
]p
[hr 
]hr
[h2 id=Commontricks 
	" Common tricks
	$LF
]h2
[p 
	[em 
		""This is a sparring program. Similar to the programmed
	]em
	$LF
	[em 
		"reality of the Matrix. It has the same basic rules – rules
	]em
	$LF
	[em 
		"like gravity. What you must learn is that these rules are no
	]em
	$LF
	[em 
		"different than the rules of a computer system. Some of
	]em
	$LF
	[em 
		"them can be bent. Others – can be broken."
	]em
	" ― Morpheus, The Matrix
	$LF
]p
[p 
	"There are several tricks that can be used (or at least tried)
	$LF
	"in many games to improve the time.  If you are making a movie, be sure to try
	$LF
	"every one of them. Otherwise, try 
	[a class=intlink href=/Forum/Viewtopic.php?t=13010 
		"finding your own
	]a
	".
	$LF
]p
[div class=toc 
	[ul 
		[li 
			[a href=#Commontricks 
				" Common tricks
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#Unintendedthingsabuses 
						" Unintended things abuses
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#Abusinguntestedcode 
								" Abusing untested code
								$LF
							]a
						]li
						[li 
							[a href=#Abusingerroneousassumptions 
								" Abusing erroneous assumptions
								$LF
							]a
						]li
						[li 
							[a href=#Abusingside-effectsofpause 
								" Abusing side-effects of pause
								$LF
							]a
						]li
						[li 
							[a href=#Overlappingdifferentgamelogics 
								" Overlapping different game logics
								$LF
							]a
						]li
					]ul
				]li
				[li 
					[a href=#Monsterdamageabuses 
						" Monster damage abuses
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#Monster"damageboost"abuse 
								" Monster "damage boost" abuse
								$LF
							]a
						]li
					]ul
				]li
				[li 
					[a href=#Invulnerabilityabuses 
						" Invulnerability abuses
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#Eventinvulnerabilityabuse 
								" Event invulnerability abuse
								$LF
							]a
						]li
						[li 
							[a href=#Stuninvulnerabilityabuse 
								" Stun invulnerability abuse
								$LF
							]a
						]li
					]ul
				]li
				[li 
					[a href=#Avoidcountdowns 
						" Avoid countdowns
						$LF
					]a
				]li
				[li 
					[a href=#Extraordinarygameplay 
						" Extraordinary gameplay
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#AbusingdeathandGameOver 
								" Abusing death and Game Over
								$LF
							]a
						]li
						[li 
							[a href=#Avoidingsaving 
								" Avoiding saving
								$LF
							]a
						]li
						[li 
							[a href=#Resetthegame,keepthesram 
								" Reset the game, keep the sram
								$LF
							]a
						]li
						[li 
							[a href=#Resetthegame,domindthesram 
								" Reset the game, do mind the sram
								$LF
							]a
						]li
					]ul
				]li
				[li 
					[a href=#Inputabuses 
						" Input abuses
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#Twoormoreactionsatonce 
								" Two or more actions at once
								$LF
							]a
						]li
						[li 
							[a href=#Framewindowabuse 
								" Frame window abuse
								$LF
							]a
						]li
						[li 
							[a href=#Alternatingbuttons 
								" Alternating buttons
								$LF
							]a
						]li
					]ul
				]li
				[li 
					[a href=#Superspeedabuse 
						" Super speed abuse
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#Outrunthegame 
								" Outrun the game
								$LF
							]a
						]li
						[li 
							[a href=#Notoncamera?Notthere! 
								" Not on camera? Not there!
								$LF
							]a
						]li
						[li 
							[a href=#Fastmotioncollisionabuse 
								" Fast motion collision abuse
								$LF
							]a
						]li
					]ul
				]li
				[li 
					[a href=#Collisionabuses 
						" Collision abuses
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#Closeapproachcollisionabuse 
								" Close approach collision abuse
								$LF
							]a
						]li
						[li 
							[a href=#Diagonalmovementbetweentiles 
								" Diagonal movement between tiles
								$LF
							]a
						]li
						[li 
							[a href=#Othercollisionabuses 
								" Other collision abuses
								$LF
							]a
						]li
					]ul
				]li
				[li 
					[a href=#Jumpingoffledges 
						" Jumping off ledges
						$LF
					]a
				]li
				[li 
					[a href=#Subpixelcarryover 
						" Subpixel carryover
						$LF
					]a
				]li
				[li 
					[a href=#Luckmanipulation 
						" Luck manipulation
						$LF
					]a
				]li
				[li 
					[a href=#LagReduction 
						" Lag Reduction
						$LF
					]a
				]li
				[li 
					[a href=#Corruptmemoryandsavedata 
						" Corrupt memory and save data
						$LF
					]a
				]li
				[li 
					[a href=#Gameoptions 
						" Game options
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#Textspeed 
								" Text speed
								$LF
							]a
						]li
						[li 
							[a href=#Movement/battleanimations 
								" Movement/battle animations
								$LF
							]a
						]li
						[li 
							[a href=#Demosandcutscenes 
								" Demos and cutscenes
								$LF
							]a
						]li
						[li 
							[a href=#Difficultylevel 
								" Difficulty level
								$LF
							]a
						]li
						[li 
							[a href=#Auto-save 
								" Auto-save
								$LF
							]a
						]li
						[li 
							[a href=#Dateandtime 
								" Date and time
								$LF
							]a
						]li
						[li 
							[a href=#Userprofile 
								" User profile
								$LF
							]a
						]li
					]ul
				]li
			]ul
		]li
		[li 
			[a href=#Howtofindouttricks 
				" How to find out tricks
				$LF
			]a
		]li
		[li 
			[ul 
				[li 
					[a href=#Studyexistingmaterials 
						" Study existing materials
						$LF
					]a
				]li
				[li 
					[a href=#Examinegamedata 
						" Examine game data
						$LF
					]a
				]li
				[li 
					[ul 
						[li 
							[a href=#Readtheprogram 
								" Read the program
								$LF
							]a
						]li
						[li 
							[a href=#Readthescript 
								" Read the script
								$LF
							]a
						]li
						[li 
							[a href=#Examinetheleveldata 
								" Examine the level data
								$LF
							]a
						]li
						[li 
							[a href=#Examinethedatatables 
								" Examine the data tables
								$LF
							]a
						]li
					]ul
				]li
				[li 
					[a href=#Trythingsout 
						" Try things out
						$LF
					]a
				]li
			]ul
		]li
		[li 
			[a href=#Seealso 
				" See also
				$LF
			]a
		]li
	]ul
]div
[h3 id=Unintendedthingsabuses 
	" Unintended things abuses
	$LF
]h3
[h4 id=Abusinguntestedcode 
	" Abusing untested code
	$LF
]h4
[p 
	[em 
		(__wikiLink|/TODO|TODO)
		": More about untested code.
	]em
	$LF
]p
[p 
	"Untested code is a primary source of game glitches.
	$LF
]p
[p 
	"Untested code is not always helpful. For example, in 
	[a class=intlink href=/355M 
		"Battletoads
	]a
	$LF
	"there's one level that is impossible to complete with two players because
	$LF
	"the game testers never actually tried the level with two players.  The game was published containing a serious programming error that prevents the second player from moving (and resulting in his immediate death) in the Clinger-Wingers level.
	$LF
]p
[h4 id=Abusingerroneousassumptions 
	" Abusing erroneous assumptions
	$LF
]h4
[p 
	"Due to limited processing power, old console games often make
	$LF
	"erroneous assumptions to reduce the number of calculations the
	$LF
	"game has to make.  Sometimes these errors are just a result of
	$LF
	"programmer oversight.
	$LF
]p
[p 
	(youtube|v=baubmbgjzAg|start=64|loop=75|align=right|w=197|h=148|hidelink)
	$LF
	"Many interesting examples exist, such as:
	$LF
]p
[ul 
	[li 
		" In 
		[a class=intlink href=/1002M 
			"Super Mario Bros 2
		]a
		", the games assumes that you are standing on an enemy if you are close enough to the top of it. So if you jump at the right spot next to an enemy, the "ground flag" is set and you can jump again in midair.
		$LF
	]li
	[li 
		" The video on the right shows how in 
		[a class=intlink href=/1090M 
			"Rygar
		]a
		", the game assumes you are standing on the ground if you are ducking, so if you walk and duck at small intervals you can walk off cliffs without falling down.
		$LF
	]li
	[li 
		" In 
		[a class=intlink href=/1334M 
			"Kid Chameleon
		]a
		" and 
		[a class=intlink href=/498M 
			"Solomon's Key
		]a
		", the games assume you are standing on the ground every time a level starts, thus allowing you to do actions in midair at the start of a level, such as jumping or attacking.
		$LF
	]li
	[li 
		" In 
		[a class=intlink href=/220M 
			"Flashback
		]a
		", the game assumes you have collected items from previous levels even if that's not the case (due to warping). This also applies to most Prince of Persia games.
		$LF
	]li
]ul
[h4 id=Abusingside-effectsofpause 
	" Abusing side-effects of pause
	$LF
]h4
[p 
	[img class=embedright src=http://media.tasvideos.org/rockmantricks/pausetrick.gif 
	]img
	$LF
	"In some games, pausing has unintended side-effects due to programmer oversight:
	$LF
]p
[ul 
	[li 
		" In 
		[a class=intlink href=/1103M 
			"Mega Man
		]a
		", pausing suspends bullets but keeps temporary invulnerability timers running, allowing shots to hit their targets multiple times if you pause while your target is being hit.
		$LF
	]li
	[li 
		" The example to the right shows 
		[a class=intlink href=/1346M 
			"Mega Man 2
		]a
		" where pausing resets vertical acceleration, which can be used to lessen the effects of gravity and perfom extra wide jumps.
		$LF
	]li
	[li 
		" In some games, timers or counters continue to change during paused periods, which might allow certain types of luck manipulations. Sometimes it might even cause the timers or counters to overflow/underflow and lead to useful consequences.
		$LF
	]li
	[li 
		" In most games, pausing creates a sound effect that momentarily disables a sound channel from music. If some scene is synchronized with the music, using pause may break the scene in some ways.
		$LF
	]li
]ul
[p 
	"It might be worthwhile to observe what other anomalies are caused by
	$LF
	"pausing in your game.
	$LF
]p
[h4 id=Overlappingdifferentgamelogics 
	" Overlapping different game logics
	$LF
]h4
[ul 
	[li 
		" 
		[a class=extlink href=http://www.youtube.com/watch?v=fmgDazOOxTY rel=nofollow 
			"Carring an enemy into a boss room
		]a
		", or 
		[a class=extlink href=http://www.youtube.com/watch?v=TNCzboxA_ug rel=nofollow 
			"pulling a boss out to a regular level
		]a
		" may overlap some basic logics. RAM values, correct for each of them separately, mix with each other and sometimes give birth to new objects and routines.
		$LF
	]li
	[li 
		" 
		[a class=extlink href=http://www.youtube.com/watch?v=bOweqz4cDlA rel=nofollow 
			"Restarting a level
		]a
		" with some basic flags set and other ones (that should be set by common sense along with the first ones) unset sometimes also spawns wrong objects or gives access to the RAM.
		$LF
	]li
	[li 
		" Bank switching abuse can glitch the normal NMI routines and use values from one game cicle to fill addresses ruling another cicle. This exactly happens in 
		[a class=intlink href=/1686M 
			"RockMan 1 TAS
		]a
		" and calls Level End in a wrong time.
		$LF
	]li
]ul
[hr 
]hr
[h3 id=Monsterdamageabuses 
	" Monster damage abuses
	$LF
]h3
[h4 id=Monster"damageboost"abuse 
	" Monster "damage boost" abuse
	$LF
]h4
[p 
	"It is common for games to be designed so that the
	$LF
	"character can't reach certain paths or platforms, but just barely.
	$LF
	"Designers often overlook the boost monsters provide when
	$LF
	"they hit you. By getting hurt at the right place and the
	$LF
	"right time, you can get monsters to boost you into places you normally
	$LF
	"shouldn't be able to go.
	$LF
]p
[ul 
	[li 
		" 
		[a class=intlink href=/901M 
			"Castlevania
		]a
		" and 
		[a class=intlink href=/853M 
			"Ghosts'n Goblins
		]a
		" have examples of this.
		$LF
	]li
]ul
[p 
	"In some cases, taking damage sends the character in a direction neglecting obstructions due to oversight of the developers. This can be abused for creating unintended shortcuts.
	$LF
]p
[ul 
	[li 
		" 
		[a class=intlink href=/721M 
			"King Kong 2
		]a
		" has an example of taking damage to go through the gate to the final part of the game.
		$LF
	]li
]ul
[p 
	(youtube|v=deOhM2NNNGc|start=474|loop=480|align=right|w=197|h=148|hidelink)
	$LF
	"In some cases, taking damage from powerful attacks flings the character at speeds faster than normal. If planned, this can send the character in the direction desired and save time. 
	[a class=intlink href=/126M 
		"Super Castlevania 4
	]a
	", 
	[a class=intlink href=/868M 
		"Legend of Zelda
	]a
	", 
	[a class=intlink href=/1122M 
		"Link's Awakening
	]a
	", and 
	[a class=intlink href=/318M 
		"Kirby Superstar
	]a
	" are examples of this.
	$LF
]p
[ul 
	[li 
		" 
		[a class=intlink href=/1363M 
			"Symphony of the Night
		]a
		" has examples of taking speed boost, height boost and distance boost resulted from damage.
		$LF
	]li
]ul
[p 
	[br 
	]br
	$LF
	(youtube|v=CdPFvgKqPv4|start=66|loop=98|align=right|w=197|h=148|hidelink)
	$LF
	"In some cases the damage causes the character to retain that speed as long as he doesn't stop.  In the video example here, 
	[a class=intlink href=/1304M 
		"Adventure Island 4
	]a
	", the character is able to retain a super speed boost for a strikingly long period of time. See also 
	[a class=intlink href=/GameResources/CommonTricks#FrameWindowAbuse 
		"frame window abuse
	]a
	".
	$LF
	[br 
	]br
	$LF
]p
[hr 
]hr
[h3 id=Invulnerabilityabuses 
	" Invulnerability abuses
	$LF
]h3
[p 
	"Most games contain some situations where your character is immune to harm.
	$LF
]p
[h4 id=Eventinvulnerabilityabuse 
	" Event invulnerability abuse
	$LF
]h4
[p 
	"Often, when the game has started a scripted demo that may
	$LF
	"not be interrupted, like the animation for finishing the level,
	$LF
	"your character becomes invulnerable.  If you touch something lethal
	$LF
	"during this state of game, the game may very well ignore it.  The
	$LF
	[a class=intlink href=/1000M 
		"Little Nemo
	]a
	" and 
	[a class=intlink href=/1325M 
		"Gremlins 2
	]a
	" movies have examples of this.
	$LF
	"In many games,  such as 
	[a class=intlink href=/690M 
		"Umihara Kawase
	]a
	" and 
	[a class=intlink href=/531M 
		" The Wrath Of Black Manta
	]a
	", lethal
	$LF
	"object collision checks are ignored when entering a door.  In 
	[a class=intlink href=/1346M 
		"Mega Man 2
	]a
	", these checks are ignored when changing weapons.
	$LF
]p
[h4 id=Stuninvulnerabilityabuse 
	" Stun invulnerability abuse
	$LF
]h4
[p 
	"In many games, if you take damage you will flicker for a while and
	$LF
	"temporarily become invulnerable, to prevent you from immediately
	$LF
	"taking more damage. This invulnerability can often protect you
	$LF
	"from "instant death" hazards, for example, allowing you to safely
	$LF
	"walk on deadly spikes or lava for the duration of the flickering.
	$LF
	"The 
	[a class=intlink href=/545M 
		"Mega Man 4
	]a
	" and 
	[a class=intlink href=/365M 
		"Blaster Master
	]a
	" movies have examples of this.
	$LF
]p
[p 
	"It may also be advantageous to use such a period of invulnerability to pass through monsters that would otherwise take longer to destroy, or
	$LF
	"to pass through other nearby monsters that would do more damage.  The
	$LF
	[a class=intlink href=/1051M 
		"Goonies
	]a
	" movie is an example of the former, while 
	[a class=intlink href=/1093M 
		"Castlevania: Circle of the Moon
	]a
	" movie is an example of the latter.
	$LF
]p
[hr 
]hr
[h3 id=Avoidcountdowns 
	" Avoid countdowns
	$LF
]h3
[p 
	"Games often end levels with a score count down screen. The time spent on those screens count as well and should be minimized by causing the underlaying value to be as optimal as possible without losing speed. This usually means avoiding to collect items and having the correct amount of health at the end of the level.
	$LF
]p
[h3 id=Extraordinarygameplay 
	" Extraordinary gameplay
	$LF
]h3
[h4 id=AbusingdeathandGameOver 
	" Abusing death and Game Over
	$LF
]h4
[p 
	(youtube|v=RuVhJInysBQ|start=424|loop=450|align=right|w=197|h=148|hidelink)
	$LF
	"While it may seem contradictory with goal to do things as fast as possible, it does not have to be. Games commonly reset the player position when the player dies, leading to possible shortcuts. Your health often also set to a known number and you may lose or gain items.
	$LF
]p
[p 
	"In games with multiple players, this can be used to change the amount of player interaction, for example dead players in an RPG will not get asked for their commands. Dead party members can also act as a form of party change, possibly affecting scripted events that depends on who is in the party.
	$LF
]p
[p 
	"In multi-player games, one player may be able to die to take advantage of a favorable spawning.  The video example to the right demonstrates this idea in Level 5 of 
	[a class=intlink href=/830M 
		"Super C
	]a
	".  The two players continually die in order to spawn at the top of the screen to save time. 
	$LF
]p
[p 
	"This can all be abused to save time. Submission doing this are marked with the category 
	[a class=intlink href=/Movies-C3030Y 
		"uses death to save time
	]a
	".
	$LF
]p
[p 
	[em 
		(__wikiLink|/TODO|TODO)
		": abusing Game Over.
	]em
	$LF
]p
[h4 id=Avoidingsaving 
	" Avoiding saving
	$LF
]h4
[p 
	"It often takes several seconds to manually save the game and is rarely needed in a TAS movie. Similarly, 
	[a class=intlink href=#AutoSave 
		"turn off auto-saving
	]a
	".
	$LF
]p
[p 
	"However, in many games, you can take some advantage, such as to warp back to an earlier position in the level, reset character status, etc. when you load a saved game. It is recommended that you study what consequences can happen after saving the game.
	$LF
]p
[p 
	[em 
		(__wikiLink|/TODO|TODO)
		": an example of taking advantage 
		[b 
			"just from saving
		]b
		" the game?
	]em
	$LF
]p
[h4 id=Resetthegame,keepthesram 
	" Reset the game, keep the sram
	$LF
]h4
[p 
	"Game consoles have reset buttons that restart the game from the beginning of the program. This may seem like an obvious suboptimal move, but at times it can be faster to reset the game after saving than continuing with the game. The most common example is letting the game save after finishing a level, but skipping the following cutscene.
	$LF
]p
[h4 id=Resetthegame,domindthesram 
	" Reset the game, do mind the sram
	$LF
]h4
[p 
	"Writing the save is a sensitive operation. As games often say "Don't turn off the console" during saving, ignoring this advice often leads to corrupted saves. Usually the result of a corrupted save is that the game refuses to load the save afterwards. But with careful timing and some luck it's possible to create a corrupt save that the game does accept loading. This can lead to major glitches and subsequent sequence breaking.
	$LF
]p
[hr 
]hr
[h3 id=Inputabuses 
	" Input abuses
	$LF
]h3
[h4 id=Twoormoreactionsatonce 
	" Two or more actions at once
	$LF
]h4
[p 
	"Try to make some input that most probably hasn't been tested, like pressing left+right or up+down at the same time, or use multiple input devices like gamepad+touchscreen simultaneously. It might have bizarre and useful consequences. See the 
	[a class=intlink href=/1210M 
		"Zelda: ALttP
	]a
	" and 
	[a class=intlink href=/1082M 
		"Zelda 2
	]a
	" glitch runs for examples of this.
	$LF
]p
[p 
	"(Note that some emulators (such as VirtuaNES or old versions of Snes9x and FCEU) don't allow you to press right+left or up+down.  The consoles themselves have no such qualms, though you usually have to press very hard on your controller to press in two opposite directions at once.)
	$LF
]p
[ul 
	[li 
		" In 
		[a class=intlink href=/1626M 
			"Shining Soul II
		]a
		", you can duplicate an item by tossing it and moving the item cursor at the same frame.
		$LF
	]li
]ul
[h4 id=Framewindowabuse 
	" Frame window abuse
	$LF
]h4
[p 
	"In some games, there are short periods when you can make valid game input while you are not supposed to do so. Catching such an opportunity might either merely allow you to act earlier, or do things unintended by the developers.
	$LF
]p
[ul 
	[li 
		" In 
		[a class=intlink href=/1222M 
			"Castlevania: Harmony of Dissonance
		]a
		", you have can move right before you enter a room through an open door or a scripted event occurs. If you use backdash at certain doorway in such frame windows, glitched warp occurs.
		$LF
	]li
	[li 
		" In 
		[a class=intlink href=/1410M 
			"Blaster Master
		]a
		", you can turn around right when you are going through a doorway, which causes the game to warp you to the wrong destination.
		$LF
	]li
	[li 
		" In 
		[a class=intlink href=/1700M 
			"Pokémon Red
		]a
		", the game occasionally allows a short window where it is possible to open the menu during a cutscene, and using this opportunity to save and restore the game, or fly to a different area, can cause the game to get confused about what's going on, allowing memory corruption.
		$LF
	]li
]ul
[p 
	[em 
		(__wikiLink|/TODO|TODO)
		": Another typical example with a different outcome.
	]em
	$LF
]p
[h4 id=Alternatingbuttons 
	" Alternating buttons
	$LF
]h4
[p 
	"Often, you need to press a button to dispose of some dialog box, or to
	$LF
	"start the game, or something similar. When two buttons can be used
	$LF
	"to activate the same goal, you can press them like this:
	$LF
]p
[pre 
	"A, B, A, B, A, B, A, B, etc.
	$LF
]pre
[p 
	"so that a button is effectively pressed every frame.
	$LF
	"It doesn't save actual time in the movie, but it saves time making the movie, because you don't need to test for the earliest possible frame every time. Some emulators (such as VBA and Snes9x) let you put A and B on autofire starting at different frames to automatically press this sequence of buttons, which is even less effort for you.
	$LF
]p
[p 
	"Sometimes a game will actually accept the next input every frame, in which case it does actually save time in the movie compared to pressing one of the two buttons as early as possible each time. Also, some games might have been designed
	$LF
	"not thinking it's possible to press buttons so fast, and strange things
	$LF
	"may happen as a result.
	$LF
]p
[p 
	"Be aware that hexediting may be more cumbersome if you use this technique.
	$LF
	"It may be difficult to determine the exact frame where the input affected
	$LF
	"the game.
	$LF
]p
[hr 
]hr
[h3 id=Superspeedabuse 
	" Super speed abuse
	$LF
]h3
[p 
	"When you act inhumanly fast, like pressing a button 30 times
	$LF
	"a second, you might be able to do things that the game
	$LF
	"developers would never have thought possible.
	$LF
]p
[ul 
	[li 
		" In some games, you can boost up your speed very high. See 
		[a class=intlink href=/1665M 
			"Sonic Advance
		]a
		" for example.
		$LF
	]li
	[li 
		" In some games, you can kill a boss while it's spawning, or perhaps before it has a chance to complete a transformation.  See 
		[a class=intlink href=/1119M 
			"Simon's Quest
		]a
		", and 
		[a class=intlink href=/1075M 
			"Super Metroid
		]a
		" for examples of this.
		$LF
	]li
]ul
[h4 id=Outrunthegame 
	" Outrun the game
	$LF
]h4
[p 
	"You can often catch the game unprepared if you move at extreme speeds. This means that the game may not have had the time to prepare itself for you being at that point. This means in practice that objects that should be there may not have been created yet. Depending on your exact situation this may be a blessing or a curse.
	$LF
]p
[h4 id=Notoncamera?Notthere! 
	" Not on camera? Not there!
	$LF
]h4
[p 
	"Games frequently cheat by only updating objects that are near enough to the camera. If you can somehow outrun the camera you might be able to ignore objects that would otherwise impede your progress.
	$LF
]p
[h4 id=Fastmotioncollisionabuse 
	" Fast motion collision abuse
	$LF
]h4
[p 
	(youtube|v=hETRzNzpFAI|start=205|loop=213|align=right|w=197|h=148|hidelink)
	$LF
	"Games almost never interpolate motion between frames.  This means that you are in one place on one frame, and in some other place on the next, without actually having traveled the path between them, like we do in the real world.  This is how animation works.
	$LF
]p
[p 
	"If you are moving very fast, you can sometimes pass through objects
	$LF
	"because the game does not render a frame when you are inside the object.
	$LF
	"Combined with the close approach collision abuse mentioned above,
	$LF
	"the speed may not even need to be very high.  
	$LF
]p
[p 
	"The example shows 
	[a class=intlink href=/711M 
		"Gradius
	]a
	" collision abuse.  Due to the extreme speed, the ship is able to fly through narrow pieces of ground that would normally destroy the ship.
	$LF
	[br 
	]br
	$LF
]p
[hr 
]hr
[h3 id=Collisionabuses 
	" Collision abuses
	$LF
]h3
[h4 id=Closeapproachcollisionabuse 
	" Close approach collision abuse
	$LF
]h4
[p 
	"Most games don't do pixel-perfect collision checks.  The character's and enemies' sprites (the graphics that you see on-screen) have unusual shapes, while their "hit-boxes" are usually actually square.  Games are programmed this way because it’s much easier to program "is the character's box touching the enemy’s box" than it is to program "is any pixel of the character’s graphic touching any pixel of the enemy's graphic."
	$LF
]p
[p 
	"In some games, the hit-boxes are actually bigger than the sprites, and you can get hit by an enemy before it seems like you should.  In a lot of games, though, the opposite is true: hit-boxes are actually smaller than the sprites, so you can seemingly touch or even go partially inside enemies without getting hurt.
	$LF
	"The 
	[a class=intlink href=/1330M 
		"SMB1
	]a
	", 
	[a class=intlink href=/1002M 
		"SMB2
	]a
	", and 
	[a class=intlink href=/498M 
		"Solomon's Key
	]a
	" movies have many examples of this.
	$LF
]p
[h4 id=Diagonalmovementbetweentiles 
	" Diagonal movement between tiles
	$LF
]h4
[p 
	"Some games check what tile character is on by just checking one point. This may make it possible to pass diagonally between tiles, sometimes useful to get past tiles that are deadly or otherwise harmful.
	$LF
]p
[p 
	"Example of this applied to Jetpack: 
	[a class=extlink href=http://www.youtube.com/watch?v=EjTNYr7J_DY rel=nofollow 
		"http://www.youtube.com/watch?v=EjTNYr7J_DY
	]a
	$LF
]p
[h4 id=Othercollisionabuses 
	" Other collision abuses
	$LF
]h4
[p 
	[img class=embedright src=http://media.tasvideos.org/smbtricks/smb_minusentry2.gif 
	]img
	$LF
	"By various methods (such as pushing into corners in strange ways or
	$LF
	"getting shoved by an enemy) you may sometimes manage to get embedded
	$LF
	"into the floor, walls, or ceiling.  Sometimes when this happens you just
	$LF
	"get stuck and your game is ruined, but other times it might allow you to make use of new routes that weren't possible before.  For example, you might be able to gain support and jump from a wall.  The 
	[a class=intlink href=/1330M 
		"SMB1
	]a
	" and 
	[a class=intlink href=/1031M 
		"SMB2j
	]a
	" movies have examples of this.
	$LF
]p
[p 
	"In most games, collision calculations are very simple.  As mentioned earlier, because motion is not interpolated, sometimes you can go through enemies or walls if you are traveling fast enough or along an odd enough trajectory. With respect to walls, most games account for this by very quickly ejecting you from the wall to prevent you from getting stuck.  Sometimes, you can trick the game into ejecting you in the wrong direction, which is how walls are initially walked through in 
	[a class=intlink href=/1330M 
		"SMB1
	]a
	".  In other games, wall ejection moves your character at high speed in one direction (usually horizontally) until the game
	$LF
	"finds a place where you can exit the wall.  This is most useful when you can force the game to shoot you off at high speed along your desired path!
	$LF
	"In 
	[a class=intlink href=/1103M 
		"Mega Man
	]a
	" and 
	[a class=intlink href=/1346M 
		"Mega Man 2
	]a
	", even ceilings eject you horizontally, which is why the authors of those movies often perform various antics that result in Mega Man being embedded in the ceiling.
	$LF
]p
[p 
	"The image on the right shows a classic example in Super Mario Bros (the famous wall glitch that allows entrance into -1)
	$LF
]p
[hr 
]hr
[h3 id=Jumpingoffledges 
	" Jumping off ledges
	$LF
]h3
[p 
	[img class=embedright src=http://media.tasvideos.org/smbtricks/smb_fallfast.gif 
	]img
	$LF
	"The speed of playable characters in most games, especially platformers, is nonlinear. This is usually done in form of acceleration: the longer the character moves in a certain direction, the higher their velocity is. Similarly, the longer they fall, the faster they reach a platform underneath the starting point, so it's often preferable to jump shortly before the edge of the platform. Avoid the temptation of running off and falling normally, because often the character will have little-to-no downward velocity for a short period (unless, of course, you need it that way).
	$LF
]p
[p 
	"Note: Some games have drastically reduced aerial speed. For them, it's usually preferable to do very short jumps only a couple frames before reaching the ledge, or to not do any jumps at all. Be sure to study the physics of the game you're working on well, don't hesitate to use 
	(__wikiLink|/Memorysearch|memory search)
	" to find exact values for character's speed.
	$LF
]p
[hr 
]hr
[h3 id=Subpixelcarryover 
	" Subpixel carryover
	$LF
]h3
[p 
	(youtube|v=JisFSMHn8tY|align=right|w=197|h=148|hidelink)
	$LF
	"This is extremely common in NES games (and less common on platforms such as DS and GBA).  Regardless of platform it should be looked into for any game.
	$LF
]p
[p 
	"The subpixel value represents a fraction of a pixel.  It is used to calculate how many pixels a character moves in a frame.  Often at the end of a level/room, the remainder of this value is not cleared.  This means the value left over will be used on the next level/room.  When possible a high value should be left in a level to give the character a tiny "head start" in the next level.
	$LF
]p
[p 
	"Note: Subpixel variation is a common source of desyncs when copy/pasting movies.  In games with subpixel carryover, the subpixel values should be aligned before copy/pasting.
	$LF
]p
[hr 
]hr
[h3 id=Luckmanipulation 
	" Luck manipulation
	$LF
]h3
[p 
	"Video game consoles are computers.  They do exactly what they
	$LF
	"are told, and will always give the same result when given the
	$LF
	"same input.  There is nothing that is truly random.  The only
	$LF
	"source of true randomness in games is you!
	$LF
	"Games are purely deterministic and depend solely on user input.
	$LF
]p
[p 
	"Learn to abuse this fact.  You can affect anything that has an element of
	$LF
	"randomness in it, like monster movements or item drops.
	$LF
]p
[p 
	"Read more at 
	(__wikiLink|/LuckManipulation|Luck Manipulation)
	".
	$LF
]p
[hr 
]hr
[h3 id=LagReduction 
	" Lag Reduction
	$LF
]h3
[p 
	"The processing speed of old console systems is limited.
	$LF
	"They can only handle so many objects per frame. If there are
	$LF
	"too many objects on screen at one time, the game slows down, because it
	$LF
	"just can't calculate everything in one frame.
	$LF
]p
[p 
	"Knowing the cause of this phenomenon is important when making
	$LF
	"a TAS. Often this lag can be minimized by keeping
	$LF
	"the number of on-screen objects low, either by destroying them early,
	$LF
	"or perhaps 
	[em 
		"not
	]em
	" destroying them to prevent an overly complicated
	$LF
	"(and processor intensive) death animation from playing.  Luck manipulation
	$LF
	"can be useful here, too.  In some games, whether or not a monster spawns is
	$LF
	"random.
	$LF
]p
[p 
	"On-screen objects are not the only cause of processor use. Some
	$LF
	"actions require more calculation than others. For instance,
	$LF
	"being close to enemies, or collecting or using certain items may
	$LF
	"cause the game to lag.
	$LF
]p
[p 
	"Often lag can happen for unknown reasons, sometimes doing a slightly different strategy which doesn't cost time can prevent the event from occurring. In this instance a 
	(__wikiLink|/Memorysearch|memory search)
	" might help to reduce it
	$LF
]p
[hr 
]hr
[h3 id=Corruptmemoryandsavedata 
	" Corrupt memory and save data
	$LF
]h3
[p 
	"The game uses the memory to know what you have done, what you are doing and what you have left to do. If you somehow gain the ability to directly edit memory you have effectively won.
	$LF
]p
[p 
	"Slipping some wrong values into wrong addresses you can command a game to do arbitrary things. But that requires deep disassembling of the original game code, expert knowledge.
	$LF
]p
[ul 
	[li 
		" 
		[a class=intlink href=/2187M 
			"SRAM can be reprogrammed
		]a
		$LF
	]li
	[li 
		" 
		[a class=intlink href=/2157M 
			"Execution pointer can be controlled
		]a
		$LF
	]li
	[li 
		" 
		[a class=intlink href=/1945M 
			"Wrong values can be written to critical adresses
		]a
		$LF
	]li
	[li 
		" 
		[a class=intlink href=/1686M 
			"Critical routines
		]a
		" 
		[a class=intlink href=/2047M 
			"can be interrupted
		]a
		$LF
	]li
	[li 
		" Category: 
		[a class=intlink href=/Movies-C3058Y 
			"Corrupts memory
		]a
		$LF
	]li
	[li 
		" Category: 
		[a class=intlink href=/Movies-C3057Y 
			"Corrupts save data
		]a
		$LF
	]li
]ul
[hr 
]hr
[h3 id=Gameoptions 
	" Game options
	$LF
]h3
[p 
	[em 
		(__wikiLink|/TODO|TODO)
		": Examples.
	]em
	$LF
]p
[p 
	"Many games provide game options for you to modify how the games work. It is recommened always to try them out to see if you can save time with certain settings.
	$LF
]p
[h4 id=Textspeed 
	" Text speed
	$LF
]h4
[p 
	"Some games allow you change how fast texts are displayed and fading out. Setting the text speed to the highest level usually saves time, and it is worth trying even if you can skip the texts, because sometimes you might be unable to skip them as quickly due to input limitations.
	$LF
]p
[h4 id=Movement/battleanimations 
	" Movement/battle animations
	$LF
]h4
[p 
	"In some role-playing and strategy games, you can turn off or choose simplified versions of movement/battle animations. Choose the fastest way.
	$LF
]p
[h4 id=Demosandcutscenes 
	" Demos and cutscenes
	$LF
]h4
[p 
	"Although you are likely to be able to skip them with input if the game provides such options, it might be faster to disable them just at all.
	$LF
]p
[h4 id=Difficultylevel 
	" Difficulty level
	$LF
]h4
[p 
	"In general, we prefer movies done on the hardest difficulty provided that they demonstrate the best superhuman gameplay, but there are cases where lower difficulty may allow even better demonstration and we prefer that.
	$LF
]p
[p 
	"Note: In some games, you can access some extra items, stages, bosses and/or achieve some hidden endings if you are on a certain difficulty, which is usually the hardest one. Having this happening might interfere with your decided movie goals. So make sure that you have investigated the secrets in the game.
	$LF
]p
[h4 id=Auto-save 
	" Auto-save
	$LF
]h4
[p 
	"It is usually a waste of time to save the game in a TAS, especially when it is automatically done everytime. Turn the auto-save option off if you are allowed to, otherwise, avoid triggering it as much as possible.
	$LF
]p
[h4 id=Dateandtime 
	" Date and time
	$LF
]h4
[p 
	"In many games, these settings affect the randomness in the games. See also 
	(__wikiLink|/LuckManipulation|Luck Manipulation)
	".
	$LF
]p
[p 
	"In some games, when the date and/or time matches with a particular value, some secret game material become accessible.
	$LF
]p
[h4 id=Userprofile 
	" User profile
	$LF
]h4
[p 
	"Typically in many, but not limited to, long games featuring the save and load function, you are often asked to create a user profile before you can save, which usually contains some informations such as your or your game character's name, gender, birthday and so on.
	$LF
]p
[p 
	"It is usually a good idea to keep the informations as short as possible so that you can spend least time in creating the profile or having the informations cited during your gameplay. In some games, however, the informations in your profile may have deterministic or random effects on the gameplay and you may accordingly manipulate them to be in a favourable way.
	$LF
]p
[hr 
]hr
[h2 id=Howtofindouttricks 
	" How to find out tricks
	$LF
]h2
[h3 id=Studyexistingmaterials 
	" Study existing materials
	$LF
]h3
[p 
	"Game walkthroughs, FAQs, forum posts, email letters, IRC remarks, etc. If you find or suspect that the game you are TASing has an engine similar to another game that has already had a TAS submitted, check it out to see if particular tricks or glitches used in it are applicable to your game as well.
	$LF
]p
[h3 id=Examinegamedata 
	" Examine game data
	$LF
]h3
[h4 id=Readtheprogram 
	" Read the program
	$LF
]h4
[p 
	"All games are programs in some form. While they are intended to only be executed by the game system, there is nothing stopping you from reading the program instead. While the program code is most likely not very easy to read, it is the exact rules that the game is made out of.
	$LF
]p
[p 
	"The best way of understanding the rules is to simply read them and figure out exactly what they mean. You can check exactly how the 
	[a class=intlink href=/LuckManipulation 
		"random number generator
	]a
	" works or simply why the player character (supposedly) can not move into walls.
	$LF
]p
[p 
	"This is a very difficult thing to do, it is recommended that you know how to program before you attempt this. This is not normal programming, but on a lower level. You will need to actually understand the instructions that are given to the processor and not what the programmer may have written.
	$LF
]p
[p 
	(__wikiLink|/ReverseEngineering|Reverse Engineering)
	$LF
]p
[h4 id=Readthescript 
	" Read the script
	$LF
]h4
[p 
	"Many games, especially ones with plot, have their own script engines. It commonly controls important events such as when you can go somewhere and how enemies behave.
	$LF
]p
[p 
	"Learn how the script engine works and examine what the game script does. It can have flaws just like the main program. But most importantly, it allows you to understand what your options are.
	$LF
]p
[h4 id=Examinetheleveldata 
	" Examine the level data
	$LF
]h4
[p 
	"Games frequently store important data right inside the level definitions. You can find all sorts of tilemap flags, trigger areas, enemy controls and more! Why waste time guessing where exactly things are when you can simply look them up?
	$LF
]p
[h4 id=Examinethedatatables 
	" Examine the data tables
	$LF
]h4
[p 
	"Games frequently need to store large amounts of values for some purpose, be it the statistics for the items in the game, enemy health values, character statistic growth data or pre-computed math functions. There is no need to waste time hunting for values in memory when you can just read them all in one go.
	$LF
]p
[h3 id=Trythingsout 
	" Try things out
	$LF
]h3
[p 
	"Simply try doing things that you aren't expected to do. Game developers forget about all the possibilities. It is your job to remind them what is actually possible.
	$LF
]p
[hr 
]hr
[h2 id=Seealso 
	" See also
	$LF
]h2
[ul 
	[li 
		" 
		(__wikiLink|/GameResources|Game Resources)
		" ― we have resource pages for other games too!
		$LF
	]li
	[li 
		" 
		[a class=intlink href=/GameResources/BossFightingGuide 
			"Boss Fighting Guide
		]a
		" ― tricks specific to boss fights
	]li
]ul
