10
[div class=p 
	"This page is a hub for all speedrun related knowledge about the Flash game 
	[em 
		"Magnet Face
	]em
	$LF
]div
[div class=p 
	"(TODO) Add table of contents
	$LF
]div
[h3 id=Language 
	"Language
	$LF
]h3
[ul 
	[li 
		"u/f - Units per frame (speed value)
		$LF
	]li
]ul
[h3 id=Mechanics 
	"Mechanics
	$LF
]h3
[h4 id=Walking 
	"Walking
	$LF
]h4
[div class=p 
	"Billy's walking speed is capped at 200u/f, you can increase this cap to somewhere between 230 and 240u/f if you stop holding a direction for a frame or two. If you're coming off something at a speed of over 200, don't worry, Billy will maintain his speed
	$LF
]div
[h4 id=Jumping 
	"Jumping
	$LF
]h4
[div class=p 
	"When jumping, Billy will not move horizontally for a frame, he will also not move horizontally for a frame when he eventually lands on some floor.
	$LF
]div
[h4 id=Attracting 
	"Attracting
	$LF
]h4
[div class=p 
	"When pressing the Z key, Billy will create a magnetic shield around him that will attract to any metallic things, such as rails, metallic platforms, boxes and weapons, you can only attract one thing at a time. If you keep attracting while not moving, Billy's magnetic shield will increase at two different levels, the latter of which covers the length of the entire screen. For more information about each individual interaction with objects, check out the objects sections
	$LF
]div
[h4 id=LookingUpOrDown 
	"Looking up or down
	$LF
]h4
[div class=p 
	"By pressing up or down while in a standstill, Billy will look up or down in the corresponding directions, this increases his field of view, which can be used to load things earlier, speaking of which
	$LF
]div
[h4 id=Dying 
	"Dying
	$LF
]h4
[div class=p 
	"If you deplete Billy's health bar at the top left corner, he will die and warp to the last checkpoint he passed through.
	$LF
]div
[h4 id=Cycles 
	"Cycles
	$LF
]h4
[div class=p 
	"This game has many cycles, such as moving platforms and enemies, they only load once they're on Billy's field of view. They don't seem to be affected by the system time.
	$LF
]div
[div class=p 
	"(TODO) Add gifs to this section
	$LF
]div
[h3 id=Objects 
	"Objects
	$LF
]h3
[h4 id=Enemies 
	"Enemies
	$LF
]h4
[div class=p 
	"There are two types of enemies, which I've nicknamed Slasher and Chopper. The Slasher will stay in place, and attack Billy with a hand swipe if he gets close, their most distinct feature compared to the Chopper is that the Slasher has three eyes, while the Chopper only has one. The Chopper will move between two places, and if they detect Billy, they will start chasing him until a certain point. Some of the things that they both share in common are the fact that they die to three gun hits, they die instantly to spike balls, you can push them (they won't move though) and they only have contact collision in the sides, meaning you can jump through them.
	$LF
]div
[h4 id=RayGuns 
	"Ray guns
	$LF
]h4
[div class=p 
	"Scattered throughout the levels, there are these ray guns that you can use, but in a subversive fashion, you can't actually shoot them, you can only attract them in order to throw them at enemies to kill them, and besides that, they have no practical use.
	$LF
]div
[h4 id=Rails 
	"Rails
	$LF
]h4
[div class=p 
	"There are these metallic rails across the stages that Billy can attract to, and when attracted to, will move Billy through a set path until the end. When you leave a rail, Billy keeps his previous momentum.
	$LF
]div
[h4 id=MovingPlatforms 
	"Moving platforms
	$LF
]h4
[div class=p 
	"There are two types of moving platforms, normal and metallic. They are functionally the same, except that the you can attract to the metallic ones, when you do this, Billy will stick to the lower half of the platform.
	$LF
]div
[h4 id=Boxes 
	"Boxes
	$LF
]h4
[div class=p 
	"Metallic boxes will attract to Billy when they get close enough to his magnetic shield, when this happens, they will follow him until he stops attracting or they get far away from each other. When attracting to you, if the box collides with you, depending on the speed of the box, it can either just knock down Billy when it isn't very fast or do that and fly up into the air. If you jump while attracting to a box that was on the ground, the box will be flung horizontally, relative to your position.
	$LF
]div
[h4 id=SpikeBalls 
	"Spike balls
	$LF
]h4
[div class=p 
	"When you touch a spike ball, you take damage. Besides that, they are functionally the same compared to boxes
	$LF
]div
[h4 id=ColoredPads 
	"Colored pads
	$LF
]h4
[div class=p 
	"The pads open doors that have the corresponding color, they are only triggered by boxes and spike balls.
	$LF
]div
[div class=p 
	"(TODO) Add gifs to this section
	$LF
]div
[hr 
]hr
[h3 id=TricksAndGlitches 
	"Tricks and glitches
	$LF
]h3
[h4 id=LedgeJump 
	"Ledge jump
	$LF
]h4
[div class=p 
	"When you run off ledges, you can still jump in the air.
	$LF
]div
[h4 id=CornerBoosts 
	"Corner boosts
	$LF
]h4
[div class=p 
	"By landing close to the corner of a metal box, the box will get pushed slightly backwards and you will get pushed slightly forward, saving a little bit of time.
	$LF
]div
[h4 id=BoxJump 
	"Box jump
	$LF
]h4
[div class=p 
	"Boxes don't have any collision on the bottom, meaning you can jump through them, and when you do this, you automatically snap to the top of the box.
	$LF
]div
[h4 id=DamageBoost 
	"Damage boost
	$LF
]h4
[div class=p 
	"When taking damage, Billy will be moving at 300 units per frame for a while, which is faster than the regular running speed (which is 200). Note that you have to jump as early as possible to avoid slowdown
	$LF
]div
[h4 id=DoubleJump 
	"Double jump
	$LF
]h4
[div class=p 
	"By jumping the frame you land, Billy will jump in the walking animation, which allows you to jump again in the air.
	$LF
]div
[h4 id=WallClip 
	"Wall-clip
	$LF
]h4
[div class=p 
	"If you're going fast enough (usually about 900 units per frame) you can clip through thin walls pretty easily while also preserving speed. However, on thicker walls, what may happen is that you lose speed or fail to clip altogether.
	$LF
]div
[h3 id=AttractionGlitches 
	"Attraction glitches
	$LF
]h3
[h4 id=BoxClip 
	"Box clip
	$LF
]h4
[div class=p 
	"When smashing a metal box against yourself close to a wall, you or the box can clip through the wall.
	$LF
]div
[h4 id=AttractionJump 
	"Attraction jump
	$LF
]h4
[div class=p 
	"Whenever you stop attracting from a rail or metallic platform, you can jump again, this can be used to climb high areas without slowing down.
	$LF
]div
[h4 id=AttractionSpeed 
	"Attraction speed
	$LF
]h4
[div class=p 
	"If you remember, Billy carries his momentum after ceasing attraction to a rail or metallic platform, and this applies even if Billy hasn't fully stuck to the platform, meaning you can move at very high, very quickly. There is also a difference between attracting to rails and attracting to platforms, while rails have a speed cap of 580 u/f, platforms have no cap, meaning the only limit is the ability to attract the same platform twice.
	$LF
]div
[h4 id=RailJam 
	"Rail jam
	$LF
]h4
[div class=p 
	"When attracting to rails, on specific positions, Billy will become jammed between two positions, which is useful because it immediately raises your speed to the highest value
	$LF
]div
[h4 id=AttractionDisassociation 
	"Attraction disassociation
	$LF
]h4
[div class=p 
	"When you're going really fast (due to Attraction Speed), if you start attracting to a rail at the very last frame (or earlier), you will continue moving without attracting to the rail you were trying to attract, you will become 
	[em 
		"disassociated
	]em
	". This can be used for many things, such as increasing or decreasing your height without losing time. However, if you touch a wall, you will start attracting back. This may seem situational, but there are actually many glitches that are possible due to this trick.
	$LF
]div
[h4 id=FloorClip 
	"Floor clip
	$LF
]h4
[div class=p 
	"When you're disassociated from a rail, you will sometimes clip through thin floors from above. If you clip through a thick floor, you will start to zip either to the left or to the right, depending on your horizontal position.
	$LF
]div
[div class=p 
	"(TODO) Add more attraction glitches
	$LF
]div
[div class=p 
	"(TODO) Add gifs
	$LF
]div
[hr 
]hr
[h3 id=Maps 
	"Maps
	$LF
]h3
[div class=p 
	[b 
		"Warning:
	]b
	" These maps should be taken with a huge grain of salt, since they're very inaccurate, they should only be used for routing purposes
	$LF
]div
[div class=p 
	"Odd looking objects and their meanings:
	$LF
]div
[ul 
	[li 
		"Purple arrows: Show the direction of the rail
		$LF
	]li
	[li 
		"Big horizontal blue rectangles: Moving platforms
		$LF
	]li
	[li 
		"Big horizontal gray rectangles: Metallic moving platforms
		$LF
	]li
	[li 
		"Yellow squares: Pieces of cheese
		$LF
	]li
	[li 
		"Pink blobs: Enemies (didn't bother to differentiate them)
		$LF
	]li
	[li 
		"Small gray arches: Ray guns
		$LF
	]li
	[li 
		"Pink rectangles on the floor: Buttons for pink doors
		$LF
	]li
]ul
[div class=p 
	"Level 1 map:
	$LF
	[img class=embed mw-100 src=https://i.ibb.co/5jV2YqF/level-1-route.png 
	]img
	$LF
	"(TODO) Add remaining maps
	$LF
]div
[hr 
]hr
[h3 id=RamWatchAndLuaScripts 
	"RAM Watch and lua scripts
	$LF
]h3
[div class=p 
	"Billy's X position at the start of each level is always 4000, and the address for this value is a string that always starts with the number 5 and ends in the number 0. The Y position address is always the same as the X value's address, except that it always ends in a 4 instead of a 0 (these address strings quirks are common across many Flash games, by the way). Note that the addresses reset every time you load a new level.
	$LF
]div
[div class=p 
	"Here's a lua script created by 
	[a class=intlink href=/Users/Profile/CasualPokePlayer 
		"CasualPokePlayer
	]a
	" that allows you to see how many units you move every frame in each direction:
	$LF
]div
[pre 
	"local X_last_pos = memory.reads32(0xX address)
	$LF
	"local Y_last_pos = memory.reads32(0xY address)
	$LF
	$LF
	"local function paint_callback()
	$LF
	"   local X_pos = memory.reads32(0xX address)
	$LF
	"   local Y_pos = memory.reads32(0xY address)
	$LF
	"   local X_vel = X_pos - X_last_pos
	$LF
	"   local Y_vel = Y_pos - Y_last_pos
	$LF
	"   gui.text(1, 50, string.format("X pos: %d\nX vel: %d", X_pos, X_vel))
	$LF
	"   gui.text(1, 100, string.format("Y pos: %d\nY vel: %d", Y_pos, Y_vel))
	$LF
	"   X_last_pos = X_pos
	$LF
	"   Y_last_pos = Y_pos
	$LF
	"end
	$LF
	$LF
	"callback.onPaint(paint_callback)
	$LF
]pre
