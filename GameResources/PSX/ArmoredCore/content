9
[div class= 
	[div class= 
		[ul class=nav nav-tabs role=tablist 
			[li class=nav-item 
				[a class=active nav-link data-bs-toggle=tab href=#tabs-31-0 
					"Table of Contents
				]a
			]li
			[li class=nav-item 
				[a class=nav-link data-bs-toggle=tab href=#tabs-31-1 
					"Memory Locations
				]a
			]li
			[li class=nav-item 
				[a class=nav-link data-bs-toggle=tab href=#tabs-31-2 
					"Scripts
				]a
			]li
		]ul
	]div
	[div class=tab-content 
		[div class=tab-pane fade active show id=tabs-31-0 
			[div class=card mb-2 
				[div class=card-header 
					[strong 
						"Table of contents
					]strong
				]div
				[div class=card-body 
					[ul 
						[li 
							[a href=#Resources 
								" Resources
								$LF
							]a
							[ul 
								[li 
									[a href=#Links 
										" Links
										$LF
									]a
								]li
								[li 
									[a href=#Videos 
										" Videos
										$LF
									]a
								]li
							]ul
						]li
						[li 
							[a href=#EmulationBizhawkNotes 
								" Emulation (BizHawk) Notes
								$LF
							]a
						]li
						[li 
							[a href=#GlitchesTechniques 
								" Glitches / Techniques
								$LF
							]a
							[ul 
								[li 
									[a href=#AbortingMissions 
										" Aborting Missions
										$LF
									]a
								]li
								[li 
									[a href=#OutOfBounds 
										" Out-of-Bounds
										$LF
									]a
								]li
								[li 
									[a href=#CoordinatesUnderOverflow 
										" Coordinates Under/Overflow
										$LF
									]a
								]li
								[li 
									[a href=#Popping 
										" "Popping"
										$LF
									]a
								]li
								[li 
									[a href=#LaserBladeManipulation 
										" Laser Blade Manipulation
										$LF
									]a
									[ul 
										[li 
											[a href=#Trajectory 
												" Trajectory
												$LF
											]a
										]li
										[li 
											[a href=#Damage 
												" Damage
												$LF
											]a
										]li
									]ul
								]li
							]ul
						]li
						[li 
							[a href=#RngAndSynchronization 
								" RNG and Synchronization
								$LF
							]a
						]li
						[li 
							[a href=#Speed 
								" Speed
								$LF
							]a
						]li
						[li 
							[a href=#MissionNotes 
								" Mission Notes
								$LF
							]a
							[ul 
								[li 
									[a href=#RavensTest 
										" Ravens' Test
										$LF
									]a
								]li
								[li 
									[a href=#DestroyJustice 
										" Destroy "Justice"
										$LF
									]a
								]li
								[li 
									[a href=#MopUpChromeRemnants2 
										" Mop Up Chrome Remnants 2
										$LF
									]a
								]li
								[li 
									[a href=#DestroyFloatingMines 
										" Destroy Floating Mines
										$LF
									]a
								]li
							]ul
						]li
						[li 
							[a href=#LoadTimes 
								" Load Times
								$LF
							]a
							[ul 
								[li 
									[a href=#MissionSelection 
										" Mission Selection
										$LF
									]a
								]li
								[li 
									[a href=#Slides 
										" Slides
										$LF
									]a
								]li
								[li 
									[a href=#LoadTime 
										" Load Time
										$LF
									]a
								]li
								[li 
									[a href=#DebriefingAndReturningToMenu 
										" Debriefing and Returning to Menu
										$LF
									]a
								]li
							]ul
						]li
						[li 
							[a href=#OpenQuestions 
								" Open Questions
								$LF
							]a
							[ul 
								[li 
									[a href=#OutOfBoundsClippingWithArbitraryEquipment 
										" Out-of-Bounds Clipping with Arbitrary Equipment
										$LF
									]a
								]li
								[li 
									[a href=#PoppingEnemies 
										" Popping Enemies
										$LF
									]a
								]li
								[li 
									[a href=#MissionPathSpecifics 
										" Mission Path Specifics
										$LF
									]a
								]li
							]ul
						]li
						[li 
							[a href=#VersionDifferences 
								" Version Differences
								$LF
							]a
							[ul 
								[li 
									[a href=#NtscVsJp 
										" NTSC vs JP
										$LF
									]a
								]li
								[li 
									[a href=#Version10Vs11 
										" Version 1.0 vs 1.1
										$LF
									]a
								]li
								[li 
									[a href=#PsxVsPs2VsPstv 
										" PSX vs PS2 vs PSTV
										$LF
									]a
								]li
							]ul
						]li
					]ul
				]div
			]div
		]div
		[div class=tab-pane fade id=tabs-31-1 
			[div class=p 
				"A BizHawk watch file with these memory locations can be found here: 
				(__wikiLink|displaytext=Armored Core Memory Watch File|href=/Userfiles/Info/62175889356845146)
				$LF
			]div
			[table 
				[tbody 
					[tr 
						[th 
							"Address
						]th
						[th 
							"Type
						]th
						[th 
							"Description
						]th
					]tr
					[tr 
						[td 
							[code 
								"1A2988
							]code
						]td
						[td 
							"16-bit unsigned
						]td
						[td 
							"Enemy 1 Health
						]td
					]tr
					[tr 
						[td 
							[code 
								"1A2AF8
							]code
						]td
						[td 
							"16-bit unsigned
						]td
						[td 
							"Enemy 2 Health
						]td
					]tr
					[tr 
						[td 
							" 
						]td
						[td 
							" 
						]td
					]tr
					[tr 
						[td 
							[code 
								"1A26C0
							]code
						]td
						[td 
							"16-bit signed
						]td
						[td 
							"Player X Coordinate
						]td
					]tr
					[tr 
						[td 
							[code 
								"1A26C2
							]code
						]td
						[td 
							"16-bit signed
						]td
						[td 
							"Player Y Coordinate
						]td
					]tr
					[tr 
						[td 
							[code 
								"1A26C4
							]code
						]td
						[td 
							"16-bit signed
						]td
						[td 
							"Player Z Coordinate
						]td
					]tr
					[tr 
						[td 
							[code 
								"1A26CA
							]code
						]td
						[td 
							"16-bit signed
						]td
						[td 
							"Player Yaw
						]td
					]tr
					[tr 
						[td 
							" 
						]td
						[td 
							" 
						]td
					]tr
					[tr 
						[td 
							[code 
								"1A2830
							]code
						]td
						[td 
							"16-bit signed
						]td
						[td 
							"Enemy 1 X Coordinate
						]td
					]tr
					[tr 
						[td 
							[code 
								"1A2832
							]code
						]td
						[td 
							"16-bit signed
						]td
						[td 
							"Enemy 1 Y Coordinate
						]td
					]tr
					[tr 
						[td 
							[code 
								"1a2834
							]code
						]td
						[td 
							"16-bit signed
						]td
						[td 
							"Enemy 1 Z Coordinate
						]td
					]tr
					[tr 
						[td 
							" 
						]td
						[td 
							" 
						]td
					]tr
					[tr 
						[td 
							[code 
								"198804
							]code
						]td
						[td 
							"16-bit unsigned
						]td
						[td 
							"Frame Counter
						]td
					]tr
					[tr 
						[td 
							[code 
								"19F52A
							]code
						]td
						[td 
							"16-bit unsigned
						]td
						[td 
							"Frame Counter
						]td
					]tr
					[tr 
						[td 
							[code 
								"1AC81C
							]code
						]td
						[td 
							"16-bit unsigned
						]td
						[td 
							"Frame Counter
						]td
					]tr
					[tr 
						[td 
							" 
						]td
						[td 
							" 
						]td
					]tr
					[tr 
						[td 
							[code 
								"1A2828
							]code
						]td
						[td 
							"16-bit unsigned
						]td
						[td 
							"Enemy 1 ID
						]td
					]tr
					[tr 
						[td 
							[code 
								"1A282A
							]code
						]td
						[td 
							"16-bit unsigned
						]td
						[td 
							"Enemy 1 Active Flags
						]td
					]tr
					[tr 
						[td 
							[code 
								"1A2998
							]code
						]td
						[td 
							"16-bit unsigned
						]td
						[td 
							"Enemy 2 ID
						]td
					]tr
					[tr 
						[td 
							[code 
								"1A299A
							]code
						]td
						[td 
							"16-bit unsigned
						]td
						[td 
							"Enemy 2 Active Flags
						]td
					]tr
					[tr 
						[td 
							" 
						]td
						[td 
							" 
						]td
					]tr
					[tr 
						[td 
							[code 
								"009010
							]code
						]td
						[td 
							"32-bit unsigned
						]td
						[td 
							"RNG
						]td
					]tr
					[tr 
						[td 
							" 
						]td
						[td 
							" 
						]td
					]tr
					[tr 
						[td 
							[code 
								"1D9ED6
							]code
						]td
						[td 
							"16-bit unsigned
						]td
						[td 
							"Justice Health
						]td
					]tr
					[tr 
						[td 
							" 
						]td
						[td 
							" 
						]td
					]tr
					[tr 
						[td 
							[code 
								"041B38
							]code
						]td
						[td 
							"8-bit signed
						]td
						[td 
							"Corp Points Counter
						]td
					]tr
				]tbody
			]table
			[div class=p 
				[b 
					"A Note on Coordinates
				]b
				$LF
			]div
			[div class=p 
				"Armored Core defines the ground plane of the game in terms of X and Z. Thus, the Y coordinate is height. The Yaw value is stored as an 16-bit signed integer. 360 degrees of rotation is encoded as 4096 units. So, the player's current rotation value is the Yaw value divided by 4096, which can be plugged into sin/cos functions directly.
				$LF
			]div
			[div class=p 
				[b 
					"Health and Offsets
				]b
				$LF
			]div
			[div class=p 
				"The player and enemies use the same data structures to store their information, and are all stored sequentially in memory. So, adding the 
				[code 
					"Health Offset
				]code
				" offset to the player health memory address will yield the first enemy health address. Adding the offset again will yield the second enemy, and so on. Furthermore, the data structures are the same, so adding the offsets to find other various types of data will work for both the player and enemies.
				$LF
			]div
			[table 
				[tbody 
					[tr 
						[th 
							"Offset
						]th
						[th 
							"Description
						]th
					]tr
					[tr 
						[td 
							[code 
								"0x170
							]code
						]td
						[td 
							"Offset between each player/enemy health values.
						]td
					]tr
					[tr 
						[td 
							[code 
								"-0x158
							]code
						]td
						[td 
							"X Coordinate
						]td
					]tr
					[tr 
						[td 
							[code 
								"-0x156
							]code
						]td
						[td 
							"Y Coordinate
						]td
					]tr
					[tr 
						[td 
							[code 
								"-0x154
							]code
						]td
						[td 
							"Z Coordinate
						]td
					]tr
					[tr 
						[td 
							[code 
								"-0x14E
							]code
						]td
						[td 
							"Yaw Coordinate
						]td
					]tr
					[tr 
						[td 
							[code 
								"-0x160
							]code
						]td
						[td 
							"Active Flag
						]td
					]tr
				]tbody
			]table
			[div class=p 
				[b 
					"Frame Counters
				]b
				$LF
			]div
			[div class=p 
				"Armored Core stores various frame counters. Some of them are synchronized to the game's clock, some are synchronized to the GPU. For scripts that need to only update on frames that actually update, these various frame counters can be useful to watch in combinations.
				$LF
			]div
			[div class=p 
				[b 
					"ID and Active Flags
				]b
				$LF
			]div
			[div class=p 
				"These identify enemies that are currently loaded into the environment and alive. If the Active Flag is set to a non-zero value, then the enemy is loaded and in the environment. An enemy with 0 health will still be loaded into the environment while it is exploding, but then once it explodes, it is removed and the active flag becomes 0. This can also be useful in the case that the game does not reset an enemies health to 0 when it is dead, as it will do sometimes. For scripts looking at enemy health, this flag can determine whether the health value is valid or not.
				$LF
			]div
			[div class=p 
				[b 
					"Justice Health
				]b
				$LF
			]div
			[div class=p 
				"This memory location stores the health of the Destroy "Justice" mission destructible.
				$LF
			]div
			[div class=p 
				[b 
					"Corp Points Counter
				]b
				$LF
			]div
			[div class=p 
				"This signed byte stores the current value of the players corporation points. This value decreases when points with Chrome are scored, and increases when points with Murakumo are scored. The game considers a value of 0 as Chrome winning.
				$LF
			]div
		]div
		[div class=tab-pane fade id=tabs-31-2 
			[div class=p 
				[b 
					"RNG Prediction Script
				]b
				$LF
			]div
			[pre 
				[code class=language-lua 
					$UNPRINTABLE TEXT!!!
				]code
			]pre
			[hr 
			]hr
			[div class=p 
				[b 
					"Radar and Speedometer Script
				]b
				$LF
			]div
			[div class=p 
				[a href=https://gist.github.com/Zinfidel/d47287cec638f0f915c3d99bccef3a7d rel=noopener external nofollow 
					"Zinfidel's Radar Script
				]a
				" will display enemy coordinates (with elevation), a navigation point, arbitrary boundaries, and a speedometer in a separate window.
				$LF
			]div
			[div class=p 
				[img class=embed mw-100 src=https://i.imgur.com/QYiv0kC.png 
				]img
				$LF
			]div
			[div class=p 
				"The small red dots are the enemies' position with respect to the player's elevation, while the large red dots represent the enemy at their actual elevation. The yellow line and dot is an arbitrary nav point. The red polygons are arbitrary boundaries that can be set up for such things as finding a very narrow hallway while out-of-bounds clipping.
				$LF
			]div
			[div class=p 
				[img class=embed mw-100 src=https://i.imgur.com/LUiHdSk.png 
				]img
				$LF
			]div
			[div class=p 
				"The speedometer is overlaid on the game screen. The blue bar fills the faster the player is moving, up to an absolute maximum at the end of the white outline. The white number at the left of the blue bar is the in-game speed of the player, in map length units. The small line and number below the speed bar moves - this represents the current maximum speed the player can possibly achieve, given their current heading. See the section on the game's speed calculations for more information on why this number varies.
				$LF
			]div
		]div
	]div
]div
[h2 id=Resources 
	" Resources
	$LF
]h2
[h3 id=Links 
	" Links
	$LF
]h3
[ul 
	[li 
		[a href=https://www.speedrun.com/armored_core rel=noopener external nofollow 
			"Armored Core on Speedrun.com
		]a
		$LF
	]li
	[li 
		[a href=https://w.atwiki.jp/armoredcorerta/ rel=noopener external nofollow 
			"Armored Core Speedrun Wiki (JP)
		]a
		$LF
	]li
	[li 
		[a href=https://discord.gg/gJesRvQ rel=noopener external nofollow 
			"Armored Core Speedrun Discord Invite Link
		]a
		$LF
	]li
	[li 
		[a href=http://k-2nd.sakura.ne.jp/ac/index.html rel=noopener external nofollow 
			"K-2nd Armored Core Resources (JP)
		]a
		" - An enormous resource page for Armored Core in general, but especially the first generation of games. The glossary on this website contains a wealth of information on backstory, glitches, and strategy.
		$LF
	]li
	[li 
		[a href=http://kiwamiya.pandako.com/cd/data/index.html rel=noopener external nofollow 
			"Kiwamiya's Glitch Reports (JP)
		]a
		" - A repository of glitch information for the Armored Core Series. Probably the most complete list of AC glitches documented on the internet.
		$LF
	]li
	[li 
		[a href=https://docs.google.com/spreadsheets/d/1eiSMMCBBOTZeNnzWjCU2V6uBn9ykdgogIDgkNBiVE7k rel=noopener external nofollow 
			"Mission Schedule
		]a
		" - Spreadsheet showing the mission timeline of Armored Core 1, as well as the corporation point values for each mission. Based on 
		[a href=http://armis.s57.xrea.com/ac1/mission_/primus.htm rel=noopener external nofollow 
			"this website
		]a
		".
		$LF
	]li
	[li 
		[a href=https://docs.google.com/spreadsheets/d/1eiSMMCBBOTZeNnzWjCU2V6uBn9ykdgogIDgkNBiVE7k/edit#gid=650822443 rel=noopener external nofollow 
			"Mission Start/Load Costs
		]a
		" - Spreadsheet showing the cost in frames of selecting and loading a given mission. See the 
		[b 
			"Load Times
		]b
		" section for more information.
		$LF
	]li
	[li 
		" 
		[a href=https://docs.google.com/document/d/1hXTVUevdLYZVYhVbRzXhR6EcTSEDjcMp2qEBZ7lG2J4 rel=noopener external nofollow 
			"Zinfidel's any% TAS Document
		]a
		" - 
		[a class=intlink href=/Users/Profile/Zinfidel 
			"Zinfidel
		]a
		"'s research/outline/notes document for his 
		(__wikiLink|displaytext=any% submission|href=/6649S)
		".
		$LF
	]li
	[li 
		" 
		[a href=https://gist.github.com/Zinfidel/d47287cec638f0f915c3d99bccef3a7d rel=noopener external nofollow 
			"Zinfidel's Radar Script
		]a
		" - A Lua script for BizHawk that creates a radar form with enemy information, and adds a speedometer to the bottom of the game screen. There is also the option to add polygons to draw onto the map, which is useful for outlining important areas when clipping for example.
		$LF
	]li
]ul
[h3 id=Videos 
	" Videos
	$LF
]h3
[ul 
	[li 
		" 
		[a href=https://www.nicovideo.jp/mylist/29788706 rel=noopener external nofollow 
			"TAS by JAX (JP)
		]a
		" - Tool-Assisted Playaround by JAX for AC1. Uses PSXjin; unfortunately, the run did not sync and the author had to cut the videos together.
		$LF
	]li
	[li 
		" 
		[a href=https://www.nicovideo.jp/watch/sm27436979 rel=noopener external nofollow 
			"RTA by Hokuson (JP)
		]a
		" - A speedrun with a very thorough explanation of the game's mechanics (especially speed mechanics).
		$LF
	]li
	[li 
		" 
		[a href=https://www.youtube.com/watch?v=546uoe_3poU rel=noopener external nofollow 
			"WR RTA by pmcTRILOGY
		]a
		" - World Record any% run of AC1 as of March 2020.
		$LF
	]li
]ul
[hr 
]hr
[h2 id=EmulationBizhawkNotes 
	" Emulation (BizHawk) Notes
	$LF
]h2
[ul 
	[li 
		" Turn on Calculate Lag from the GPU option in the PSX configuration menu. This game lags 
		[b 
			"a lot
		]b
		" and your inputs will need to be aligned around lag frames all the time.
		$LF
	]li
	[li 
		" Even with lag calculated from the gpu, there are some frames that just won't accept input correctly unless the input is held down for multiple frames. When trying to find the very first possible input for the game, make sure to have the button held down for 3 frames or more when hunting because sometimes input can occur earlier as long as the input isn't a single frame long.
		$LF
	]li
]ul
[hr 
]hr
[h2 id=GlitchesTechniques 
	" Glitches / Techniques
	$LF
]h2
[h3 id=AbortingMissions 
	" Aborting Missions
	$LF
]h3
[div class=p 
	[img class=embedright mw-100 src=https://i.imgur.com/ZqZ0A5W.png 
	]img
	$LF
	"By pressing Start during a mission to pause the game, then select, the player can abort a mission, ending it immediately. The game's storyline moves on whether the player succeeds or fails a mission, so by aborting a mission as soon as it starts, the player "finishes" the mission immediately, and advances the game's storyline. This is the defining trick of the any% category of the game, where almost all of the game is skipped by doing this. There are 33 missions in AC1 that can be skipped in this manner.
	[br 
	]br
	$LF
]div
[h3 id=OutOfBounds 
	" Out-of-Bounds
	$LF
]h3
[div class=p 
	[img class=embedright mw-100 src=https://i.imgur.com/Rbf4rk5.gif 
	]img
	$LF
]div
[div class=p 
	"The lightweight, bipedal legs part LN-501 and the XCA-00 core, when combined with either the AN-3001 or ANKS-1A46J arm parts causes an animation glitch when strafing and moving backward. The walking animation becomes "locked" in a strange manner and moves in the Z direction incorrectly, usually in the negative direction, causing the user to clip through the floor. This technique proves pivotal to the any% run, as it allows the player to subvert mission layouts entirely.
	$LF
]div
[div class=p 
	"Actually performing the glitch comes down to just strafing left or right, and then pressing and holding down and the right time. The actual timing of the down press appears to vary depending on terrain conditions, but there is a pretty consistent technique to it. If the player is strafing to the 
	[b 
		"right
	]b
	", when the AC's right leg is currently swinging forward and positioned straight down (so that it covers up the left leg), pressing down will cause the glitch to occur. The same works when moving left, switching which leg is being watched. If a script is being run to monitor the player's speed, an even more accurate technique is to start holding down exactly three frames before a speed burst occurs when the leading leg is pointing down. The LN-501 legs move in "bursts" of speed where it is not a consistent velocity, but punctuated by speed increases as each leg kicks forward.
	$LF
]div
[div class=p 
	"There is not only one frame that will cause the animation glitch to occur. The timing detailed above will tend to yield the first frame that down can be held to get the glitch to occur, but many frames after that frame will also work, sometimes with a gap of frames that won't work in between. Sometimes, changing the timing of the down press will also change the speed and distance at which the player moves while glitching. There appears to be two different animation speeds that can be achieved with this glitch: a fast speed, and a slow speed. The fast speed moves further both horizontally and vertically than the slow speed. Whether a slow or fast animation occurs seems to be entirely dependent on when the down button is pressed during the strafing animation. The animation can actually cause the player to move upwards instead of clipping through the ground. It is rare and difficult to set up, but if the player is walking uphill when the glitch is performed, there is a possibility to get the glitch to work in the reverse direction.
	[br 
	]br
	$LF
]div
[h3 id=CoordinatesUnderOverflow 
	" Coordinates Under/Overflow
	$LF
]h3
[div class=p 
	"Armored Core's map coordinates are stored as signed 16-bit integers, which means that maps have limits at -32,768 and 32,767 for each axis. The player and other entities are typically prevented from ever getting close to these limits by in-game mission-failure boundaries, or just obstacles like walls, but if entities cross these boundaries, their position is either over- or under-flowed and the entity will be "teleported" to the other side of the map. This property is used while clipping out-of-bounds by falling to the bottom of the map, causing the player to reappear at the top so that they can then land in some part of the map that is very high up. The most amusing and useful application of this property, however, is on the Destroy "Justice" mission, where the mission's target destructible can be destroyed from the opposite side of the map. See the mission notes for more information.
	$LF
]div
[h3 id=Popping 
	" "Popping"
	$LF
]h3
[div class=p 
	"Most enemies in the game will undergo an "exploding" process once their health has been reduced to 0. This involves an animation where a bunch of smaller explosions go off around the enemy for a couple seconds before the enemy finally explodes in a shower of parts and disappears. This exploding process can be a big waste of time for a speedrun, and thankfully there is a way around it. For some reason, if an enemy is currently in the air and descending to the ground, landing the final hit on the enemy will cause the enemy to "pop" the moment it hits the ground and disappear.
	$LF
]div
[div class=p 
	"This "popping" effect can also occur outside of the enemy descending to the ground. It seems like if enough damage is done to an enemy all at once that they may also pop - but this isn't confirmed. See the Open Questions section at the bottom of the page for more notes on popping.
	$LF
]div
[h3 id=LaserBladeManipulation 
	" Laser Blade Manipulation
	$LF
]h3
[h4 id=Trajectory 
	" Trajectory
	$LF
]h4
[div class=p 
	[img class=embedright mw-100 src=https://i.imgur.com/hWVtK7F.gif 
	]img
	$LF
	"By switching the active weapon during the laser blade animation, the player's new trajectory (caused by the tracking of the laser blade) can be altered. Normally the tracking that laser blade swings cause lasts until after the entire animation has played out, and then some. This can cause the player to get flung in undesirable directions, at pretty high speeds. Switching weapons in the middle of a swing seems to cause the tracking to end because the lock on the enemy is briefly interrupted. In the clip, the left side is the result of normal laser blade tracking. The right side of the clip has identical input, except for weapons being switched in the middle of the swing, causing the tracking to end prematurely and the player's trajectory becomes lower.
	$LF
]div
[h4 id=Damage 
	" Damage
	$LF
]h4
[div class=p 
	"Laser blades have something of a "critical hit" multiplier that is secretly applied to their damage. Testing has revealed that a laser blade hit can do anywhere from 1x the listed damage of the laser blade to 16x. Furthermore, laser blades can hit multiple times per swing if spaced correctly, leading to even more damage. Getting the laserblade to do higher multiples of damage can be manipulated by adjusting approach angle, and activation timing.
	$LF
]div
[div class=p 
	"This is extremely useful for a TAS (particularly the Raven’s Test mission) since even the starter laserblade can do enormous amounts of damage very quickly, exceeding even very powerful weapons like the large rockets' damage per second. Interestingly, current testing has not shown the laserblade to be dependent on the RNG for damage. Freezing the RNG does not seem to change the results of laser blade hits, only adjusting approach and activation timing. This could mean that there are other more complicated random factors that affect the damage done, but in practice, this means that laser blade damage can be controlled and made deterministic.
	[br 
	]br
	$LF
]div
[hr 
]hr
[h2 id=RngAndSynchronization 
	" RNG and Synchronization
	$LF
]h2
[div class=p 
	"Armored Core uses the Playstation's RNG function, which is a well-known LCG implementation (glibc), and writes this value to a well-known memory location (
	[code 
		"0x80009010
	]code
	").
	$LF
]div
[div class=p 
	"X
	[sub 
		"n+1
	]sub
	" = (1103515245 * ‬X
	[sub 
		"n
	]sub
	" + 12345) mod 2
	[sup 
		"31
	]sup
	$LF
]div
[div class=p 
	"The RNG updates constantly, especially when projectiles and destruction particles are present. Firing weapons tends to update the RNG, probably to calculate projectile spread. The RNG value is reset near the start of missions to a seed value of 
	[code 
		"1
	]code
	", though the RNG value can be updated multiple times per frame, so the current value when the RNG gets reset may not actually be 1.
	$LF
]div
[div class=p 
	"Synchronization is unfortunately not easy, even with an RNG that resets predictably at the start of missions. Armored Core lags 
	[b 
		"a lot
	]b
	", and the way the game lags is inconsistent. Changing the timing of input will unfortunately also result in the changing of lag frame timing, and even the quantity of lag frames for a particular section of input. Because of this, even if editing of input is made to try to keep the RNG consistent between two sets of input, lag frames will ultimately cause the game's RNG to diverge more and more, for identical input. Because of this problem, re-synchronization simply may not be possible, as all input after a change will be affected by new lag frame timing; lag frames don't appear to be easily manipulable outside of simply delaying input and hoping to get similar results.
	$LF
]div
[hr 
]hr
[h2 id=Speed 
	" Speed
	$LF
]h2
[div class=p 
	"The game implements strange limitations on maximum speed in the game. Maximum ground boost speed is
	$LF
	"limited to 75, but only for cardinal directions. For intermediate directions, however, the maximum
	$LF
	"ground boost speed is 106. A hypothesis on why this is is that the game actually determines how fast
	$LF
	"your AC can move by allowing it to translate a certain amount in given X and Z directions, rather
	$LF
	"than doing traditional velocity calculations. This means that your AC's ground boost speed in X and Z
	$LF
	"directions are bounded to 75, but when you are moving in both directions, your combined speed is the
	$LF
	"sum of the components, yielding 106 by simple trig/pythagorean math.
	$LF
]div
[div class=p 
	"This leads to some interesting consequences. Namely is that, if you are traveling to a destination
	$LF
	"in a cardinal direction, you can strafe left and right on the way to your destination as much as you
	$LF
	"like (so long as you don't change your heading by more than 45 degrees) in a "zig-zag" pattern and you
	$LF
	"will actually get there in exactly the same amount of time as a straight line. Conversely, if you are
	$LF
	"traveling in an intermediate direction, any deviation from a straight line is actually even worse
	$LF
	"than just the loss of efficiency from the pathing, since your lateral movement is also slower.
	$LF
]div
[div class=p 
	"Several types of movement in the game can go faster than the maximum ground boost speed. Some of the
	$LF
	"faster legs (LN-501, etc.) move in bursts of speed, and those bursts are generally faster than ground
	$LF
	"boost speed (though not overall since the other bursts are slower, and the average is less than 75).
	$LF
	"Laser blade swings will also propel you forward very quickly. Getting shot by rifles and knock-back
	$LF
	"imparting projectiles while in the air will also tend to send lightweight ACs flying at a much faster
	$LF
	"rate than the ground boost limit.
	$LF
]div
[div class=p 
	"The game's maximum velocity can be determined by this equation:
	$LF
]div
[div class=p 
	"V
	[sub 
		"max
	]sub
	" = V
	[sub 
		"limit
	]sub
	" * sqrt(sin(4 * θ
	[sub 
		"player
	]sub
	")
	[sup 
		"2
	]sup
	" + 1)
	$LF
]div
[div class=p 
	"where V
	[sub 
		"limit
	]sub
	" is the game's hard limit on boost speed in ordinal directions and θ
	[sub 
		"player
	]sub
	" is the player's current angle with respect to the map.
	$LF
]div
[hr 
]hr
[h2 id=MissionNotes 
	" Mission Notes
	$LF
]h2
[ul 
	[li 
		" Some missions give "points" to one of the two megacorps of the game. After mission 25, a cutscene is played depending on which corporation has more points, and a mission path unique to that corporation is then available. Failing a mission awards the points to the competitor corporation. Because the player can abort the same mission many times in a row, a huge amount of points for a given corporation can be accrued this way. See the mission schedule in the 
		[b 
			"Resources
		]b
		" section for a breakdown.
		$LF
	]li
	[li 
		" There are 4 missions in the game that must be completed, or the player gets a game-over screen. Those missions are the Raven Test, the final corporation-specific mission (Destroy Justice (Chrome) or Mop Up Chrome Remnants (Murakumo)), Mop Up Chrome Remnants 2, and Destroy Floating Mines.
		$LF
	]li
]ul
[h3 id=RavensTest 
	" Ravens' Test
	$LF
]h3
[ul 
	[li 
		" The first Stork is situated at ground-level in front of the player, the second Stork starts on the ledge to the right of the first Stork.
		$LF
	]li
	[li 
		" The Storks have much better mobility than the player does and keeping the Storks from running away is a top priority.
		$LF
	]li
	[li 
		" Use the rifle’s knockback to stop the first Stork from taking off before the player can get to it. Shooting it right when it tries to fly away seems to bug the boosters out and keep it grounded.
		$LF
	]li
]ul
[h3 id=DestroyJustice 
	" Destroy "Justice"
	$LF
]h3
[div class=p 
	"This mission can be completed very quickly using an exploit whereby three grenades (WC-GN230) are shot into space behind the player’s starting position. Note that the AC needs to be positioned between the edge of the level and the wall, and needs to be fairly close to the wall. The grenades do the most damage to the destructible at this distance and can end the mission with just three grenades.
	$LF
]div
[div class=p 
	"The edges of maps in all axes actually wrap around to the other side due to integer over/underflow of the game’s 16-bit coordinates (-32768 to 32767). This phenomenon is generally unobservable due to mission boundaries preventing the player from going very far. In the Destroy Justice Mission, however, the entire length of one of the game’s axes is consumed for the level (it’s a long tube). On one side of the tube (the player’s starting position side), there is empty space without a wall. On the other side is the wall with the mission objective destructible on it.
	$LF
]div
[div class=p 
	"What makes these properties exploitable is the fact that entities that cross the coordinate boundary will wrap around to the other side of the map, and "entities" includes ACs, MTs, or most importantly, projectiles. Just on the other side of the space graphic on the open side of the map is actually the wall with the mission object. Firing grenades into space causes the grenades to wrap to the other side of the map, just behind the wall. Grenades have a large enough blast radius that their hitbox clips through the wall and damages the mission objective destructible.
	$LF
]div
[div class=p 
	"Testing has revealed that only the grenade launcher has the blast radius necessary to perform this exploit.
	$LF
]div
[h3 id=MopUpChromeRemnants2 
	" Mop Up Chrome Remnants 2
	$LF
]h3
[div class=p 
	[img class=embedright mw-100 src=https://i.imgur.com/apg09wE.png 
	]img
	$LF
	"Entering the 4th basement floor triggers the radio transmission that tells the player to return to the surface. This radio transmission must be activated to spawn enemies into this map and to set up the trigger for spawning Boss Savage (Sledgehammer). This room can be clipped to fairly quickly in a variety of ways. Clipping from the hallway the player starts in is a very fast path.
	$LF
]div
[div class=p 
	"The final mission trigger for this level is in the hallway the player starts near. In order to get from the 4th basement floor to the hallway, the player will not likely have enough energy to fly around the rooms while clipping since the second floor is directly underneath the hallway, and it's pretty far up there. Luckily however, there are support columns in the 2nd basement floor that do not have collision planes on their tops and bottoms. The player's AC can be positioned direction under one of these columns, fly up through it, and land directly in the mission trigger that spawns Boss Savage.
	$LF
]div
[div class=p 
	"Below are tables of coordinates defining polygons that enclose the mission triggers and other useful areas in the mission. These coordinates can be plugged into 
	[a href=https://gist.github.com/Zinfidel/d47287cec638f0f915c3d99bccef3a7d rel=noopener external nofollow 
		"Zinfidel's Radar Script
	]a
	" to generate maps of the zones on the radar. The 5th floor roof zone needs to be avoided when flying to the support column because it's easy to accidentally clip into this room.
	$LF
]div
[table 
	[tbody 
		[tr 
			[th 
				"4th Floor (Trigger)
			]th
			[th 
				"X    
			]th
			[th 
				"Y   
			]th
			[th 
				"Z   
			]th
			[th 
				" 
			]th
			[th 
				"Entrance Tunnel 
			]th
			[th 
				"X   
			]th
			[th 
				"Y   
			]th
			[th 
				"Z   
			]th
		]tr
		[tr 
			[td 
				[b 
					"NW
				]b
				"              
			]td
			[td 
				"-21149
			]td
			[td 
				"14373
			]td
			[td 
				"1149 
			]td
			[td 
				"  
			]td
			[td 
				[b 
					"NW
				]b
				"           
			]td
			[td 
				"-524 
			]td
			[td 
				"0    
			]td
			[td 
				"8432 
			]td
		]tr
		[tr 
			[td 
				[b 
					"NE
				]b
				"              
			]td
			[td 
				"-11351
			]td
			[td 
				"14373
			]td
			[td 
				"1149 
			]td
			[td 
				"  
			]td
			[td 
				[b 
					"NE
				]b
				"           
			]td
			[td 
				"524  
			]td
			[td 
				"0    
			]td
			[td 
				"8432 
			]td
		]tr
		[tr 
			[td 
				[b 
					"SE
				]b
				"              
			]td
			[td 
				"-11431
			]td
			[td 
				"14373
			]td
			[td 
				"-6013
			]td
			[td 
				"  
			]td
			[td 
				[b 
					"SE
				]b
				"           
			]td
			[td 
				"524  
			]td
			[td 
				"623  
			]td
			[td 
				"3574 
			]td
		]tr
		[tr 
			[td 
				[b 
					"SW
				]b
				"              
			]td
			[td 
				"-21149
			]td
			[td 
				"14373
			]td
			[td 
				"-6061
			]td
			[td 
				"  
			]td
			[td 
				[b 
					"SW
				]b
				"           
			]td
			[td 
				"-524 
			]td
			[td 
				"623  
			]td
			[td 
				"3183 
			]td
		]tr
		[tr 
			[th 
				"Support Column     
			]th
			[th 
				"X    
			]th
			[th 
				"Y   
			]th
			[th 
				"Z   
			]th
			[th 
				" 
			]th
			[th 
				"5th Floor (Roof)
			]th
			[th 
				"X   
			]th
			[th 
				"Y   
			]th
			[th 
				"Z   
			]th
		]tr
		[tr 
			[td 
				[b 
					"NW
				]b
				"              
			]td
			[td 
				"-475  
			]td
			[td 
				"6873 
			]td
			[td 
				"5424 
			]td
			[td 
				"  
			]td
			[td 
				[b 
					"NW
				]b
				"           
			]td
			[td 
				"-8649
			]td
			[td 
				"12100
			]td
			[td 
				"13649
			]td
		]tr
		[tr 
			[td 
				[b 
					"NE
				]b
				"              
			]td
			[td 
				"475   
			]td
			[td 
				"6873 
			]td
			[td 
				"5424 
			]td
			[td 
				"  
			]td
			[td 
				[b 
					"NE
				]b
				"           
			]td
			[td 
				"-1315
			]td
			[td 
				"12100
			]td
			[td 
				"13649
			]td
		]tr
		[tr 
			[td 
				[b 
					"SE
				]b
				"              
			]td
			[td 
				"475   
			]td
			[td 
				"6873 
			]td
			[td 
				"4545 
			]td
			[td 
				"  
			]td
			[td 
				[b 
					"SE
				]b
				"           
			]td
			[td 
				"-1315
			]td
			[td 
				"12100
			]td
			[td 
				"3851 
			]td
		]tr
		[tr 
			[td 
				[b 
					"SW
				]b
				"              
			]td
			[td 
				"-475  
			]td
			[td 
				"6873 
			]td
			[td 
				"4545 
			]td
			[td 
				"  
			]td
			[td 
				[b 
					"SW
				]b
				"           
			]td
			[td 
				"-8649
			]td
			[td 
				"12100
			]td
			[td 
				"3851 
			]td
		]tr
	]tbody
]table
[div class=p 
	[br 
	]br
	$LF
]div
[h3 id=DestroyFloatingMines 
	" Destroy Floating Mines
	$LF
]h3
[ul 
	[li 
		" The door to the first melee must be opened in order to spawn enemies into the map. The second melee door will open if the first one is skipped by clipping, but no enemies will spawn and thus the mission can't be finished.
		$LF
	]li
	[li 
		" Hustler One's CPU is located more or less directly above the starting point. Clipping out of bounds and falling to the bottom of the map to get wrapped to the top of the map will have the player fall directly into the hallway leading up to the mission destructible.
		$LF
	]li
]ul
[div class=p 
	"Below are the coordinates of the hallway leading to the hallway that starts the second melee in the first part of Destroy Floating Mines. These coordinates can be used with the script mentioned above for Mop Up Chrome Remnants 2.
	$LF
]div
[table 
	[tbody 
		[tr 
			[th 
				"2nd Melee Hallway
			]th
			[th 
				"X
			]th
			[th 
				"Y
			]th
			[th 
				"Z
			]th
		]tr
		[tr 
			[td 
				[b 
					"NW
				]b
			]td
			[td 
				"-7168
			]td
			[td 
				"20251
			]td
			[td 
				"12934
			]td
		]tr
		[tr 
			[td 
				[b 
					"NE
				]b
			]td
			[td 
				"-5237
			]td
			[td 
				"20251
			]td
			[td 
				"12987
			]td
		]tr
		[tr 
			[td 
				[b 
					"SE
				]b
			]td
			[td 
				"-5273
			]td
			[td 
				"20251
			]td
			[td 
				"12421
			]td
		]tr
		[tr 
			[td 
				[b 
					"SW
				]b
			]td
			[td 
				"-7849
			]td
			[td 
				"20251
			]td
			[td 
				"12448
			]td
		]tr
	]tbody
]table
[hr 
]hr
[h2 id=LoadTimes 
	" Load Times
	$LF
]h2
[div class=p 
	[img class=embedright mw-100 src=https://i.imgur.com/QomSHcx.png 
	]img
	$LF
	"Each mission takes a variable amount of time from selection of the mission in the sortie list until the first possible input back at the main game hub menu. The amount of time a mission takes is broken up into 5 sections.
	$LF
]div
[h3 id=MissionSelection 
	" Mission Selection
	$LF
]h3
[div class=p 
	"This is the cost of selecting the sortie from the list. The cost is measured from the first non-lag frame that appears once the mission selection menu is opened. It will always start with one lag frame, then alternate between normal and lag frames. There are two factors that affect this cost: the total number of sorties in the list, and the position of the sortie in the list. The first factor causes a set amount of frames that must be waited through before the first 'X' input:
	$LF
]div
[ul 
	[li 
		"2 mission = 0 frames
		$LF
	]li
	[li 
		"3 mission = 2 frames
		$LF
	]li
	[li 
		"4 mission = 4 frames
		$LF
	]li
	[li 
		"5 mission = 6 frames
		$LF
	]li
	[li 
		"[...]
		$LF
	]li
]ul
[div class=p 
	"The second factor is pressing the down or up button to select the mission. Each down button press must be separated by 3 frames from the previous (due to alternating lag frames, this equates to 1 normal frame between inputs), then an 'X' input can be made on the very next (2 frames) normal frame.
	$LF
]div
[div class=p 
	"However! The sortie list accepts down/up inputs on the very first active frame, regardless of the number of missions in the sortie list. What this means is that in nearly all cases for all missions, the cost of pressing down/up to select a mission is completely encapsulated by the lag cost of the number of missions available, effectively reducing the cost to select a mission that isn’t at the top of the list to 0.
	$LF
]div
[h3 id=Slides 
	" Slides
	$LF
]h3
[div class=p 
	[b 
		"Calculated Timing
	]b
	[br 
	]br
	$LF
	"The slide show before each mission has a cost in frames that can be fairly accurately predicted. The factors that affect the cost of the slide show are the number of lines of text on each slide, the number of pictures that are displayed on each slide. To skip the slides as fast as possible, from the input that selects the slide until the input that brings up the mission accept dialog, X should be held for a number of frames to make the text display at a fast rate. The amount of frames this should be done for has been calculated.
	$LF
]div
[ul 
	[li 
		"1 line of text: 9 frames
		$LF
	]li
	[li 
		"2 lines of text: 11 frames
		$LF
	]li
	[li 
		"3 lines of text: 11-13 frames
		$LF
	]li
	[li 
		"4 lines of text: 15 frames
		$LF
	]li
	[li 
		"5 lines of text: 17 frames
		$LF
	]li
]ul
[div class=p 
	"Each image that is shown during a slide has a set cost of frames:
	$LF
]div
[ul 
	[li 
		"Image shown in new slot: 12 frames
		$LF
	]li
	[li 
		"Image shown in an existing slot: 3 frames
		$LF
	]li
]ul
[div class=p 
	"For example, a slide with 5 lines of text and one picture would require holding 'X' for 29 frames. There is a 3 frame gap between each slide (1 normal frame) that causes a new 'X' input to accept the current slide and continue on to the next.
	$LF
]div
[div class=p 
	"To accept the mission and launch it, there is a fixed cost (28 frames) sequence:
	$LF
]div
[ul 
	[li 
		"3 frames after last held ‘X’ input
		$LF
	]li
	[li 
		"5 frames to next single ‘X’ input to accept mission
		$LF
	]li
	[li 
		"17 frames to next single ‘x’ input launch mission
		$LF
	]li
]ul
[div class=p 
	[b 
		"Manual Timing
	]b
	$LF
]div
[div class=p 
	"Slide timing has been calculated and does not need manual exploration at this point, but for posterity, these are the timings that were used to discover the calculated slide timings:
	$LF
]div
[ul 
	[li 
		"The timing to release the 'X' button on a slide is 8 frames before the first frame the orange "next" triangle appears on the slide.
		$LF
	]li
	[li 
		"The timing to press the 'X' button to accept a dialog is 3 frames before the dialog is fully rendered.
		$LF
	]li
]ul
[h3 id=LoadTime 
	" Load Time
	$LF
]h3
[div class=p 
	"This is the cost from the frame that the player accepts the mission, to the first frame of player input in the mission. This value is unfortunately highly variable, even for the same mission across different time slots and different playthroughs. All of the factors that affect this load time have not been discovered. The first pair of missions, Eliminate Squatters and Eliminate Strikers, for instance, can vary by as much as 200 frames in load time cost between selecting them for the first mission and the second mission. Some other missions exhibit this variance as well. Fortunately, it appears that there is a sort of "stable point" that the game reaches a few time slots into the game where missions generally take the same amount of time to load no matter when they are selected, but still vary by a little.
	$LF
]div
[div class=p 
	"As such, exact load times for each mission can’t be recorded without knowing exactly what causes them to vary so much, however, the relationship between mission load times does tend to remain stable. For instance, Eliminat Squatters tends to be faster to load than Eliminate Strikers, even if their actual load times vary.
	$LF
]div
[div class=p 
	"The first frame of possible input for a mission varies a bit, but will be very close to when the game's HUD is initially shown, usually just a frame or two after the first frame when the whole HUD has been drawn. Some missions allow player input much before this marker however, so each mission needs to be examined individually.
	$LF
]div
[div class=p 
	[b 
		"IMPORTANT NOTE:
	]b
	[br 
	]br
	$LF
	"Load times between the original Playstation (and BizHawk), Playstation 2, and the PSTV platform vary so much that RTAs of Armored Core can and will be faster than TASes. See the 
	[b 
		"Version Differences
	]b
	" section for more information on this.
	$LF
]div
[h3 id=DebriefingAndReturningToMenu 
	" Debriefing and Returning to Menu
	$LF
]h3
[div class=p 
	"The amount of time it takes from the frame the player aborts a mission, to the frame that needs an 'X' input to close the debriefing screen is nearly constant. It does vary, but it does not vary with respect to mission choice. It is around 570 frames. To time the 'X' input to close the debriefing window, count 5 frames back from the first frame that the grand total value displays.
	$LF
]div
[div class=p 
	"The amount of time it takes from the frame the player inputs 'X' to close the debriefing screen to the first frame where the player regains control in the menu is the Returning to Menu cost. This value is nearly constant, and does not vary with respect to mission choice. It is coincidentally also around 570 frames.
	$LF
	[br 
	]br
	$LF
]div
[hr 
]hr
[h2 id=OpenQuestions 
	" Open Questions
	$LF
]h2
[h3 id=OutOfBoundsClippingWithArbitraryEquipment 
	" Out-of-Bounds Clipping with Arbitrary Equipment
	$LF
]h3
[div class=p 
	"Investigate how to perform out-of-bounds glitch without using the XCA-00 core and AN-3001 or ANKS arms. JAX does this in his TAS.
	$LF
]div
[ul 
	[li 
		"Discussion with the JP speedrunning community and twitter messages with JAX has yielded that this glitch may unfortunately be an emulator-specific glitch. JAX could not remember how he did it, but did suggest that he thought it had something to do with the emulator he was using, which was PSXjin. Attempts have been made at recreating the exploit in PSXjin but the tester (Zinfidel) has not been successful.
		$LF
	]li
	[li 
		"Recreating JAX’s movements in the underwater base mission by watching the video frame-by-frame does not reproduce the glitch.
		$LF
	]li
	[li 
		"Recreating JAX's movements in the underwater base mission 
		[em 
			"using PSXjin
		]em
		" does not create the glitch either. If this glitch is truly reproducible, then there is some input component that is still unknown.
		$LF
	]li
]ul
[h3 id=PoppingEnemies 
	" Popping Enemies
	$LF
]h3
[ul 
	[li 
		"Popping might have to do with the amount of damage you do to the enemy. In the JAX TAS, he is causing the enemies in the Mop Up Chrome Remnants mission to pop with every laser sword strike he does.
		$LF
	]li
	[li 
		"Experimentation has been inconsistent. In some RTAs where the player destroys the Storks in the Ravens’ Test with missiles, they get the pop on the last missile hit. Hitting a Stork with only 1 HP with a critical laser sword strike can fail to make the enemy pop. Hitting a stork with low HP with a missile also does not always make them pop.
		$LF
	]li
]ul
[h3 id=MissionPathSpecifics 
	" Mission Path Specifics
	$LF
]h3
[div class=p 
	"Figure out exactly how the game decides on which mission path is being selected and perhaps more importantly, when it decides this.
	$LF
]div
[ul 
	[li 
		"The counter the game writes to to record current mission points is known, however…
		$LF
	]li
	[li 
		"Changing the mission points counter on mission 25, then completing a mission, makes no difference to the path the game chooses. This experiment was also performed all the way back on mission 20. The points were changed such that a certain mission path was a guarantee, but upon completing mission 25, the game chose a different mission path anyway.
		$LF
	]li
	[li 
		"Freezing the counter to a specific value at the very start of the game, then playing through missions such that the opposite mission path should be selected does work though, and the frozen value is respected.
		$LF
	]li
	[li 
		"There seems to be a burst of activity upon selecting the mission icon when starting timeslot 26. This should be investigated as it is likely related.
		$LF
	]li
]ul
[hr 
]hr
[h2 id=VersionDifferences 
	" Version Differences
	$LF
]h2
[h3 id=NtscVsJp 
	" NTSC vs JP
	$LF
]h3
[ul 
	[li 
		[em 
			"Significantly
		]em
		" less lag in JP version for some reason. Mission select screen is almost lagless.
		$LF
	]li
	[li 
		"Mission briefing slides can be skipped much, much faster because text doesn’t take forever to spell itself out. Check out 
		[a href=https://gfycat.com/raggedcommonblackbear rel=noopener external nofollow 
			"this comparison gif
		]a
		" for an example.
		$LF
	]li
	[li 
		"Dialog differs in length. In the Ravens' Test, the dialog at the conclusion of the test takes longer in the JP version than the NTSC version. Check out 
		[a href=https://t.co/7PZ2nsfOUb rel=noopener external nofollow 
			"this video
		]a
		" for the Ravens' Test example.
		$LF
	]li
]ul
[h3 id=Version10Vs11 
	" Version 1.0 vs 1.1
	$LF
]h3
[div class=p 
	"The only known differences between the original edition of the game and the 2000 re-release are the following:
	$LF
]div
[ul 
	[li 
		" The Agetec logo is shown on startup rather than the FROMsoft logo.
		$LF
	]li
	[li 
		" The sample emblems the player can select from for their emblem are no longer generic emblems but the emblems of all of the ranking Ravens in the game.
		$LF
	]li
]ul
[h3 id=PsxVsPs2VsPstv 
	" PSX vs PS2 vs PSTV
	$LF
]h3
[div class=p 
	"The Armored Core speedrunning community (and many others) permits and encourages runners to use PlayStation 2 consoles, and more recently the PlayStation TV (PSTV) platform, to do their speedruns. This is because those platforms have 
	[b 
		"significantly
	]b
	" better disk load times than original PSX hardware, which BizHawk's Octoshock core emulates faithfully. For late-model PS2s using the FDL (fast disk load) option, load times in Armored Core are reduced by 40%
	[sup 
		"[1]
	]sup
	" . The PSTV platform is even faster, reducing load times by about 65%
	[sup 
		"[2]
	]sup
	". The amount of time lost to loading on the PSX vs the PSTV is on the order of at least 10 minutes, but probably more.
	$LF
]div
[div class=p 
	[small 
		"[1] Measurements based on: 
		[a href=https://www.nicovideo.jp/watch/sm19696898 rel=noopener external nofollow 
			"https://www.nicovideo.jp/watch/sm19696898
		]a
		[br 
		]br
		$LF
		"[2] Measurements based on: 
		[a href=https://www.youtube.com/watch?v=546uoe_3poU rel=noopener external nofollow 
			"https://www.youtube.com/watch?v=546uoe_3poU
		]a
	]small
	$LF
]div
