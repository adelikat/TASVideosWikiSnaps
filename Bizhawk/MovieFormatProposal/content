1
[div class=p 
	"Related page: 
	(__wikiLink|href=/Bizhawk/SavestateFormat|implicitdisplaytext=Bizhawk/SavestateFormat)
	$LF
	"Excerpt from a Conversation on Sep 29, 2013
	$LF
]div
[div class=p 
	"<natt>	i haven't identified the source of the problem in the code yet, but what i'm seeing going on is
	[br 
	]br
	$LF
	"<natt>	i made a movie, starts from savestate, then saved a backup of it
	[br 
	]br
	$LF
	"<natt>	then i recorded more onto it per that user's directions, saved that, and am comparing the two
	[br 
	]br
	$LF
	"<natt>	the second one
	[br 
	]br
	$LF
	"<natt>	has two copies of the original savestate embedded in the movie file
	[br 
	]br
	$LF
	"<natt>	and both copies are slightly mangled
	[br 
	]br
	$LF
	"<adelikat>	that makes sense
	[br 
	]br
	$LF
	"<adelikat>	the problem is the loading of the movie
	[br 
	]br
	$LF
	"<adelikat>	it looks for headers it recognizes, and keywords, and input log
	[br 
	]br
	$LF
	"<adelikat>	anything it doesn't recognize it just stuffs into "comments"
	[br 
	]br
	$LF
	"<natt>	yeah, you've got it
	[br 
	]br
	$LF
	"<adelikat>	when saving it dumps comments in there, and I"m guessing also does some logic to save a savestate in there too
	[br 
	]br
	$LF
	"<natt>	yup
	[br 
	]br
	$LF
	"<natt>	the mangling is because one particular line in the savestate for an NES starts with the letters "PAL"
	[br 
	]br
	$LF
	"<natt>	so that gets eaten away as the header "PAL" line
	[br 
	]br
	$LF
	"<adelikat>	yeah, that loading code isn't very smart
	[br 
	]br
	$LF
	"<adelikat>	once upon a time, that's all it needed to do
	[br 
	]br
	$LF
	"<adelikat>	but there was no pal, and whatever logic to save the state didn't exist
	[br 
	]br
	$LF
	"<adelikat>	I literally cheated and just stuffed everything in as comments ^_^
	[br 
	]br
	$LF
	"<natt>	other cores could conceivably have problems with other header values if they have a line in the savestate that coincidentally matches
	[br 
	]br
	$LF
	"<adelikat>	yeah, ideally there is some notion of "hey we are in the savestate section, don't load this stuff as header info"
	[br 
	]br
	$LF
	"<natt>	but since the savestate section adheres to no global rules about formatting or marking
	[br 
	]br
	$LF
	"<natt>	well, i kind of like the ideas that i put together for the binary movie savestates
	[br 
	]br
	$LF
	"<adelikat>	oh, you mean lsnes style?
	[br 
	]br
	$LF
	"<natt>	i think it is lsnes style, isn't it
	[br 
	]br
	$LF
	"<adelikat>	yeah, I like that too
	[br 
	]br
	$LF
	"<natt>	right, so the current bizhawk, when you are recording a movie and the core is using binary savestates
	[br 
	]br
	$LF
	"<adelikat>	it does simplify problems when a movie file is an archive of files
	[br 
	]br
	$LF
	"<natt>	the savestates it creates are actually zip files
	[br 
	]br
	$LF
	"<natt>	looking at one now, there are 4 lumps
	[br 
	]br
	$LF
	"<natt>	"BizState 1.0", empty file, marks the format
	[br 
	]br
	$LF
	"<natt>	"Core" is whatever the core wants to put in as a binary state
	[br 
	]br
	$LF
	"<natt>	"Framebuffer" is a binary dump of the framebuffer, if so selected in user config to dump framebuffer to savestates
	[br 
	]br
	$LF
	"<natt>	"Input Log" is the input log
	[br 
	]br
	$LF
	"<natt>	as a text file, taken from the movie stuff
	[br 
	]br
	$LF
	"<adelikat>	nice
	[br 
	]br
	$LF
	"<adelikat>	movie files could be done simarly
	[br 
	]br
	$LF
	"<adelikat>	"BizMovieState 1.0"
	[br 
	]br
	$LF
	"<adelikat>	Savestate
	[br 
	]br
	$LF
	"<adelikat>	InputLog
	[br 
	]br
	$LF
	"<adelikat>	header
	[br 
	]br
	$LF
	"<adelikat>	subtitles
	[br 
	]br
	$LF
	"<natt>	honestly, looking at this, i doubt movies starting from savestates have ever been anywhere close to bulletproof
	[br 
	]br
	$LF
	"<adelikat>	no, but they worked, enough
	[br 
	]br
	$LF
	"<adelikat>	when there was only 3 cores to worry about ^^
	[br 
	]br
	$LF
	"<natt>	i'll believe that, but i think it was a delicate arrangement doomed to break when someone sneezed
	[br 
	]br
	$LF
	"<adelikat>	yup.
	[br 
	]br
	$LF
	"<adelikat>	1.5.0 was the tipping point for a lot of things
	[br 
	]br
	$LF
	"<adelikat>	old solutions just didn't scale to this size
	[br 
	]br
	$LF
	"<adelikat>	I think the real rolution is a lsnes style movie format, and to break all backwards compatibility
	[br 
	]br
	$LF
	"<adelikat>	and after that, come up with some old format importer in the importer section
	[br 
	]br
	$LF
	"<natt>	well, i'm willing to move forward with it, but i do think we should proceed slowly and carefully and thoughtfully
	[br 
	]br
	$LF
	"<natt>	one thought i'm having is about repeated code
	[br 
	]br
	$LF
	"<natt>	these new movies will be very similar to savestates in many ways
	[br 
	]br
	$LF
	"<natt>	do we want to try to combine it all into one fatso code path?
	[br 
	]br
	$LF
	"<natt>	to expand on the old "a savestate is a movie is a savestate" concept
	[br 
	]br
	$LF
	"<adelikat>	yeah, that sounds reasonable
	[br 
	]br
	$LF
	"<adelikat>	and I like the concept that it is both
	[br 
	]br
	$LF
	"<natt>	the 1.0 reality is "a movie is almost a savestate is almost a movie"
	[br 
	]br
	$LF
	"<natt>	so then it's one format with just possibly a different marker and different lumps
	[br 
	]br
	$LF
	"<natt>	inputlog lump doesn't exist in non movie savestates
	[br 
	]br
	$LF
	"<natt>	header lump doesn't exist in non movie savestates
	[br 
	]br
	$LF
	"<natt>	framebuffer lump and core lump might not exist in movie
	[br 
	]br
	$LF
	"<natt>	this would also be a chance to add "starts from SRAM" movies.  i know you don't like them, and i'm not advocating for them really, just saying; if we do them, now is the time
	[br 
	]br
	$LF
	"<adelikat>	well, my statement is actually "a movie savestate and a movie are the same file"
	[br 
	]br
	$LF
	"<adelikat>	or at least work as both files
	[br 
	]br
	$LF
	"<adelikat>	nah, I don't know what I"m saying
	[br 
	]br
	$LF
	"<adelikat>	maybe we can throw in sram with an off switch?
	[br 
	]br
	$LF
	"<adelikat>	so it is a matter of politics to not support them
	[br 
	]br
	$LF
	"<natt>	although i do kinda like sram starts... it gives you some anchoring possibilities without the can of worms that is savestates
	[br 
	]br
	$LF
	"<adelikat>	starting from sram is just as "dirty" in terms of possible hackery
	[br 
	]br
	$LF
	"<adelikat>	and sram is basically a subset of savestate is it not?
	[br 
	]br
	$LF
	"<adelikat>	anything contained in that sram is also contained in a savestate
	[br 
	]br
	$LF
	"<adelikat>	but if this is an archive of files, it is trivial to do both
	[br 
	]br
	$LF
	"<adelikat>	look for a savestate file in there, else look for a sram file
	[br 
	]br
	$LF
	"<natt>	agree with just as dirty in terms of hackery
	[br 
	]br
	$LF
	"<natt>	yes, sram is a subset of savestate (on all of the stuff we work with, anyway; could see that as being not true when you have mountable and removable memcards)
	[br 
	]br
	$LF
	"<natt>	my thought was about ease of support across versions
	[br 
	]br
	$LF
	"<natt>	the sram file format is usually rather simple
	[br 
	]br
	$LF
	"<adelikat>	so my point is that it is no cleaner, and you can do everything with savestates that you can with sram
	[br 
	]br
	$LF
	"<adelikat>	oh, that's a good point!
	[br 
	]br
]div
