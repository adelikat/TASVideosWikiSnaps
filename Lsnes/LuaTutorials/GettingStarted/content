1
[div class=toc 
	[ul 
		[li 
			[a href=#Startingout 
				"Starting out
				$LF
			]a
		]li
		[ul 
			[li 
				[a href=#Thesimplestdisplay 
					"The simplest display
					$LF
				]a
			]li
			[li 
				[a href=#Immediatedisplayuponrunningyourscript 
					"Immediate display upon running your script
					$LF
				]a
			]li
			[li 
				[a href=#Otherwaysofdefiningon_paint 
					"Other ways of defining on_paint
					$LF
				]a
			]li
			[li 
				[a href=#Usingon_painttoreadmemory 
					"Using on_paint to read memory
					$LF
				]a
			]li
		]ul
		[li 
			[a href=#Breakingoldhabits 
				"Breaking old habits
				$LF
			]a
		]li
	]ul
]div
[p 
	"What you will learn in this tutorial:
	$LF
]p
[ul 
	[li 
		" 
		[b 
			"Callbacks
		]b
		$LF
		[ul 
			[li 
				" on_paint(boolean not_synth)
				$LF
			]li
		]ul
		" 
		[b 
			"Functions
		]b
		$LF
		[ul 
			[li 
				" gui family
				$LF
				[ul 
					[li 
						" gui.text(number x, number y, string text, [number forecolor], [number backcolor])
						$LF
					]li
					[li 
						" gui.repaint()
						$LF
					]li
				]ul
				" memory family
				$LF
				[ul 
					[li 
						" memory.readbyte(number address)
						$LF
					]li
				]ul
			]li
		]ul
	]li
]ul
[h2 id=Startingout 
	"Starting out
	$LF
]h2
[p 
	"In order to even have a hope of getting any remotely useful script, you want to see an output. There are several different outputs a script can make, but let us start with writing text on the screen. Something that is obvious and quick. Something to encourage you to continue.
	$LF
]p
[h3 id=Thesimplestdisplay 
	"The simplest display
	$LF
]h3
[p 
	"To start, there is a reserved global word lsnes uses. Several actually, but we're starting with 
	[b 
		"on_paint
	]b
	". If you define a global function named 
	[b 
		"on_paint
	]b
	", lsnes will call it whenever it needs to update the display. Do not call it yourself, it will be called whenever important.
	$LF
]p
[p 
	"But what to put into this function? There is a set of functions whose primary use is in 
	[b 
		"on_paint
	]b
	", and I will refer to one now: 
	[b 
		"gui.text
	]b
	". This function takes three parameters: Two numbers indicating coordinates and a string to display. Optionally, you can add two more numbers after the string, affecting fore-color then back-color, but we'll get into colors later.
	$LF
]p
[p 
	"So, a very bare function would be:
	$LF
]p
[pre 
	[code class=language-lua 
		"function on_paint()
		$LF
		"   gui.text(1,1,"Hello world.")
		$LF
		"end
		$LF
	]code
]pre
[p 
	"Run it, and... No text. Well, not yet. Advance one frame, then you'll see it. Why?
	$LF
]p
[h3 id=Immediatedisplayuponrunningyourscript 
	"Immediate display upon running your script
	$LF
]h3
[p 
	"The act of starting a script does not tell lsnes to update the display. It just tells lsnes to run through the script. Unless the script itself requests it through a function call, lsnes will only display what it did before.
	$LF
]p
[p 
	"This function call is 
	[b 
		"gui.repaint
	]b
	". This function can be called anywhere you like, though do not put it inside on_paint. Once your lua script is done running for the moment, lsnes will then update its display and call on_paint for you.
	$LF
]p
[pre 
	[code class=language-lua 
		"function on_paint()
		$LF
		"   gui.text(15,12,"Hello world.")
		$LF
		"end
		$LF
		"gui.repaint() -- Tell lsnes to update display when we run this script!
		$LF
	]code
]pre
[p 
	"Now you get to see an immediate change upon running the script!
	$LF
]p
[h3 id=Otherwaysofdefiningon_paint 
	"Other ways of defining on_paint
	$LF
]h3
[p 
	"As a consequence of Lua syntax, there is more than one way to define on_paint. If you are familiar with Lua, these will be obvious to you already, but it isn't harmful to point them out here.
	$LF
]p
[pre 
	[code class=language-lua 
		"on_paint = function()
		$LF
		"   gui.text(2,2,"Having fun?")
		$LF
		"end
		$LF
		$LF
		"local function MyOwnCode()
		$LF
		"   gui.text(8, 8,"Insert something witty!")
		$LF
		"   gui.text(8,24,"Make it very witty.")
		$LF
		"end
		$LF
		"on_paint = MyOwnCode
		$LF
	]code
]pre
[p 
	"Both blocks up there will work. Like any other variable, you can reassign a new function to 
	[b 
		"on_paint
	]b
	" at any time. If you're just starting out, this isn't something you're likely to do, yet.
	$LF
]p
[p 
	"Be careful when using the local keyword, however...
	$LF
]p
[pre 
	[code class=language-lua 
		"local function on_paint()
		$LF
		"   gui.text(3,99,"You'll never see this text!")
		$LF
		"end
		$LF
	]code
]pre
[p 
	"lsnes is looking for a 
	[em 
		"global
	]em
	" 
	[b 
		"on_paint
	]b
	". It will never see your 
	[em 
		"local
	]em
	" 
	[b 
		"on_paint
	]b
	". Furthermore, any references to 
	[b 
		"on_paint
	]b
	" after your local function declaration will point to your local version, and not the global version lsnes uses.
	$LF
]p
[p 
	"In short, be more careful where you place the local keyword.
	$LF
]p
[h3 id=Usingon_painttoreadmemory 
	"Using on_paint to read memory
	$LF
]h3
[p 
	"Although fun to have text floating around on your screen, it is generally impractical unless you have it displaying useful numbers or other information around the game you're playing.
	$LF
]p
[p 
	"It's time we introduce 
	[b 
		"memory.readbyte
	]b
	". This takes a number, an address to the RAM you want to look at. This returns a number from 0 to 255, from the location in memory.
	$LF
]p
[pre 
	[code class=language-lua 
		"function on_paint()
		$LF
		"   local Some_RAM_Value = memory.readbyte(0x7E0000)
		$LF
		"   gui.text(1,1,Some_RAM_Value)
		$LF
		"end
		$LF
	]code
]pre
[p 
	"If you know of some useful addresses, you can now keep some handy values on screen. There are more memory reading functions than just a single byte at a time, but this page deals in the very basics of what is needed to have a minimally useful script. You are advised to get more familiar with how 
	[b 
		"on_paint
	]b
	" works by experimenting with it before you let yourself get overwhelmed by new functions.
	$LF
]p
[h2 id=Breakingoldhabits 
	"Breaking old habits
	$LF
]h2
[p 
	"If you have worked with Lua scripting in other emulators, you're likely familiar with the following:
	$LF
]p
[pre 
	[code class=language-lua 
		"while true do
		$LF
		"   gui.text(5,5,"Hello world.")
		$LF
		"   emu.frameadvance()
		$LF
		"end
		$LF
	]code
]pre
[p 
	"Or perhaps you know this instead:
	$LF
]p
[pre 
	[code class=language-lua 
		"gui.register(function()
		$LF
		"   gui.text(5,5,"Hello again, world.")
		$LF
		"end)
		$LF
	]code
]pre
[p 
	"In the first case, you have a 
	[em 
		"while true
	]em
	" loop. Unless you have ways of breaking out of that loop, having such a loop anywhere in your code means you're doing something wrong. Since emu.frameadvance() doesn't exist in lsnes anyway, attempting to call it will give an error and break out of the loop, so thankfully no lock-up. There is no function to call to say "here, emulator. I'm returning control to you."
	$LF
]p
[p 
	"In the second case, you're calling a function to put another function in some special spot. This is closer to what lsnes is like, but it's not quite there. Rather, lsnes will call functions that you give certain global names.
	$LF
]p
[p 
	"Some callbacks in lsnes have the privilege to call certain functions, such as on_paint with most gui functions. In most other emulators, you can call 
	[b 
		"gui.text
	]b
	" whenever you like and expect something visible, but lsnes only lets it have any effect inside an 
	[b 
		"on_paint
	]b
	" or 
	[b 
		"on_video
	]b
	" callback. Once you learn of other callbacks, realize you need them to affect variables that 
	[b 
		"on_paint
	]b
	" will then read, as you can't use 
	[b 
		"gui.text
	]b
	" directly in those callbacks.
]p
