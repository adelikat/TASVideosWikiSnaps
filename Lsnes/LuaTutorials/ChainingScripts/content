1
[div class=toc 
	[ul 
		[li 
			[ul 
				[li 
					[a href=#heading-335 
						"A Simple on_paint Chain
						$LF
					]a
				]li
				[li 
					[a href=#heading-1672 
						"Working with Gaps
						$LF
					]a
				]li
				[li 
					[a href=#heading-3056 
						"Other Callbacks
						$LF
					]a
				]li
			]ul
		]li
	]ul
]div
[p 
	"This supplementary chapter will deal with a trick for allowing more than one script to run at once, by simply loading up each file one at a time, in any arbitrary order, and none of the scripts have to know the others even exist. The way lsnes is structured allows for this simple trick to run multiple scripts in a chain.
	$LF
]p
[h3 
	"A Simple on_paint Chain
	$LF
	[a id=heading-335 
	]a
]h3
[pre 
	[code class=language-lua 
		"local OldPaint= on_paint or function() end   -- Make a local reference to on_paint
		$LF
		"function on_paint(non_synth)
		$LF
		"    OldPaint(non_synth)       -- Call the old display
		$LF
		"    -- Add your own code here
		$LF
		"end
		$LF
	]code
]pre
[p 
	"You can run any number of these scripts.
	$LF
]p
[p 
	"In case it isn't obvious from just reading it, this piece of code defines a 
	[em 
		"local
	]em
	" OldPaint and gives it the 
	[em 
		"global
	]em
	" 
	[b 
		"on_paint
	]b
	" (or an empty function if there is no 
	[em 
		"global
	]em
	" 
	[b 
		"on_paint
	]b
	"). It then replaces 
	[em 
		"global
	]em
	" 
	[b 
		"on_paint
	]b
	" with a new function that immediately calls our 
	[em 
		"local
	]em
	" OldPaint, which thankfully refers to the function we now just removed out of 
	[em 
		"global
	]em
	" 
	[b 
		"on_paint
	]b
	". This means the old stuff we're displaying is still getting displayed, while we can add new stuff to it as we wish.
	$LF
]p
[p 
	"In this case, it is vital to use the 
	[em 
		"local
	]em
	" keyword for OldPaint (or some other name you like), as without such, the moment you try to chain any script in, it will replace a 
	[em 
		"global
	]em
	" OldPaint with the previous 
	[b 
		"on_paint
	]b
	", and now the old script is calling itself in an endless recursion (and hit a stack overflow). By using 
	[em 
		"local
	]em
	", you forbid any new scripts you load from referring to 
	[em 
		"local
	]em
	" values used in a previous script, and it will define a separate 
	[em 
		"local
	]em
	" OldPaint for every new script in the chain.
	$LF
]p
[h3 
	"Working with Gaps
	$LF
	[a id=heading-1672 
	]a
]h3
[p 
	"Somewhere in our chain, a script is making use of some gap function, such as 
	[b 
		"gui.right_gap
	]b
	". If we have another script that makes use of the same gap, we may end up overlapping our displays. It is often undesirable to have multiple texts on the same spot in the screen, and also inconvenient to edit multiple different scripts to have their displays play nice with each other.
	$LF
]p
[p 
	"If you're going to chain scripts, it may be best to use delta_gap functions, such as 
	[b 
		"gui.delta_right_gap
	]b
	", and read the value it returns. The delta_gap will add an additional gap on top of what's there, and if you use the number to position your display, it will fit comfortably in the new spot.
	$LF
]p
[p 
	"Also recall the left and top gap functions will return positive values. The coordinates that write to this gap need to be negative, so don't forget to subtract rather than add these gaps.
	$LF
]p
[pre 
	[code class=language-lua 
		"local OldPaint= on_paint or function() end
		$LF
		"function on_paint(non_synth)
		$LF
		"    OldPaint(non_synth)
		$LF
		$LF
		"    local Right,Bottom= gui.resolution()     -- Find our screen edges
		$LF
		$LF
		"    local X= Right + gui.delta_right_gap(96) -- X now points to the left edge of our added gap
		$LF
		"    gui.text(X,1,"Hello World.")             -- Hello world. Nice to meet you from this gap.
		$LF
		$LF
		"    X= -gui.delta_left_gap(40) - 40          -- Left side gap, for comparison
		$LF
		"    gui.text(X,1,"Left.")
		$LF
		"end
		$LF
	]code
]pre
[h3 
	"Other Callbacks
	$LF
	[a id=heading-3056 
	]a
]h3
[p 
	"In most cases, the only thing you have to worry about is making sure to pass all parameters along to the next function in the chain. However, anything dealing with input could easily interfere.
	$LF
]p
[p 
	"For 
	[b 
		"on_keyhook
	]b
	", if you plan to chain the script, then it's easily possible that another script may have need of other keys. If your script only needs one key, one could just call 
	[b 
		"input.keyhook
	]b
	" once and expect only that key to be used. If the script is chained, suddenly the assumption that only that key will activate 
	[b 
		"on_keyhook
	]b
	" will fail. Always add code to make sure that the key you wanted is the one being pressed. In the odd case where your script dynamically enable or disable keyhooks, there aren't any good detection methods to ensure you avoid disabling a keyhook needed by chained scripts other than using a consistently named global variable.
	$LF
]p
[p 
	"For 
	[b 
		"on_input
	]b
	", there is the possibility the script can feed lsnes controller input. Multiple scripts trying to affect on_input independently will only let the latest set functions decide the input. Again, detection methods between scripts is best handled by a consistently named global variable.
	$LF
]p
[p 
	"Finally, while this isn't unique to any callback, any writes to memory or hostmemory might need to be accounted for. If your scripts are all information scripts that only read, there's no problem, but if you're using a few cheat scripts, there's a possibility of conflict between scripts. The latest write goes through.
]p
