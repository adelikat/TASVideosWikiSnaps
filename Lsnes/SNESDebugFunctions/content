2
[h4 id=Memory.setdebug(brkpt_id,brkpt_data) 
	" memory.setdebug(brkpt_id,brkpt_data)
	$LF
]h4
[ul 
	[li 
		" brkpt_id is ID of breakpoint (0-7).
		$LF
	]li
	[li 
		" brkpt_data is either nil (remove breakpoint) or an array.
		$LF
		[ul 
			[li 
				" addr: Address to break on.
				$LF
			]li
			[li 
				" data: Data to break on (-1 => Don't care). Default -1.
				$LF
			]li
			[li 
				" mode: Mode to break on ('e' => Execute, 'r' => Read, 'w' => Write). Default 'e'.
				$LF
			]li
			[li 
				" source: Source of access to break on ('cpubus', 'vram', 'oam', 'cgram', 'apuram'). Default 'cpubus'.
				$LF
			]li
			[li 
				" callback: Function to call when callback fires (not a name!)
				$LF
			]li
		]ul
	]li
]ul
[h4 id=Memory.setstep(counter,function) 
	" memory.setstep(counter,function)
	$LF
]h4
[ul 
	[li 
		" counter: Set the step counter to this value. This is decremented each instruction (set to 0 to disable this).
		$LF
	]li
	[li 
		" function: Function to call (not name of function!) when counter decrements to zero.
		$LF
	]li
]ul
[h4 id=Memory.settrace(filename) 
	" memory.settrace(filename)
	$LF
]h4
[div class=p 
	"If filename is non-empty, output trace to that file. If "", stop tracing.
	$LF
]div
[div class=p 
	"All these functions should be safe to call at all times.
]div
