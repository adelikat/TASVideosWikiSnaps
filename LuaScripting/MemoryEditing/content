5
[div class=p 
	"This page documents memory editing using Lua.
	$LF
]div
[div class=p 
	[b 
		"Warning: TASes for this site are not allowed to use direct memory editing (whether it is Lua or Game Genie codes). Memory editing is for information or planning purposes only! Make sure you are not running a memory-changing script while making the actual TAS.
	]b
	$LF
]div
[h3 id=MemoryOverwrite. 
	" Memory Overwrite.
	$LF
]h3
[div class=p 
	"Memory overwrite is a useful way to test possibilities when it would be hard to generate otherwise.
	$LF
]div
[div class=p 
	"Note that often, you can use a cheat code (e.g. Game Genie) in place of memory overwrite. However, memory overwrite is more powerful as you have power over what the value can be changed to, and you can overwrite large sections of memory.
	$LF
]div
[div class=p 
	"The memory-changing functions are 
	[tt 
		"memory.writebyte(int addr, int value)
	]tt
	" (one byte), 
	[tt 
		"memory.writeword
	]tt
	" (two bytes), and 
	[tt 
		"memory.writedword
	]tt
	" (four bytes).
	$LF
]div
[div class=p 
	"There are two basic ways to overwrite memory:
	$LF
]div
[h4 id=One-timeoverwrite 
	" One-time overwrite
	$LF
]h4
[div class=p 
	"To overwrite a desired memory address once, simply use one of the memory-changing functions above, without using a loop. For example, if 0x1000 is the address representing the stage number and you want to jump to stage 9, you run the following script:
	$LF
]div
[pre 
	"memory.writebyte(0x1000,9)
	$LF
]pre
[h4 id=Continuousoverwrite 
	" Continuous overwrite
	$LF
]h4
[div class=p 
	"To continuously overwrite an address with a value, you now use a loop. For example, if 0x1357 is the address containing the number of lives, chances are you can give yourself infinite lives by fixing its value as, say, 2:
	$LF
]div
[pre 
	"while true do
	$LF
	" memory.writeword(0x1357,2)
	$LF
	" emu.frameadvance()
	$LF
	"end
	$LF
]pre
[div class=p 
	"The following example compares both one-time overwrite and continuous overwrite. The goal of the following script is to stop the clock in Super Mario Bros. The address 0x07FA is the ones digit of the clock. The first script overwrites the clock value every frame, effectively freezing the clock.  The second script overwrites the clock just one time, allowing it to further decrease.
	$LF
]div
[div class=p 
	"First script:
	$LF
]div
[pre 
	"local Clock = 0x07FA
	$LF
	"local Value = 8
	$LF
	"while true do
	$LF
	" memory.writebyte(Clock,Value)
	$LF
	" emu.frameadvance()
	$LF
	"end
	$LF
]pre
[div class=p 
	"Second script:
	$LF
]div
[pre 
	"local Clock = 0x07FA
	$LF
	"local Value = 8
	$LF
	"memory.writebyte(Clock,Value)
	$LF
]pre
[h4 id=Overwritingentireregions 
	" Overwriting entire regions
	$LF
]h4
[div class=p 
	"This is where Lua becomes useful, as you would need too many cheat codes to cover a whole region. This is useful if you wanted to void a whole region (say, to remove all obstacles), or you want to easily identify the IDs of tiles in a tileset, or you are a ROM hacker and you want to corrupt regions of memory just to see what happens (note that you can only corrupt RAM, not the ROM itself).
	$LF
]div
[div class=p 
	"To do this, just use a for loop. For example, overwriting four-byte addresses with 0, 1, 2, 3, ... :
	$LF
]div
[pre 
	"local i
	$LF
	"for i=0, 250, 1 do
	$LF
	" memory.writedword(0x3000+4*i, i)
	$LF
	"end
	$LF
]pre
[div class=p 
	"And an example to corrupt memory with random garbage:
	$LF
]div
[pre 
	"local i
	$LF
	"for i=0, 1000, 1 do
	$LF
	" memory.writebyte(0x3000+i, math.random(0, 255)
	[em 
	]em
	")
	$LF
	"end
	$LF
]pre
[h4 id=Usinginput.get()totriggeroverwrite 
	" Using input.get() to trigger overwrite
	$LF
]h4
[div class=p 
	"It is often desired that a script does not alter memory only once, or keep it a fixed value while it's running. But rather, alter the memory at a precise moment the user desires it. The ability to change the memory at a key press rather than reloading the whole script has a number of useful advantages.
	$LF
]div
[div class=p 
	"Hold A to force the value at 15:
	$LF
]div
[pre 
	" while true do
	$LF
	"   local keys= input.get()
	$LF
	"   if keys.A then
	$LF
	"     memory.writebyte(0xA1A1,15)
	$LF
	"   end
	$LF
	"   emu.frameadvance()
	$LF
	" end
	$LF
]pre
[div class=p 
	"Hold Q to increment the value, and W to reduce it:
	$LF
]div
[pre 
	" while true do
	$LF
	"   local keys= input.get()
	$LF
	"   if keys.Q then
	$LF
	"     local v= memory.readbyte(0xA1A1) + 1
	$LF
	"     memory.writebyte(0xA1A1,v)
	$LF
	"   end
	$LF
	"   if keys.W then
	$LF
	"     local v= memory.readbyte(0xA1A1) - 1
	$LF
	"     memory.writebyte(0xA1A1,v)
	$LF
	"   end
	$LF
	"   emu.frameadvance()
	$LF
	" end
	$LF
]pre
