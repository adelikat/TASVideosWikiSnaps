7
[p 
	"In order to run any lua code in emulators that support it, you need to know what functions to call.
	$LF
]p
[h2 
	"General registers
	$LF
]h2
[p 
	"These registers are typically called once per frame, or otherwise repeatedly called without any special condition needed to trigger them.
	$LF
]p
[h3 
	"emu.frameadvance() -- "Boundary"
	$LF
]h3
[p 
	"Not actually a register. Typically, you stick 
	[tt 
		"emu.frameadvance()
	]tt
	" in a 
	[tt 
		"while true do ... end
	]tt
	" loop. When called, Lua releases control back to the emulator so that it can advance a frame or whatever it likes. This does not force the emulator to advance the frame, as the user still has full control over the emulator speed, and can still frame-step as desired.
	$LF
]p
[p 
	"For bots, this is one of the two good places to use. All emulators should accept 
	[tt 
		"joypad.set
	]tt
	" here, and usually without any frame delay.
	$LF
]p
[p 
	"For the time being, do not use this function in 
	[b 
		"DeSmuME
	]b
	". It is glitched: While the frame counter will increment, DeSmuME will fail to emulate the frame, and nothing will happen. Other than a changed frame counter and likely desyncs for movie making.
	$LF
]p
[p 
	"Sample use:
	$LF
]p
[pre 
	" local JoypadUp = {up=true}
	$LF
	" local function HoldUp()
	$LF
	"   Joypad.set(1,JoypadUp)
	$LF
	" end
	$LF
	" while true do
	$LF
	"   HoldUp()
	$LF
	"   emu.frameadvance()
	$LF
	" end
	$LF
]pre
[h3 
	"gui.register(function)
	$LF
]h3
[p 
	"The registered function is called whenever the emulator updates its display. For all emulators, there are no guarantees that the function is called every frame. If you wish to create a bot to play parts of the game for you, this is a bad register to use, as some frames might be skipped without the bot ever knowing it happened. However, it is recommended to put most or all display-related and user-input code in this register.
	$LF
]p
[p 
	"Some emulators continuously updates their display even when the emulation is paused, thus calling such a registered function repeatedly. This is a very useful effect, as such scripts can react to a function like 
	[tt 
		"input.get()
	]tt
	", and through that, run code based on what the user presses, without requiring the user to advance a frame.
	$LF
]p
[p 
	"Sample use:
	$LF
]p
[pre 
	" local function ShowInputKeys()
	$LF
	"   local y = 0
	$LF
	"   local keys= input.get()
	$LF
	"   for k,v in pairs(keys) do
	$LF
	"     y = y + 8
	$LF
	"     gui.text(2,y,k)
	$LF
	"   end
	$LF
	" end
	$LF
	" gui.register(ShowInputKeys)
	$LF
]pre
[h3 
	"emu.registerbefore(function)
	$LF
]h3
[p 
	"The registered function should be called after the user hits the frame advance key, when the emulator updates a few internal variables, but before the actual emulation of the game.
	$LF
]p
[p 
	"Whether 
	[tt 
		"joypad.set
	]tt
	" has no delay or is even used is inconsistent across emulators, however.
	$LF
]p
[p 
	"If you wish to create a bot for use in 
	[b 
		"DeSmuME
	]b
	", it is recommended to use this register.
	$LF
]p
[p 
	"Sample use:
	$LF
]p
[pre 
	" local function Fn()
	$LF
	"   --Insert really awesome code here
	$LF
	" end
	$LF
	" emu.registerbefore(Fn)
	$LF
]pre
[h3 
	"emu.registerafter(function)
	$LF
]h3
[p 
	"The registered function should be called immediately after the frame is emulated. Like with 
	[tt 
		"emu.registerbefore
	]tt
	", there are a few noted inconsistencies across emulators.
	$LF
]p
[p 
	"Sample use:
	$LF
]p
[pre 
	" local function Fn()
	$LF
	"   --Insert somewhat mediocre code here
	$LF
	" end
	$LF
	" emu.registerafter(Fn)
	$LF
]pre
[hr 
]hr
[h2 
	"Specialized registers
	$LF
]h2
[p 
	"From here, the use of registers are more specialized. Functions called from these registers aren't necessarily from frame advancing, but rather due to other triggers. These registers are for more advanced coders to use.
	$LF
]p
[h3 
	"savestate.registerload(function)
	$LF
]h3
[p 
	"The registered function is called whenever the user loads a state.
	$LF
]p
[p 
	"This function will be passed any values stored in the savestate that was returned by a function registered with 
	[tt 
		"savestate.registersave
	]tt
	". However, there is no requirement to have a function in 
	[tt 
		"savestate.registersave
	]tt
	" in order to have this function work.
	$LF
]p
[p 
	"Useful in restoring some difficult-to-reproduce information stored by 
	[tt 
		"savestate.registersave
	]tt
	". Even without that, it's also useful in detecting when the user decides to load a state.
	$LF
]p
[h3 
	"savestate.registersave(function)
	$LF
]h3
[p 
	"The registered function is called whenever the user saves a state.
	$LF
]p
[p 
	"If this function returns any values, these values are stored along with the savestate. These values are passed to the registerload function.
	$LF
]p
[p 
	"Typically useful if there's any important information about the current state for your lua code, that you can't easily fetch from the game's memory.
	$LF
]p
[h3 
	"memory.register(int address,{ int size,} function)
	$LF
]h3
[h3 
	"memory.registerwrite(int address,{ int size,} function)
	$LF
]h3
[p 
	"Whenever the selected memory location is written to, the emulator immediately calls the registered function, halting emulation until the function returns. Optionally, you can insert a number for the size, triggering the function on a range of addresses instead of just one. When called, the function is passed the address and size of what it's registered to.
	$LF
]p
[p 
	"Be warned: Even if the source of the change is your lua code, it will trigger this register. Ensure that the function registered within doesn't end up calling itself endlessly, either by wrapping an if statement around the related 
	[tt 
		"memory
	]tt
	" function or have the function de-register itself before it makes the change.
	$LF
]p
[h3 
	"memory.registerexec(int address,{ int size,} function)
	$LF
]h3
[h3 
	"memory.registerrun(int address,{ int size,} function)
	$LF
]h3
[h3 
	"memory.registerexecute(int address,{ int size,} function)
	$LF
]h3
[p 
	"When the emulator executes the selected memory location, it immediately calls the registered function, halting emulation until the function returns. Otherwise quite similar to the above 
	[tt 
		"memory.register
	]tt
	".
	$LF
]p
[p 
	"Most likely, if you're using these functions, you've already looked into the 
	[a href=/ReverseEngineering 
		"debugger
	]a
	", or otherwise viewed the individual instructions of the game. If not, these functions will rarely, if ever, be of use. Good if you want to detect when a particular routine takes place.
	$LF
]p
[hr 
]hr
[h2 
	"How to use registers
	$LF
]h2
[p 
	"A few things you might want to know about how to use the registers. It's quite easy to use registering functions wrong.
	$LF
]p
[ul 
	[li 
		" Good example
		$LF
	]li
]ul
[pre 
	" local function AwesomeFn()
	$LF
	"   --Be sure to insert awesome code here!
	$LF
	" end
	$LF
	" emu.registerbefore(AwesomeFn)
	$LF
	" while true do
	$LF
	"   --Insert even more awesome code here.
	$LF
	"   emu.frameadvance()
	$LF
	" end
	$LF
]pre
[p 
	"It's perfectly fine to have the registering function outside of the frameadvance loop, and in fact is highly recommended to do so. Furthermore, you can have one registered function doing one thing and the frameadvance loop do another.
	$LF
]p
[ul 
	[li 
		" Bad example 1 (don't do it!)
		$LF
	]li
]ul
[pre 
	" local function SomeFunction()
	$LF
	"   -- Insert code, as always
	$LF
	" end
	$LF
	" emu.registerbefore(SomeFunction()
	[em 
	]em
	")
	$LF
]pre
[p 
	"By sticking 
	[tt 
		"SomeFunction()
	]tt
	" inside, it calls the function, then registers whatever it returns. Effectively, you did not register the function at all! If you used 
	[tt 
		"SomeFunction
	]tt
	" instead (note lack of parentheses), it gives the function itself to the register. This is good.
	$LF
]p
[ul 
	[li 
		" Bad example 2 (don't do this, either!)
		$LF
	]li
]ul
[pre 
	" local function ThisIsAJoke()
	$LF
	"   -- Be sure to throw an error for extra irritation!
	$LF
	" end
	$LF
	" while true do
	$LF
	"   emu.registerbefore(ThisIsAJoke)
	$LF
	"   emu.frameadvance()
	$LF
	" end
	$LF
]pre
[p 
	"The registering functions should be called once and only once, in many cases. By placing a registering function in a loop, you end up calling the registering function far more than once. Bad idea. Especially if the registered function throws an error. It is irritating to deal with the flood of error messages as the emulator runs, when one produces erroneous code in the registered function.
	$LF
]p
[hr 
]hr
[h2 
	"Reference tables
	$LF
]h2
[p 
	"For the joypads:
	$LF
]p
[ul 
	[li 
		" Immediate: The data is transferred without any frame delay. The best possible case.
		$LF
	]li
	[li 
		" Late: If 
		[tt 
			"set
		]tt
		", it applies the input next frame. If 
		[tt 
			"get
		]tt
		", it returns a table with input from the last frame. Either way, there's an unwanted 1 frame delay.
		$LF
	]li
	[li 
		" Ignored: Nothing you place in 
		[tt 
			"joypad.set
		]tt
		" will be picked up by the emulator. Useless register for botting.
		$LF
	]li
]ul
[table 
	[tbody 
		[tr 
			[th 
				"FCEUX
				[br 
				]br
				[small 
					"2.1.5
				]small
			]th
			[th 
				""Boundary"
			]th
			[th 
				"Before
			]th
			[th 
				"After
			]th
			[th 
				"Gui
			]th
		]tr
		[tr 
			[td 
				"Joypad.set
			]td
			[td 
				"Immediate
			]td
			[td 
				"Late
			]td
			[td 
				"Late
			]td
			[td 
				"Late
			]td
		]tr
		[tr 
			[td 
				"Joypad.get
			]td
			[td 
				"Late
			]td
			[td 
				"Immediate
			]td
			[td 
				"Immediate
			]td
			[td 
				"Immediate
			]td
		]tr
	]tbody
]table
[table 
	[tbody 
		[tr 
			[th 
				"Snes9x
				[br 
				]br
				[small 
					"1.51 v7
				]small
			]th
			[th 
				""Boundary"
			]th
			[th 
				"Before
			]th
			[th 
				"After
			]th
			[th 
				"Gui
			]th
		]tr
		[tr 
			[td 
				"Joypad.set
			]td
			[td 
				"Immediate
			]td
			[td 
				"Ignored
			]td
			[td 
				"Ignored
			]td
			[td 
				"Ignored
			]td
		]tr
		[tr 
			[td 
				"Joypad.get
			]td
			[td 
				"Immediate
			]td
			[td 
				"Immediate
			]td
			[td 
				"Immediate
			]td
			[td 
				"Immediate
			]td
		]tr
	]tbody
]table
[table 
	[tbody 
		[tr 
			[th 
				"VBA
				[br 
				]br
				[small 
					"v23.5
				]small
			]th
			[th 
				""Boundary"
			]th
			[th 
				"Before
			]th
			[th 
				"After
			]th
			[th 
				"Gui
			]th
		]tr
		[tr 
			[td 
				"Joypad.set
			]td
			[td 
				"Late
			]td
			[td 
				"Ignored
			]td
			[td 
				"Ignored
			]td
			[td 
				"Ignored
			]td
		]tr
		[tr 
			[td 
				"Joypad.get
			]td
			[td 
				"Immediate
			]td
			[td 
				"Immediate
			]td
			[td 
				"Immediate
			]td
			[td 
				"Immediate
			]td
		]tr
	]tbody
]table
[table 
	[tbody 
		[tr 
			[th 
				"DeSmuME
				[br 
				]br
				[small 
					"0.9.6
				]small
			]th
			[th 
				""Boundary"
			]th
			[th 
				"Before
			]th
			[th 
				"After
			]th
			[th 
				"Gui
			]th
		]tr
		[tr 
			[td 
				"Joypad.set
			]td
			[td 
				"???
			]td
			[td 
				"Immediate
			]td
			[td 
				"Late
			]td
			[td 
				"Immediate
			]td
		]tr
		[tr 
			[td 
				"Joypad.get
			]td
			[td 
				"???
			]td
			[td 
				"Late
			]td
			[td 
				"Immediate
			]td
			[td 
				"Immediate
			]td
		]tr
	]tbody
]table
[hr 
]hr
[p 
	(__wikiLink|user:FatRatKnight)
	": I only know about FCEUX, Snes9x, VBA, and an older version of DeSmuME. Someone else will have to fill us in on the other emulators and recent happenings on DeSmuME.
]p
