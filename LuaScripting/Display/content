6
[p 
	"This page describes how to display text, as well as display memory addresses in the form of text.
	$LF
]p
[h3 
	" Displaying something
	$LF
]h3
[p 
	"Use the command 
	[tt 
		"gui.text(int x, int y, string msg[, type color])
	]tt
	", which displays 
	[tt 
		"msg
	]tt
	" at (x,y) with color 
	[tt 
		"color
	]tt
	". Color, which is optional, is given as string "0xrrggbbaa" (hex) or as a string name (e.g. "red").
	$LF
]p
[p 
	"Example, a very simple program:
	$LF
]p
[pre 
	[code class=language-c 
		" local str="test"
		$LF
		" while true do
		$LF
		"  gui.text(0,0, str)
		$LF
		"  emu.frameadvance()
		$LF
		" end
		$LF
	]code
]pre
[p 
	[tt 
		""test"
	]tt
	" can also be written directly in 
	[tt 
		"gui.text
	]tt
	" as 
	[tt 
		"gui.text(0,0, "test")
	]tt
	".
	$LF
]p
[p 
	"There are other drawing functions such as 
	[tt 
		"gui.pixel(int x, int y[, type color])
	]tt
	" and 
	[tt 
		"gui.line(int x1, int y1, int x2, int y2[, type color])
	]tt
	" but 
	[tt 
		"gui.text
	]tt
	" is the most informative.
	$LF
]p
[p 
	"Since 
	[tt 
		"gui
	]tt
	" functions only affect the next frame, these commands have to be called every frame to keep showing them.
	$LF
]p
[p 
	"Depending on the emulator, there may be other commands such as 
	[tt 
		"emu.message(string msg)
	]tt
	" which display text. The difference is that 
	[tt 
		"gui.text
	]tt
	" is a drawing function whereas emulator message functions display messages that are not considered to be drawn on the game display.
	$LF
]p
[h3 
	" Memory Observation and Calculation.
	$LF
]h3
[p 
	"Most emulators have a RAM Watch or similar tool to view any desired memory address while making the TAS. However, it is sometimes desirable to draw information on the screen. Drawing on the screen does not affect the playback of the movie.
	$LF
]p
[p 
	"First, 
	(__wikiLink|/Memorysearch|memory search)
	" is required to find the addresses.
	$LF
]p
[p 
	"Once you have the addresses, it is a simple matter to display what it contains. For example, let's suppose the HP (hit points) of a boss is contained in the address 0x100 (0x100 means hexadecimal 100). The following script displays the address:
	$LF
]p
[pre 
	[code class=language-c 
		" local HPAddr=0x100
		$LF
		" local HP
		$LF
		$LF
		" while true do
		$LF
		"  HP=memory.readword(HPAddr)
		$LF
		"  gui.text(0,0,"HP: " .. HP)
		$LF
		"  emu.frameadvance()
		$LF
		" end
		$LF
	]code
]pre
[p 
	"The function 
	[tt 
		"readbyte
	]tt
	" is for one-byte values, 
	[tt 
		"readword
	]tt
	" for two bytes, and 
	[tt 
		"readdword
	]tt
	" for four bytes.
	$LF
]p
[p 
	"You can even do calculations before outputting. For example, in Super Mario Bros., 0x0086 is Mario's X pixel position, and 0x400 is Mario's X subpixel position. Thus, we can calculate position as (addr(0x0086) + addr(0x400)/256).
	$LF
]p
[pre 
	[code class=language-c 
		" local Pixel = 0x0086
		$LF
		" local Subpixel = 0x0400
		$LF
		" local Position%%%
		$LF
		$LF
		" while true do
		$LF
		"  gui.text(20,20,"X Pixel" .. memory.readbyte(Pixel) )
		$LF
		"  gui.text(22,30,"X Subpixel" .. memory.readbyte(Subpixel) )
		$LF
		"  Position = memory.readbyte(Pixel) + (memory.readbyte(Subpixel)/256)
		$LF
		"  gui.text(24,40,"X Position" .. Position)
		$LF
		"  emu.frameadvance()
		$LF
		" end
		$LF
	]code
]pre
[p 
	"Text is not the only option. It is possible to mark down positions of enemies on the screen. For example, suppose there is an invisible enemy that you can't ignore. After testing, you find that the enemy's X position is at 0x1000, and its Y position is at 0x1004. You also find the screen's X position at 0x2008 and Y position at 0x200C. The enemy's position on screen is given by ( addr(0x1000)-addr(0x2008) , addr(0x1004)-addr(0x200C) ), which indicates the top-left corner of the enemy's hitbox. Suppose the enemy is 15 pixels high and 7 pixels wide. Then the following draws an approximate hitbox:
	$LF
]p
[pre 
	[code class=language-c 
		" local eX, eY, sX, sY
		$LF
		" local hbX, hbY
		$LF
		$LF
		" while true do
		$LF
		"  eX=memory.readdword(0x1000)
		$LF
		"  eY=memory.readdword(0x1004)
		$LF
		"  sX=memory.readdword(0x2008)
		$LF
		"  sY=memory.readdword(0x200C)
		$LF
		"  hbX=eX-sX
		$LF
		"  hbY=eY-sY
		$LF
		"  gui.drawbox(hbX-2, hbY-2, hbX+9, hbY+17)
		$LF
		"  emu.frameadvance()
		$LF
		" end
		$LF
	]code
]pre
[p 
	"Here is yet another example, which functions as a memory viewer for a range of values:
	$LF
]p
[pre 
	[code class=language-c 
		" local s = memory.readbyterange(0xff00, 20)
		$LF
		" local a, b 
		$LF
		$LF
		" while true do
		$LF
		" 
		$LF
		"  for k,v in ipairs(s) do
		$LF
		"   a= math.floor((k-1)/10)
		$LF
		"   b=(k-1)%10
		$LF
		"   gui.text(15*b,10*a,v)
		$LF
		"  end
		$LF
		" 
		$LF
		"  emu.frameadvance()
		$LF
		" 
		$LF
		" end
		$LF
	]code
]pre
[h3 
	"List of drawing functions
	$LF
]h3
[p 
	"In general, these functions don't modify the game in any way. They simply paint over the display with whatever you wanted.
	$LF
]p
[h4 
	" gui.text(x, y, string, color1, color2)
	$LF
]h4
[p 
	"Paints text onto the screen. Typically fixed-width, most emulators use a width of 4 pixels, while DeSmuME uses a width of 6.
	$LF
]p
[p 
	"color1 applies to the main text color, and it is white if you omit color1. color2 applies to the bordering pixels around the main part of the text, and is black (or dark blue in FCEUX) by default if you omit color2.
	$LF
]p
[p 
	"FCEUX uses a variable-width text, so the function is modified to return the X position where it stops painting the text. Only important if you need to know the size of the block of text you just threw up there, otherwise just ignore the returned value.
	$LF
]p
[p 
	"Useful for displaying calculated values that RAM Watch alone can't help you with, or providing various bits of other information in text form.
	$LF
]p
[h4 
	" gui.pixel(x, y, color)
	$LF
]h4
[p 
	"Paints a single pixel. Usually, a single pixel tends to go unnoticed, but there are a few uses for painting individual pixels rather than full lines or boxes.
	$LF
]p
[p 
	"Good for some sort of minimap script or any form of display requiring fine detail.
	$LF
]p
[h4 
	" gui.line(x1, y1, x2, y2, color)
	$LF
]h4
[p 
	"Paints a straight line starting from one coordinate and ending on the other coordinate. The line is always one pixel wide.
	$LF
]p
[p 
	"Generally good for showing the angle where things are moving (if you can calculate them in lua!), as well as turning a number into a visible bar for an intuitive feel rather than a concrete feel.
	$LF
]p
[h4 
	" gui.box(x1, y1, x2, y2, FillColor, BorderColor)
	$LF
]h4
[p 
	"Paints a filled-in box, using one color for the border and another color to fill. Omitting BorderColor means the FillColor is used for the border, and a more translucent version of FillColor is used for the fill.
	$LF
]p
[p 
	"Useful for when you've found the hitbox data in RAM, and want to actually paint them. Also helpful in making other bits of drawing more visible when you first fill a section of the screen with a translucent black, for example.
	$LF
]p
[h4 
	" x y coordinates
	$LF
]h4
[p 
	"You do not need to use static, unchanging values for your x and y. However, 
	[tt 
		"gui.text(5,12,"hello world")
	]tt
	" is certainly very easy to use. But there are ways to move the pieces of display around as needed.
	$LF
]p
[p 
	"You can fetch some values from RAM (say, the enemy's x,y position), and then use them as the x,y coordinate in your drawing function so that, for example, the text related to the enemy follows them where they go.
	$LF
]p
[h4 
	" Colors
	$LF
]h4
[p 
	"There are several representations of colors to use:
	$LF
]p
[ul 
	[li 
		" Number - 0xrrggbbaa format
		[br 
		]br
		"Most emulators have the 
		[b 
			"80Red
		]b
		" glitch that makes drawing using a red value of 80 or higher completely invisible.
		$LF
	]li
	[li 
		" String - "#rrggbb" or "#rrggbbaa"
		[br 
		]br
		"There are also a number of simple colors as well, using strings like "red" or "green".
		$LF
	]li
	[li 
		" Table - {r = 0xrr, g = 0xgg, b = 0xbb, a = 0xaa} or {0xrr,0xgg,0xbb,0xaa}
		[br 
		]br
		"If you prefer, you can use straight decimal numbers, which range from 0 to 255 instead of the hex values that range from 0x00 to 0xFF. The other formats don't easily allow use of decimal numbers like tables.
		$LF
	]li
]ul
[p 
	[b 
		"80Red
	]b
	" glitch: When using a number as your color, any value above 0x7FFFFFFF simply fails. No drawing is done, as though the function didn't do anything. However, this only affects the number form -- String and Table are unaffected. You can use negative numbers to reach the brighter reds, but you really need to know what you're doing to get the color you want.
	$LF
]p
[p 
	[b 
		"Note:
	]b
	" This is how snes9x-based lua implementation works with colors. Newer emulators like lsnes and Bizhawk handle the colors differently, see their docs.
	$LF
]p
[hr 
]hr
[p 
	[em 
		(__wikiLink|/TODO|TODO)
		": Teach us to draw things without one-frame delay.
	]em
	[br 
	]br
	$LF
	[small 
		[a class=intlink href=/Users/Profile/FatRatKnight 
			"FatRatKnight
		]a
		": You realize... That depends on emulator implementation. Snes9x is impossible as it stands as far as memory reading goes (can paint other things immediately, but 
		[tt 
			"memory
		]tt
		" functions work late regardless of register), but other than that, using 
		[tt 
			"gui.register
		]tt
		" instead of 
		[tt 
			"emu.frameadvance
		]tt
		" usually gets rid of the one-frame delay. Shouldn't be too hard to explain, but I'm not in the mood to write that up now.
	]small
]p
