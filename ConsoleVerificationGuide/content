9
[p 
	(listlanguages)
	$LF
]p
[hr 
]hr
[p 
	(__wikiLink|/ConsoleVerifiedMovies|Console Verified Movies)
	" | 
	(__wikiLink|/ConsoleVerificationTests|Console Verification Tests)
	$LF
]p
[h3 
	" Introduction
	$LF
]h3
[p 
	"This guide will explain how console verification works and take you through the steps to play back movies on the actual console. This page assumes you are already knowledgeable about playback of movies in the emulator.  If not, consult 
	(__wikiLink|/EmulatorResources|Emulator Resources)
	" for advice on how to set that up first. You will also need some knowledge about electrical circuits, and the required hardware (components, console, games, etc).
	$LF
]p
[h3 
	" Bot designs
	$LF
]h3
[p 
	"NESBot was the first bot that was publicly announced and was created by micro500.  This bot can be built by following the 
	[a class=extlink href=http://www.instructables.com/id/NESBot-Arduino-Powered-Robot-beating-Super-Mario-/ rel=nofollow 
		"Instructables NESBot guide
	]a
	" created by micro500. The basic steps, based off the article, are as follows: 
	$LF
]p
[ol 
	[li 
		" Build the circuit given in the guide.
		$LF
	]li
	[li 
		" Load FCEUX and the rom for the game you want to use.
		$LF
	]li
	[li 
		" Load the Lua script given in the guide and run it. 
		$LF
	]li
	[li 
		" Download the .fm2 file for the movie you want and start playback in the emulator.
		$LF
	]li
	[li 
		" Let the movie playback until completion or for as long as you would like, then stop the Lua script.
		$LF
	]li
	[li 
		" Upload the file the Lua script creates onto the bot.
		$LF
	]li
	[li 
		" Load the game cartridge into the console and make sure it starts correctly.
		$LF
	]li
	[li 
		" Activate the bot and turn on the console.
		$LF
	]li
]ol
[p 
	"Later, true released his 
	[a class=extlink href=http://truecontrol.org rel=nofollow 
		"NES / SNES Replay Device
	]a
	" which was capable of playing back both NES and SNES games.  This is the version that was used during 
	[a class=intlink href=/Forum/P/353915#353915 
		"AGDQ 2014
	]a
	" and was also employed during 
	[a class=intlink href=/GamesDoneQuick/AGDQ2015 
		"AGDQ 2015
	]a
	" for Pokemon Red / Pokemon Plays Twitch.
	$LF
]p
[p 
	"micro500 followed this up with his 
	[a class=intlink href=/Forum/P/305411#305411 
		"N64Bot
	]a
	" which was used for the MK64 run at AGDQ 2014.
	$LF
]p
[p 
	"In 2014, true released his MultiReplay board which added Genesis, SMS, and other platform support and incorporated a built-in display.  This version was used during AGDQ 2015 for SMB on SMW.
	$LF
]p
[h3 
	" TASBot as a person (from the perspective of dwangoAC)
	$LF
]h3
[p 
	"When true released his board he called it true's NES / SNES Replay Device. I subsequently hacked together a Lego case and put it on ROB and dubbed it 
	[a class=intlink href=/Forum/P/361685#361685 
		"ROBBerry Pi
	]a
	". Then, due to being frazzled because of last-minute issues and being in front of 60,000 people I proceeded to do an absolutely horrible job of introducing who TASVideos was, who I was, and what the name of the bot was. Later, 
	[a class=extlink href=https://twitter.com/GDQMonitor rel=nofollow 
		"GDQMonitor
	]a
	" and 
	[a class=intlink href=/4156S 
		"Masterjun's SMW executes arbitrary code submission
	]a
	" both referred to the combination of true's replay board, the Pi, and ROB as "TASBot". (As an aside, there was previously an unrelated project named 
	[a class=extlink href=https://github.com/d-snp/tasbot rel=nofollow 
		"TASBOT
	]a
	" but no new development appears to have happened on it since 2013)
	$LF
]p
[p 
	"TASBot as a "person" has become something far larger than I ever imagined. There's fanfic out there about 
	[a class=extlink href=https://twitter.com/GDQMonitor rel=nofollow 
		"@GDQMonitor
	]a
	" (apparently a girl) and 
	[a class=extlink href=https://twitter.com/MrTASBot rel=nofollow 
		"@MrTASBot
	]a
	" 
	[a class=extlink href=https://twitter.com/GDQMonitor/status/482964829687140352 rel=nofollow 
		"having an ongoing relationship
	]a
	". The 
	[a class=extlink href=http://speeddemosarchive.org rel=nofollow 
		"SDA
	]a
	" community seems to 
	[a class=extlink href=https://forum.speeddemosarchive.com/post/agdq_2014_shout_outs_and_love_thread_40.html#agdq_2014_shout_outs_and_love_thread_40 rel=nofollow 
		"refer to TASBot
	]a
	" about the same way the Nico Nico Douga community references 
	[a class=extlink href=http://en.wikipedia.org/wiki/Tool-assisted_speedrun#1999.E2.80.932001 rel=nofollow 
		"TAS-san
	]a
	" (
	[a class=extlink href=https://www.google.com/search?q=TASBot&gws_rd=ssl#q=TAS%E3%81%95%E3%82%93 rel=nofollow 
		"TASさん
	]a
	", known as 
	[a class=extlink href=https://translate.google.com/translate?hl=en&sl=ja&tl=en&u=http%3A%2F%2Fwww.yuko2ch.net%2Frockman%2Ftasyougo.htm rel=nofollow 
		""Mr. TAS"
	]a
	"). I know true has never particularly felt comfortable with calling his board "TASBot" and at this point I think the name transcends any particular replay device. I've come to think of TASBot as the combination of ROB holding a controller or board and participating in his favorite pastime, playing games perfectly in front of a TV and a loving audience. What could be better? 
	$LF
]p
[h3 
	" NES controller technical information
	$LF
]h3
[p 
	"An NES controller is simply a shift register, with the 8 inputs being the 8 buttons on the controller. When a game is looking for input from a controller, a pulse is sent to the controller. When the shift register receives this pulse, the state of the 8 buttons are read in and stored until the game reads them in one button at a time. Some games read in the button state once per frame, while others read them in multiple times per frame. A game is not required to read in input every frame however, and will commonly not read in input for some frames to allow time to handle other things such as changing the screen. Due to a hardware problem, using the PCM channel of the NES to output sound causes random invalid button presses to be read in. Games that use this channel commonly read in the button state multiple times to find which buttons are valid.  
	$LF
]p
[p 
	"In FCEUX input from the user is read once per frame and "held" until the next frame. The emulator doesn't care how many times per frame the game asks for input; it gives it the same input each time in the same frame. The emulator also accepts and saves buttons which are pressed even when the game doesn't ask for them.
	$LF
]p
[p 
	"To play back movies on the console, the recorded buttons need to be modified to remove buttons pressed when the game isn't asking for any. The remaining buttons need to be pressed and held for the correct frame for the console to read them in correctly. To accomplish this, a micro-controller was wired to a shift register and the pulse from the console was sent to both the micro-controller and the shift register. With each pulse, the micro-controller changes the "button" signals sent to the shift register, according to the movie uploaded to it. 
	$LF
]p
[h3 
	" SNES
	$LF
]h3
[p 
	"To be added.
	$LF
]p
[h3 
	" SMS
	$LF
]h3
[p 
	"To be added.
	$LF
]p
[h3 
	" Genesis
	$LF
]h3
[p 
	"To be added.
	$LF
]p
[h3 
	" N64
	$LF
]h3
[p 
	"To be added.
	$LF
]p
[h3 
	" Game Boy Advance
	$LF
]h3
[p 
	"To be added.
]p
