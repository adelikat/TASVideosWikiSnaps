22
[div class=p 
	"Examining memory addresses is useful in the making of TASes for looking at important values that are hidden from the player or difficult to determine just by looking at the screen. They are also important for making bots to assist gameplay, which is covered on the 
	(__wikiLink|displaytext=Lua scripting|href=/LuaScripting)
	" page.
	$LF
]div
[div class=p 
	"Memory search is also known as "cheat search", which is a misleading name.
	$LF
]div
[div class=card mb-2 
	[div class=card-header 
		[strong 
			"Table of contents
		]strong
	]div
	[div class=card-body 
		[ul 
			[li 
				[a href=#SearchingForAnAddress 
					" Searching for an Address
					$LF
				]a
				[ul 
					[li 
						[a href=#PickingTheRightSettings 
							" Picking the right settings
							$LF
						]a
					]li
					[li 
						[a href=#UsefulExampleFindingXPosition 
							" A Useful Example - Finding X Position.
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#OtherTips 
					" Other Tips
					$LF
				]a
			]li
			[li 
				[a href=#DynamicallyAllocatedMemory 
					" Dynamically allocated memory
					$LF
				]a
				[ul 
					[li 
						[a href=#ArraysLinkedListsAndOtherFunDataStructures 
							" Arrays, linked lists and other fun data structures
							$LF
						]a
					]li
					[li 
						[a href=#Callstack 
							" The callstack
							$LF
						]a
					]li
				]ul
			]li
			[li 
				[a href=#MirrorsDuplicatesLeftoverValuesAndOtherCopies 
					" Mirrors, duplicates, leftover values and other copies
					$LF
				]a
			]li
			[li 
				[a href=#OtherResources 
					" Other Resources
					$LF
				]a
			]li
			[li 
				[a href=#Links 
					" Links
					$LF
				]a
			]li
		]ul
	]div
]div
[h3 id=SearchingForAnAddress 
	" Searching for an Address
	$LF
]h3
[h4 id=PickingTheRightSettings 
	" Picking the right settings
	$LF
]h4
[div class=p 
	"One of the most important first steps is to use the right settings to find addresses (for instance, 2-byte is not a good idea on 8 bit systems). See 
	(__wikiLink|displaytext=Default Settings|href=/MemorySearch/DefaultSettings)
	" for per platform recommended settings
	$LF
]div
[div class=p 
	"There are more memory addresses than one can imagine, so to find what we are looking for, we must filter the memory addresses using the search box.
	$LF
]div
[div class=p 
	"First, go to some relevant point in the game, one where you are about to change the value of what you want to find.  Open the search box. Don't search anything yet, but click "Start" or "Reset". This initializes the memory addresses to those currently in the game. If you want to find addresses with a specific value now, enter the value, select "equal to", and click search.
	$LF
]div
[div class=p 
	"Now play the game until the value has presumably changed. Now go back to the search box. Select one of "less than", "equal to", "not equal to" and so on. If comparing to the previous value, select "previous value" and click search. If trying to find addresses with a specific value, enter the value, select "equal to", and click search. Click "Update values" if the emulator doesn't do this automatically.
	$LF
]div
[div class=p 
	"Keep doing this until you have narrowed down the possibilities and you can easily guess which one it is. Sometimes there may be two or more addresses which are similar to the one you're trying to find.
	$LF
]div
[div class=p 
	"When you have found the address or there are a few addresses left and you can't figure out which one it is, watch the addresses in memory. Play the game, and the correct address or addresses should stand out.
	$LF
]div
[h4 id=UsefulExampleFindingXPosition 
	" A Useful Example - Finding X Position.
	$LF
]h4
[div class=p 
	"The simplest yet most useful value one can often find is the x position of a character.  By monitoring x position one can be sure to maximize the distance covered in a given period of time.  The following would be a procedure applicable to most games where x position would need to be found.
	$LF
]div
[div class=p 
	"Super Mario Bros. (Japan, USA) will be used as an example.
	$LF
]div
[ul 
	[li 
		" Start 1-1.  
		$LF
	]li
	[li 
		" Tools -> RAM Search (Sometimes also labeled Cheat Search)
		$LF
	]li
	[li 
		" Reset 
		$LF
	]li
]ul
[div class=p 
	"The emulator sorts bytes based on how the value is changing.  When standing still the x position should stay ‘equal’.  Once moved to a different location, the x position is ‘not equal’ to the previous value. It should be noted that the search by default always compares to the previous value, not the original value.  Another option is to compare the value to a known value.
	$LF
]div
[ul 
	[li 
		"Click Reset to start a new search of all bytes.  This initializes the value to be compared with.
		$LF
	]li
	[li 
		"While standing at the original location, hit ‘equal’ numerous times while the game is playing.  This gets rid all bytes that change when standing still (timers, random numbers).
		$LF
	]li
	[li 
		"Move to the right, stop walking, and press ‘not equal’ exactly one time.  This will eliminate values that did not change when Mario moved, and it should leave you with about 20 values.  While standing at this location, one could press ‘equal’ a few more times to again get rid of bytes that are changing while you are standing still.
		$LF
	]li
	[li 
		"Repeat as necessary
		$LF
	]li
]ul
[div class=p 
	"Following this method further, it should narrow the possibilities to about 20 bytes.  Observing these bytes while playing in real time one could conclude that the x position is located at 0400.  Further investigation may find the x subpixel position at 0086.  The subpixel is Mario's x position decimal value out of 256.  These memory addresses can be placed in Tools -> Memory Watch for convenient observation while playing.
	$LF
]div
[h3 id=OtherTips 
	" Other Tips
	$LF
]h3
[div class=p 
	"Generally moving right introduces a value 'greater than' the previous value, and moving left introduces a value 'less than' the previous value.  This is dependent on the programming convention of the game, and may not always be true. For example, some games don't have the constant addresses of objects' coordinates, but calculate them from screen and sprite positions.
	$LF
]div
[div class=p 
	"You can easily save work by checking around the address you found. For example, if you found the player's X position, it is often reasonable to assume the player's Y position is two or four bytes ahead.
	$LF
]div
[div class=p 
	"When looking for a speed value, moving right is generally positive and moving left is generally negative.  In this case you usually need to use 'signed' comparisons. 
	$LF
]div
[div class=p 
	"Negative numbers are interpreted differently depending on whether the value is being read as signed or unsigned.  When reading a byte ranging from 0 to 255 without interpreting the sign (unsigned), a positive number counts up from 0 and a negative number counts down from 255.  When the emulator is searching for a 'signed' value, it performs this interpretation for you to make the values range from -128 to +127.  Comparisons must account for this.
	$LF
]div
[div class=p 
	"In newer emulators one may have to choose between a data size of 1,2, or 4 bytes.  One must predict whether the byte holds less than or equal to 255, 65535, or 4294967295 intervals of precision.  One step by a character could be anywhere from 1 unit to 10,000 units, so trial and error of data size may be necessary.  Checking misaligned values is usually not necessary.
	$LF
]div
[div class=p 
	"A good starting approach may be to select "2-bytes" for search. This avoids confusion near byte boundaries (such as when 127 goes to -128, or 255 goes to 0). If it doesn't work, try "1-byte" or "4-bytes."
	$LF
]div
[div class=p 
	"For relatively simple platforms, like NES, you can use the inbuilt Hex Editor to observe RAM, watching what addresses are changing while you're acting. For example, you never know, how the subpixel value exactly changes, so it may be easier to look for values, that change every frame when the acceleration works, and stay still when it doesn't. Also, it's more useful to turn the whole pages ("Page Up", "Page Down" keys) while observing RAM, not to scroll them.
	$LF
]div
[h3 id=DynamicallyAllocatedMemory 
	" Dynamically allocated memory
	$LF
]h3
[div class=p 
	"Games sometimes allocate data during execution, this means that the exact address of things may change between levels, starts of the game or even every frame. This can greatly complicate your work. But you can always find a pointer to the currently used address.
	$LF
]div
[div class=p 
	"The simplest case would be that a fixed address always holds the exact address of the value you do care about.
	$LF
]div
[div class=p 
	"But more often will the pointer hold a base address and the value you are looking for be stored at a known offset from the base address.
	$LF
]div
[div class=p 
	"Of course, there is no rule that the pointer will be stored at a fixed address either. But there will be a pointer to the pointer in those cases.
	$LF
]div
[div class=p 
	"The callstack is an especially popular location for direct pointers.
	$LF
]div
[h4 id=ArraysLinkedListsAndOtherFunDataStructures 
	" Arrays, linked lists and other fun data structures
	$LF
]h4
[div class=p 
	"Games sometimes store collections of similar items, like the list of active enemies. These collections are often stored as either arrays or linked lists.
	$LF
]div
[div class=p 
	"Arrays are just regions of memory where several instances of the same type of data is stored in sequence. They are very popular with simple games, since they can be statically allocated in a fixed spot all the time.
	$LF
]div
[div class=p 
	"Linked lists are more common on more modern systems, but can still be found on older platforms. They are built as a chain of similarly formated regions of memory that are linked together using pointers. Linked lists are often double linked, each item having a pointer both to the next and the previous item in the list.
	$LF
]div
[div class=p 
	"You may also find hashmaps. Hashmaps act like an array, but allow for fast retrieval for data with a specific key. In order to work with these you will need to reverse engineer the exact hashing function the game uses.
	$LF
]div
[div class=p 
	"In all cases for these data structures you will need not only knowledge of where in memory the data structure can be found, but also knowledge of how to find the specific item in the collection that you want to know about. You can often find pointers or indexes to the specific value elsewhere in memory.
	$LF
]div
[h4 id=Callstack 
	" The callstack
	$LF
]h4
[div class=p 
	"Practically every computer system actually used in practice uses a callstack approach.
	$LF
]div
[div class=p 
	"The callstack is a dedicated region of memory used to implement function calls. The callstack commonly grows downwards, the address of new data decreasing.
	$LF
]div
[div class=p 
	"As functions in the program are called values are added to the callstack. Some of these values can be very interesting, since they can be the value you are searching for.
	$LF
]div
[div class=p 
	"The problem with the callstack is that values are often overwritten. Functions returning and new functions being called makes memory reuse exceptionally high and can greatly complicate memory watching since very exact timing may be required in order to see the memory as it is being used for the desired purpose.
	$LF
]div
[div class=p 
	"The advantage to watching the stack is that very interesting values tend to be stored on it, such as intermediary values used in game logic.
	$LF
]div
[h3 id=MirrorsDuplicatesLeftoverValuesAndOtherCopies 
	" Mirrors, duplicates, leftover values and other copies
	$LF
]h3
[div class=p 
	"Data is very frequently fetched from one location and stored in another. The address you find might not be the actual version of the value, only a copy made for further processing.
	$LF
]div
[div class=p 
	"Examples of these duplicates include values used for display purposes, previous allocated memory and arguments on the callstack but there are endless reasons for games to duplicate data.
	$LF
]div
[div class=p 
	"Be vary that these copies might lag behind the real value, might be more or less stable in their address and can have subtly different rules about the actual stored value.
	$LF
]div
[h3 id=OtherResources 
	" Other Resources
	$LF
]h3
[ul 
	[li 
		(__wikiLink|displaytext=Ram Search|href=/EmulatorResources/RamSearch)
		" contains further documentation on the RAM Search dialog that is common in many rerecording emulators.  It may be a helpful resource to further detail the information on this page.
		$LF
	]li
	[li 
		[a href=http://www.memoryhacking.com/index.php rel=noopener external nofollow 
			"Memory Hacking Software
		]a
		" by L. Spiro is an external memory search tool that works with any program.  It is extremely useful for finding bytes in emulators without built in cheat search functions.
		$LF
	]li
]ul
[hr 
]hr
[h3 id=Links 
	" Links
	$LF
]h3
[ul 
	[li 
		[a href=http://www.datacrystal.org/ rel=noopener external nofollow 
			"Data Crystal
		]a
		", a site with some useful RAM addresses.
		$LF
	]li
	[li 
		[a href=http://www.thealmightyguru.com/Games/Hacking/Wiki/index.php?title=Category:Games rel=noopener external nofollow 
			"The Almighty Guru
		]a
		", another one of that kind.
	]li
]ul
