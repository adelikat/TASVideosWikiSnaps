31
[h2 id=Memoryobserving 
	" Memory observing
	$LF
]h2
[div class= 
	[ul class=nav nav-tabs role=tablist 
		[li class=nav-item 
			[a class=active nav-link data-toggle=tab href=#tabs-42-0 
				"What is RAM
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-42-1 
				"RAM search
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-42-2 
				"RAM watch
			]a
		]li
	]ul
	[div class=tab-content 
		[div class=tab-pane active id=tabs-42-0 
			[p 
				"Every game uses 
				[a class=extlink href=http://en.wikipedia.org/wiki/Random-access_memory rel=nofollow 
					"random access memory
				]a
				" to compute everything that occurs in the game in time. Opposed to read-only memory (the game image itself that can only be read from, not written to), RAM is used as a temporary storage for all necessary variables the game processes on fly, its values are constantly changing.
				$LF
			]p
			[p 
				"By determining which address represents which in-game variable, and by observing its changes during play, you can get the exact idea of what actually is going on software-wise. This tool brings you to a higher level comparing to observing just the emulator window picture, because the latter won't let you know the exact values and their fractions, which really matter when it comes to intense optimization.
				$LF
			]p
		]div
		[div class=tab-pane fade id=tabs-42-1 
			[p 
				"So, at first you got to find the addresses representing gameplay aspects you need: your character position, camera position, your and enemies hitpoints, objects speed, etc. Some games already have rather good sets of known addresses, others still need your effort.
				$LF
			]p
			[p 
				(youtube|v=q02QSb1CgMU|align=right|w=360|h=210)
				$LF
			]p
			[ul 
				[li 
					" 
					[a class=intlink href=/AddressesUp 
						"Addresses List
					]a
					" - What is already hosted on this site officially
					$LF
				]li
				[li 
					" Addresses lists hosted on tastools googlecode:
					$LF
					[ul 
						[li 
							" 
							[a class=extlink href=http://code.google.com/p/tastools/source/browse/trunk/FCEU-MemoryWatch rel=nofollow 
								"Memory Watch files
							]a
							$LF
						]li
						[li 
							" 
							[a class=extlink href=http://code.google.com/p/tastools/source/browse/trunk/RamWatch rel=nofollow 
								"Ram Watch files
							]a
							$LF
						]li
					]ul
					" 
					(__wikiLink|/GameResources|Game Resources)
					" - Some games addresses are written on their particular pages
					$LF
				]li
				[li 
					" Forum threads sometimes get posted with addresses, ask in game-specific threads, probably someone already has addresses you need
					$LF
				]li
			]ul
			[p 
				"In none of those worked, you have to either ask someone to figure the addresses for you (unlikely to happen), or try finding them yourself (increases experience and provides new info).
				$LF
			]p
			[p 
				"We have huge guides about 
				[a class=intlink href=/MemorySearch 
					"how to search addresses
				]a
				", and 
				[a class=intlink href=/EmulatorResources/RamSearch 
					"how to handle RAM Search tool
				]a
				" in order to do that. There's an additional video-lesson to the right on how to do all that (if the sound desyncs, try 
				[a class=extlink href=http://www.ustream.tv/recorded/8547343 rel=nofollow 
					"watching it on Ustream
				]a
				"). Here's also a nice tutorial on 
				[a class=extlink href=http://www.fceux.com/web/help/fceux.html?NESRAMMappingFindingValues.html rel=nofollow 
					"RAM mapping
				]a
				".
				$LF
			]p
		]div
		[div class=tab-pane fade id=tabs-42-2 
			[p 
				"There are 2 types of dialogs designed for that, one is simpler, another is newer. Some emulators support both. For the newer dialog, refer to 
				(__wikiLink|/EmulatorResources/RamWatch|Emulator Resources / Ram Watch)
				", it has a good usage guide. WCH files for it can be obtained from the links in the previous chapter.
				$LF
			]p
			[p 
				"The old-designed dialog is called Memory Watch. 
				[a class=extlink href=http://www.fceux.com/web/help/fceux.html?MemoryWatch.html rel=nofollow 
					"Here
				]a
				" is a guide for it. It uses plain text files to store data, just with some special formatting.
				$LF
			]p
			[p 
				"See the use of frame advance and RAM adress to trigger a glitch in Super Mario World: 
				[a class=extlink href=http://www.youtube.com/watch?v=U3aK-BATtJw rel=nofollow 
					"demo by bobmario511
				]a
				".
				$LF
			]p
		]div
	]div
]div
[h2 id=Luascripting 
	" Lua scripting
	$LF
]h2
[div class= 
	[ul class=nav nav-tabs role=tablist 
		[li class=nav-item 
			[a class=active nav-link data-toggle=tab href=#tabs-2999-0 
				"Purpose
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-2999-1 
				"Usage
			]a
		]li
	]ul
	[div class=tab-content 
		[div class=tab-pane active id=tabs-2999-0 
			[p 
				"Lua scripting is an extremely useful tool when TASing. Although some programming knowledge is required, the user has power over things like game screen display, inputs, and memory. The following are some common applications, though the possibilities are endless.
				$LF
			]p
			[ul 
				[li 
					" Displaying helpful information on screen.
					$LF
				]li
				[li 
					" Eliminating tedious repetition.
					$LF
				]li
				[li 
					" Creating specific circumstances for testing.
					$LF
				]li
				[li 
					" Brute forcing a solution.
					$LF
				]li
			]ul
		]div
		[div class=tab-pane fade id=tabs-2999-1 
			[p 
				"There is a good guide on Lua usage: 
				(__wikiLink|/LuaScripting|Lua Scripting)
				" and its subpages. You would also want to see how already existing scripts work, which would require downloading 
				[a class=intlink href=/EmulatorResources 
					"the emulator
				]a
				" you're interested in and examining it for a LuaScript folder of some kind. You can open a script with any text editor and read its description. Some scripts are game-specific others are emulator-specific, both types serve as good demonstrations of Lua powers.
				$LF
			]p
			[p 
				"Some scripts are stored at 
				[a class=extlink href=http://code.google.com/p/tastools/source/browse/trunk/Lua/ rel=nofollow 
					"tastools project
				]a
				". Several emulators have Lua discussions on Forums:
				$LF
			]p
			[ul 
				[li 
					" 
					[a class=intlink href=/Forum/T/6970 
						"NES
					]a
					$LF
				]li
				[li 
					" 
					[a class=intlink href=/Forum/T/6539 
						"snes9x
					]a
					$LF
				]li
				[li 
					" 
					[a class=intlink href=/Forum/T/8875 
						"Mupen64
					]a
					$LF
				]li
				[li 
					" 
					[a class=intlink href=/Forum/F/25 
						"Tool-assisted laboratory
					]a
					$LF
				]li
			]ul
		]div
	]div
]div
[h2 id=Codedisassembling 
	" Code disassembling
	$LF
]h2
[div class= 
	[ul class=nav nav-tabs role=tablist 
		[li class=nav-item 
			[a class=active nav-link data-toggle=tab href=#tabs-4211-0 
				"Purpose
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-4211-1 
				"Debugger
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-4211-2 
				"Trace-logger
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-4211-3 
				"Lua tips
			]a
		]li
	]ul
	[div class=tab-content 
		[div class=tab-pane active id=tabs-4211-0 
			[p 
				"Old-school games we mostly play here were written on 
				[a class=extlink href=http://en.wikipedia.org/wiki/Assembly_language rel=nofollow 
					"assembly language
				]a
				", and before compiling, the source codes used to be commented and interpretable for a developer. Then it was converted to a machine code and written on a ROM (read-only memory) to play via a console. We have no contact to developers, but we try to figure out what the original code was by 
				(__wikiLink|/Reverseengineering|reverse engineering)
				" it with the help of different debugging tools. Mostly ROM-hackers create and use them, but some TASeras 
				[b 
					"are
				]b
				" ROM-hackers as well.
				$LF
			]p
			[p 
				"As was mentioned above, you need to know what happens in the game, the more you know, the better you do, and how deep you dive is only a matter of skill and knowledge. Basically, you need to know or at least understand the language the game was written on, there are various types of assembly, for example NES is using 
				[a class=extlink href=http://www.6502.org/tutorials/6502opcodes.html rel=nofollow 
					"6502
				]a
				".
				$LF
			]p
		]div
		[div class=tab-pane fade id=tabs-4211-1 
			[p 
				"Debugger deciphers the executed machine code into an assembly program. It displays the result in a specific area as a plain text, you can copy it, figure out the address of the instruction just executed, see where it is in an actual ROM file, etc.
				$LF
			]p
			[p 
				"You can set breakpoints on read, write and execute by an address you want. Normally, emulation uses virtual frame borders (
				[a class=extlink href=http://en.wikipedia.org/wiki/Non-maskable_interrupt rel=nofollow 
					"NMI
				]a
				") as a moment to generate the picture, and what happens within those frames is closed from a regular player. By setting a breakpoint to some mid-frame event, you make emulator pause between frames, displaying the commands it just ran.
				$LF
			]p
			[p 
				"There are such improvements in the debugging process as conditional debugging and symbolic debugging. The first allows to set various extra-conditions to break at, and the second uses an extra-file with names and comments manually assigned to addresses, and replaces the latter in the disassembly window with those names and comments, so that you see sane words instead of numbers.
				$LF
			]p
		]div
		[div class=tab-pane fade id=tabs-4211-2 
			[p 
				"This tool dumps all the code executed to a special field or to a file, while debugger shows only a limited part of deciphered code. You can then track how the actual events developed, trace how the values changed and why, especially if you turn on logging of memory registers and other side stuff.
				$LF
			]p
			[p 
				"You can log as much code as you want at one sitting, but it's advised to still limit it to be able to observe with no problems then. Trace-logger can also consider breakpoints and symbolic debugging.
				$LF
			]p
		]div
		[div class=tab-pane fade id=tabs-4211-3 
			[p 
				"Some emulators allow to register memory as the program runs, which means you can fire your own Lua commands not only on frame borders, but once the code you choose gets executed, read or written.
				$LF
			]p
			[p 
				"Memory library for Lua usually is implemented like is documented on 
				[a class=extlink href=http://www.fceux.com/web/help/fceux.html?LuaFunctionsList.html rel=nofollow 
					"these
				]a
				" 
				[a class=intlink href=/LuaScripting/Registers 
					"pages
				]a
				" and a breakpoint code looks like this:
				$LF
			]p
			[pre 
				[code class=language-c 
					$LF
					"function CounterBreak()
					$LF
					"	ObjCtr = memory.getregister("y")
					$LF
					"	if ObjCtr > 0x16 then
					$LF
					"		gui.text(1, 9, string.format("%02X",ObjCtr))
					$LF
					"		emu.pause()
					$LF
					"	end
					$LF
					"end
					$LF
					"memory.registerexecute(0x863C, CounterBreak);
					$LF
					$LF
				]code
			]pre
		]div
	]div
]div
[p 
	"But remember, not all emulators are that powerful yet. For now, the best choice for such tasks is 
	[a class=extlink href=http://www.fceux.com/web/download.html rel=nofollow 
		"FCEUX
	]a
	". See its manuals on 
	[a class=extlink href=http://www.fceux.com/web/help/fceux.html?Debugger.html rel=nofollow 
		"debugging
	]a
	", 
	[a class=extlink href=http://www.fceux.com/web/help/fceux.html?TraceLogger.html rel=nofollow 
		"tracing
	]a
	", and a bunch of other 
	[a class=extlink href=http://www.fceux.com/web/help/fceux.html?Debug.html rel=nofollow 
		"ROM-hacking methods
	]a
	".
	$LF
]p
[h2 id=Inputfileediting 
	" Input file editing
	$LF
]h2
[div class= 
	[ul class=nav nav-tabs role=tablist 
		[li class=nav-item 
			[a class=active nav-link data-toggle=tab href=#tabs-7834-0 
				"Purpose
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-7834-1 
				"Specifics
			]a
		]li
	]ul
	[div class=tab-content 
		[div class=tab-pane active id=tabs-7834-0 
			[p 
				"You can directly edit a movie input file. You can change things like header information, or you can change input directly. The idea is to change some input earlier in the movie without changing whatever comes after it.
				$LF
			]p
			[p 
				"Here's the catch: It doesn't always work. In fact, it usually doesn't work. Since games are often dependent on previous input or condition, changing something in the past may cause the rest of the movie to 
				[a class=intlink href=/DesyncHelpTAS 
					"fail to sync
				]a
				". You can correct the desyncs case by case, but often there will be many and it is too time-consuming to do.
				$LF
			]p
		]div
		[div class=tab-pane fade id=tabs-7834-1 
			[p 
				"Input file formats differ, so do editing methods.
				$LF
			]p
			[ul 
				[li 
					" Plain text (
					[a class=extlink href=http://fceux.com/web/FM2.html rel=nofollow 
						"FM2
					]a
					") can be opened and edited in a quite intuitive way with 
					[a class=extlink href=http://sourceforge.net/projects/notepad-plus/ rel=nofollow 
						"Notepad++
					]a
					$LF
				]li
				[li 
					" Binary files (
					[a class=extlink href=http://code.google.com/p/vba-rerecording/wiki/VBM rel=nofollow 
						"VBM
					]a
					") require some work, since they were developed mostly to save on space, not to be edit-frinedly. Use hex editors like 
					[a class=extlink href=http://www.chmaas.handshake.de/delphi/freeware/xvi32/xvi32.htm rel=nofollow 
						"Xvi32
					]a
					".
					$LF
				]li
				[li 
					" There is a tool that decodes binary and allows basic editing methods - exclusively designed for that, 
					[a class=extlink href=http://sourceforge.net/projects/tas-editor rel=nofollow 
						"TAS Movie Editor
					]a
					". See a 
					[a class=intlink href=/Forum/Viewtopic.php?t=4448 
						"Forum thread
					]a
					" for some information.
					$LF
				]li
			]ul
			[p 
				"There is also 
				[a class=intlink href=/InputFileEditing 
					"a guide on this method
				]a
				".
				$LF
			]p
		]div
	]div
]div
[h2 id=High-levelinterface 
	" High-level interface
	$LF
]h2
[div class= 
	[ul class=nav nav-tabs role=tablist 
		[li class=nav-item 
			[a class=active nav-link data-toggle=tab href=#tabs-9241-0 
				"Purpose
			]a
		]li
		[li class=nav-item 
			[a class=nav-link data-toggle=tab href=#tabs-9241-1 
				"FCEUX TASEditor
			]a
		]li
	]ul
	[div class=tab-content 
		[div class=tab-pane active id=tabs-9241-0 
			[p 
				"Almost all concepts of the tools used by TASers were not originally created by them. TASers just took already existing tools and improved them all they could. That served TAS purposes for quite some years, but as tool-assisted speedrunners get more experienced, the whole community's level raises along with standards. Older tools can't provide enough efficiency to use new methods up to their maximum. And a moment comes when old-school TASing methods are considered obsolete, once there appears an interface originally developed by TASers for TASers.
				$LF
			]p
			[p 
				"High-level TAS interface is an 
				[b 
					"interactive integrated development environment
				]b
				". It includes all basic tools constantly used by TASers, optimizes them, provides smart automation to get rid of primitive routine old tools require, adds new features and introduces new methods. Emulation and editing are done on fly, within one dialog.
				$LF
			]p
			[p 
				"Advantages of such interface being developed by TASers from scratch:
				$LF
			]p
			[ul 
				[li 
					" Considers actual TASer's needs to begin with
					$LF
				]li
				[li 
					" Allows deep testings by direct users (the fact that successful TASing implies being a perfectionist helps to test the hell out of all tools)
					$LF
				]li
				[li 
					" Gets fast and abundant feedback
					$LF
				]li
				[li 
					" Gets fixed and re-released constantly
					$LF
				]li
				[li 
					" Newbie-friendly, in spite of its power
					$LF
				]li
			]ul
			[p 
				"Reasons why would users need an all-in-one dialog are rather obvious:
				$LF
			]p
			[ul 
				[li 
					" Low threshold of joining TASing
					$LF
				]li
				[li 
					" Less routine
					$LF
				]li
				[li 
					" Faster work
					$LF
				]li
				[li 
					" Higher abstraction
					$LF
				]li
				[li 
					" Release more mental resources
					$LF
				]li
				[li 
					" Concentrate on gameplay
					$LF
				]li
				[li 
					" Discover newer TAS aspects
					$LF
				]li
			]ul
		]div
		[div class=tab-pane fade id=tabs-9241-1 
			[p 
				(__wikiLink|/EmulatorResources/TASEditor|EmulatorResources/TASEditor)
				" is an integrated set of tools developed for 
				[a class=extlink href=http://www.fceux.com rel=nofollow 
					"FCEUX
				]a
				" in order to make TASing both easier and more efficient. This is achieved by switching from Input rerecording to 
				[b 
					"direct Input editing
				]b
				", and by visualizing all important aspects of TASing process. Playing videogames in Taseditor resembles both interactive programming and drawing notes by mouse in a music editor.
				$LF
			]p
			[p 
				"The critical feature of TASEditor interface is ability to draw input presses by mouse clicking or dragging. This involves a table which cells represent those presses: frames and buttons. All current areas are greenzoned, which provides fast navigation in both directions. Extra sufficiency is granted by moving all basic navigation controls to the mouse wheel and middle button (scrolling, advance/rewind, pause/unpause).
				$LF
			]p
			[p 
				"Old-school tools evolved or improved:
				$LF
			]p
			[ul 
				[li 
					" Savestates -> Branch tree with slot cards; separate Undo system
					$LF
				]li
				[li 
					" Lag counter -> Red-colored lines in the table
					$LF
				]li
				[li 
					" Autofire settings -> Editable and switchable input patterns
					$LF
				]li
			]ul
			[p 
				"See a complete 
				[a class=extlink href=http://www.fceux.com/web/help/taseditor/ rel=nofollow 
					"manual on TASEditor usage
				]a
				", with a TAS beginner's guide included. Search for "FCEUX TASEditor live session" on YouTube to see more examples of its work.
				$LF
			]p
			[p 
				(youtube|v=PZIG7HWlXG4|w=480|h=300)
				$LF
			]p
		]div
	]div
]div
